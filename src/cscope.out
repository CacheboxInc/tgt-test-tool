cscope 15 $HOME/libiscsi               0001506108
	@aros/aros_compat.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

20 
	~<°rög.h
>

21 
	~<sys/ty≥s.h
>

22 
	~<sys/time.h
>

23 
	~<sys/sockë.h
>

24 
	~<√tdb.h
>

25 
	~"¨os_com∑t.h
"

26 
	~<î∫o.h
>

27 
	~<bsdsockë/sockëba£ègs.h
>

29 #unde‡
pﬁl


31 
	$¨os_gë«meöfo
(c⁄° 
sockaddr
 *
ß
, 
sockÀn_t
 
ßÀn
,

32 *
ho°
, 
size_t
 
ho°Àn
,

33 *
£rv
, 
size_t
 
£rvÀn
, 
Êags
)

35 
sockaddr_ö
 *
sö
 = (sockaddr_ö *)
ß
;

37 i‡(
ho°
) {

38 
	`¢¥ötf
(
ho°
, 
ho°Àn
, 
	`I√t_NtoA
(
sö
->
sö_addr
.
s_addr
));

42 
	}
}

44 
	$¨os_gëaddröfo
(c⁄° *
node
, c⁄° *
£rvi˚
,

45 c⁄° 
addröfo
 *
höts
,

46 
addröfo
 **
ªs
)

48 
sockaddr_ö
 *
sö
;

50 
sö
 = 
	`mÆloc
((
sockaddr_ö
));

51 
sö
->
sö_Àn
 = (
sockaddr_ö
);

52 
sö
->
sö_Ámûy
=
AF_INET
;

55 
sö
->
sö_addr
.
s_addr
 = 
	`öë_addr
(
node
);

57 
sö
->
sö_p‹t
=0;

58 i‡(
£rvi˚
) {

59 
sö
->
sö_p‹t
=
	`ht⁄s
(
	`©oi
(
£rvi˚
));

62 *
ªs
 = 
	`mÆloc
((
addröfo
));

64 (*
ªs
)->
ai_Ámûy
 = 
AF_INET
;

65 (*
ªs
)->
ai_addæí
 = (
sockaddr_ö
);

66 (*
ªs
)->
ai_addr
 = (
sockaddr
 *)
sö
;

69 
	}
}

71 
	$¨os_‰ìaddröfo
(
addröfo
 *
ªs
)

73 
	`‰ì
(
ªs
->
ai_addr
);

74 
	`‰ì
(
ªs
);

75 
	}
}

77 
	$¨os_öë_±⁄
(
af
, *
§c
, *
d°
)

79 
sockaddr_ö
 
sö
;

81 
sö
.
sö_addr
.
s_addr
 = 
	`öë_addr
(
§c
);

82 
	`mem˝y
(
d°
, &
sö
.
sö_addr
.
s_addr
, (sin.sin_addr.s_addr));

84 
	}
}

86 
Libøry
 * 
	gSockëBa£
 = 
NULL
;

88 
î∫o
;

89 
	gh_î∫o
 = 0;

92 
	$¨os_öô_sockë
()

94 i‡(!(
SockëBa£
 = 
	`O≥nLibøry
("bsdsocket.library", 4))) {

95 
	`¥ötf
("NoTCP/IP Stackávailable");

96 
	`exô
(10);

98 i‡(
	`SockëBa£Tags
(
	`SBTM_SETVAL
(
	`SBTC_ERRNOPTR
((
î∫o
))),

99 (
IPTR
)&
î∫o
,

100 
	`SBTM_SETVAL
(
SBTC_HERRNOLONGPTR
),

101 (
IPTR
)&
h_î∫o
, 
TAG_DONE
)) {

102 
	`¥ötf
("FailedÅo set ERRNO");

103 
	`exô
(10);

105 
	}
}

107 
	$¨os_pﬁl
(
pﬁlfd
 *
fds
, 
nfds
, 
timo
)

109 
timevÆ
 
timeout
, *
t›å
;

110 
fd_£t
 
ifds
, 
ofds
, 
efds
, *
ù
, *
›
;

111 
i
, 
maxfd
 = 0;

112 
rc
;

115 
	`FD_ZERO
(&
ifds
);

116 
	`FD_ZERO
(&
ofds
);

117 
	`FD_ZERO
(&
efds
);

118 
i
 = 0, 
›
 = 
ù
 = 0; i < 
nfds
; ++i)

120 
fds
[
i
].
ªvíts
 = 0;

121 if(
fds
[
i
].
evíts
 & (
POLLIN
|
POLLPRI
))

123 
ù
 = &
ifds
;

124 
	`FD_SET
(
fds
[
i
].
fd
, 
ù
);

126 if(
fds
[
i
].
evíts
 & 
POLLOUT
)

128 
›
 = &
ofds
;

129 
	`FD_SET
(
fds
[
i
].
fd
, 
›
);

131 
	`FD_SET
(
fds
[
i
].
fd
, &
efds
);

132 i‡(
fds
[
i
].
fd
 > 
maxfd
) {

133 
maxfd
 = 
fds
[
i
].
fd
;

138 if(
timo
 < 0)

140 
t›å
 = 0;

144 
t›å
 = &
timeout
;

145 
timeout
.
tv_£c
 = 
timo
 / 1000;

146 
timeout
.
tv_u£c
 = (
timo
 -Åimeout.
tv_£c
 * 1000) * 1000;

149 
rc
 = 
	`WaôSñe˘
(
maxfd
 + 1, 
ù
, 
›
, &
efds
, 
t›å
, 
NULL
);

151 if(
rc
 <= 0)

152  
rc
;

154 if(
rc
 > 0)

156 
i
 = 0; i < 
nfds
; ++i)

158 
fd
 = 
fds
[
i
].fd;

159 if(
fds
[
i
].
evíts
 & (
POLLIN
|
POLLPRI
Ë&& 
	`FD_ISSET
(
fd
, &
ifds
))

160 
fds
[
i
].
ªvíts
 |
POLLIN
;

161 if(
fds
[
i
].
evíts
 & 
POLLOUT
 && 
	`FD_ISSET
(
fd
, &
ofds
))

162 
fds
[
i
].
ªvíts
 |
POLLOUT
;

163 if(
	`FD_ISSET
(
fd
, &
efds
))

164 
fds
[
i
].
ªvíts
 |
POLLHUP
;

167  
rc
;

168 
	}
}

170 
ssize_t
 
	$¨os_ªadv
(
fd
, c⁄° 
iovec
 *
iov
, 
iov˙t
)

172  
	`ªad
(
fd
, 
iov
[0].
iov_ba£
, iov[0].
iov_Àn
);

173 
	}
}

175 
ssize_t
 
	$¨os_wrôev
(
fd
, c⁄° 
iovec
 *
iov
, 
iov˙t
)

177  
	`wrôe
(
fd
, 
iov
[0].
iov_ba£
, iov[0].
iov_Àn
);

178 
	}
}

	@aros/aros_compat.h

1 #i‚de‡
AROS_COMPAT_H


2 
	#AROS_COMPAT_H


	)

4 
	~<uni°d.h
>

5 
	~<sys/ty≥s.h
>

6 
	~<sys/io˘l.h
>

7 
	~<√töë/ö.h
>

8 
	~<sys/mou¡.h
>

9 
	~<¥Ÿo/sockë.h
>

10 
	~<¥Ÿo/exec.h
>

11 
	~<sys/uio.h
>

13 
	#°©vfs
 
°©fs


	)

14 
	#io˘l
 
Io˘lSockë


	)

15 
	#˛o£
 
Clo£Sockë


	)

17 
	#wrôev
 
¨os_wrôev


	)

18 
	#ªadv
 
¨os_ªadv


	)

19 
	#öë_±⁄
 
¨os_öë_±⁄


	)

20 
	#‰ìaddröfo
 
¨os_‰ìaddröfo


	)

21 
	#gë«meöfo
 
¨os_gë«meöfo


	)

22 
	#gëaddröfo
 
¨os_gëaddröfo


	)

24 
	#SOL_TCP
 
IPPROTO_TCP


	)

26 
Libøry
 * 
SockëBa£
;

28 
¨os_öô_sockë
();

30 
	#POLLIN
 0x0001

	)

31 
	#POLLPRI
 0x0002

	)

32 
	#POLLOUT
 0x0004

	)

33 
	#POLLERR
 0x0008

	)

34 
	#POLLHUP
 0x0010

	)

35 
	#POLLNVAL
 0x0020

	)

37 
	spﬁlfd
 {

38 
	mfd
;

39 
	mevíts
;

40 
	mªvíts
;

43 
	#pﬁl
(
x
, 
y
, 
z
Ë
	`¨os_pﬁl
(x, y, z)

	)

	@aros/iscsi-ls.c

17 #ifde‡
HAVE_CONFIG_H


18 
	~"c⁄fig.h
"

21 #ifde‡
HAVE_POLL_H


22 
	~<pﬁl.h
>

25 #ifde‡
HAVE_UNISTD_H


26 
	~<uni°d.h
>

29 #ifde‡
AROS


30 
	~"¨os/¨os_com∑t.h
"

33 
	~<°dio.h
>

34 
	~<°dlib.h
>

35 
	~<°döt.h
>

36 
	~<°rög.h
>

37 
	~"iscsi.h
"

38 
	~"scsi-lowÀvñ.h
"

40 #i‚de‡
disˇrd_c⁄°


41 
	#disˇrd_c⁄°
(
±r
Ë((*)((
öçå_t
)’å)))

	)

44 
	gshowluns
;

45 c⁄° *
	göôüt‹
 = "iqn.2007-10.com.github:sahlberg:libiscsi:iscsi-ls";

47 
	s˛õ¡_°©e
 {

48 
	mföished
;

49 
	m°©us
;

50 
	mlun
;

51 
	mty≥
;

52 c⁄° *
	mu£∫ame
;

53 c⁄° *
	m∑ssw‹d
;

57 
	$evít_lo›
(
iscsi_c⁄ãxt
 *
iscsi
, 
˛õ¡_°©e
 *
°©e
)

59 
pﬁlfd
 
pfd
;

61 
°©e
->
föished
 == 0) {

62 
pfd
.
fd
 = 
	`iscsi_gë_fd
(
iscsi
);

63 
pfd
.
evíts
 = 
	`iscsi_which_evíts
(
iscsi
);

65 i‡(
	`pﬁl
(&
pfd
, 1, -1) < 0) {

66 
	`Ârötf
(
°dîr
, "Poll failed");

67 
	`exô
(10);

69 i‡(
	`iscsi_£rvi˚
(
iscsi
, 
pfd
.
ªvíts
) < 0) {

70 
	`Ârötf
(
°dîr
, "iscsi_£rvi˚ faûed wôh : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

71 
	`exô
(10);

74 
	}
}

76 
	$show_lun
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
)

78 
scsi_èsk
 *
èsk
;

79 
scsi_öquúy_°™d¨d
 *
öq
;

80 
ty≥
, 
no_medü
;

81 
size
 = 0;

82 
size_pf
 = 0;

83 c⁄° 
sf
[] = {' ', 'k', 'M', 'G', 'T' };

86 
tur_åy_agaö
:

87 i‡((
èsk
 = 
	`iscsi_ã°unôªady_sync
(
iscsi
, 
lun
)Ë=
NULL
) {

88 
	`Ârötf
(
°dîr
, "testunitready failed\n");

89 
	`exô
(10);

91 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION
) {

92 i‡(
èsk
->
£n£
.
key
 =
SCSI_SENSE_UNIT_ATTENTION
 &&Åask->£n£.
ascq
 =
SCSI_SENSE_ASCQ_BUS_RESET
) {

93 
	`scsi_‰ì_scsi_èsk
(
èsk
);

94 
tur_åy_agaö
;

98 
no_medü
 = 0;

99 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


100 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_NOT_READY


101 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT
) {

103 
no_medü
 = 1;

104 } i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

105 
	`Ârötf
(
°dîr
, "TESTUNITREADY faûed wôh %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

106 
	`exô
(10);

108 
	`scsi_‰ì_scsi_èsk
(
èsk
);

113 
èsk
 = 
	`iscsi_öquúy_sync
(
iscsi
, 
lun
, 0, 0, 64);

114 i‡(
èsk
 =
NULL
 ||Åask->
°©us
 !
SCSI_STATUS_GOOD
) {

115 
	`Ârötf
(
°dîr
, "ÁûedÅÿ£nd inquúy comm™d : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

116 
	`exô
(10);

118 
öq
 = 
	`scsi_d©aö_unm¨shÆl
(
èsk
);

119 i‡(
öq
 =
NULL
) {

120 
	`Ârötf
(
°dîr
, "failedÅo unmarshall inquiry datain blob\n");

121 
	`exô
(10);

123 
ty≥
 = 
öq
->
devi˚_ty≥
;

124 
	`scsi_‰ì_scsi_èsk
(
èsk
);

128 i‡(
ty≥
 =
SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_DIRECT_ACCESS
) {

129 
scsi_ªadˇ∑côy10
 *
rc10
;

131 
èsk
 = 
	`iscsi_ªadˇ∑côy10_sync
(
iscsi
, 
lun
, 0, 0);

132 i‡(
èsk
 =
NULL
 ||Åask->
°©us
 !
SCSI_STATUS_GOOD
) {

133 
	`Ârötf
(
°dîr
, "failedÅo sendÑeadcapacity command\n");

134 
	`exô
(10);

137 
rc10
 = 
	`scsi_d©aö_unm¨shÆl
(
èsk
);

138 i‡(
rc10
 =
NULL
) {

139 
	`Ârötf
(
°dîr
, "failedÅo unmarshallÑeadcapacity10 data\n");

140 
	`exô
(10);

143 
size
 = 
rc10
->
block_size
;

144 
size
 *
rc10
->
lba
;

146 
size_pf
=0; size_pf<4 && 
size
 > 1024; size_pf++) {

147 
size
 /= 1024;

150 
	`scsi_‰ì_scsi_èsk
(
èsk
);

154 
	`¥ötf
("Lun:%-4d Ty≥:%s", 
lun
, 
	`scsi_devty≥_to_°r
(
ty≥
));

155 i‡(
ty≥
 =
SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_DIRECT_ACCESS
) {

156 
	`¥ötf
(" (Size:%Œd%c)", 
size
, 
sf
[
size_pf
]);

158 i‡(
no_medü
) {

159 
	`¥ötf
(" (No mediaÜoaded)");

161 
	`¥ötf
("\n");

162 
	}
}

164 
	$li°_luns
(
˛õ¡_°©e
 *
˛¡
, c⁄° *
èrgë
, c⁄° *
p‹èl
)

166 
iscsi_c⁄ãxt
 *
iscsi
;

167 
scsi_èsk
 *
èsk
;

168 
scsi_ªp‹éuns_li°
 *
li°
;

169 
fuŒ_ªp‹t_size
;

170 
i
;

172 
iscsi
 = 
	`iscsi_¸óã_c⁄ãxt
(
öôüt‹
);

173 i‡(
iscsi
 =
NULL
) {

174 
	`¥ötf
("FailedÅo create context\n");

175 
	`exô
(10);

178 
	`iscsi_£t_öôüt‹_u£∫ame_pwd
(
iscsi
, 
˛¡
->
u£∫ame
, c t->
∑ssw‹d
);

180 i‡(
	`iscsi_£t_èrgë«me
(
iscsi
, 
èrgë
)) {

181 
	`Ârötf
(
°dîr
, "FailedÅo setÅargetÇame\n");

182 
	`exô
(10);

184 
	`iscsi_£t_£ssi⁄_ty≥
(
iscsi
, 
ISCSI_SESSION_NORMAL
);

185 
	`iscsi_£t_hódî_dige°
(
iscsi
, 
ISCSI_HEADER_DIGEST_NONE_CRC32C
);

187 i‡(
	`iscsi_fuŒ_c⁄√˘_sync
(
iscsi
, 
p‹èl
, -1) != 0) {

188 
	`¥ötf
("iscsi_c⁄√˘ faûed. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

189 
	`exô
(10);

195 i‡((
èsk
 = 
	`iscsi_ªp‹éuns_sync
(
iscsi
, 0, 16)Ë=
NULL
) {

196 
	`Ârötf
(
°dîr
, "ªp‹éun†Áûed : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

197 
	`exô
(10);

199 
fuŒ_ªp‹t_size
 = 
	`scsi_d©aö_gëfuŒsize
(
èsk
);

200 i‡(
fuŒ_ªp‹t_size
 > 
èsk
->
d©aö
.
size
) {

201 
	`scsi_‰ì_scsi_èsk
(
èsk
);

204 i‡((
èsk
 = 
	`iscsi_ªp‹éuns_sync
(
iscsi
, 0, 
fuŒ_ªp‹t_size
)Ë=
NULL
) {

205 
	`Ârötf
(
°dîr
, "ªp‹éun†Áûed : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

206 
	`exô
(10);

210 
li°
 = 
	`scsi_d©aö_unm¨shÆl
(
èsk
);

211 i‡(
li°
 =
NULL
) {

212 
	`Ârötf
(
°dîr
, "failedÅo unmarshallÑeportluns datain blob\n");

213 
	`exô
(10);

215 
i
=0; i < ()
li°
->
num
; i++) {

216 
	`show_lun
(
iscsi
, 
li°
->
luns
[
i
]);

219 
	`scsi_‰ì_scsi_èsk
(
èsk
);

220 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

221 
	}
}

226 
	$discovîylogout_cb
(
iscsi_c⁄ãxt
 *
iscsi
, 
°©us
, *
comm™d_d©a
 
_U_
, *
¥iv©e_d©a
)

228 
˛õ¡_°©e
 *
°©e
 = (˛õ¡_°©ê*)
¥iv©e_d©a
;

230 i‡(
°©us
 != 0) {

231 
	`Ârötf
(
°dîr
, "FaûedÅÿlogouà‰omÅ¨gë. : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

232 
	`exô
(10);

235 i‡(
	`iscsi_disc⁄√˘
(
iscsi
) != 0) {

236 
	`Ârötf
(
°dîr
, "FailedÅo disconnect old socket\n");

237 
	`exô
(10);

240 
°©e
->
föished
 = 1;

241 
	}
}

243 
	$discovîy_cb
(
iscsi_c⁄ãxt
 *
iscsi
, 
°©us
, *
comm™d_d©a
, *
¥iv©e_d©a
)

245 
iscsi_discovîy_addªss
 *
addr
;

247 i‡(
°©us
 != 0) {

248 
	`Ârötf
(
°dîr
, "FaûedÅÿdÿdiscovîy o¿èrgë. : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

249 
	`exô
(10);

252 
addr
=
comm™d_d©a
;áddr;áddr˜ddr->
√xt
) {

253 
	`¥ötf
("T¨gë:%†P‹èl:%s\n", 
addr
->
èrgë_«me
,áddr->
èrgë_addªss
);

254 i‡(
showluns
 != 0) {

255 
	`li°_luns
(
¥iv©e_d©a
, 
addr
->
èrgë_«me
,áddr->
èrgë_addªss
);

259 i‡(
	`iscsi_logout_async
(
iscsi
, 
discovîylogout_cb
, 
¥iv©e_d©a
) != 0) {

260 
	`Ârötf
(
°dîr
, "iscsi_logout_asyn¯Áûed : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

261 
	`exô
(10);

263 
	}
}

266 
	$discovîylogö_cb
(
iscsi_c⁄ãxt
 *
iscsi
, 
°©us
, *
comm™d_d©a
 
_U_
, *
¥iv©e_d©a
)

268 i‡(
°©us
 != 0) {

269 
	`Ârötf
(
°dîr
, "Logö faûed. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

270 
	`exô
(10);

273 i‡(
	`iscsi_discovîy_async
(
iscsi
, 
discovîy_cb
, 
¥iv©e_d©a
) != 0) {

274 
	`Ârötf
(
°dîr
, "ÁûedÅÿ£nd discovîy comm™d : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

275 
	`exô
(10);

277 
	}
}

279 
	$discovîyc⁄√˘_cb
(
iscsi_c⁄ãxt
 *
iscsi
, 
°©us
, *
comm™d_d©a
 
_U_
, *
¥iv©e_d©a
)

281 i‡(
°©us
 != 0) {

282 
	`Ârötf
(
°dîr
, "discovîyc⁄√˘_cb: c⁄√˘i⁄ faûed : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

283 
	`exô
(10);

286 i‡(
	`iscsi_logö_async
(
iscsi
, 
discovîylogö_cb
, 
¥iv©e_d©a
) != 0) {

287 
	`Ârötf
(
°dîr
, "iscsi_logö_asyn¯Áûed : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

288 
	`exô
(10);

290 
	}
}

292 
	$¥öt_ußge
()

294 
	`Ârötf
(
°dîr
, "Usage: iscsi-ls [-?|--help] [--usage] [-i|--initiator-name=iqn-name]\n"

296 
	}
}

298 
	$¥öt_hñp
()

300 
	`Ârötf
(
°dîr
, "Usage: iscsi-ls [OPTION...] <iscsi-url>\n");

301 
	`Ârötf
(
°dîr
, " -i, --initiator-name=iqn-name InitiatornameÅo use\n");

302 
	`Ârötf
(
°dîr
, " -s, --show-luns ShowÅheÜuns forÉachÅarget\n");

303 
	`Ârötf
(
°dîr
, "\n");

304 
	`Ârötf
(
°dîr
, "Help options:\n");

305 
	`Ârötf
(
°dîr
, " -?, --help ShowÅhis help message\n");

306 
	`Ârötf
(
°dîr
, " --usage Display brief usage message\n");

307 
	`Ârötf
(
°dîr
, "\n");

308 
	`Ârötf
(
°dîr
, "iSCSI P‹è»URL f‹m© : %s\n", 
ISCSI_PORTAL_URL_SYNTAX
);

309 
	`Ârötf
(
°dîr
, "\n");

310 
	`Ârötf
(
°dîr
, "<host> isÉither of:\n");

311 
	`Ârötf
(
°dîr
, " \"hostname\" iscsi.example\n");

312 
	`Ârötf
(
°dîr
, " \"ipv4-address\" 10.1.1.27\n");

313 
	`Ârötf
(
°dîr
, " \"ipv6-address\" [fce0::1]\n");

314 
	}
}

316 
	$maö
(
¨gc
, *
¨gv
[])

318 
iscsi_c⁄ãxt
 *
iscsi
;

319 
iscsi_uæ
 *iscsi_uæ = 
NULL
;

320 
˛õ¡_°©e
 
°©e
;

321 c⁄° *
uæ
 = 
NULL
;

322 
c
;

323 
show_hñp
 = 0, 
show_ußge
 = 0, 
debug
 = 0;

325 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "h?udi:s")) != -1) {

326 
c
) {

329 
show_hñp
 = 1;

332 
show_ußge
 = 1;

335 
debug
 = 1;

338 
öôüt‹
 = 
›èrg
;

341 
showluns
 = 1;

344 
	`Ârötf
(
°dîr
, "Uƒecognized o±i⁄ '%c'\n\n", 
c
);

345 
	`¥öt_hñp
();

346 
	`exô
(0);

350 i‡(
show_hñp
 != 0) {

351 
	`¥öt_hñp
();

352 
	`exô
(0);

355 i‡(
show_ußge
 != 0) {

356 
	`¥öt_ußge
();

357 
	`exô
(0);

360 i‡(
›töd
 !
¨gc
 -1) {

361 
	`¥öt_ußge
();

362 
	`exô
(0);

365 
	`mem£t
(&
°©e
, 0, (state));

367 
uæ
 = 
	`°rdup
(
¨gv
[
›töd
]);

368 i‡(
uæ
 =
NULL
) {

369 
	`Ârötf
(
°dîr
, "You must specify iscsiÅargetÖortal.\n");

370 
	`¥öt_ußge
();

371 
	`exô
(10);

374 
iscsi
 = 
	`iscsi_¸óã_c⁄ãxt
(
öôüt‹
);

375 i‡(
iscsi
 =
NULL
) {

376 
	`¥ötf
("FailedÅo create context\n");

377 
	`exô
(10);

380 i‡(
debug
 > 0) {

381 
	`iscsi_£t_log_Àvñ
(
iscsi
, 
debug
);

382 
	`iscsi_£t_log_‚
(
iscsi
, 
iscsi_log_to_°dîr
);

385 
iscsi_uæ
 = 
	`iscsi_∑r£_p‹èl_uæ
(
iscsi
, 
uæ
);

387 i‡(
uæ
) {

388 
	`‰ì
(
	`disˇrd_c⁄°
(
uæ
));

391 i‡(
iscsi_uæ
 =
NULL
) {

392 
	`Ârötf
(
°dîr
, "FailedÅoÖarse URL: %s\n",

393 
	`iscsi_gë_îr‹
(
iscsi
));

394 
	`exô
(10);

397 
	`iscsi_£t_£ssi⁄_ty≥
(
iscsi
, 
ISCSI_SESSION_DISCOVERY
);

399 
°©e
.
u£∫ame
 = 
iscsi_uæ
->
u£r
;

400 
°©e
.
∑ssw‹d
 = 
iscsi_uæ
->
∑sswd
;

402 i‡(
	`iscsi_c⁄√˘_async
(
iscsi
, 
iscsi_uæ
->
p‹èl
, 
discovîyc⁄√˘_cb
, &
°©e
) != 0) {

403 
	`Ârötf
(
°dîr
, "iscsi_c⁄√˘ faûed. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

404 
	`exô
(10);

407 
	`evít_lo›
(
iscsi
, &
°©e
);

409 
	`iscsi_de°roy_uæ
(
iscsi_uæ
);

410 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

412 
	}
}

	@config.h

5 
	#HAVE_ARPA_INET_H
 1

	)

8 
	#HAVE_CLOCK_GETTIME
 1

	)

14 
	#HAVE_DLFCN_H
 1

	)

17 
	#HAVE_INTTYPES_H
 1

	)

32 
	#HAVE_MEMORY_H
 1

	)

35 
	#HAVE_NETINET_IN_H
 1

	)

38 
	#HAVE_NETINET_TCP_H
 1

	)

41 
	#HAVE_POLL_H
 1

	)

44 
	#HAVE_SG_IO
 1

	)

47 
	#HAVE_SOCKADDR_IN6
 1

	)

53 
	#HAVE_STDINT_H
 1

	)

56 
	#HAVE_STDLIB_H
 1

	)

59 
	#HAVE_STRINGS_H
 1

	)

62 
	#HAVE_STRING_H
 1

	)

65 
	#HAVE_SYS_SOCKET_H
 1

	)

68 
	#HAVE_SYS_STAT_H
 1

	)

71 
	#HAVE_SYS_TYPES_H
 1

	)

74 
	#HAVE_SYS_UIO_H
 1

	)

77 
	#HAVE_UNISTD_H
 1

	)

80 
	#LT_OBJDIR
 ".libs/"

	)

86 
	#PACKAGE
 "libiscsi"

	)

89 
	#PACKAGE_BUGREPORT
 ""

	)

92 
	#PACKAGE_NAME
 "libiscsi"

	)

95 
	#PACKAGE_STRING
 "libiscsò1.18.0"

	)

98 
	#PACKAGE_TARNAME
 "libiscsi"

	)

101 
	#PACKAGE_URL
 ""

	)

104 
	#PACKAGE_VERSION
 "1.18.0"

	)

107 
	#STDC_HEADERS
 1

	)

110 
	#VERSION
 "1.18.0"

	)

	@examples/iscsi-dd.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

20 
	~<°döt.h
>

21 
	~<öây≥s.h
>

22 
	~<°rög.h
>

23 
	~<pﬁl.h
>

24 
	~<gë›t.h
>

25 
	~<uni°d.h
>

26 
	~<limôs.h
>

27 
	~"iscsi.h
"

28 
	~"scsi-lowÀvñ.h
"

30 c⁄° *
	göôüt‹
 = "iqn.2010-11.ronnie:iscsi-inq";

31 
uöt32_t
 
	gmax_ö_Êight
 = 50;

32 
uöt32_t
 
	gblocks_≥r_io
 = 200;

34 
	s˛õ¡
 {

35 
	mföished
;

36 
uöt32_t
 
	mö_Êight
;

38 
iscsi_c⁄ãxt
 *
	m§c_iscsi
;

39 
	m§c_lun
;

40 
	m§c_blocksize
;

41 
uöt64_t
 
	m§c_num_blocks
;

42 
scsi_öquúy_devi˚_desig«t‹
 
	m§c_tgt_desig
;

43 
uöt64_t
 
	mpos
;

45 
iscsi_c⁄ãxt
 *
	md°_iscsi
;

46 
	md°_lun
;

47 
	md°_blocksize
;

48 
uöt64_t
 
	md°_num_blocks
;

49 
scsi_öquúy_devi˚_desig«t‹
 
	md°_tgt_desig
;

50 
	mu£_16_f‹_rw
;

51 
	mu£_xc›y
;

52 
	m¥ogªss
;

53 
	mign‹e_îr‹s
;

57 
fûl_ªad_queue
(
˛õ¡
 *client);

58 
fûl_xc›y_queue
(
˛õ¡
 *client);

60 
	swrôe_èsk
 {

61 
scsi_èsk
 *
	mπ
;

62 
˛õ¡
 *
	m˛õ¡
;

65 
	$wrôe_cb
(
iscsi_c⁄ãxt
 *
iscsi
, 
°©us
, *
comm™d_d©a
, *
¥iv©e_d©a
)

67 
wrôe_èsk
 *
wt
 = (wrôe_èsk *)
¥iv©e_d©a
;

68 
scsi_èsk
 *
èsk
 = 
comm™d_d©a
;

69 
˛õ¡
 *˛õ¡ = 
wt
->client;

71 i‡(
°©us
 =
SCSI_STATUS_CHECK_CONDITION
) {

72 
	`¥ötf
("Wrôe10/16 faûed wôh sí£ key:%dáscq:%04x\n", 
èsk
->
£n£
.
key
,Åask->£n£.
ascq
);

73 
	`scsi_‰ì_scsi_èsk
(
èsk
);

74 
	`exô
(10);

77 i‡(
°©us
 !
SCSI_STATUS_GOOD
) {

78 
	`¥ötf
("Wrôe10/16 faûed wôh %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

79 i‡(!
˛õ¡
->
ign‹e_îr‹s
) {

80 
	`scsi_‰ì_scsi_èsk
(
èsk
);

81 
	`exô
(10);

85 
˛õ¡
->
ö_Êight
--;

86 
	`fûl_ªad_queue
(
˛õ¡
);

88 i‡(
˛õ¡
->
¥ogªss
) {

89 
	`¥ötf
("\r%"
PRIu64
" o‡%"PRIu64" block†å™s„ºed.", 
˛õ¡
->
pos
, clõ¡->
§c_num_blocks
);

92 i‡((
˛õ¡
->
ö_Êight
 =0Ë&& (˛õ¡->
pos
 =˛õ¡->
§c_num_blocks
)) {

93 
˛õ¡
->
föished
 = 1;

94 i‡(
˛õ¡
->
¥ogªss
) {

95 
	`¥ötf
("\n");

98 
	`scsi_‰ì_scsi_èsk
(
wt
->
π
);

99 
	`scsi_‰ì_scsi_èsk
(
èsk
);

100 
	`‰ì
(
wt
);

101 
	}
}

103 
	$ªad_cb
(
iscsi_c⁄ãxt
 *
iscsi
 
_U_
, 
°©us
, *
comm™d_d©a
, *
¥iv©e_d©a
)

105 
˛õ¡
 *˛õ¡ = (˛õ¡ *)
¥iv©e_d©a
;

106 
scsi_èsk
 *
èsk
 = 
comm™d_d©a
;

107 
wrôe_èsk
 *
wt
;

108 
scsi_ªad10_cdb
 *
ªad10_cdb
 = 
NULL
;

109 
scsi_ªad16_cdb
 *
ªad16_cdb
 = 
NULL
;

110 
scsi_èsk
 *
èsk2
;

112 i‡(
°©us
 =
SCSI_STATUS_CHECK_CONDITION
) {

113 
	`¥ötf
("Ród10/16 faûed wôh sí£ key:%dáscq:%04x\n", 
èsk
->
£n£
.
key
,Åask->£n£.
ascq
);

114 
	`scsi_‰ì_scsi_èsk
(
èsk
);

115 
	`exô
(10);

118 i‡(
°©us
 !
SCSI_STATUS_GOOD
) {

119 
	`¥ötf
("Ród10/16 faûed wôh %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

120 i‡(!
˛õ¡
->
ign‹e_îr‹s
) {

121 
	`scsi_‰ì_scsi_èsk
(
èsk
);

122 
	`exô
(10);

126 
wt
 = 
	`mÆloc
((
wrôe_èsk
));

127 
wt
->
π
 = 
èsk
;

128 
wt
->
˛õ¡
 = client;

130 i‡(
˛õ¡
->
u£_16_f‹_rw
) {

131 
ªad16_cdb
 = 
	`scsi_cdb_unm¨shÆl
(
èsk
, 
SCSI_OPCODE_READ16
);

132 i‡(
ªad16_cdb
 =
NULL
) {

133 
	`¥ötf
("FailedÅo unmarshall READ16 CDB.\n");

134 
	`exô
(10);

136 
èsk2
 = 
	`iscsi_wrôe16_èsk
(
˛õ¡
->
d°_iscsi
, clõ¡->
d°_lun
,

137 
ªad16_cdb
->
lba
, 
èsk
->
d©aö
.
d©a
,Åask->d©aö.
size
,

138 
˛õ¡
->
d°_blocksize
, 0, 0, 0, 0, 0,

139 
wrôe_cb
, 
wt
);

141 
ªad10_cdb
 = 
	`scsi_cdb_unm¨shÆl
(
èsk
, 
SCSI_OPCODE_READ10
);

142 i‡(
ªad10_cdb
 =
NULL
) {

143 
	`¥ötf
("FailedÅo unmarshall READ16 CDB.\n");

144 
	`exô
(10);

146 
èsk2
 = 
	`iscsi_wrôe10_èsk
(
˛õ¡
->
d°_iscsi
, clõ¡->
d°_lun
,

147 
ªad10_cdb
->
lba
, 
èsk
->
d©aö
.
d©a
,Åask->d©aö.
size
,

148 
˛õ¡
->
d°_blocksize
, 0, 0, 0, 0, 0,

149 
wrôe_cb
, 
wt
);

151 i‡(
èsk2
 =
NULL
) {

152 
	`¥ötf
("failedÅo sendÑead16 command\n");

153 
	`scsi_‰ì_scsi_èsk
(
èsk
);

154 
	`exô
(10);

156 
	}
}

159 
	$fûl_ªad_queue
(
˛õ¡
 *client)

161 
uöt32_t
 
num_blocks
;

163 
˛õ¡
->
ö_Êight
 < 
max_ö_Êight
 && clõ¡->
pos
 < clõ¡->
§c_num_blocks
) {

164 
scsi_èsk
 *
èsk
;

165 
˛õ¡
->
ö_Êight
++;

167 
num_blocks
 = 
˛õ¡
->
§c_num_blocks
 - clõ¡->
pos
;

168 i‡(
num_blocks
 > 
blocks_≥r_io
) {

169 
num_blocks
 = 
blocks_≥r_io
;

172 i‡(
˛õ¡
->
u£_16_f‹_rw
) {

173 
èsk
 = 
	`iscsi_ªad16_èsk
(
˛õ¡
->
§c_iscsi
,

174 
˛õ¡
->
§c_lun
, clõ¡->
pos
,

175 
num_blocks
 * 
˛õ¡
->
§c_blocksize
,

176 
˛õ¡
->
§c_blocksize
, 0, 0, 0, 0, 0,

177 
ªad_cb
, 
˛õ¡
);

179 
èsk
 = 
	`iscsi_ªad10_èsk
(
˛õ¡
->
§c_iscsi
,

180 
˛õ¡
->
§c_lun
, clõ¡->
pos
,

181 
num_blocks
 * 
˛õ¡
->
§c_blocksize
,

182 
˛õ¡
->
§c_blocksize
, 0, 0, 0, 0, 0,

183 
ªad_cb
, 
˛õ¡
);

185 i‡(
èsk
 =
NULL
) {

186 
	`¥ötf
("failedÅo sendÑead10/16 command\n");

187 
	`exô
(10);

189 
˛õ¡
->
pos
 +
num_blocks
;

191 
	}
}

193 
	$p›uœã_tgt_desc
(*
desc
,

194 
scsi_öquúy_devi˚_desig«t‹
 *
tgt_desig
,

195 
ªl_öô_p‹t_id
, 
uöt32_t
 
block_size
)

197 
desc
[0] = 
IDENT_DESCR_TGT_DESCR
;

198 
desc
[1] = 0;

199 
desc
[2] = (
ªl_öô_p‹t_id
 >> 8) & 0xFF;

200 
desc
[3] = 
ªl_öô_p‹t_id
 & 0xFF;

201 
desc
[4] = 
tgt_desig
->
code_£t
;

202 
desc
[5] = (
tgt_desig
->
desig«t‹_ty≥
 & 0xF)

203 | ((
tgt_desig
->
assocüti⁄
 & 3) << 4);

204 
desc
[7] = 
tgt_desig
->
desig«t‹_Àngth
;

205 
	`mem˝y
(
desc
 + 8, 
tgt_desig
->
desig«t‹
,Ågt_desig->
desig«t‹_Àngth
);

207 
desc
[28] = 0;

208 
desc
[29] = (
block_size
 >> 16) & 0xFF;

209 
desc
[30] = (
block_size
 >> 8) & 0xFF;

210 
desc
[31] = 
block_size
 & 0xFF;

213 
	}
}

215 
	$p›uœã_£g_desc_hdr
(*
hdr
, 
dc
, 
ˇt
, 
§c_ödex
,

216 
d°_ödex
)

218 
desc_Àn
 = 28;

220 
hdr
[0] = 
BLK_TO_BLK_SEG_DESCR
;

221 
hdr
[1] = ((
dc
 << 1Ë| 
ˇt
) & 0xFF;

222 
hdr
[2] = (
desc_Àn
 >> 8) & 0xFF;

223 
hdr
[3] = (
desc_Àn
 - 
SEG_DESC_SRC_INDEX_OFFSET
) & 0xFF;

224 
hdr
[4] = (
§c_ödex
 >> 8) & 0xFF;

225 
hdr
[5] = 
§c_ödex
 & 0xFF;

226 
hdr
[6] = (
d°_ödex
 >> 8) & 0xFF;

227 
hdr
[7] = 
d°_ödex
 & 0xFF;

229  
desc_Àn
;

230 
	}
}

232 
	$p›uœã_£g_desc_b2b
(*
desc
, 
dc
, 
ˇt
,

233 
§c_ödex
, 
d°_ödex
, 
num_blks
,

234 
uöt64_t
 
§c_lba
, uöt64_à
d°_lba
)

236 
desc_Àn
 = 
	`p›uœã_£g_desc_hdr
(
desc
, 
dc
, 
ˇt
,

237 
§c_ödex
, 
d°_ödex
);

239 
desc
[10] = (
num_blks
 >> 8) & 0xFF;

240 
desc
[11] = 
num_blks
 & 0xFF;

241 
desc
[12] = (
§c_lba
 >> 56) & 0xFF;

242 
desc
[13] = (
§c_lba
 >> 48) & 0xFF;

243 
desc
[14] = (
§c_lba
 >> 40) & 0xFF;

244 
desc
[15] = (
§c_lba
 >> 32) & 0xFF;

245 
desc
[16] = (
§c_lba
 >> 24) & 0xFF;

246 
desc
[17] = (
§c_lba
 >> 16) & 0xFF;

247 
desc
[18] = (
§c_lba
 >> 8) & 0xFF;

248 
desc
[19] = 
§c_lba
 & 0xFF;

249 
desc
[20] = (
d°_lba
 >> 56) & 0xFF;

250 
desc
[21] = (
d°_lba
 >> 48) & 0xFF;

251 
desc
[22] = (
d°_lba
 >> 40) & 0xFF;

252 
desc
[23] = (
d°_lba
 >> 32) & 0xFF;

253 
desc
[24] = (
d°_lba
 >> 24) & 0xFF;

254 
desc
[25] = (
d°_lba
 >> 16) & 0xFF;

255 
desc
[26] = (
d°_lba
 >> 8) & 0xFF;

256 
desc
[27] = 
d°_lba
 & 0xFF;

258  
desc_Àn
;

259 
	}
}

261 
	$p›uœã_∑øm_hódî
(*
buf
, 
li°_id
, 
°r
, 
li°_id_ußge
, 
¥io
, 
tgt_desc_Àn
, 
£g_desc_Àn
, 
ölöe_d©a_Àn
)

263 
buf
[0] = 
li°_id
;

264 
buf
[1] = ((
°r
 & 1Ë<< 5Ë| ((
li°_id_ußge
 & 3Ë<< 3Ë| (
¥io
 & 7);

265 
buf
[2] = (
tgt_desc_Àn
 >> 8) & 0xFF;

266 
buf
[3] = 
tgt_desc_Àn
 & 0xFF;

267 
buf
[8] = (
£g_desc_Àn
 >> 24) & 0xFF;

268 
buf
[9] = (
£g_desc_Àn
 >> 16) & 0xFF;

269 
buf
[10] = (
£g_desc_Àn
 >> 8) & 0xFF;

270 
buf
[11] = 
£g_desc_Àn
 & 0xFF;

271 
buf
[12] = (
ölöe_d©a_Àn
 >> 24) & 0xFF;

272 
buf
[13] = (
ölöe_d©a_Àn
 >> 16) & 0xFF;

273 
buf
[14] = (
ölöe_d©a_Àn
 >> 8) & 0xFF;

274 
buf
[15] = 
ölöe_d©a_Àn
 & 0xFF;

275 
	}
}

277 
	$xc›y_cb
(
iscsi_c⁄ãxt
 *
iscsi
 
_U_
, 
°©us
, *
comm™d_d©a
, *
¥iv©e_d©a
)

279 
˛õ¡
 *˛õ¡ = (˛õ¡ *)
¥iv©e_d©a
;

280 
scsi_èsk
 *
èsk
 = 
comm™d_d©a
;

282 i‡(
°©us
 =
SCSI_STATUS_CHECK_CONDITION
) {

283 
	`¥ötf
("XCOPY failed with sense key:%dáscq:%04x\n",

284 
èsk
->
£n£
.
key
,Åask->£n£.
ascq
);

285 
	`scsi_‰ì_scsi_èsk
(
èsk
);

286 
	`exô
(10);

289 i‡(
°©us
 !
SCSI_STATUS_GOOD
) {

290 
	`¥ötf
("XCOPY faûed wôh %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

291 i‡(!
˛õ¡
->
ign‹e_îr‹s
) {

292 
	`scsi_‰ì_scsi_èsk
(
èsk
);

293 
	`exô
(10);

297 
˛õ¡
->
ö_Êight
--;

298 
	`fûl_xc›y_queue
(
˛õ¡
);

300 i‡(
˛õ¡
->
¥ogªss
) {

301 
	`¥ötf
("\r%"
PRIu64
" of %"PRIu64" blocksÅransferred.",

302 
˛õ¡
->
pos
, clõ¡->
§c_num_blocks
);

305 i‡((
˛õ¡
->
ö_Êight
 =0Ë&& (˛õ¡->
pos
 =˛õ¡->
§c_num_blocks
)) {

306 
˛õ¡
->
föished
 = 1;

307 i‡(
˛õ¡
->
¥ogªss
) {

308 
	`¥ötf
("\n");

311 
	`scsi_‰ì_scsi_èsk
(
èsk
);

312 
	}
}

314 
	$fûl_xc›y_queue
(
˛õ¡
 *client)

316 
˛õ¡
->
ö_Êight
 < 
max_ö_Êight
 && clõ¡->
pos
 < clõ¡->
§c_num_blocks
) {

317 
scsi_èsk
 *
èsk
;

318 
iscsi_d©a
 
d©a
;

319 *
xc›ybuf
;

320 
off£t
;

321 
uöt32_t
 
num_blocks
;

322 
tgt_desc_Àn
;

323 
£g_desc_Àn
;

325 
˛õ¡
->
ö_Êight
++;

327 
num_blocks
 = 
˛õ¡
->
§c_num_blocks
 - clõ¡->
pos
;

328 i‡(
num_blocks
 > 
blocks_≥r_io
) {

329 
num_blocks
 = 
blocks_≥r_io
;

332 
d©a
.
size
 = 
XCOPY_DESC_OFFSET
 +

335 
d©a
.d©®
	`mÆloc
(d©a.
size
);

336 i‡(
d©a
.d©®=
NULL
) {

337 
	`¥ötf
("failedÅoálloc XCOPY buffer\n");

338 
	`exô
(10);

341 
xc›ybuf
 = 
d©a
.data;

342 
	`mem£t
(
xc›ybuf
, 0, 
d©a
.
size
);

345 
off£t
 = 
XCOPY_DESC_OFFSET
;

346 
off£t
 +
	`p›uœã_tgt_desc
(
xc›ybuf
 + offset,

347 &
˛õ¡
->
§c_tgt_desig
,

348 0, 
˛õ¡
->
§c_blocksize
);

349 
off£t
 +
	`p›uœã_tgt_desc
(
xc›ybuf
 + offset,

350 &
˛õ¡
->
d°_tgt_desig
,

351 0, 
˛õ¡
->
d°_blocksize
);

352 
tgt_desc_Àn
 = 
off£t
 - 
XCOPY_DESC_OFFSET
;

355 
£g_desc_Àn
 = 
	`p›uœã_£g_desc_b2b
(
xc›ybuf
 + 
off£t
, 0, 0,

356 0, 1, 
num_blocks
, 
˛õ¡
->
pos
, client->pos);

357 
off£t
 +
£g_desc_Àn
;

360 
	`p›uœã_∑øm_hódî
(
xc›ybuf
, 1, 0, 
LIST_ID_USAGE_DISCARD
, 0,

361 
tgt_desc_Àn
, 
£g_desc_Àn
, 0);

363 
èsk
 = 
	`iscsi_exãnded_c›y_èsk
(
˛õ¡
->
§c_iscsi
,

364 
˛õ¡
->
§c_lun
,

365 &
d©a
, 
xc›y_cb
, 
˛õ¡
);

366 i‡(
èsk
 =
NULL
) {

367 
	`¥ötf
("failedÅo send XCOPY command\n");

368 
	`exô
(10);

371 
˛õ¡
->
pos
 +
num_blocks
;

373 
	}
}

375 
	$cscd_idít_öq
(
iscsi_c⁄ãxt
 *
iscsi
,

376 
lun
,

377 
scsi_öquúy_devi˚_desig«t‹
 *
_tgt_desig
)

379 
scsi_èsk
 *
èsk
 = 
NULL
;

380 
scsi_öquúy_devi˚_idítifiˇti⁄
 *
öq_di
 = 
NULL
;

381 
scsi_öquúy_devi˚_desig«t‹
 *
desig
, *
tgt_desig
 = 
NULL
;

382 
scsi_desig«t‹_ty≥
 
¥ev_ty≥
 = 0;

385 
èsk
 = 
	`iscsi_öquúy_sync
(
iscsi
, 
lun
, 1,

386 
SCSI_INQUIRY_PAGECODE_DEVICE_IDENTIFICATION
, 255);

387 i‡(
èsk
 =
NULL
 ||Åask->
°©us
 !
SCSI_STATUS_GOOD
) {

388 
	`Ârötf
(
°dîr
, "failedÅo send inquiry command: %s\n",

389 
	`iscsi_gë_îr‹
(
iscsi
));

390 
	`exô
(10);

393 
öq_di
 = 
	`scsi_d©aö_unm¨shÆl
(
èsk
);

394 i‡(
öq_di
 =
NULL
) {

395 
	`Ârötf
(
°dîr
, "failedÅo unmarshall inquiry datain blob\n");

396 
	`exô
(10);

399 
desig
 = 
öq_di
->
desig«t‹s
; desig; desig = desig->
√xt
) {

400 
desig
->
desig«t‹_ty≥
) {

401 
SCSI_DESIGNATOR_TYPE_VENDOR_SPECIFIC
:

402 
SCSI_DESIGNATOR_TYPE_T10_VENDORT_ID
:

403 
SCSI_DESIGNATOR_TYPE_EUI_64
:

404 
SCSI_DESIGNATOR_TYPE_NAA
:

405 i‡(
¥ev_ty≥
 <
desig
->
desig«t‹_ty≥
) {

406 
tgt_desig
 = 
desig
;

407 
¥ev_ty≥
 = 
desig
->
desig«t‹_ty≥
;

415 i‡(
tgt_desig
 =
NULL
) {

416 
	`Ârötf
(
°dîr
, "No suitalbleÅarget descriptor format found");

417 
	`exô
(10);

421 
_tgt_desig
->
code_£t
 = 
tgt_desig
->code_set;

422 
_tgt_desig
->
assocüti⁄
 = 
tgt_desig
->association;

423 
_tgt_desig
->
desig«t‹_ty≥
 = 
tgt_desig
->designator_type;

424 
_tgt_desig
->
desig«t‹_Àngth
 = 
tgt_desig
->designator_length;

425 
_tgt_desig
->
desig«t‹
 = 
	`mÆloc
(
tgt_desig
->
desig«t‹_Àngth
);

426 
	`mem˝y
(
_tgt_desig
->
desig«t‹
, 
tgt_desig
->desig«t‹,Ågt_desig->
desig«t‹_Àngth
);

428 
	`scsi_‰ì_scsi_èsk
(
èsk
);

429 
	}
}

431 
	$cscd_∑øm_check
(
iscsi_c⁄ãxt
 *
iscsi
,

432 
lun
,

433 
uöt32_t
 
blocksize
)

435 
scsi_èsk
 *
èsk
 = 
NULL
;

436 
scsi_c›y_ªsu…s_›_∑øms
 *
›p
;

437 
uöt32_t
 
io_£gmít_byãs
;

439 
èsk
 = 
	`iscsi_ª˚ive_c›y_ªsu…s_sync
(
iscsi
, 
lun
,

440 
SCSI_COPY_RESULTS_OP_PARAMS
, 0, 1024);

441 i‡(
èsk
 =
NULL
 ||Åask->
°©us
 !
SCSI_STATUS_GOOD
) {

442 
	`Ârötf
(
°dîr
, "XCOPY RECEIVE COPY RESULTS failed: %s\n",

443 
	`iscsi_gë_îr‹
(
iscsi
));

444 
	`exô
(10);

447 
›p
 = 
	`scsi_d©aö_unm¨shÆl
(
èsk
);

448 i‡(
›p
 =
NULL
) {

449 
	`Ârötf
(
°dîr
, "failedÅo unmarshall XCOPY RCR datain blob\n");

450 
	`exô
(10);

453 i‡(
›p
->
max_èrgë_desc_cou¡
 < 2) {

454 
	`Ârötf
(
°dîr
, "XCOPY max CSCD desc count %dÅoo small\n",

455 
›p
->
max_èrgë_desc_cou¡
);

456 
	`exô
(10);

458 i‡(
›p
->
max_£gmít_desc_cou¡
 < 1) {

459 
	`Ârötf
(
°dîr
, "XCOPY max segment desc count %dÅoo small\n",

460 
›p
->
max_£gmít_desc_cou¡
);

461 
	`exô
(10);

464 
io_£gmít_byãs
 = 
blocks_≥r_io
 * 
blocksize
;

465 i‡(
io_£gmít_byãs
 > 
›p
->
max_£gmít_Àngth
) {

466 
	`Ârötf
(
°dîr
,

468 
io_£gmít_byãs
, 
›p
->
max_£gmít_Àngth
);

469 
	`exô
(10);

471 i‡(
blocks_≥r_io
 > 
USHRT_MAX
) {

472 
	`Ârötf
(
°dîr
,

474 
blocks_≥r_io
, 
USHRT_MAX
);

475 
	`exô
(10);

478 
	`scsi_‰ì_scsi_èsk
(
èsk
);

479 
	}
}

481 
	$ªadˇp
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
u£_16
,

482 *
_blocksize
, 
uöt64_t
 *
_num_blocks
)

484 
scsi_èsk
 *
èsk
;

486 i‡(
u£_16
) {

487 
scsi_ªadˇ∑côy16
 *
rc16
;

489 
èsk
 = 
	`iscsi_ªadˇ∑côy16_sync
(
iscsi
, 
lun
);

490 i‡(
èsk
 =
NULL
 ||Åask->
°©us
 !
SCSI_STATUS_GOOD
) {

491 
	`Ârötf
(
°dîr
,

493 
	`exô
(10);

495 
rc16
 = 
	`scsi_d©aö_unm¨shÆl
(
èsk
);

496 i‡(
rc16
 =
NULL
) {

497 
	`Ârötf
(
°dîr
,

499 
	`exô
(10);

501 *
_blocksize
 = 
rc16
->
block_Àngth
;

502 *
_num_blocks
 = 
rc16
->
ªtu∫ed_lba
 + 1;

504 
scsi_ªadˇ∑côy10
 *
rc10
;

506 
èsk
 = 
	`iscsi_ªadˇ∑côy10_sync
(
iscsi
, 
lun
, 0, 0);

507 i‡(
èsk
 =
NULL
 ||Åask->
°©us
 !
SCSI_STATUS_GOOD
) {

508 
	`Ârötf
(
°dîr
,

510 
	`exô
(10);

512 
rc10
 = 
	`scsi_d©aö_unm¨shÆl
(
èsk
);

513 i‡(
rc10
 =
NULL
) {

514 
	`Ârötf
(
°dîr
,

516 
	`exô
(10);

518 *
_blocksize
 = 
rc10
->
block_size
;

519 *
_num_blocks
 = 
rc10
->
lba
;

522 
	`scsi_‰ì_scsi_èsk
(
èsk
);

524 
	}
}

526 
	$maö
(
¨gc
, *
¨gv
[])

528 *
§c_uæ
 = 
NULL
;

529 *
d°_uæ
 = 
NULL
;

530 
iscsi_uæ
 *iscsi_url;

531 
c
;

532 
pﬁlfd
 
pfd
[2];

533 
˛õ¡
 client;

535 
›ti⁄
 
l⁄g_›ti⁄s
[] = {

536 {"d°", 
ªquúed_¨gumít
, 
NULL
, 'd'},

537 {"§c", 
ªquúed_¨gumít
, 
NULL
, 's'},

538 {"öôüt‹-«me", 
ªquúed_¨gumít
, 
NULL
, 'i'},

539 {"¥ogªss", 
no_¨gumít
, 
NULL
, 'p'},

540 {"16", 
no_¨gumít
, 
NULL
, '6'},

541 {"xc›y", 
no_¨gumít
, 
NULL
, 'x'},

542 {"max", 
ªquúed_¨gumít
, 
NULL
, 'm'},

543 {"blocks", 
ªquúed_¨gumít
, 
NULL
, 'b'},

544 {"ign‹e-îr‹s", 
no_¨gumít
, 
NULL
, 'n'},

547 
›ti⁄_ödex
;

549 
	`mem£t
(&
˛õ¡
, 0, (client));

551 (
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "d:s:i:m:b:p6nx", 
l⁄g_›ti⁄s
,

552 &
›ti⁄_ödex
)) != -1) {

553 *
íd±r
;

555 
c
) {

557 
d°_uæ
 = 
›èrg
;

560 
§c_uæ
 = 
›èrg
;

563 
öôüt‹
 = 
›èrg
;

566 
˛õ¡
.
¥ogªss
 = 1;

569 
˛õ¡
.
u£_16_f‹_rw
 = 1;

572 
˛õ¡
.
u£_xc›y
 = 1;

575 
max_ö_Êight
 = 
	`°πoul
(
›èrg
, &
íd±r
, 10);

576 i‡(*
íd±r
 !'\0' || 
max_ö_Êight
 =
UINT_MAX
) {

577 
	`Ârötf
(
°dîr
, "Invalid max in flight: %s\n",

578 
›èrg
);

579 
	`exô
(10);

583 
blocks_≥r_io
 = 
	`°πoul
(
›èrg
, &
íd±r
, 10);

584 i‡(*
íd±r
 !'\0' || 
blocks_≥r_io
 =
UINT_MAX
) {

585 
	`Ârötf
(
°dîr
, "Invalid blocksÖer I/O: %s\n",

586 
›èrg
);

587 
	`exô
(10);

591 
˛õ¡
.
ign‹e_îr‹s
 = 1;

594 
	`Ârötf
(
°dîr
, "Uƒecognized o±i⁄ '%c'\n\n", 
c
);

595 
	`exô
(1);

599 i‡(
§c_uæ
 =
NULL
) {

600 
	`Ârötf
(
°dîr
, "You must specify source url\n");

601 
	`Ârötf
(
°dîr
, " --src iscsi://<host>[:<port>]/<target-iqn>/<lun>\n");

602 
	`exô
(10);

604 i‡(
d°_uæ
 =
NULL
) {

605 
	`Ârötf
(
°dîr
, "You must specify destination url\n");

606 
	`Ârötf
(
°dîr
, " --dst iscsi://<host>[:<port>]/<target-iqn>/<lun>\n");

607 
	`exô
(10);

610 
˛õ¡
.
§c_iscsi
 = 
	`iscsi_¸óã_c⁄ãxt
(
öôüt‹
);

611 i‡(
˛õ¡
.
§c_iscsi
 =
NULL
) {

612 
	`Ârötf
(
°dîr
, "FailedÅo create context\n");

613 
	`exô
(10);

615 
iscsi_uæ
 = 
	`iscsi_∑r£_fuŒ_uæ
(
˛õ¡
.
§c_iscsi
, 
§c_uæ
);

616 i‡(
iscsi_uæ
 =
NULL
) {

617 
	`Ârötf
(
°dîr
, "FailedÅoÖarse URL: %s\n",

618 
	`iscsi_gë_îr‹
(
˛õ¡
.
§c_iscsi
));

619 
	`exô
(10);

621 
	`iscsi_£t_£ssi⁄_ty≥
(
˛õ¡
.
§c_iscsi
, 
ISCSI_SESSION_NORMAL
);

622 
	`iscsi_£t_hódî_dige°
(
˛õ¡
.
§c_iscsi
, 
ISCSI_HEADER_DIGEST_NONE_CRC32C
);

623 i‡(
	`iscsi_fuŒ_c⁄√˘_sync
(
˛õ¡
.
§c_iscsi
, 
iscsi_uæ
->
p‹èl
, iscsi_uæ->
lun
) != 0) {

624 
	`Ârötf
(
°dîr
, "Logö Faûed. %s\n", 
	`iscsi_gë_îr‹
(
˛õ¡
.
§c_iscsi
));

625 
	`iscsi_de°roy_uæ
(
iscsi_uæ
);

626 
	`iscsi_de°roy_c⁄ãxt
(
˛õ¡
.
§c_iscsi
);

627 
	`exô
(10);

629 
˛õ¡
.
§c_lun
 = 
iscsi_uæ
->
lun
;

630 
	`iscsi_de°roy_uæ
(
iscsi_uæ
);

632 
	`ªadˇp
(
˛õ¡
.
§c_iscsi
, clõ¡.
§c_lun
, clõ¡.
u£_16_f‹_rw
,

633 &
˛õ¡
.
§c_blocksize
, &˛õ¡.
§c_num_blocks
);

635 i‡(
˛õ¡
.
u£_xc›y
) {

636 
	`cscd_idít_öq
(
˛õ¡
.
§c_iscsi
, clõ¡.
§c_lun
,

637 &
˛õ¡
.
§c_tgt_desig
);

638 
	`cscd_∑øm_check
(
˛õ¡
.
§c_iscsi
, clõ¡.
§c_lun
,

639 
˛õ¡
.
§c_blocksize
);

642 
˛õ¡
.
d°_iscsi
 = 
	`iscsi_¸óã_c⁄ãxt
(
öôüt‹
);

643 i‡(
˛õ¡
.
d°_iscsi
 =
NULL
) {

644 
	`Ârötf
(
°dîr
, "FailedÅo create context\n");

645 
	`exô
(10);

647 
iscsi_uæ
 = 
	`iscsi_∑r£_fuŒ_uæ
(
˛õ¡
.
d°_iscsi
, 
d°_uæ
);

648 i‡(
iscsi_uæ
 =
NULL
) {

649 
	`Ârötf
(
°dîr
, "FailedÅoÖarse URL: %s\n",

650 
	`iscsi_gë_îr‹
(
˛õ¡
.
d°_iscsi
));

651 
	`exô
(10);

653 
	`iscsi_£t_£ssi⁄_ty≥
(
˛õ¡
.
d°_iscsi
, 
ISCSI_SESSION_NORMAL
);

654 
	`iscsi_£t_hódî_dige°
(
˛õ¡
.
d°_iscsi
, 
ISCSI_HEADER_DIGEST_NONE_CRC32C
);

655 i‡(
	`iscsi_fuŒ_c⁄√˘_sync
(
˛õ¡
.
d°_iscsi
, 
iscsi_uæ
->
p‹èl
, iscsi_uæ->
lun
) != 0) {

656 
	`Ârötf
(
°dîr
, "Logö Faûed. %s\n", 
	`iscsi_gë_îr‹
(
˛õ¡
.
d°_iscsi
));

657 
	`iscsi_de°roy_uæ
(
iscsi_uæ
);

658 
	`iscsi_de°roy_c⁄ãxt
(
˛õ¡
.
d°_iscsi
);

659 
	`exô
(10);

661 
˛õ¡
.
d°_lun
 = 
iscsi_uæ
->
lun
;

662 
	`iscsi_de°roy_uæ
(
iscsi_uæ
);

664 
	`ªadˇp
(
˛õ¡
.
d°_iscsi
, clõ¡.
d°_lun
, clõ¡.
u£_16_f‹_rw
,

665 &
˛õ¡
.
d°_blocksize
, &˛õ¡.
d°_num_blocks
);

667 i‡(
˛õ¡
.
u£_xc›y
) {

668 
	`cscd_idít_öq
(
˛õ¡
.
d°_iscsi
, clõ¡.
d°_lun
,

669 &
˛õ¡
.
d°_tgt_desig
);

670 
	`cscd_∑øm_check
(
˛õ¡
.
d°_iscsi
, clõ¡.
d°_lun
,

671 
˛õ¡
.
d°_blocksize
);

674 i‡(
˛õ¡
.
§c_blocksize
 !˛õ¡.
d°_blocksize
) {

675 
	`Ârötf
(
°dîr
, "sour˚ LUN ha†dif„ª¡ blocksizêth™ de°ö©i⁄Åh™ de°ö©i⁄ (%d !%d se˘‹s)\n", 
˛õ¡
.
§c_blocksize
, clõ¡.
d°_blocksize
);

676 
	`exô
(10);

679 i‡(
˛õ¡
.
§c_num_blocks
 > clõ¡.
d°_num_blocks
) {

680 
	`Ârötf
(
°dîr
, "sour˚ LUN i†biggîÅh™ de°ö©i⁄ (%"
PRIu64
" > %"PRIu64" se˘‹s)\n", 
˛õ¡
.
§c_num_blocks
, clõ¡.
d°_num_blocks
);

681 
	`exô
(10);

684 i‡(
˛õ¡
.
u£_xc›y
) {

685 
	`fûl_xc›y_queue
(&
˛õ¡
);

687 
	`fûl_ªad_queue
(&
˛õ¡
);

690 
˛õ¡
.
föished
 == 0) {

691 
pfd
[0].
fd
 = 
	`iscsi_gë_fd
(
˛õ¡
.
§c_iscsi
);

692 
pfd
[0].
evíts
 = 
	`iscsi_which_evíts
(
˛õ¡
.
§c_iscsi
);

693 
pfd
[1].
fd
 = 
	`iscsi_gë_fd
(
˛õ¡
.
d°_iscsi
);

694 
pfd
[1].
evíts
 = 
	`iscsi_which_evíts
(
˛õ¡
.
d°_iscsi
);

696 i‡(!
pfd
[0].
evíts
 && !pfd[1].events) {

697 
	`¶ìp
(1);

701 i‡(
	`pﬁl
(&
pfd
[0], 2, -1) < 0) {

702 
	`¥ötf
("Poll failed");

703 
	`exô
(10);

705 i‡(
	`iscsi_£rvi˚
(
˛õ¡
.
§c_iscsi
, 
pfd
[0].
ªvíts
) < 0) {

706 
	`¥ötf
("iscsi_£rvi˚ faûed wôh : %s\n", 
	`iscsi_gë_îr‹
(
˛õ¡
.
§c_iscsi
));

709 i‡(
	`iscsi_£rvi˚
(
˛õ¡
.
d°_iscsi
, 
pfd
[1].
ªvíts
) < 0) {

710 
	`¥ötf
("iscsi_£rvi˚ faûed wôh : %s\n", 
	`iscsi_gë_îr‹
(
˛õ¡
.
d°_iscsi
));

715 
	`iscsi_logout_sync
(
˛õ¡
.
§c_iscsi
);

716 
	`iscsi_de°roy_c⁄ãxt
(
˛õ¡
.
§c_iscsi
);

717 
	`iscsi_logout_sync
(
˛õ¡
.
d°_iscsi
);

718 
	`iscsi_de°roy_c⁄ãxt
(
˛õ¡
.
d°_iscsi
);

721 
	}
}

	@examples/iscsiclient.c

35 
	#TARGET
 "127.0.0.1:3260"

	)

37 #i‡
deföed
(
_WIN32
)

38 
	~<wösock2.h
>

39 
	~"wö32/wö32_com∑t.h
"

40 #¥agm®
commít
(
lib
, "ws2_32.lib")

41 
WSADATA
 
	gwßD©a
;

43 
	~<pﬁl.h
>

46 
	~<°dio.h
>

47 
	~<°dlib.h
>

48 
	~<°döt.h
>

49 
	~<°rög.h
>

50 
	~<uni°d.h
>

51 
	~"iscsi.h
"

52 
	~"scsi-lowÀvñ.h
"

54 
	s˛õ¡_°©e
 {

55 
	mföished
;

56 c⁄° *
	mmesßge
;

57 
	mhas_discovîed_èrgë
;

58 *
	mèrgë_«me
;

59 *
	mèrgë_addªss
;

60 
	mlun
;

61 
	mblock_size
;

64 
	gsmÆl_buf„r
[512];

66 
	$tm_©_cb
(
iscsi_c⁄ãxt
 *
iscsi
 
_U_
, 
°©us
 _U_, *
comm™d_d©a
 _U_, *
¥iv©e_d©a
)

68 
˛õ¡_°©e
 *
˛¡
 = (˛õ¡_°©ê*)
¥iv©e_d©a
;

70 
	`¥ötf
("tmát cb !\n");

71 
	`¥ötf
("ª•⁄£ : %d\n", *((
uöt32_t
 *)
comm™d_d©a
));

73 
˛¡
->
föished
 = 1;

74 
	}
}

77 
	$syncˇche10_cb
(
iscsi_c⁄ãxt
 *
iscsi
 
_U_
, 
°©us
, *
comm™d_d©a
 _U_, *
¥iv©e_d©a
 _U_)

79 
	`¥ötf
("SYNCCACHE10 sètus:%d\n", 
°©us
);

80 
	}
}

82 
	$n›_out_cb
(
iscsi_c⁄ãxt
 *
iscsi
, 
°©us
, *
comm™d_d©a
, *
¥iv©e_d©a
)

84 
iscsi_d©a
 *
d©a
 = 
comm™d_d©a
;

85 
scsi_èsk
 *
èsk
;

87 
	`¥ötf
("NOP-IN sètus:%d\n", 
°©us
);

88 i‡(
d©a
->
size
 > 0) {

89 
	`¥ötf
("NOP-IN (%zu) data:%.*s\n",

90 
d©a
->
size
, ()data->size, data->data);

92 
	`¥ötf
("Send SYNCHRONIZECACHE10\n");

93 
èsk
 = 
	`iscsi_synchr⁄izeˇche10_èsk
(
iscsi
, 2, 0, 0, 0, 0, 
syncˇche10_cb
, 
¥iv©e_d©a
);

94 i‡(
èsk
 =
NULL
) {

95 
	`¥ötf
("failedÅo send sync cache10\n");

96 
	`exô
(10);

98 
	`¥ötf
("sendÅask managementÅoÅryÅoábortÅhe sync10Åask\n");

99 i‡(
	`iscsi_èsk_mgmt_ab‹t_èsk_async
(
iscsi
, 
èsk
, 
tm_©_cb
, 
¥iv©e_d©a
) != 0) {

100 
	`¥ötf
("failedÅo sendÅask managementÅoábortÅhe sync10Åask\n");

101 
	`exô
(10);

103 
	}
}

106 
	$wrôe10_1_cb
(
iscsi_c⁄ãxt
 *
iscsi
 
_U_
, 
°©us
, *
comm™d_d©a
, *
¥iv©e_d©a
 _U_)

108 
scsi_èsk
 *
èsk
 = 
comm™d_d©a
;

110 i‡(
°©us
 =
SCSI_STATUS_CHECK_CONDITION
) {

111 
	`¥ötf
("Wrôe10 faûed wôh sí£ key:%dáscq:%04x\n", 
èsk
->
£n£
.
key
,Åask->£n£.
ascq
);

112 
	`scsi_‰ì_scsi_èsk
(
èsk
);

113 
	`exô
(10);

115 i‡(
°©us
 !
SCSI_STATUS_GOOD
) {

116 
	`¥ötf
("Wrôe10 faûed wôh %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

117 
	`scsi_‰ì_scsi_èsk
(
èsk
);

118 
	`exô
(10);

121 
	`¥ötf
("Wrôêsuc˚ssfu»:%d\n", 
°©us
);

122 
	`scsi_‰ì_scsi_èsk
(
èsk
);

123 
	`exô
(10);

124 
	}
}

126 
	$wrôe10_cb
(
iscsi_c⁄ãxt
 *
iscsi
 
_U_
, 
°©us
, *
comm™d_d©a
, *
¥iv©e_d©a
 _U_)

128 
˛õ¡_°©e
 *
˛¡
 = (˛õ¡_°©ê*)
¥iv©e_d©a
;

129 
scsi_èsk
 *
èsk
 = 
comm™d_d©a
;

130 
i
;

131 
wb
[512];

132 
scsi_iovec
 
iov
[3];

134 i‡(
°©us
 =
SCSI_STATUS_CHECK_CONDITION
) {

135 
	`¥ötf
("Wrôe10 faûed wôh sí£ key:%dáscq:%04x\n", 
èsk
->
£n£
.
key
,Åask->£n£.
ascq
);

136 
	`scsi_‰ì_scsi_èsk
(
èsk
);

137 
	`exô
(10);

139 i‡(
°©us
 !
SCSI_STATUS_GOOD
) {

140 
	`¥ötf
("Wrôe10 faûed wôh %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

141 
	`scsi_‰ì_scsi_èsk
(
èsk
);

142 
	`exô
(10);

145 
	`¥ötf
("Wrôêsuc˚ssfu»:%d\n", 
°©us
);

146 
	`scsi_‰ì_scsi_èsk
(
èsk
);

148 
	`¥ötf
("writeÅhe block usingán iovector\n");

149 
i
 = 0;i < 512; i++) {

150 
wb
[
i
] = (511 - i) & 0xff;

152 
èsk
 = 
	`iscsi_wrôe10_èsk
(
iscsi
, 
˛¡
->
lun
, 0, 
NULL
, 512, 512,

154 
wrôe10_1_cb
, 
¥iv©e_d©a
);

155 i‡(
èsk
 =
NULL
) {

156 
	`¥ötf
("failedÅo send write10 command\n");

157 
	`exô
(10);

161 
iov
[0].
iov_ba£
 = &
wb
[0];

162 
iov
[0].
iov_Àn
 = 4;

163 
iov
[1].
iov_ba£
 = &
wb
[4];

164 
iov
[1].
iov_Àn
 = 11;

165 
iov
[2].
iov_ba£
 = &
wb
[15];

166 
iov
[2].
iov_Àn
 = 512 - 15;

167 
	`scsi_èsk_£t_iov_out
(
èsk
, &
iov
[0], 3);

168 
	}
}

170 
	$ªad10_1_cb
(
iscsi_c⁄ãxt
 *
iscsi
, 
°©us
, *
comm™d_d©a
, *
¥iv©e_d©a
)

172 
˛õ¡_°©e
 *
˛¡
 = (˛õ¡_°©ê*)
¥iv©e_d©a
;

173 
scsi_èsk
 *
èsk
 = 
comm™d_d©a
;

174 
i
;

175 
wb
[512];

177 i‡(
°©us
 =
SCSI_STATUS_CHECK_CONDITION
) {

178 
	`¥ötf
("Ród10 faûed wôh sí£ key:%dáscq:%04x\n", 
èsk
->
£n£
.
key
,Åask->£n£.
ascq
);

179 
	`scsi_‰ì_scsi_èsk
(
èsk
);

180 
	`exô
(10);

183 
	`¥ötf
("READ10 using scsi_task_set_iov_in() successful. Block content:\n");

184 
i
=0;i<512;i++) {

185 
	`¥ötf
("%02x ", 
smÆl_buf„r
[
i
]);

186 i‡(
i
%16==15)

187 
	`¥ötf
("\n");

188 i‡(
i
==69)

191 
	`¥ötf
("...\n");

192 
	`scsi_‰ì_scsi_èsk
(
èsk
);

195 
	`¥ötf
("Finished, wontÅryÅo write data sinceÅhat willÜikely destroy your LUN :-(\n");

196 
	`¥ötf
("Send NOP-OUT\n");

197 i‡(
	`iscsi_n›_out_async
(
iscsi
, 
n›_out_cb
, (*)"Pög!", 6, 
¥iv©e_d©a
) != 0) {

198 
	`¥ötf
("failedÅo sendÇop-out\n");

199 
	`scsi_‰ì_scsi_èsk
(
èsk
);

200 
	`exô
(10);

203 
	`¥ötf
("writeÅhe blockÇormally\n");

204 
i
 = 0;i < 512; i++) {

205 
wb
[
i
] = i & 0xff;

207 
èsk
 = 
	`iscsi_wrôe10_èsk
(
iscsi
, 
˛¡
->
lun
, 0, 
wb
, 512, 512,

209 
wrôe10_cb
, 
¥iv©e_d©a
);

210 i‡(
èsk
 =
NULL
) {

211 
	`¥ötf
("failedÅo send write10 command\n");

212 
	`exô
(10);

215 
	}
}

217 
	$ªad10_cb
(
iscsi_c⁄ãxt
 *
iscsi
, 
°©us
, *
comm™d_d©a
, *
¥iv©e_d©a
)

219 
˛õ¡_°©e
 *
˛¡
 = (˛õ¡_°©ê*)
¥iv©e_d©a
;

220 
scsi_èsk
 *
èsk
 = 
comm™d_d©a
;

221 
i
;

222 
scsi_iovec
 
iov
[3];

224 i‡(
°©us
 =
SCSI_STATUS_CHECK_CONDITION
) {

225 
	`¥ötf
("Ród10 faûed wôh sí£ key:%dáscq:%04x\n", 
èsk
->
£n£
.
key
,Åask->£n£.
ascq
);

226 
	`scsi_‰ì_scsi_èsk
(
èsk
);

227 
	`exô
(10);

230 
	`¥ötf
("READ10 using scsi_task_add_data_in_buffer() successful. Block content:\n");

231 
i
=0;i<512;i++) {

232 
	`¥ötf
("%02x ", 
smÆl_buf„r
[
i
]);

233 i‡(
i
%16==15)

234 
	`¥ötf
("\n");

235 i‡(
i
==69)

238 
	`¥ötf
("...\n");

239 
	`scsi_‰ì_scsi_èsk
(
èsk
);

241 
	`mem£t
(&
smÆl_buf„r
[0], 0, 512);

243 i‡((
èsk
 = 
	`iscsi_ªad10_èsk
(
iscsi
, 
˛¡
->
lun
, 0, c t->
block_size
, c t->block_size, 0, 0, 0, 0, 0, 
ªad10_1_cb
, 
¥iv©e_d©a
)Ë=
NULL
) {

244 
	`¥ötf
("failedÅo sendÑead10 command\n");

245 
	`exô
(10);

249 
iov
[0].
iov_ba£
 = &
smÆl_buf„r
[0];

250 
iov
[0].
iov_Àn
 = 7;

251 
iov
[1].
iov_ba£
 = &
smÆl_buf„r
[7];

252 
iov
[1].
iov_Àn
 = 8;

253 
iov
[2].
iov_ba£
 = &
smÆl_buf„r
[15];

254 
iov
[2].
iov_Àn
 = 512 - 15;

255 
	`scsi_èsk_£t_iov_ö
(
èsk
, &
iov
[0], 3);

256 
	}
}

258 
	$ªad6_cb
(
iscsi_c⁄ãxt
 *
iscsi
, 
°©us
, *
comm™d_d©a
, *
¥iv©e_d©a
)

260 
˛õ¡_°©e
 *
˛¡
 = (˛õ¡_°©ê*)
¥iv©e_d©a
;

261 
scsi_èsk
 *
èsk
 = 
comm™d_d©a
;

262 
i
;

264 i‡(
°©us
 =
SCSI_STATUS_CHECK_CONDITION
) {

265 
	`¥ötf
("Ród6 faûed wôh sí£ key:%dáscq:%04x\n", 
èsk
->
£n£
.
key
,Åask->£n£.
ascq
);

266 
	`scsi_‰ì_scsi_èsk
(
èsk
);

267 
	`exô
(10);

270 
	`¥ötf
("READ6 successful. Block content:\n");

271 
i
=0;i<
èsk
->
d©aö
.
size
;i++) {

272 
	`¥ötf
("%02x ", 
èsk
->
d©aö
.
d©a
[
i
]);

273 i‡(
i
%16==15)

274 
	`¥ötf
("\n");

275 i‡(
i
==69)

278 
	`¥ötf
("...\n");

280 
	`scsi_‰ì_scsi_èsk
(
èsk
);

282 i‡((
èsk
 = 
	`iscsi_ªad10_èsk
(
iscsi
, 
˛¡
->
lun
, 0, c t->
block_size
, c t->block_size, 0, 0, 0, 0, 0, 
ªad10_cb
, 
¥iv©e_d©a
)Ë=
NULL
) {

283 
	`¥ötf
("failedÅo sendÑead10 command\n");

284 
	`exô
(10);

291 
	`scsi_èsk_add_d©a_ö_buf„r
(
èsk
, 7, &
smÆl_buf„r
[0]);

292 
	`scsi_èsk_add_d©a_ö_buf„r
(
èsk
, 8, &
smÆl_buf„r
[7]);

293 
	`scsi_èsk_add_d©a_ö_buf„r
(
èsk
, 512-15, &
smÆl_buf„r
[15]);

294 
	}
}

296 
	$ªadˇ∑côy10_cb
(
iscsi_c⁄ãxt
 *
iscsi
, 
°©us
, *
comm™d_d©a
, *
¥iv©e_d©a
)

298 
˛õ¡_°©e
 *
˛¡
 = (˛õ¡_°©ê*)
¥iv©e_d©a
;

299 
scsi_èsk
 *
èsk
 = 
comm™d_d©a
;

300 
scsi_ªadˇ∑côy10
 *
rc10
;

301 
fuŒ_size
;

303 i‡(
°©us
 =
SCSI_STATUS_CHECK_CONDITION
) {

304 
	`¥ötf
("Ródˇ∑côy10 faûed wôh sí£ key:%dáscq:%04x\n", 
èsk
->
£n£
.
key
,Åask->£n£.
ascq
);

305 
	`scsi_‰ì_scsi_èsk
(
èsk
);

306 
	`exô
(10);

309 
fuŒ_size
 = 
	`scsi_d©aö_gëfuŒsize
(
èsk
);

310 i‡(
fuŒ_size
 < 
èsk
->
d©aö
.
size
) {

311 
	`¥ötf
("notÉnough data for full sizeÑeadcapacity10\n");

312 
	`scsi_‰ì_scsi_èsk
(
èsk
);

313 
	`exô
(10);

316 
rc10
 = 
	`scsi_d©aö_unm¨shÆl
(
èsk
);

317 i‡(
rc10
 =
NULL
) {

318 
	`¥ötf
("failedÅo unmarshallÑeadcapacity10 data\n");

319 
	`scsi_‰ì_scsi_èsk
(
èsk
);

320 
	`exô
(10);

322 
˛¡
->
block_size
 = 
rc10
->block_size;

323 
	`¥ötf
("READCAPACITY10 suc˚ssful. Size:%d block† blocksize:%d. Ród fú° block\n", 
rc10
->
lba
,Ñc10->
block_size
);

325 i‡(
	`iscsi_ªad6_èsk
(
iscsi
, 
˛¡
->
lun
, 0, c t->
block_size
, c t->block_size, 
ªad6_cb
, 
¥iv©e_d©a
Ë=
NULL
) {

326 
	`¥ötf
("failedÅo sendÑead6 command\n");

327 
	`scsi_‰ì_scsi_èsk
(
èsk
);

328 
	`exô
(10);

330 
	`scsi_‰ì_scsi_èsk
(
èsk
);

331 
	}
}

333 
	$mode£n£6_cb
(
iscsi_c⁄ãxt
 *
iscsi
, 
°©us
, *
comm™d_d©a
, *
¥iv©e_d©a
)

335 
˛õ¡_°©e
 *
˛¡
 = (˛õ¡_°©ê*)
¥iv©e_d©a
;

336 
scsi_èsk
 *
èsk
 = 
comm™d_d©a
;

337 
scsi_mode_£n£
 *
ms
;

338 
fuŒ_size
;

340 i‡(
°©us
 =
SCSI_STATUS_CHECK_CONDITION
) {

341 
	`¥ötf
("Mode£n£6 faûed wôh sí£ key:%dáscq:%04x\n", 
èsk
->
£n£
.
key
,Åask->£n£.
ascq
);

342 
	`exô
(10);

344 
fuŒ_size
 = 
	`scsi_d©aö_gëfuŒsize
(
èsk
);

345 i‡(
fuŒ_size
 > 
èsk
->
d©aö
.
size
) {

346 
	`¥ötf
("didÇot getÉnough data for mode sense, sening modesenseágainásking for bigger buffer\n");

347 i‡(
	`iscsi_mode£n£6_èsk
(
iscsi
, 
˛¡
->
lun
, 0, 
SCSI_MODESENSE_PC_CURRENT
, 
SCSI_MODEPAGE_RETURN_ALL_PAGES
, 0, 
fuŒ_size
, 
mode£n£6_cb
, 
¥iv©e_d©a
Ë=
NULL
) {

348 
	`¥ötf
("failedÅo send modesense6 command\n");

349 
	`scsi_‰ì_scsi_èsk
(
èsk
);

350 
	`exô
(10);

352 
	`scsi_‰ì_scsi_èsk
(
èsk
);

357 
	`¥ötf
("MODESENSE6 successful.\n");

358 
ms
 = 
	`scsi_d©aö_unm¨shÆl
(
èsk
);

359 i‡(
ms
 =
NULL
) {

360 
	`¥ötf
("failedÅo unmarshall mode sense datain blob\n");

361 
	`scsi_‰ì_scsi_èsk
(
èsk
);

362 
	`exô
(10);

365 
	`¥ötf
("Send READCAPACITY10\n");

366 i‡(
	`iscsi_ªadˇ∑côy10_èsk
(
iscsi
, 
˛¡
->
lun
, 0, 0, 
ªadˇ∑côy10_cb
, 
¥iv©e_d©a
Ë=
NULL
) {

367 
	`¥ötf
("failedÅo sendÑeadcapacity command\n");

368 
	`scsi_‰ì_scsi_èsk
(
èsk
);

369 
	`exô
(10);

371 
	`scsi_‰ì_scsi_èsk
(
èsk
);

372 
	}
}

374 
	$öquúy_cb
(
iscsi_c⁄ãxt
 *
iscsi
, 
°©us
, *
comm™d_d©a
, *
¥iv©e_d©a
)

376 
˛õ¡_°©e
 *
˛¡
 = (˛õ¡_°©ê*)
¥iv©e_d©a
;

377 
scsi_èsk
 *
èsk
 = 
comm™d_d©a
;

378 
scsi_öquúy_°™d¨d
 *
öq
;

380 i‡(
°©us
 =
SCSI_STATUS_CHECK_CONDITION
) {

381 
	`¥ötf
("Inquúy faûed wôh sí£ key:%dáscq:%04x\n", 
èsk
->
£n£
.
key
,Åask->£n£.
ascq
);

382 
	`scsi_‰ì_scsi_èsk
(
èsk
);

383 
	`exô
(10);

386 
	`¥ötf
("INQUIRY successful for standard data.\n");

387 
öq
 = 
	`scsi_d©aö_unm¨shÆl
(
èsk
);

388 i‡(
öq
 =
NULL
) {

389 
	`¥ötf
("failedÅo unmarshall inquiry datain blob\n");

390 
	`scsi_‰ì_scsi_èsk
(
èsk
);

391 
	`exô
(10);

394 
	`¥ötf
("Devi˚ Ty≥ i†%d. Víd‹Id:%†Produ˘Id:%s\n", 
öq
->
devi˚_ty≥
, inq->
víd‹_idítifiˇti⁄
, inq->
¥odu˘_idítifiˇti⁄
);

395 
	`¥ötf
("Send MODESENSE6\n");

396 i‡(
	`iscsi_mode£n£6_èsk
(
iscsi
, 
˛¡
->
lun
, 0, 
SCSI_MODESENSE_PC_CURRENT
, 
SCSI_MODEPAGE_RETURN_ALL_PAGES
, 0, 4, 
mode£n£6_cb
, 
¥iv©e_d©a
Ë=
NULL
) {

397 
	`¥ötf
("failedÅo send modesense6 command\n");

398 
	`scsi_‰ì_scsi_èsk
(
èsk
);

399 
	`exô
(10);

401 
	`scsi_‰ì_scsi_èsk
(
èsk
);

402 
	}
}

404 
	$ã°unôªady_cb
(
iscsi_c⁄ãxt
 *
iscsi
, 
°©us
, *
comm™d_d©a
, *
¥iv©e_d©a
)

406 
˛õ¡_°©e
 *
˛¡
 = (˛õ¡_°©ê*)
¥iv©e_d©a
;

407 
scsi_èsk
 *
èsk
 = 
comm™d_d©a
;

409 i‡(
°©us
 =
SCSI_STATUS_CHECK_CONDITION
) {

410 
	`¥ötf
("Fú°Åe°unôªady faûed wôh sí£ key:%dáscq:%04x\n", 
èsk
->
£n£
.
key
,Åask->£n£.
ascq
);

411 i‡(
èsk
->
£n£
.
key
 =
SCSI_SENSE_UNIT_ATTENTION
 &&Åask->£n£.
ascq
 =
SCSI_SENSE_ASCQ_BUS_RESET
) {

412 
	`¥ötf
("target device just came online,Åryágain\n");

414 i‡(
	`iscsi_ã°unôªady_èsk
(
iscsi
, 
˛¡
->
lun
, 
ã°unôªady_cb
, 
¥iv©e_d©a
Ë=
NULL
) {

415 
	`¥ötf
("failedÅo sendÅestunitready command\n");

416 
	`scsi_‰ì_scsi_èsk
(
èsk
);

417 
	`exô
(10);

420 
	`scsi_‰ì_scsi_èsk
(
èsk
);

424 
	`¥ötf
("TESTUNITREADY suc˚ssful, dÿ™ inquúy o¿lun:%d\n", 
˛¡
->
lun
);

425 i‡(
	`iscsi_öquúy_èsk
(
iscsi
, 
˛¡
->
lun
, 0, 0, 64, 
öquúy_cb
, 
¥iv©e_d©a
Ë=
NULL
) {

426 
	`¥ötf
("ÁûedÅÿ£nd inquúy comm™d : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

427 
	`scsi_‰ì_scsi_èsk
(
èsk
);

428 
	`exô
(10);

430 
	`scsi_‰ì_scsi_èsk
(
èsk
);

431 
	}
}

434 
	$ªp‹éuns_cb
(
iscsi_c⁄ãxt
 *
iscsi
, 
°©us
, *
comm™d_d©a
, *
¥iv©e_d©a
)

436 
˛õ¡_°©e
 *
˛¡
 = (˛õ¡_°©ê*)
¥iv©e_d©a
;

437 
scsi_èsk
 *
èsk
 = 
comm™d_d©a
;

438 
scsi_ªp‹éuns_li°
 *
li°
;

439 
fuŒ_ªp‹t_size
;

440 
i
;

442 i‡(
°©us
 !
SCSI_STATUS_GOOD
) {

443 
	`¥ötf
("Rï‹éun†Áûed wôh : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

444 
	`scsi_‰ì_scsi_èsk
(
èsk
);

448 
fuŒ_ªp‹t_size
 = 
	`scsi_d©aö_gëfuŒsize
(
èsk
);

450 
	`¥ötf
("REPORTLUNS sètus:%d d©®size:%d, fuŒÑï‹t†lun†d©®size:%d\n", 
°©us
, 
èsk
->
d©aö
.
size
, 
fuŒ_ªp‹t_size
);

451 i‡(
fuŒ_ªp‹t_size
 > 
èsk
->
d©aö
.
size
) {

452 
	`¥ötf
("We didÇot getállÅhe data weÇeed inÑeportluns,áskágain\n");

453 i‡(
	`iscsi_ªp‹éuns_èsk
(
iscsi
, 0, 
fuŒ_ªp‹t_size
, 
ªp‹éuns_cb
, 
¥iv©e_d©a
Ë=
NULL
) {

454 
	`¥ötf
("failedÅo sendÑeportluns command\n");

455 
	`scsi_‰ì_scsi_èsk
(
èsk
);

456 
	`exô
(10);

458 
	`scsi_‰ì_scsi_èsk
(
èsk
);

463 
li°
 = 
	`scsi_d©aö_unm¨shÆl
(
èsk
);

464 i‡(
li°
 =
NULL
) {

465 
	`¥ötf
("failedÅo unmarshallÑeportluns datain blob\n");

466 
	`scsi_‰ì_scsi_èsk
(
èsk
);

467 
	`exô
(10);

469 
i
=0; i < ()
li°
->
num
; i++) {

470 
	`¥ötf
("LUN:%d found\n", 
li°
->
luns
[
i
]);

471 
˛¡
->
lun
 = 
li°
->
luns
[
i
];

474 
	`¥ötf
("Wû»u£ LUN:%d\n", 
˛¡
->
lun
);

475 
	`¥ötf
("SídÅe°unôªadyÅÿlu¿%d\n", 
˛¡
->
lun
);

476 i‡(
	`iscsi_ã°unôªady_èsk
(
iscsi
, 
˛¡
->
lun
, 
ã°unôªady_cb
, 
¥iv©e_d©a
Ë=
NULL
) {

477 
	`¥ötf
("ÁûedÅÿ£ndÅe°unôªady comm™d : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

478 
	`scsi_‰ì_scsi_èsk
(
èsk
);

479 
	`exô
(10);

481 
	`scsi_‰ì_scsi_èsk
(
èsk
);

482 
	}
}

485 
	$n‹mÆlogö_cb
(
iscsi_c⁄ãxt
 *
iscsi
, 
°©us
, *
comm™d_d©a
 
_U_
, *
¥iv©e_d©a
)

487 i‡(
°©us
 != 0) {

488 
	`¥ötf
("FaûedÅÿlog i¿tÿèrgë : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

489 
	`exô
(10);

492 
	`¥ötf
("Logged inÇormal session, sendÑeportluns\n");

493 i‡(
	`iscsi_ªp‹éuns_èsk
(
iscsi
, 0, 16, 
ªp‹éuns_cb
, 
¥iv©e_d©a
Ë=
NULL
) {

494 
	`¥ötf
("ÁûedÅÿ£ndÑï‹éun†comm™d : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

495 
	`exô
(10);

497 
	}
}

500 
	$n‹mÆc⁄√˘_cb
(
iscsi_c⁄ãxt
 *
iscsi
, 
°©us
, *
comm™d_d©a
 
_U_
, *
¥iv©e_d©a
)

502 
	`¥ötf
("ConnectedÅo iscsi socket\n");

504 i‡(
°©us
 != 0) {

505 
	`¥ötf
("n‹mÆc⁄√˘_cb: c⁄√˘i⁄ faûed sètus:%d\n", 
°©us
);

506 
	`exô
(10);

509 
	`¥ötf
("connected, sendÜogin command\n");

510 
	`iscsi_£t_£ssi⁄_ty≥
(
iscsi
, 
ISCSI_SESSION_NORMAL
);

511 
	`iscsi_£t_hódî_dige°
(
iscsi
, 
ISCSI_HEADER_DIGEST_CRC32C_NONE
);

512 i‡(
	`iscsi_logö_async
(
iscsi
, 
n‹mÆlogö_cb
, 
¥iv©e_d©a
) != 0) {

513 
	`¥ötf
("iscsi_login_async failed\n");

514 
	`exô
(10);

516 
	}
}

520 
	$discovîylogout_cb
(
iscsi_c⁄ãxt
 *
iscsi
, 
°©us
, *
comm™d_d©a
 
_U_
, *
¥iv©e_d©a
)

522 
˛õ¡_°©e
 *
˛¡
 = (˛õ¡_°©ê*)
¥iv©e_d©a
;

524 
	`¥ötf
("discovîy sessi⁄Üogged out, Mesßgê‰om maö(Ëwas:[%s]\n", 
˛¡
->
mesßge
);

526 i‡(
°©us
 != 0) {

527 
	`¥ötf
("FaûedÅÿlogouà‰omÅ¨gë. : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

528 
	`exô
(10);

531 
	`¥ötf
("disconnect socket\n");

532 i‡(
	`iscsi_disc⁄√˘
(
iscsi
) != 0) {

533 
	`¥ötf
("FailedÅo disconnect old socket\n");

534 
	`exô
(10);

537 
	`¥ötf
("ªc⁄√˘ wôhÇ‹mÆÜogöÅÿ[%s]\n", 
˛¡
->
èrgë_addªss
);

538 
	`¥ötf
("U£Å¨gë«mê[%s] whí c⁄√˘ög\n", 
˛¡
->
èrgë_«me
);

539 i‡(
	`iscsi_£t_èrgë«me
(
iscsi
, 
˛¡
->
èrgë_«me
)) {

540 
	`¥ötf
("FailedÅo setÅargetÇame\n");

541 
	`exô
(10);

543 i‡(
	`iscsi_£t_Æüs
(
iscsi
, "ronnie") != 0) {

544 
	`¥ötf
("FailedÅoáddálias\n");

545 
	`exô
(10);

547 i‡(
	`iscsi_£t_£ssi⁄_ty≥
(
iscsi
, 
ISCSI_SESSION_NORMAL
) != 0) {

548 
	`¥ötf
("FailedÅo set settionÅypeÅoÇormal\n");

549 
	`exô
(10);

552 i‡(
	`iscsi_c⁄√˘_async
(
iscsi
, 
˛¡
->
èrgë_addªss
, 
n‹mÆc⁄√˘_cb
, clnt) != 0) {

553 
	`¥ötf
("iscsi_c⁄√˘ faûed : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

554 
	`exô
(10);

556 
	}
}

558 
	$discovîy_cb
(
iscsi_c⁄ãxt
 *
iscsi
, 
°©us
, *
comm™d_d©a
, *
¥iv©e_d©a
)

560 
˛õ¡_°©e
 *
˛¡
 = (˛õ¡_°©ê*)
¥iv©e_d©a
;

561 
iscsi_discovîy_addªss
 *
addr
;

563 
	`¥ötf
("discovîy cÆlback sètus:%04x\n", 
°©us
);

565 i‡(
°©us
 !0 || 
comm™d_d©a
 =
NULL
) {

566 
	`¥ötf
("FaûedÅÿdÿdiscovîy o¿èrgë. : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

567 
	`exô
(10);

570 
addr
 = 
comm™d_d©a
;áddr;ádd∏addr->
√xt
) {

571 
	`¥ötf
("T¨gë:%†Addªss:%s\n", 
addr
->
èrgë_«me
,áddr->
p‹èls
->
p‹èl
);

574 
addr
=
comm™d_d©a
;

575 
˛¡
->
has_discovîed_èrgë
 = 1;

576 
˛¡
->
èrgë_«me
 = 
	`°rdup
(
addr
->target_name);

577 
˛¡
->
èrgë_addªss
 = 
	`°rdup
(
addr
->
p‹èls
->
p‹èl
);

580 
	`¥ötf
("discovery complete, sendÜogout command\n");

582 i‡(
	`iscsi_logout_async
(
iscsi
, 
discovîylogout_cb
, 
¥iv©e_d©a
) != 0) {

583 
	`¥ötf
("iscsi_logout_asyn¯Áûed : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

584 
	`exô
(10);

586 
	}
}

589 
	$discovîylogö_cb
(
iscsi_c⁄ãxt
 *
iscsi
, 
°©us
, *
comm™d_d©a
 
_U_
, *
¥iv©e_d©a
)

591 i‡(
°©us
 != 0) {

592 
	`¥ötf
("FaûedÅÿlog i¿tÿèrgë. : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

593 
	`exô
(10);

596 
	`¥ötf
("Logged inÅoÅarget, send discovery command\n");

597 i‡(
	`iscsi_discovîy_async
(
iscsi
, 
discovîy_cb
, 
¥iv©e_d©a
) != 0) {

598 
	`¥ötf
("ÁûedÅÿ£nd discovîy comm™d : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

599 
	`exô
(10);

602 
	}
}

604 
	$discovîyc⁄√˘_cb
(
iscsi_c⁄ãxt
 *
iscsi
, 
°©us
, *
comm™d_d©a
 
_U_
, *
¥iv©e_d©a
)

606 
	`¥ötf
("C⁄√˘edÅÿiscsòsockë sètus:0x%08x\n", 
°©us
);

608 i‡(
°©us
 != 0) {

609 
	`¥ötf
("discovîyc⁄√˘_cb: c⁄√˘i⁄ faûed : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

610 
	`exô
(10);

613 
	`¥ötf
("connected, sendÜogin command\n");

614 
	`iscsi_£t_£ssi⁄_ty≥
(
iscsi
, 
ISCSI_SESSION_DISCOVERY
);

615 i‡(
	`iscsi_logö_async
(
iscsi
, 
discovîylogö_cb
, 
¥iv©e_d©a
) != 0) {

616 
	`¥ötf
("iscsi_logö_asyn¯Áûed : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

617 
	`exô
(10);

619 
	}
}

622 
	$maö
(
¨gc
 
_U_
, *
¨gv
[] _U_)

624 
iscsi_c⁄ãxt
 *
iscsi
;

625 
pﬁlfd
 
pfd
;

626 
˛õ¡_°©e
 
˛¡
;

628 
	`¥ötf
("iscsi client\n");

629 #i‡
	`deföed
(
_WIN32
)

630 i‡(
	`WSASèπup
(
	`MAKEWORD
(2,2), &
wßD©a
) != 0) {

631 
	`¥ötf
("FailedÅo start Winsock2\n");

632 
	`exô
(10);

637 
	`mem£t
(&
˛¡
, 0, (clnt));

639 
iscsi
 = 
	`iscsi_¸óã_c⁄ãxt
("iqn.2002-10.com.ronnie:client");

640 i‡(
iscsi
 =
NULL
) {

641 
	`¥ötf
("FailedÅo create context\n");

642 
	`exô
(10);

645 i‡(
	`iscsi_£t_Æüs
(
iscsi
, "ronnie") != 0) {

646 
	`¥ötf
("FailedÅoáddálias\n");

647 
	`exô
(10);

650 
˛¡
.
mesßge
 = "Hello iSCSI";

651 
˛¡
.
has_discovîed_èrgë
 = 0;

652 i‡(
	`iscsi_c⁄√˘_async
(
iscsi
, 
TARGET
, 
discovîyc⁄√˘_cb
, &
˛¡
) != 0) {

653 
	`¥ötf
("iscsi_c⁄√˘ faûed. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

654 
	`exô
(10);

657 
˛¡
.
föished
 == 0) {

658 
pfd
.
fd
 = 
	`iscsi_gë_fd
(
iscsi
);

659 
pfd
.
evíts
 = 
	`iscsi_which_evíts
(
iscsi
);

661 i‡(
	`pﬁl
(&
pfd
, 1, -1) < 0) {

662 
	`¥ötf
("Poll failed");

663 
	`exô
(10);

665 i‡(
	`iscsi_£rvi˚
(
iscsi
, 
pfd
.
ªvíts
) < 0) {

666 
	`¥ötf
("iscsi_£rvi˚ faûed wôh : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

672 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

674 i‡(
˛¡
.
èrgë_«me
 !
NULL
) {

675 
	`‰ì
(
˛¡
.
èrgë_«me
);

677 i‡(
˛¡
.
èrgë_addªss
 !
NULL
) {

678 
	`‰ì
(
˛¡
.
èrgë_addªss
);

681 
	`¥ötf
("ok\n");

683 
	}
}

	@examples/ld_iscsi.c

18 
	#_GNU_SOURCE


	)

20 
	~<sys/ty≥s.h
>

21 
	~<sys/°©.h
>

22 
	~<uni°d.h
>

23 
	~<°dlib.h
>

24 
	~<°rög.h
>

25 
	~<î∫o.h
>

26 
	~<°dio.h
>

27 
	~<asm/f˙é.h
>

29 
	~"iscsi.h
"

30 
	~"iscsi-¥iv©e.h
"

31 
	~"scsi-lowÀvñ.h
"

33 
	~<sys/sysˇŒ.h
>

34 
	~<dlf˙.h
>

35 
	~<öây≥s.h
>

37 c⁄° *
	göôüt‹
 = "iqn.2007-10.com.github:sahlberg:libiscsi:ld-iscsi";

39 
	#ISCSI_MAX_FD
 255

	)

41 
	gdebug
 = 0;

43 
	#LD_ISCSI_DPRINTF
(
Àvñ
,
fmt
,
¨gs
...Ëdÿ{ i‡((
debug
Ë>ÀvñË{
	`Ârötf
(
°dîr
,"ld_iscsi: ");Ârötf(°dîr, (fmt), ##¨gs); f¥ötf(°dîr,"\n");} } 0);

	)

45 
	siscsi_fd_li°
 {

46 
	mis_iscsi
;

47 
	mdup2fd
;

48 
	mö_Êight
;

49 
iscsi_c⁄ãxt
 *
	miscsi
;

50 
	mlun
;

51 
uöt32_t
 
	mblock_size
;

52 
uöt64_t
 
	mnum_blocks
;

53 
off_t
 
	moff£t
;

54 
mode_t
 
	mmode
;

55 
	mgë_lba_°©us
;

56 
scsi_lba_°©us_des¸ùt‹
 
	mlbasd_ˇched
;

57 
	mlbasd_ˇche_vÆid
;

60 
iscsi_fd_li°
 
	giscsi_fd_li°
[
ISCSI_MAX_FD
];

62 (*
ªÆ_›í
)(
__c⁄°
 *
∑th
, 
Êags
, 
mode_t
 
mode
);

64 
	$›í
(c⁄° *
∑th
, 
Êags
, 
mode_t
 
mode
)

66 
fd
;

68 i‡(!
	`°∫cmp
(
∑th
, "iscsi:", 6)) {

69 
iscsi_c⁄ãxt
 *
iscsi
;

70 
iscsi_uæ
 *iscsi_url;

71 
scsi_èsk
 *
èsk
;

72 
scsi_ªadˇ∑côy16
 *
rc16
;

74 i‡(
mode
 & 
O_NONBLOCK
) {

75 
	`LD_ISCSI_DPRINTF
(0,"Non-blocking I/O is currentlyÇot supported");

76 
î∫o
 = 
EINVAL
;

80 
iscsi
 = 
	`iscsi_¸óã_c⁄ãxt
(
öôüt‹
);

81 i‡(
iscsi
 =
NULL
) {

82 
	`LD_ISCSI_DPRINTF
(0,"FailedÅo create context");

83 
î∫o
 = 
ENOMEM
;

87 
iscsi_uæ
 = 
	`iscsi_∑r£_fuŒ_uæ
(
iscsi
, 
∑th
);

88 i‡(
iscsi_uæ
 =
NULL
) {

89 
	`LD_ISCSI_DPRINTF
(0,"FaûedÅÿ∑r£ URL: %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

90 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

91 
î∫o
 = 
EINVAL
;

95 
	`iscsi_£t_£ssi⁄_ty≥
(
iscsi
, 
ISCSI_SESSION_NORMAL
);

96 
	`iscsi_£t_hódî_dige°
(
iscsi
, 
ISCSI_HEADER_DIGEST_NONE_CRC32C
);

98 i‡(
	`iscsi_fuŒ_c⁄√˘_sync
(
iscsi
, 
iscsi_uæ
->
p‹èl
, iscsi_uæ->
lun
) != 0) {

99 
	`LD_ISCSI_DPRINTF
(0,"Logö Faûed. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

100 
	`iscsi_de°roy_uæ
(
iscsi_uæ
);

101 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

102 
î∫o
 = 
EIO
;

106 
èsk
 = 
	`iscsi_ªadˇ∑côy16_sync
(
iscsi
, 
iscsi_uæ
->
lun
);

107 i‡(
èsk
 =
NULL
 ||Åask->
°©us
 !
SCSI_STATUS_GOOD
) {

108 
	`LD_ISCSI_DPRINTF
(0,"failedÅo sendÑeadcapacity command");

109 
	`iscsi_de°roy_uæ
(
iscsi_uæ
);

110 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

111 
î∫o
 = 
EIO
;

115 
rc16
 = 
	`scsi_d©aö_unm¨shÆl
(
èsk
);

116 i‡(
rc16
 =
NULL
) {

117 
	`LD_ISCSI_DPRINTF
(0,"failedÅo unmarshallÑeadcapacity10 data");

118 
	`scsi_‰ì_scsi_èsk
(
èsk
);

119 
	`iscsi_de°roy_uæ
(
iscsi_uæ
);

120 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

121 
î∫o
 = 
EIO
;

125 
	`LD_ISCSI_DPRINTF
(4,"ªadˇ∑côy16_sync: block_size: %d,Çum_blocks: %"
PRIu64
,
rc16
->
block_Àngth
,rc16->
ªtu∫ed_lba
 + 1);

127 
fd
 = 
	`iscsi_gë_fd
(
iscsi
);

128 i‡(
fd
 >
ISCSI_MAX_FD
) {

129 
	`LD_ISCSI_DPRINTF
(0,"Too many files open");

130 
	`iscsi_de°roy_uæ
(
iscsi_uæ
);

131 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

132 
î∫o
 = 
ENFILE
;

136 
iscsi_fd_li°
[
fd
].
is_iscsi
 = 1;

137 
iscsi_fd_li°
[
fd
].
dup2fd
 = -1;

138 
iscsi_fd_li°
[
fd
].
iscsi
 = iscsi;

139 
iscsi_fd_li°
[
fd
].
block_size
 = 
rc16
->
block_Àngth
;

140 
iscsi_fd_li°
[
fd
].
num_blocks
 = 
rc16
->
ªtu∫ed_lba
 + 1;

141 
iscsi_fd_li°
[
fd
].
off£t
 = 0;

142 
iscsi_fd_li°
[
fd
].
lun
 = 
iscsi_uæ
->lun;

143 
iscsi_fd_li°
[
fd
].
mode
 = mode;

145 i‡(
	`gëív
("LD_ISCSI_GET_LBA_STATUS"Ë!
NULL
) {

146 
iscsi_fd_li°
[
fd
].
gë_lba_°©us
 = 
	`©oi
(
	`gëív
("LD_ISCSI_GET_LBA_STATUS"));

147 i‡(
rc16
->
lbpme
 == 0){

148 
	`LD_ISCSI_DPRINTF
(1,"Logical unit is fullyÖrovisioned. Will skip get_lba_statusÅasks");

149 
iscsi_fd_li°
[
fd
].
gë_lba_°©us
 = 0;

153 
	`scsi_‰ì_scsi_èsk
(
èsk
);

154 
	`iscsi_de°roy_uæ
(
iscsi_uæ
);

156  
fd
;

159  
	`ªÆ_›í
(
∑th
, 
Êags
, 
mode
);

160 
	}
}

162 
	$›í64
(c⁄° *
∑th
, 
Êags
, 
mode_t
 
mode
)

164  
	`›í
(
∑th
, 
Êags
 | 
O_LARGEFILE
, 
mode
);

165 
	}
}

167 (*
ªÆ_˛o£
)(
fd
);

169 
	$˛o£
(
fd
)

171 i‡(
iscsi_fd_li°
[
fd
].
is_iscsi
 == 1) {

172 
i
;

174 i‡(
iscsi_fd_li°
[
fd
].
dup2fd
 >= 0) {

175 
iscsi_fd_li°
[
fd
].
is_iscsi
 = 0;

176 
iscsi_fd_li°
[
fd
].
dup2fd
 = -1;

177 
	`ªÆ_˛o£
(
fd
);

182 
i
 = 0; i < 
ISCSI_MAX_FD
; i++) {

183 i‡(
iscsi_fd_li°
[
i
].
dup2fd
 =
fd
) {

187 i‡(
i
 < 
ISCSI_MAX_FD
) {

188 
j
;

193 
	`mem˝y
(&
iscsi_fd_li°
[
i
], &iscsi_fd_li°[
fd
], (iscsi_fd_list));

194 
iscsi_fd_li°
[
i
].
dup2fd
 = -1;

196 
	`mem£t
(&
iscsi_fd_li°
[
fd
], 0, (iscsi_fd_list));

197 
iscsi_fd_li°
[
fd
].
dup2fd
 = -1;

199 
iscsi_fd_li°
[
i
].
iscsi
->
fd
 = i;

200 
	`ªÆ_˛o£
(
fd
);

202 
j
 = 0; j < 
ISCSI_MAX_FD
; j++) {

203 i‡(
j
 !
i
 && 
iscsi_fd_li°
[j].
dup2fd
 =
fd
) {

204 
iscsi_fd_li°
[
j
].
dup2fd
 = 
i
;

211 
iscsi_fd_li°
[
fd
].
is_iscsi
 = 0;

212 
iscsi_fd_li°
[
fd
].
dup2fd
 = -1;

213 
	`iscsi_de°roy_c⁄ãxt
(
iscsi_fd_li°
[
fd
].
iscsi
);

214 
iscsi_fd_li°
[
fd
].
iscsi
 = 
NULL
;

219  
	`ªÆ_˛o£
(
fd
);

220 
	}
}

222 (*
ªÆ_fx°©
)(
vî
, 
fd
, 
°©
 *
buf
);

224 
	$__fx°©
(
vî
, 
fd
, 
°©
 *
buf
)

226 i‡(
iscsi_fd_li°
[
fd
].
is_iscsi
 == 1) {

227 i‡(
iscsi_fd_li°
[
fd
].
dup2fd
 >= 0) {

228  
	`__fx°©
(
vî
, 
iscsi_fd_li°
[
fd
].
dup2fd
, 
buf
);

231 
	`mem£t
(
buf
, 0, (
°©
));

232 
buf
->
°_mode
 = 
S_IRUSR
 | 
S_IRGRP
 | 
S_IROTH
 | 
S_IFREG
;

233 
buf
->
°_size
 = 
iscsi_fd_li°
[
fd
].
num_blocks
 * iscsi_fd_li°[fd].
block_size
;

238  
	`ªÆ_fx°©
(
vî
, 
fd
, 
buf
);

239 
	}
}

242 (*
ªÆ_lx°©
)(
vî
, 
__c⁄°
 *
∑th
, 
°©
 *
buf
);

244 
	$__lx°©
(
vî
, c⁄° *
∑th
, 
°©
 *
buf
)

246 i‡(!
	`°∫cmp
(
∑th
, "iscsi:", 6)) {

247 
fd
, 
ªt
;

249 
fd
 = 
	`›í
(
∑th
, 0, 0);

250 i‡(
fd
 == -1) {

251  
fd
;

254 
ªt
 = 
	`__fx°©
(
vî
, 
fd
, 
buf
);

255 
	`˛o£
(
fd
);

256  
ªt
;

259  
	`ªÆ_lx°©
(
vî
, 
∑th
, 
buf
);

260 
	}
}

262 (*
ªÆ_x°©
)(
vî
, 
__c⁄°
 *
∑th
, 
°©
 *
buf
);

264 
	$__x°©
(
vî
, c⁄° *
∑th
, 
°©
 *
buf
)

266  
	`__lx°©
(
vî
, 
∑th
, 
buf
);

267 
	}
}

269 
	$off_t
 (*
ªÆ_l£ek
)(
fd
, 
off_t
 
off£t
, 
whí˚
);

271 
off_t
 
	$l£ek
(
fd
, 
off_t
 
off£t
, 
whí˚
) {

272 i‡(
iscsi_fd_li°
[
fd
].
is_iscsi
 == 1) {

273 
off_t
 
√w_off£t
;

274 
off_t
 
size
 = 
iscsi_fd_li°
[
fd
].
num_blocks
*iscsi_fd_li°[fd].
block_size
;

275 
whí˚
) {

276 
SEEK_SET
:

277 
√w_off£t
 = 
off£t
;

279 
SEEK_CUR
:

280 
√w_off£t
 = 
iscsi_fd_li°
[
fd
].
off£t
+offset;

282 
SEEK_END
:

283 
√w_off£t
 = 
size
 + 
off£t
;

286 
î∫o
 = 
EINVAL
;

289 i‡(
√w_off£t
 < 0 ||Çew_off£à> 
size
) {

290 
î∫o
 = 
EINVAL
;

293 
iscsi_fd_li°
[
fd
].
off£t
=
√w_off£t
;

294  
iscsi_fd_li°
[
fd
].
off£t
;

297  
	`ªÆ_l£ek
(
fd
, 
off£t
, 
whí˚
);

298 
	}
}

300 
	$ssize_t
 (*
ªÆ_ªad
)(
fd
, *
buf
, 
size_t
 
cou¡
);

302 
ssize_t
 
	$ªad
(
fd
, *
buf
, 
size_t
 
cou¡
)

304 i‡((
iscsi_fd_li°
[
fd
].
is_iscsi
 =1Ë&& (iscsi_fd_li°[fd].
ö_Êight
 == 0)) {

305 
uöt64_t
 
off£t
;

306 
uöt64_t
 
num_blocks
, 
lba
;

307 
scsi_èsk
 *
èsk
;

308 
scsi_gë_lba_°©us
 *
lbas
;

310 i‡(
iscsi_fd_li°
[
fd
].
dup2fd
 >= 0) {

311  
	`ªad
(
iscsi_fd_li°
[
fd
].
dup2fd
, 
buf
, 
cou¡
);

313 
off£t
 = 
iscsi_fd_li°
[
fd
].off£à/ iscsi_fd_li°[fd].
block_size
 * iscsi_fd_list[fd].block_size;

314 
num_blocks
 = (
iscsi_fd_li°
[
fd
].
off£t
 - off£à+ 
cou¡
 + iscsi_fd_li°[fd].
block_size
 - 1) / iscsi_fd_list[fd].block_size;

315 
lba
 = 
off£t
 / 
iscsi_fd_li°
[
fd
].
block_size
;

318 i‡(
lba
 >
iscsi_fd_li°
[
fd
].
num_blocks
) {

322 i‡((
lba
 + 
num_blocks
Ë> 
iscsi_fd_li°
[
fd
].num_blocks) {

323 
num_blocks
 = 
iscsi_fd_li°
[
fd
].num_block†- 
lba
;

324 
cou¡
 = 
num_blocks
 * 
iscsi_fd_li°
[
fd
].
block_size
;

327 
iscsi_fd_li°
[
fd
].
ö_Êight
 = 1;

328 i‡(
iscsi_fd_li°
[
fd
].
gë_lba_°©us
 != 0) {

329 
uöt32_t
 
i
;

330 
uöt32_t
 
_num_Æloˇãd
=0;

331 
uöt32_t
 
_num_blocks
=0;

333 i‡(
iscsi_fd_li°
[
fd
].
lbasd_ˇche_vÆid
==1) {

334 
	`LD_ISCSI_DPRINTF
(5,"ˇched gë_lba_°©us_des¸ùt‹ i†lb®%"
PRIu64
",Çum_block†%d,Örovisi⁄ög %d",
iscsi_fd_li°
[
fd
].
lbasd_ˇched
.
lba
,iscsi_fd_li°[fd].lbasd_ˇched.
num_blocks
,iscsi_fd_li°[fd].lbasd_ˇched.
¥ovisi⁄ög
);

335 i‡(
iscsi_fd_li°
[
fd
].
lbasd_ˇched
.
¥ovisi⁄ög
 !0x00 && 
lba
 >iscsi_fd_li°[fd].lbasd_ˇched.lb®&&Üba+
num_blocks
 < iscsi_fd_list[fd].lbasd_cached.lba+iscsi_fd_list[fd].lbasd_cached.num_blocks)

337 
	`LD_ISCSI_DPRINTF
(4,"skù≥dÑód16_syn¯f‹Ç⁄-Æloˇãd blocks:Üu¿%d,Üb®%"
PRIu64
",Çum_blocks: %"PRIu64", block_size: %d, off£t: %"PRIu64" cou¡: %lu",
iscsi_fd_li°
[
fd
].
lun
,
lba
,
num_blocks
,iscsi_fd_li°[fd].
block_size
,
off£t
,()
cou¡
);

338 
	`mem£t
(
buf
, 0x00, 
cou¡
);

339 
iscsi_fd_li°
[
fd
].
off£t
 +
cou¡
;

340 
iscsi_fd_li°
[
fd
].
ö_Êight
 = 0;

341  
cou¡
;

344 
	`LD_ISCSI_DPRINTF
(4,"gë_lba_°©us_sync:Üu¿%d,Üb®%"
PRIu64
",Çum_blocks: %"PRIu64,
iscsi_fd_li°
[
fd
].
lun
,
lba
,
num_blocks
);

345 
èsk
 = 
	`iscsi_gë_lba_°©us_sync
(
iscsi_fd_li°
[
fd
].
iscsi
, iscsi_fd_li°[fd].
lun
, 
lba
, 8+16);

346 i‡(
èsk
 =
NULL
 ||Åask->
°©us
 !
SCSI_STATUS_GOOD
) {

347 
	`LD_ISCSI_DPRINTF
(0,"failedÅo send get_lba_status command");

348 
iscsi_fd_li°
[
fd
].
ö_Êight
 = 0;

349 
î∫o
 = 
EIO
;

352 
lbas
 = 
	`scsi_d©aö_unm¨shÆl
(
èsk
);

353 i‡(
lbas
 =
NULL
) {

354 
	`LD_ISCSI_DPRINTF
(0,"failedÅo unmarshall get_lba_status data");

355 
	`scsi_‰ì_scsi_èsk
(
èsk
);

356 
iscsi_fd_li°
[
fd
].
ö_Êight
 = 0;

357 
î∫o
 = 
EIO
;

361 
	`LD_ISCSI_DPRINTF
(5,"gë_lba_°©us:Çum_des¸ùt‹s: %d",
lbas
->
num_des¸ùt‹s
);

362 
i
=0;i<
lbas
->
num_des¸ùt‹s
;i++) {

363 
scsi_lba_°©us_des¸ùt‹
 *
lbasd
 = &
lbas
->
des¸ùt‹s
[
i
];

364 
	`LD_ISCSI_DPRINTF
(5,"gë_lba_°©us_des¸ùt‹ %d,Üb®%"
PRIu64
",Çum_block†%d,Örovisi⁄ög %d",
i
,
lbasd
->
lba
,lbasd->
num_blocks
,lbasd->
¥ovisi⁄ög
);

365 i‡(
lbasd
->
lba
 !
_num_blocks
+lba) {

366 
	`LD_ISCSI_DPRINTF
(0,"get_lba_statusÑesponse isÇon-continuous");

367 
	`scsi_‰ì_scsi_èsk
(
èsk
);

368 
iscsi_fd_li°
[
fd
].
ö_Êight
 = 0;

369 
î∫o
 = 
EIO
;

372 
_num_Æloˇãd
+=(
lbasd
->
¥ovisi⁄ög
==0x00)?lbasd->
num_blocks
:0;

373 
_num_blocks
+=
lbasd
->
num_blocks
;

374 
iscsi_fd_li°
[
fd
].
lbasd_ˇched
=
lbas
->
des¸ùt‹s
[
i
];

375 
iscsi_fd_li°
[
fd
].
lbasd_ˇche_vÆid
=1;

377 
	`scsi_‰ì_scsi_èsk
(
èsk
);

378 i‡(
_num_Æloˇãd
 =0 && 
_num_blocks
 >
num_blocks
) {

379 
	`LD_ISCSI_DPRINTF
(4,"skù≥dÑód16_syn¯f‹Ç⁄-Æloˇãd blocks:Üu¿%d,Üb®%"
PRIu64
",Çum_blocks: %"PRIu64", block_size: %d, off£t: %"PRIu64" cou¡: %lu",
iscsi_fd_li°
[
fd
].
lun
,
lba
,
num_blocks
,iscsi_fd_li°[fd].
block_size
,
off£t
,()
cou¡
);

380 
	`mem£t
(
buf
, 0x00, 
cou¡
);

381 
iscsi_fd_li°
[
fd
].
off£t
 +
cou¡
;

382 
iscsi_fd_li°
[
fd
].
ö_Êight
 = 0;

383  
cou¡
;

387 
	`LD_ISCSI_DPRINTF
(4,"ªad16_sync:Üu¿%d,Üb®%"
PRIu64
",Çum_blocks: %"PRIu64", block_size: %d, off£t: %"PRIu64" cou¡: %lu",
iscsi_fd_li°
[
fd
].
lun
,
lba
,
num_blocks
,iscsi_fd_li°[fd].
block_size
,
off£t
,()
cou¡
);

389 
èsk
 = 
	`iscsi_ªad16_sync
(
iscsi_fd_li°
[
fd
].
iscsi
, iscsi_fd_li°[fd].
lun
, 
lba
, 
num_blocks
 * iscsi_fd_li°[fd].
block_size
, iscsi_fd_list[fd].block_size, 0, 0, 0, 0, 0);

390 
iscsi_fd_li°
[
fd
].
ö_Êight
 = 0;

391 i‡(
èsk
 =
NULL
 ||Åask->
°©us
 !
SCSI_STATUS_GOOD
) {

392 
	`LD_ISCSI_DPRINTF
(0,"failedÅo sendÑead16 command");

393 
î∫o
 = 
EIO
;

397 
	`mem˝y
(
buf
, &
èsk
->
d©aö
.
d©a
[
iscsi_fd_li°
[
fd
].
off£t
 - off£t], 
cou¡
);

398 
iscsi_fd_li°
[
fd
].
off£t
 +
cou¡
;

400 
	`scsi_‰ì_scsi_èsk
(
èsk
);

402  
cou¡
;

405  
	`ªÆ_ªad
(
fd
, 
buf
, 
cou¡
);

406 
	}
}

408 
	$ssize_t
 (*
ªÆ_¥ód
)(
fd
, *
buf
, 
size_t
 
cou¡
, 
off_t
 
off£t
);

409 
ssize_t
 
	$¥ód
(
fd
, *
buf
, 
size_t
 
cou¡
, 
off_t
 
off£t
) {

410 i‡((
iscsi_fd_li°
[
fd
].
is_iscsi
 =1 && iscsi_fd_li°[fd].
ö_Êight
 == 0)) {

411 
off_t
 
ﬁd_off£t
;

412 i‡((
ﬁd_off£t
 = 
	`l£ek
(
fd
, 0, 
SEEK_CUR
)) < 0) {

413 
î∫o
 = 
EIO
;

416 i‡(
	`l£ek
(
fd
, 
off£t
, 
SEEK_SET
) < 0) {

419 i‡(
	`ªad
(
fd
, 
buf
, 
cou¡
) < 0) {

420 
	`l£ek
(
fd
, 
ﬁd_off£t
, 
SEEK_SET
);

423 
	`l£ek
(
fd
, 
ﬁd_off£t
, 
SEEK_SET
);

424  
cou¡
;

426  
	`ªÆ_¥ód
(
fd
, 
buf
, 
cou¡
, 
off£t
);

427 
	}
}

429 
	$ssize_t
 (*
ªÆ_wrôe
)(
fd
, c⁄° *
buf
, 
size_t
 
cou¡
);

431 
ssize_t
 
	$wrôe
(
fd
, c⁄° *
buf
, 
size_t
 
cou¡
)

433 i‡((
iscsi_fd_li°
[
fd
].
is_iscsi
 =1Ë&& (iscsi_fd_li°[fd].
ö_Êight
 == 0)) {

434 
uöt64_t
 
off£t
;

435 
uöt64_t
 
num_blocks
, 
lba
;

436 
scsi_èsk
 *
èsk
;

438 i‡(
iscsi_fd_li°
[
fd
].
dup2fd
 >= 0) {

439  
	`wrôe
(
iscsi_fd_li°
[
fd
].
dup2fd
, 
buf
, 
cou¡
);

441 i‡(
iscsi_fd_li°
[
fd
].
off£t
%iscsi_fd_li°[fd].
block_size
) {

442 
î∫o
 = 
EINVAL
;

445 i‡(
cou¡
%
iscsi_fd_li°
[
fd
].
block_size
) {

446 
î∫o
 = 
EINVAL
;

450 
iscsi_fd_li°
[
fd
].
lbasd_ˇche_vÆid
 = 0;

452 
off£t
 = 
iscsi_fd_li°
[
fd
].offset;

453 
num_blocks
 = 
cou¡
/
iscsi_fd_li°
[
fd
].
block_size
;

454 
lba
 = 
off£t
 / 
iscsi_fd_li°
[
fd
].
block_size
;

457 i‡(
lba
 >
iscsi_fd_li°
[
fd
].
num_blocks
) {

461 i‡((
lba
 + 
num_blocks
Ë> 
iscsi_fd_li°
[
fd
].num_blocks) {

462 
num_blocks
 = 
iscsi_fd_li°
[
fd
].num_block†- 
lba
;

463 
cou¡
 = 
num_blocks
 * 
iscsi_fd_li°
[
fd
].
block_size
;

466 
iscsi_fd_li°
[
fd
].
ö_Êight
 = 1;

467 
	`LD_ISCSI_DPRINTF
(4,"wrôe16_sync:Üu¿%d,Üb®%"
PRIu64
",Çum_blocks: %"PRIu64", block_size: %d, off£t: %"PRIu64" cou¡: %lu",
iscsi_fd_li°
[
fd
].
lun
,
lba
,
num_blocks
,iscsi_fd_li°[fd].
block_size
,
off£t
,()
cou¡
);

468 
èsk
 = 
	`iscsi_wrôe16_sync
(
iscsi_fd_li°
[
fd
].
iscsi
, iscsi_fd_li°[fd].
lun
, 
lba
, (*Ë
buf
, 
cou¡
, iscsi_fd_li°[fd].
block_size
, 0, 0, 0, 0, 0);

469 
iscsi_fd_li°
[
fd
].
ö_Êight
 = 0;

470 i‡(
èsk
 =
NULL
 ||Åask->
°©us
 !
SCSI_STATUS_GOOD
) {

471 
	`LD_ISCSI_DPRINTF
(0,"failedÅo send write16 command");

472 
î∫o
 = 
EIO
;

476 
iscsi_fd_li°
[
fd
].
off£t
 +
cou¡
;

477 
	`scsi_‰ì_scsi_èsk
(
èsk
);

479  
cou¡
;

482  
	`ªÆ_wrôe
(
fd
, 
buf
, 
cou¡
);

483 
	}
}

485 
	$ssize_t
 (*
ªÆ_pwrôe
)(
fd
, c⁄° *
buf
, 
size_t
 
cou¡
, 
off_t
 
off£t
);

486 
ssize_t
 
	$pwrôe
(
fd
, c⁄° *
buf
, 
size_t
 
cou¡
, 
off_t
 
off£t
) {

487 i‡((
iscsi_fd_li°
[
fd
].
is_iscsi
 =1 && iscsi_fd_li°[fd].
ö_Êight
 == 0)) {

488 
off_t
 
ﬁd_off£t
;

489 i‡((
ﬁd_off£t
 = 
	`l£ek
(
fd
, 0, 
SEEK_CUR
)) < 0) {

490 
î∫o
 = 
EIO
;

493 i‡(
	`l£ek
(
fd
, 
off£t
, 
SEEK_SET
) < 0) {

496 i‡(
	`wrôe
(
fd
, 
buf
, 
cou¡
) < 0) {

497 
	`l£ek
(
fd
, 
ﬁd_off£t
, 
SEEK_SET
);

500 
	`l£ek
(
fd
, 
ﬁd_off£t
, 
SEEK_SET
);

501  
cou¡
;

503  
	`ªÆ_pwrôe
(
fd
, 
buf
, 
cou¡
, 
off£t
);

504 
	}
}

506 (*
ªÆ_dup2
)(
ﬁdfd
, 
√wfd
);

508 
	$dup2
(
ﬁdfd
, 
√wfd
)

510 i‡(
iscsi_fd_li°
[
√wfd
].
is_iscsi
) {

511  
	`ªÆ_dup2
(
ﬁdfd
, 
√wfd
);

514 
	`˛o£
(
√wfd
);

516 i‡(
iscsi_fd_li°
[
ﬁdfd
].
is_iscsi
 == 1) {

517 
ªt
;

518 i‡(
iscsi_fd_li°
[
ﬁdfd
].
dup2fd
 >= 0) {

519  
	`dup2
(
iscsi_fd_li°
[
ﬁdfd
].
dup2fd
, 
√wfd
);

522 
ªt
 = 
	`ªÆ_dup2
(
ﬁdfd
, 
√wfd
);

523 i‡(
ªt
 < 0) {

524  
ªt
;

527 
iscsi_fd_li°
[
√wfd
].
is_iscsi
 = 1;

528 
iscsi_fd_li°
[
√wfd
].
dup2fd
 = 
ﬁdfd
;

530  
√wfd
;

533  
	`ªÆ_dup2
(
ﬁdfd
, 
√wfd
);

534 
	}
}

536 #i‡
deföed
(
_LARGEFILE64_SOURCE
Ë&& 
_FILE_OFFSET_BITS
 != 64

538 (*
ªÆ_fx°©64
)(
vî
, 
fd
, 
°©64
 *
buf
);

540 
	$__fx°©64
(
vî
, 
fd
, 
°©64
 *
buf
)

542 i‡(
iscsi_fd_li°
[
fd
].
is_iscsi
 == 1) {

543 i‡(
iscsi_fd_li°
[
fd
].
dup2fd
 >= 0) {

544  
	`__fx°©64
(
vî
, 
iscsi_fd_li°
[
fd
].
dup2fd
, 
buf
);

547 
	`mem£t
(
buf
, 0, (
°©64
));

548 
buf
->
°_mode
 = 
S_IRUSR
 | 
S_IRGRP
 | 
S_IROTH
 | 
S_IFREG
;

549 
buf
->
°_size
 = 
iscsi_fd_li°
[
fd
].
num_blocks
 * iscsi_fd_li°[fd].
block_size
;

553  
	`ªÆ_fx°©64
(
vî
, 
fd
, 
buf
);

554 
	}
}

557 (*
ªÆ_lx°©64
)(
vî
, 
__c⁄°
 *
∑th
, 
°©64
 *
buf
);

559 
	$__lx°©64
(
vî
, c⁄° *
∑th
, 
°©64
 *
buf
)

561 i‡(!
	`°∫cmp
(
∑th
, "iscsi:", 6)) {

562 
fd
, 
ªt
;

564 
fd
 = 
	`›í64
(
∑th
, 0, 0);

565 i‡(
fd
 == -1) {

566  
fd
;

569 
ªt
 = 
	`__fx°©64
(
vî
, 
fd
, 
buf
);

570 
	`˛o£
(
fd
);

571  
ªt
;

574  
	`ªÆ_lx°©64
(
vî
, 
∑th
, 
buf
);

575 
	}
}

578 (*
ªÆ_x°©64
)(
vî
, 
__c⁄°
 *
∑th
, 
°©64
 *
buf
);

580 
	$__x°©64
(
vî
, c⁄° *
∑th
, 
°©64
 *
buf
)

582  
	`__lx°©64
(
vî
, 
∑th
, 
buf
);

583 
	}
}

587 
__©åibuã__
((
c⁄°ru˘‹
)Ë
	$_öô
()

589 
i
;

591 
i
 = 0; i < 
ISCSI_MAX_FD
; i++) {

592 
iscsi_fd_li°
[
i
].
dup2fd
 = -1;

595 i‡(
	`gëív
("LD_ISCSI_DEBUG"Ë!
NULL
) {

596 
debug
 = 
	`©oi
(
	`gëív
("LD_ISCSI_DEBUG"));

599 
ªÆ_›í
 = 
	`dlsym
(
RTLD_NEXT
, "open");

600 i‡(
ªÆ_›í
 =
NULL
) {

601 
	`LD_ISCSI_DPRINTF
(0,"FailedÅo dlsym(open)");

602 
	`exô
(10);

605 
ªÆ_˛o£
 = 
	`dlsym
(
RTLD_NEXT
, "close");

606 i‡(
ªÆ_˛o£
 =
NULL
) {

607 
	`LD_ISCSI_DPRINTF
(0,"FailedÅo dlsym(close)");

608 
	`exô
(10);

611 
ªÆ_fx°©
 = 
	`dlsym
(
RTLD_NEXT
, "__fxstat");

612 i‡(
ªÆ_fx°©
 =
NULL
) {

613 
	`LD_ISCSI_DPRINTF
(0,"FailedÅo dlsym(__fxstat)");

614 
	`exô
(10);

617 
ªÆ_lx°©
 = 
	`dlsym
(
RTLD_NEXT
, "__lxstat");

618 i‡(
ªÆ_lx°©
 =
NULL
) {

619 
	`LD_ISCSI_DPRINTF
(0,"FailedÅo dlsym(__lxstat)");

620 
	`exô
(10);

622 
ªÆ_x°©
 = 
	`dlsym
(
RTLD_NEXT
, "__xstat");

623 i‡(
ªÆ_x°©
 =
NULL
) {

624 
	`LD_ISCSI_DPRINTF
(0,"FailedÅo dlsym(__xstat)");

625 
	`exô
(10);

628 
ªÆ_l£ek
 = 
	`dlsym
(
RTLD_NEXT
, "lseek");

629 i‡(
ªÆ_l£ek
 =
NULL
) {

630 
	`LD_ISCSI_DPRINTF
(0,"FailedÅo dlsym(lseek)");

631 
	`exô
(10);

634 
ªÆ_ªad
 = 
	`dlsym
(
RTLD_NEXT
, "read");

635 i‡(
ªÆ_ªad
 =
NULL
) {

636 
	`LD_ISCSI_DPRINTF
(0,"FailedÅo dlsym(read)");

637 
	`exô
(10);

640 
ªÆ_¥ód
 = 
	`dlsym
(
RTLD_NEXT
, "pread");

641 i‡(
ªÆ_¥ód
 =
NULL
) {

642 
	`LD_ISCSI_DPRINTF
(0,"FailedÅo dlsym(pread)");

643 
	`exô
(10);

646 
ªÆ_wrôe
 = 
	`dlsym
(
RTLD_NEXT
, "write");

647 i‡(
ªÆ_wrôe
 =
NULL
) {

648 
	`LD_ISCSI_DPRINTF
(0,"FailedÅo dlsym(write)");

649 
	`exô
(10);

652 
ªÆ_pwrôe
 = 
	`dlsym
(
RTLD_NEXT
, "pwrite");

653 i‡(
ªÆ_pwrôe
 =
NULL
) {

654 
	`LD_ISCSI_DPRINTF
(0,"FailedÅo dlsym(pwrite)");

655 
	`exô
(10);

658 
ªÆ_dup2
 = 
	`dlsym
(
RTLD_NEXT
, "dup2");

659 i‡(
ªÆ_dup2
 =
NULL
) {

660 
	`LD_ISCSI_DPRINTF
(0,"FailedÅo dlsym(dup2)");

661 
	`exô
(10);

664 #i‡
	`deföed
(
_LARGEFILE64_SOURCE
Ë&& 
_FILE_OFFSET_BITS
 != 64

665 
ªÆ_fx°©64
 = 
	`dlsym
(
RTLD_NEXT
, "__fxstat64");

666 i‡(
ªÆ_fx°©64
 =
NULL
) {

667 
	`LD_ISCSI_DPRINTF
(0,"FailedÅo dlsym(__fxstat64)");

670 
ªÆ_lx°©64
 = 
	`dlsym
(
RTLD_NEXT
, "__lxstat64");

671 i‡(
ªÆ_lx°©64
 =
NULL
) {

672 
	`LD_ISCSI_DPRINTF
(0,"FailedÅo dlsym(_lxstat64)");

675 
ªÆ_x°©64
 = 
	`dlsym
(
RTLD_NEXT
, "__xstat64");

676 i‡(
ªÆ_x°©64
 =
NULL
) {

677 
	`LD_ISCSI_DPRINTF
(0,"FailedÅo dlsym(__xstat64)");

680 
	}
}

	@include/iscsi-private.h

17 #i‚de‡
__iscsi_¥iv©e_h__


18 
	#__iscsi_¥iv©e_h__


	)

20 
	~<°döt.h
>

21 
	~<time.h
>

23 #i‡
deföed
(
_WIN32
)

24 
	~<ba£tsd.h
>

25 
	#ssize_t
 
SSIZE_T


	)

28 #ifde‡
__˝lu•lus


32 #i‚de‡
disˇrd_c⁄°


33 
	#disˇrd_c⁄°
(
±r
Ë((*)((
öçå_t
)’å)))

	)

36 #i‚de‡
MIN


37 
	#MIN
(
a
, 
b
Ë((◊Ë< (b)Ë? (aË: (b))

	)

39 #i‚de‡
MAX


40 
	#MAX
(
a
, 
b
Ë((◊Ë> (b)Ë? (aË: (b))

	)

43 
	#ISCSI_RAW_HEADER_SIZE
 48

	)

44 
	#ISCSI_DIGEST_SIZE
 4

	)

46 
	#ISCSI_HEADER_SIZE
(
hdr_dige°
Ë(
ISCSI_RAW_HEADER_SIZE
 \

47 + (
hdr_dige°
 =
ISCSI_HEADER_DIGEST_NONE
?0:
ISCSI_DIGEST_SIZE
))

	)

49 
	#SMALL_ALLOC_MAX_FREE
 (128Ë

	)

51 
	siscsi_ö_pdu
 {

52 
iscsi_ö_pdu
 *
√xt
;

54 
hdr_pos
;

55 *
hdr
;

57 
d©a_pos
;

58 *
d©a
;

60 
iscsi_‰ì_iscsi_ö_pdu
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_ö_pdu
 *
ö
);

63 
	#CHAP_R_SIZE
 16

	)

66 
	#MAX_CHAP_C_LENGTH
 2048

	)

68 
	siscsi_c⁄ãxt
 {

69 
iscsi_å™•‹t
 *
drv
;

70 *
›aque
;

71 
iscsi_å™•‹t_ty≥
 
å™•‹t
;

73 
öôüt‹_«me
[
MAX_STRING_SIZE
+1];

74 
èrgë_«me
[
MAX_STRING_SIZE
+1];

75 
èrgë_addªss
[
MAX_STRING_SIZE
+1];

76 
c⁄√˘ed_p‹èl
[
MAX_STRING_SIZE
+1];

77 
p‹èl
[
MAX_STRING_SIZE
+1];

78 
Æüs
[
MAX_STRING_SIZE
+1];

79 
böd_öãrÁ˚s
[
MAX_STRING_SIZE
+1];

81 
u£r
[
MAX_STRING_SIZE
+1];

82 
∑sswd
[
MAX_STRING_SIZE
+1];

83 
ch≠_c
[
MAX_CHAP_C_LENGTH
+1];

85 
èrgë_u£r
[
MAX_STRING_SIZE
+1];

86 
èrgë_∑sswd
[
MAX_STRING_SIZE
+1];

87 
uöt32_t
 
èrgë_ch≠_i
;

88 
èrgë_ch≠_r
[
CHAP_R_SIZE
];

90 
îr‹_°rög
[
MAX_STRING_SIZE
+1];

92 
iscsi_£ssi⁄_ty≥
 
£ssi⁄_ty≥
;

93 
isid
[6];

94 
uöt32_t
 
ôt
;

95 
uöt32_t
 
cmd¢
;

96 
uöt32_t
 
mö_cmd¢_waôög
;

97 
uöt32_t
 
expcmd¢
;

98 
uöt32_t
 
maxcmd¢
;

99 
uöt32_t
 
°©¢
;

100 
iscsi_hódî_dige°
 
w™t_hódî_dige°
;

101 
iscsi_hódî_dige°
 
hódî_dige°
;

103 
fd
;

104 
is_c⁄√˘ed
;

105 
is_c‹ked
;

107 
t˝_u£r_timeout
;

108 
t˝_kìp˙t
;

109 
t˝_kìpötvl
;

110 
t˝_kìpidÀ
;

111 
t˝_syn˙t
;

112 
t˝_n⁄blockög
;

114 
cuºít_pha£
;

115 
√xt_pha£
;

116 
	#ISCSI_LOGIN_SECNEG_PHASE_OFFER_CHAP
 0

	)

117 
	#ISCSI_LOGIN_SECNEG_PHASE_SELECT_ALGORITHM
 1

	)

118 
	#ISCSI_LOGIN_SECNEG_PHASE_SEND_RESPONSE
 2

	)

119 
£˙eg_pha£
;

120 
logö_©ãm±s
;

121 
is_loggedö
;

122 
böd_öãrÁ˚s_˙t
;

123 
n›s_ö_Êight
;

125 
ch≠_a
;

126 
ch≠_i
;

128 
iscsi_comm™d_cb
 
sockë_°©us_cb
;

129 *
c⁄√˘_d©a
;

131 
iscsi_pdu
 *
outqueue
;

132 
iscsi_pdu
 *
outqueue_cuºít
;

133 
iscsi_pdu
 *
waôpdu
;

135 
iscsi_ö_pdu
 *
öcomög
;

137 
uöt32_t
 
max_bur°_Àngth
;

138 
uöt32_t
 
fú°_bur°_Àngth
;

139 
uöt32_t
 
öôüt‹_max_ªcv_d©a_£gmít_Àngth
;

140 
uöt32_t
 
èrgë_max_ªcv_d©a_£gmít_Àngth
;

141 
iscsi_öôül_r2t
 
w™t_öôül_r2t
;

142 
iscsi_öôül_r2t
 
u£_öôül_r2t
;

143 
iscsi_immedüã_d©a
 
w™t_immedüã_d©a
;

144 
iscsi_immedüã_d©a
 
u£_immedüã_d©a
;

146 
lun
;

147 
no_auto_ªc⁄√˘
;

148 
ªc⁄√˘_de„ºed
;

149 
ªc⁄√˘_max_ªåõs
;

150 
≥ndög_ªc⁄√˘
;

152 
log_Àvñ
;

153 
iscsi_log_‚
 
log_‚
;

155 
mÆlocs
;

156 
ªÆlocs
;

157 
‰ìs
;

158 
smÆlocs
;

159 * 
smÆloc_±rs
[
SMALL_ALLOC_MAX_FREE
];

160 
smÆloc_‰ì
;

161 
size_t
 
smÆloc_size
;

162 
ˇche_Æloˇti⁄s
;

164 
time_t
 
√xt_ªc⁄√˘
;

165 
scsi_timeout
;

166 
iscsi_c⁄ãxt
 *
ﬁd_iscsi
;

167 
ªåy_˙t
;

168 
no_ua_⁄_ªc⁄√˘
;

171 
	#ISCSI_PDU_IMMEDIATE
 0x40

	)

173 
	#ISCSI_PDU_TEXT_FINAL
 0x80

	)

174 
	#ISCSI_PDU_TEXT_CONTINUE
 0x40

	)

176 
	#ISCSI_PDU_LOGIN_TRANSIT
 0x80

	)

177 
	#ISCSI_PDU_LOGIN_CONTINUE
 0x40

	)

178 
	#ISCSI_PDU_LOGIN_CSG_SECNEG
 0x00

	)

179 
	#ISCSI_PDU_LOGIN_CSG_OPNEG
 0x04

	)

180 
	#ISCSI_PDU_LOGIN_CSG_FF
 0x0c

	)

181 
	#ISCSI_PDU_LOGIN_NSG_SECNEG
 0x00

	)

182 
	#ISCSI_PDU_LOGIN_NSG_OPNEG
 0x01

	)

183 
	#ISCSI_PDU_LOGIN_NSG_FF
 0x03

	)

185 
	#ISCSI_PDU_SCSI_FINAL
 0x80

	)

186 
	#ISCSI_PDU_SCSI_READ
 0x40

	)

187 
	#ISCSI_PDU_SCSI_WRITE
 0x20

	)

188 
	#ISCSI_PDU_SCSI_ATTR_UNTAGGED
 0x00

	)

189 
	#ISCSI_PDU_SCSI_ATTR_SIMPLE
 0x01

	)

190 
	#ISCSI_PDU_SCSI_ATTR_ORDERED
 0x02

	)

191 
	#ISCSI_PDU_SCSI_ATTR_HEADOFQUEUE
 0x03

	)

192 
	#ISCSI_PDU_SCSI_ATTR_ACA
 0x04

	)

194 
	#ISCSI_PDU_DATA_FINAL
 0x80

	)

195 
	#ISCSI_PDU_DATA_ACK_REQUESTED
 0x40

	)

196 
	#ISCSI_PDU_DATA_BIDIR_OVERFLOW
 0x10

	)

197 
	#ISCSI_PDU_DATA_BIDIR_UNDERFLOW
 0x08

	)

198 
	#ISCSI_PDU_DATA_RESIDUAL_OVERFLOW
 0x04

	)

199 
	#ISCSI_PDU_DATA_RESIDUAL_UNDERFLOW
 0x02

	)

200 
	#ISCSI_PDU_DATA_CONTAINS_STATUS
 0x01

	)

202 
	eiscsi_›code
 {

203 
ISCSI_PDU_NOP_OUT
 = 0x00,

204 
ISCSI_PDU_SCSI_REQUEST
 = 0x01,

205 
ISCSI_PDU_SCSI_TASK_MANAGEMENT_REQUEST
 = 0x02,

206 
ISCSI_PDU_LOGIN_REQUEST
 = 0x03,

207 
ISCSI_PDU_TEXT_REQUEST
 = 0x04,

208 
ISCSI_PDU_DATA_OUT
 = 0x05,

209 
ISCSI_PDU_LOGOUT_REQUEST
 = 0x06,

210 
ISCSI_PDU_NOP_IN
 = 0x20,

211 
ISCSI_PDU_SCSI_RESPONSE
 = 0x21,

212 
ISCSI_PDU_SCSI_TASK_MANAGEMENT_RESPONSE
 = 0x22,

213 
ISCSI_PDU_LOGIN_RESPONSE
 = 0x23,

214 
ISCSI_PDU_TEXT_RESPONSE
 = 0x24,

215 
ISCSI_PDU_DATA_IN
 = 0x25,

216 
ISCSI_PDU_LOGOUT_RESPONSE
 = 0x26,

217 
ISCSI_PDU_R2T
 = 0x31,

218 
ISCSI_PDU_ASYNC_MSG
 = 0x32,

219 
ISCSI_PDU_REJECT
 = 0x3f,

220 
ISCSI_PDU_NO_PDU
 = 0xff

223 
	siscsi_scsi_cbd©a
 {

224 
iscsi_comm™d_cb
 
ˇŒback
;

225 *
¥iv©e_d©a
;

226 
scsi_èsk
 *
èsk
;

229 
	siscsi_pdu
 {

230 
iscsi_pdu
 *
√xt
;

233 
	#ISCSI_PDU_DELETE_WHEN_SENT
 0x00000001

	)

237 
	#ISCSI_PDU_DROP_ON_RECONNECT
 0x00000004

	)

239 
	#ISCSI_PDU_CORK_WHEN_SENT
 0x00000008

	)

241 
uöt32_t
 
Êags
;

243 
uöt32_t
 
lun
;

244 
uöt32_t
 
ôt
;

245 
uöt32_t
 
cmd¢
;

246 
uöt32_t
 
d©a¢
;

247 
iscsi_›code
 
ª•⁄£_›code
;

249 
iscsi_comm™d_cb
 
ˇŒback
;

250 *
¥iv©e_d©a
;

253 
iscsi_d©a
 
outd©a
;

254 
size_t
 
outd©a_wrôãn
;

257 
uöt32_t
 
∑ylﬂd_off£t
;

258 
uöt32_t
 
∑ylﬂd_Àn
;

259 
uöt32_t
 
∑ylﬂd_wrôãn
;

262 
iscsi_d©a
 
öd©a
;

264 
iscsi_scsi_cbd©a
 
scsi_cbd©a
;

265 
time_t
 
scsi_timeout
;

266 
uöt32_t
 
expx„æí
;

269 
iscsi_pdu
 *
iscsi_Æloˇã_pdu
(
iscsi_c⁄ãxt
 *
iscsi
,

270 
iscsi_›code
 
›code
,

271 
iscsi_›code
 
ª•⁄£_›code
,

272 
uöt32_t
 
ôt
,

273 
uöt32_t
 
Êags
);

274 
iscsi_‰ì_pdu
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_pdu
 *
pdu
);

275 
iscsi_pdu_£t_pduÊags
(
iscsi_pdu
 *
pdu
, 
Êags
);

276 
iscsi_pdu_£t_immedüã
(
iscsi_pdu
 *
pdu
);

277 
iscsi_pdu_£t_ât
(
iscsi_pdu
 *
pdu
, 
uöt32_t
 
ât
);

278 
iscsi_pdu_£t_cmd¢
(
iscsi_pdu
 *
pdu
, 
uöt32_t
 
cmd¢
);

279 
iscsi_pdu_£t_rcmd¢
(
iscsi_pdu
 *
pdu
, 
uöt32_t
 
rcmd¢
);

280 
iscsi_pdu_£t_lun
(
iscsi_pdu
 *
pdu
, 
uöt32_t
 
lun
);

281 
iscsi_pdu_£t_exp°©¢
(
iscsi_pdu
 *
pdu
, 
uöt32_t
 
exp°©¢¢
);

282 
iscsi_pdu_£t_expx„æí
(
iscsi_pdu
 *
pdu
, 
uöt32_t
 
expx„æí
);

283 
iscsi_pdu_£t_ôt
(
iscsi_pdu
 *
pdu
, 
uöt32_t
 
ôt
);

284 
iscsi_pdu_£t_rôt
(
iscsi_pdu
 *
pdu
, 
uöt32_t
 
rôt
);

285 
iscsi_pdu_£t_d©a¢
(
iscsi_pdu
 *
pdu
, 
uöt32_t
 
d©a¢
);

286 
iscsi_pdu_£t_buf„roff£t
(
iscsi_pdu
 *
pdu
, 
uöt32_t
 
buf„roff£t
);

287 
iscsi_ˇn˚l_pdus
(
iscsi_c⁄ãxt
 *
iscsi
);

288 
iscsi_pdu_add_d©a
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_pdu
 *
pdu
,

289 *
d±r
, 
dsize
);

290 
iscsi_queue_pdu
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_pdu
 *
pdu
);

291 
iscsi_add_d©a
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_d©a
 *
d©a
,

292 *
d±r
, 
dsize
, 
pduÆignmít
);

294 
scsi_èsk
;

295 
iscsi_pdu_£t_cdb
(
iscsi_pdu
 *
pdu
, 
scsi_èsk
 *
èsk
);

297 
iscsi_gë_pdu_d©a_size
(c⁄° *
hdr
);

298 
iscsi_gë_pdu_∑ddög_size
(c⁄° *
hdr
);

299 
iscsi_¥o˚ss_pdu
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_ö_pdu
 *
ö
);

301 
iscsi_¥o˚ss_logö_ª∂y
(
iscsi_c⁄ãxt
 *
iscsi
,

302 
iscsi_pdu
 *
pdu
,

303 
iscsi_ö_pdu
 *
ö
);

304 
iscsi_¥o˚ss_ãxt_ª∂y
(
iscsi_c⁄ãxt
 *
iscsi
,

305 
iscsi_pdu
 *
pdu
,

306 
iscsi_ö_pdu
 *
ö
);

307 
iscsi_¥o˚ss_logout_ª∂y
(
iscsi_c⁄ãxt
 *
iscsi
,

308 
iscsi_pdu
 *
pdu
,

309 
iscsi_ö_pdu
 *
ö
);

310 
iscsi_¥o˚ss_scsi_ª∂y
(
iscsi_c⁄ãxt
 *
iscsi
,

311 
iscsi_pdu
 *
pdu
,

312 
iscsi_ö_pdu
 *
ö
);

313 
iscsi_¥o˚ss_scsi_d©a_ö
(
iscsi_c⁄ãxt
 *
iscsi
,

314 
iscsi_pdu
 *
pdu
,

315 
iscsi_ö_pdu
 *
ö
,

316 *
is_föished
);

317 
iscsi_¥o˚ss_n›_out_ª∂y
(
iscsi_c⁄ãxt
 *
iscsi
,

318 
iscsi_pdu
 *
pdu
,

319 
iscsi_ö_pdu
 *
ö
);

320 
iscsi_¥o˚ss_èsk_mgmt_ª∂y
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_pdu
 *
pdu
,

321 
iscsi_ö_pdu
 *
ö
);

322 
iscsi_¥o˚ss_r2t
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_pdu
 *
pdu
,

323 
iscsi_ö_pdu
 *
ö
);

324 
iscsi_¥o˚ss_ªje˘
(
iscsi_c⁄ãxt
 *
iscsi
,

325 
iscsi_ö_pdu
 *
ö
);

326 
iscsi_£nd_èrgë_n›_out
(
iscsi_c⁄ãxt
 *
iscsi
, 
uöt32_t
 
ât
, uöt32_à
lun
);

328 #i‡
deföed
(
_WIN32
)

329 
iscsi_£t_îr‹
(
iscsi_c⁄ãxt
 *
iscsi
, c⁄° *
îr‹_°rög
,

332 
iscsi_£t_îr‹
(
iscsi_c⁄ãxt
 *
iscsi
, c⁄° *
îr‹_°rög
,

333 ...Ë
__©åibuã__
((
f‹m©
(
¥ötf
, 2, 3)));

336 
scsi_iove˘‹
 *
iscsi_gë_scsi_èsk_iove˘‹_ö
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_ö_pdu
 *
ö
);

337 
scsi_iove˘‹
 *
iscsi_gë_scsi_èsk_iove˘‹_out
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_pdu
 *
pdu
);

338 
scsi_èsk_ª£t_iov
(
scsi_iove˘‹
 *
iove˘‹
);

340 * 
iscsi_mÆloc
(
iscsi_c⁄ãxt
 *
iscsi
, 
size_t
 
size
);

341 * 
iscsi_zmÆloc
(
iscsi_c⁄ãxt
 *
iscsi
, 
size_t
 
size
);

342 * 
iscsi_ªÆloc
(
iscsi_c⁄ãxt
 *
iscsi
, * 
±r
, 
size_t
 
size
);

343 
iscsi_‰ì
(
iscsi_c⁄ãxt
 *
iscsi
, * 
±r
);

344 * 
iscsi_°rdup
(
iscsi_c⁄ãxt
 *
iscsi
, c⁄° * 
°r
);

345 * 
iscsi_smÆloc
(
iscsi_c⁄ãxt
 *
iscsi
, 
size_t
 
size
);

346 * 
iscsi_szmÆloc
(
iscsi_c⁄ãxt
 *
iscsi
, 
size_t
 
size
);

347 
iscsi_s‰ì
(
iscsi_c⁄ãxt
 *
iscsi
, * 
±r
);

349 
uöt32_t
 
¸c32c
(
uöt8_t
 *
buf
, 
Àn
);

351 
scsi_èsk
 *
iscsi_scsi_gë_èsk_‰om_pdu
(
iscsi_pdu
 *
pdu
);

353 
iscsi_de¸emít_iÁ˚_º
();

355 
	#ISCSI_LOG
(
iscsi
, 
Àvñ
, 
f‹m©
, ...) \

357 i‡(
Àvñ
 <
iscsi
->
log_Àvñ
 && iscsi->
log_‚
) { \

358 
	`iscsi_log_mesßge
(
iscsi
, 
Àvñ
, 
f‹m©
, ## 
__VA_ARGS__
); \

360 } 0)

	)

363 
iscsi_log_mesßge
(
iscsi_c⁄ãxt
 *
iscsi
, 
Àvñ
, c⁄° *
f‹m©
, ...);

366 
iscsi_add_to_outqueue
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_pdu
 *
pdu
);

368 
iscsi_£rül32_com∑ª
(
uöt32_t
 
s1
, uöt32_à
s2
);

370 
uöt32_t
 
iscsi_ôt_po°_ö¸emít
(
iscsi_c⁄ãxt
 *
iscsi
);

372 
iscsi_timeout_sˇn
(
iscsi_c⁄ãxt
 *
iscsi
);

374 
iscsi_ªc⁄√˘_cb
(
iscsi_c⁄ãxt
 *
iscsi
 
_U_
, 
°©us
,

375 *
comm™d_d©a
, *
¥iv©e_d©a
);

377 
iscsi_pdu
 *
iscsi_t˝_√w_pdu
(
iscsi_c⁄ãxt
 *
iscsi
, 
size_t
 
size
);

379 
iscsi_öô_t˝_å™•‹t
(
iscsi_c⁄ãxt
 *
iscsi
);

381 
iscsi_t˝_‰ì_pdu
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_pdu
 *
pdu
);

383 
iscsi_£rvi˚_ªc⁄√˘_if_loggedö
(
iscsi_c⁄ãxt
 *
iscsi
);

385 
iscsi_dump_pdu_hódî
(
iscsi_c⁄ãxt
 *
iscsi
, *
d©a
);

387 
sockë_addªss
;

389 
	siscsi_å™•‹t
 {

390 (*
c⁄√˘
)(
iscsi_c⁄ãxt
 *
iscsi
, 
sockë_addªss
 *
ß
, 
ai_Ámûy
);

391 (*
queue_pdu
)(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_pdu
 *
pdu
);

392 
iscsi_pdu
* (*
√w_pdu
)(
iscsi_c⁄ãxt
 *
iscsi
, 
size_t
 
size
);

393 (*
disc⁄√˘
)(
iscsi_c⁄ãxt
 *
iscsi
);

394 (*
‰ì_pdu
)(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_pdu
 *
pdu
);

395 (*
£rvi˚
)(
iscsi_c⁄ãxt
 *
iscsi
, 
ªvíts
);

396 (*
gë_fd
)(
iscsi_c⁄ãxt
 *
iscsi
);

397 (*
which_evíts
)(
iscsi_c⁄ãxt
 *
iscsi
);

398 } 
	tiscsi_å™•‹t
;

400 #ifde‡
__˝lu•lus


	@include/iscsi.h

17 #i‚de‡
__iscsi_h__


18 
	#__iscsi_h__


	)

20 
	~<°döt.h
>

21 
	~<sys/ty≥s.h
>

23 #i‡
deföed
(
_WIN32
)

24 
	#EXTERN
 
	`__de˛•ec
–
dŒexp‹t
 )

	)

26 
	#EXTERN


	)

29 #ifde‡
__˝lu•lus


34 
iscsi_c⁄ãxt
;

35 
sockaddr
;

36 
scsi_iovec
;

39 
	#LIBISCSI_API_VERSION
 (20170105)

	)

42 
	#LIBISCSI_FEATURE_IOVECTOR
 (1)

	)

43 
	#LIBISCSI_FEATURE_NOP_COUNTER
 (1)

	)

44 
	#LIBISCSI_FEATURE_ISER
 (1)

	)

46 
	#MAX_STRING_SIZE
 (255)

	)

51 
	#ISCSI_URL_SYNTAX
 "\"iscsi://[<username>[%<password>]@]" \

52 "<ho°>[:<p‹t>]/<èrgë-iqn>/<lun>\""

	)

53 
	#ISCSI_PORTAL_URL_SYNTAX
 "\"iscsi://[<username>[%<password>]@]" \

54 "<ho°>[:<p‹t>]\""

	)

56 
	eiscsi_å™•‹t_ty≥
 {

57 
TCP_TRANSPORT
 = 0,

58 
ISER_TRANSPORT
 = 1

61 
EXTERN
 
iscsi_£t_ˇche_Æloˇti⁄s
(
iscsi_c⁄ãxt
 *
iscsi
, 
ˇ
);

70 
EXTERN
 
iscsi_gë_fd
(
iscsi_c⁄ãxt
 *
iscsi
);

82 
EXTERN
 
iscsi_which_evíts
(
iscsi_c⁄ãxt
 *
iscsi
);

87 
EXTERN
 
iscsi_£rvi˚
(
iscsi_c⁄ãxt
 *
iscsi
, 
ªvíts
);

91 
EXTERN
 
iscsi_queue_Àngth
(
iscsi_c⁄ãxt
 *
iscsi
);

95 
EXTERN
 
iscsi_out_queue_Àngth
(
iscsi_c⁄ãxt
 *
iscsi
);

138 
EXTERN
 
iscsi_£t_timeout
(
iscsi_c⁄ãxt
 *
iscsi
, 
timeout
);

144 
EXTERN
 
iscsi_£t_t˝_kì∑live
(
iscsi_c⁄ãxt
 *
iscsi
, 
idÀ
, 
cou¡
, 
öãrvÆ
);

146 
	siscsi_uæ
 {

147 
p‹èl
[
MAX_STRING_SIZE
 + 1];

148 
èrgë
[
MAX_STRING_SIZE
 + 1];

149 
u£r
[
MAX_STRING_SIZE
 + 1];

150 
∑sswd
[
MAX_STRING_SIZE
 + 1];

151 
èrgë_u£r
[
MAX_STRING_SIZE
 + 1];

152 
èrgë_∑sswd
[
MAX_STRING_SIZE
 + 1];

153 
lun
;

154 
iscsi_c⁄ãxt
 *
iscsi
;

155 
iscsi_å™•‹t_ty≥
 
å™•‹t
;

165 
	eiscsi_immedüã_d©a
 {

166 
ISCSI_IMMEDIATE_DATA_NO
 = 0,

167 
ISCSI_IMMEDIATE_DATA_YES
 = 1

169 
EXTERN
 
iscsi_£t_immedüã_d©a
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_immedüã_d©a
 
immedüã_d©a
);

178 
	eiscsi_öôül_r2t
 {

179 
ISCSI_INITIAL_R2T_NO
 = 0,

180 
ISCSI_INITIAL_R2T_YES
 = 1

182 
EXTERN
 

183 
iscsi_£t_öôül_r2t
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_öôül_r2t
 
öôül_r2t
);

205 
EXTERN
 
iscsi_uæ
 *
iscsi_∑r£_fuŒ_uæ
(
iscsi_c⁄ãxt
 *
iscsi
, c⁄° *
uæ
);

206 
EXTERN
 
iscsi_de°roy_uæ
(
iscsi_uæ
 *iscsi_url);

226 
EXTERN
 
iscsi_uæ
 *

227 
iscsi_∑r£_p‹èl_uæ
(
iscsi_c⁄ãxt
 *
iscsi
, c⁄° *
uæ
);

232 
EXTERN
 c⁄° *
iscsi_gë_îr‹
(
iscsi_c⁄ãxt
 *
iscsi
);

242 
EXTERN
 
iscsi_c⁄ãxt
 *
iscsi_¸óã_c⁄ãxt
(c⁄° *
öôüt‹_«me
);

253 
EXTERN
 
iscsi_de°roy_c⁄ãxt
(
iscsi_c⁄ãxt
 *
iscsi
);

264 
EXTERN
 
iscsi_öô_å™•‹t
(
iscsi_c⁄ãxt
 *
iscsi
,

265 
iscsi_å™•‹t_ty≥
 
å™•‹t
);

274 
EXTERN
 
iscsi_£t_Æüs
(
iscsi_c⁄ãxt
 *
iscsi
, c⁄° *
Æüs
);

286 
EXTERN
 
iscsi_£t_èrgë«me
(
iscsi_c⁄ãxt
 *
iscsi
, c⁄° *
èrgë«me
);

292 
EXTERN
 c⁄° *
iscsi_gë_èrgë_addªss
(
iscsi_c⁄ãxt
 *
iscsi
);

298 
	eiscsi_£ssi⁄_ty≥
 {

299 
ISCSI_SESSION_DISCOVERY
 = 1,

300 
ISCSI_SESSION_NORMAL
 = 2

311 
EXTERN
 
iscsi_£t_£ssi⁄_ty≥
(
iscsi_c⁄ãxt
 *
iscsi
,

312 
iscsi_£ssi⁄_ty≥
 
£ssi⁄_ty≥
);

318 
	eiscsi_hódî_dige°
 {

319 
ISCSI_HEADER_DIGEST_NONE
 = 0,

320 
ISCSI_HEADER_DIGEST_NONE_CRC32C
 = 1,

321 
ISCSI_HEADER_DIGEST_CRC32C_NONE
 = 2,

322 
ISCSI_HEADER_DIGEST_CRC32C
 = 3,

323 
ISCSI_HEADER_DIGEST_LAST
 = 
ISCSI_HEADER_DIGEST_CRC32C


335 
EXTERN
 
iscsi_£t_hódî_dige°
(
iscsi_c⁄ãxt
 *
iscsi
,

336 
iscsi_hódî_dige°
 
hódî_dige°
);

341 
EXTERN
 
iscsi_£t_öôüt‹_u£∫ame_pwd
(
iscsi_c⁄ãxt
 *
iscsi
,

342 c⁄° *
u£r
,

343 c⁄° *
∑sswd
);

351 
EXTERN
 
iscsi_£t_èrgë_u£∫ame_pwd
(
iscsi_c⁄ãxt
 *
iscsi
,

352 c⁄° *
u£r
,

353 c⁄° *
∑sswd
);

358 
EXTERN
 
iscsi_is_logged_ö
(
iscsi_c⁄ãxt
 *
iscsi
);

361 
	escsi_°©us
 {

362 
SCSI_STATUS_GOOD
 = 0,

363 
SCSI_STATUS_CHECK_CONDITION
 = 2,

364 
SCSI_STATUS_CONDITION_MET
 = 4,

365 
SCSI_STATUS_BUSY
 = 8,

366 
SCSI_STATUS_RESERVATION_CONFLICT
 = 0x18,

367 
SCSI_STATUS_TASK_SET_FULL
 = 0x28,

368 
SCSI_STATUS_ACA_ACTIVE
 = 0x30,

369 
SCSI_STATUS_TASK_ABORTED
 = 0x40,

370 
SCSI_STATUS_REDIRECT
 = 0x101,

371 
SCSI_STATUS_CANCELLED
 = 0x0f000000,

372 
SCSI_STATUS_ERROR
 = 0x0f000001,

373 
SCSI_STATUS_TIMEOUT
 = 0x0f000002

381 (*
iscsi_comm™d_cb
)(
	tiscsi_c⁄ãxt
 *
	tiscsi
, 
	t°©us
,

382 *
	tcomm™d_d©a
, *
	t¥iv©e_d©a
);

409 
EXTERN
 
iscsi_c⁄√˘_async
(
iscsi_c⁄ãxt
 *
iscsi
, c⁄° *
p‹èl
,

410 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
);

420 
EXTERN
 
iscsi_c⁄√˘_sync
(
iscsi_c⁄ãxt
 *
iscsi
, c⁄° *
p‹èl
);

448 
EXTERN
 
iscsi_fuŒ_c⁄√˘_async
(
iscsi_c⁄ãxt
 *
iscsi
, c⁄° *
p‹èl
,

449 
lun
, 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
);

460 
EXTERN
 
iscsi_fuŒ_c⁄√˘_sync
(
iscsi_c⁄ãxt
 *
iscsi
, c⁄° *
p‹èl
,

461 
lun
);

471 
EXTERN
 
iscsi_disc⁄√˘
(
iscsi_c⁄ãxt
 *
iscsi
);

483 
EXTERN
 
iscsi_ªc⁄√˘
(
iscsi_c⁄ãxt
 *
iscsi
);

493 
EXTERN
 
iscsi_ªc⁄√˘_sync
(
iscsi_c⁄ãxt
 *
iscsi
);

510 
EXTERN
 
iscsi_logö_async
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_comm™d_cb
 
cb
,

511 *
¥iv©e_d©a
);

520 
EXTERN
 
iscsi_logö_sync
(
iscsi_c⁄ãxt
 *
iscsi
);

537 
EXTERN
 
iscsi_logout_async
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_comm™d_cb
 
cb
,

538 *
¥iv©e_d©a
);

547 
EXTERN
 
iscsi_logout_sync
(
iscsi_c⁄ãxt
 *
iscsi
);

550 
	siscsi_èrgë_p‹èl
 {

551 
iscsi_èrgë_p‹èl
 *
√xt
;

552 c⁄° *
p‹èl
;

555 
	siscsi_discovîy_addªss
 {

556 
iscsi_discovîy_addªss
 *
√xt
;

557 c⁄° *
èrgë_«me
;

558 
iscsi_èrgë_p‹èl
 *
p‹èls
;

581 
EXTERN
 
iscsi_discovîy_async
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_comm™d_cb
 
cb
,

582 *
¥iv©e_d©a
);

594 
EXTERN
 
iscsi_discovîy_addªss
 *
iscsi_discovîy_sync
(

595 
iscsi_c⁄ãxt
 *
iscsi
);

599 
EXTERN
 
iscsi_‰ì_discovîy_d©a
(
iscsi_c⁄ãxt
 *
iscsi
,

600 
iscsi_discovîy_addªss
 *
da
);

621 
EXTERN
 
iscsi_n›_out_async
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_comm™d_cb
 
cb
,

622 *
d©a
, 
Àn
, *
¥iv©e_d©a
);

626 
EXTERN
 
iscsi_gë_n›s_ö_Êight
(
iscsi_c⁄ãxt
 *
iscsi
);

628 
scsi_èsk
;

629 
scsi_£n£
;

631 
	eiscsi_èsk_mgmt_funcs
 {

632 
ISCSI_TM_ABORT_TASK
 = 0x01,

633 
ISCSI_TM_ABORT_TASK_SET
 = 0x02,

634 
ISCSI_TM_CLEAR_ACA
 = 0x03,

635 
ISCSI_TM_CLEAR_TASK_SET
 = 0x04,

636 
ISCSI_TM_LUN_RESET
 = 0x05,

637 
ISCSI_TM_TARGET_WARM_RESET
 = 0x06,

638 
ISCSI_TM_TARGET_COLD_RESET
 = 0x07,

639 
ISCSI_TM_TASK_REASSIGN
 = 0x08

642 
	eiscsi_èsk_mgmt_ª•⁄£
 {

643 
ISCSI_TMR_FUNC_COMPLETE
 = 0x0,

644 
ISCSI_TMR_TASK_DOES_NOT_EXIST
 = 0x1,

645 
ISCSI_TMR_LUN_DOES_NOT_EXIST
 = 0x2,

646 
ISCSI_TMR_TASK_STILL_ALLEGIANT
 = 0x3,

647 
ISCSI_TMR_TASK_ALLEGIANCE_REASS_NOT_SUPPORTED
 = 0x4,

648 
ISCSI_TMR_TMF_NOT_SUPPORTED
 = 0x5,

649 
ISCSI_TMR_FUNC_AUTH_FAILED
 = 0x6,

650 
ISCSI_TMR_FUNC_REJECTED
 = 0xFF

676 
EXTERN
 

677 
iscsi_èsk_mgmt_async
(
iscsi_c⁄ãxt
 *
iscsi
,

678 
lun
, 
iscsi_èsk_mgmt_funcs
 
fun˘i⁄
,

679 
uöt32_t
 
rôt
, uöt32_à
rcmds˙
,

680 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
);

682 
EXTERN
 

683 
iscsi_èsk_mgmt_ab‹t_èsk_async
(
iscsi_c⁄ãxt
 *
iscsi
,

684 
scsi_èsk
 *
èsk
,

685 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
);

686 
EXTERN
 

687 
iscsi_èsk_mgmt_ab‹t_èsk_£t_async
(
iscsi_c⁄ãxt
 *
iscsi
,

688 
uöt32_t
 
lun
,

689 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
);

690 
EXTERN
 

691 
iscsi_èsk_mgmt_lun_ª£t_async
(
iscsi_c⁄ãxt
 *
iscsi
,

692 
uöt32_t
 
lun
,

693 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
);

694 
EXTERN
 

695 
iscsi_èsk_mgmt_èrgë_w¨m_ª£t_async
(
iscsi_c⁄ãxt
 *
iscsi
,

696 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
);

697 
EXTERN
 

698 
iscsi_èsk_mgmt_èrgë_cﬁd_ª£t_async
(
iscsi_c⁄ãxt
 *
iscsi
,

699 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
);

710 
EXTERN
 

711 
iscsi_èsk_mgmt_sync
(
iscsi_c⁄ãxt
 *
iscsi
,

712 
lun
, 
iscsi_èsk_mgmt_funcs
 
fun˘i⁄
,

713 
uöt32_t
 
rôt
, uöt32_à
rcmds˙
);

715 
EXTERN
 

716 
iscsi_èsk_mgmt_ab‹t_èsk_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
scsi_èsk
 *
èsk
);

718 
EXTERN
 

719 
iscsi_èsk_mgmt_ab‹t_èsk_£t_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
uöt32_t
 
lun
);

721 
EXTERN
 

722 
iscsi_èsk_mgmt_lun_ª£t_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
uöt32_t
 
lun
);

724 
EXTERN
 

725 
iscsi_èsk_mgmt_èrgë_w¨m_ª£t_sync
(
iscsi_c⁄ãxt
 *
iscsi
);

727 
EXTERN
 

728 
iscsi_èsk_mgmt_èrgë_cﬁd_ª£t_sync
(
iscsi_c⁄ãxt
 *
iscsi
);

752 
	siscsi_d©a
 {

753 
size_t
 
size
;

754 *
d©a
;

766 
EXTERN
 

767 
iscsi_£t_isid_oui
(
iscsi_c⁄ãxt
 *
iscsi
, 
uöt32_t
 
oui
, uöt32_à
quÆifõr
);

768 
EXTERN
 

769 
iscsi_£t_isid_í
(
iscsi_c⁄ãxt
 *
iscsi
, 
uöt32_t
 
í
, uöt32_à
quÆifõr
);

770 
EXTERN
 

771 
iscsi_£t_isid_øndom
(
iscsi_c⁄ãxt
 *
iscsi
, 
uöt32_t
 
∫d
, uöt32_à
quÆifõr
);

772 
EXTERN
 

773 
iscsi_£t_isid_ª£rved
(
iscsi_c⁄ãxt
 *
iscsi
);

776 
scsi_mode_∑ge
;

790 
EXTERN
 
iscsi_scsi_comm™d_async
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

791 
scsi_èsk
 *
èsk
, 
iscsi_comm™d_cb
 
cb
,

792 
iscsi_d©a
 *
d©a
, *
¥iv©e_d©a
);

800 
EXTERN
 
scsi_èsk
 *

801 
iscsi_ªp‹éuns_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
ªp‹t_ty≥
,

802 
Æloc_Àn
, 
iscsi_comm™d_cb
 
cb
,

803 *
¥iv©e_d©a
);

804 
EXTERN
 
scsi_èsk
 *

805 
iscsi_ã°unôªady_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

806 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
);

807 
EXTERN
 
scsi_èsk
 *

808 
iscsi_öquúy_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
evpd
,

809 
∑ge_code
, 
maxsize
, 
iscsi_comm™d_cb
 
cb
,

810 *
¥iv©e_d©a
);

811 
EXTERN
 
scsi_èsk
 *

812 
iscsi_ªadˇ∑côy10_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
lba
,

813 
pmi
, 
iscsi_comm™d_cb
 
cb
,

814 *
¥iv©e_d©a
);

815 
EXTERN
 
scsi_èsk
 *

816 
iscsi_ªadˇ∑côy16_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

817 
iscsi_comm™d_cb
 
cb
,

818 *
¥iv©e_d©a
);

819 
EXTERN
 
scsi_èsk
 *

820 
iscsi_ªadde„˘d©a10_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

821 
ªq_∂i°
, 
ªq_gli°
,

822 
de„˘_li°_f‹m©
, 
uöt16_t
 
Æloc_Àn
,

823 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
);

824 
EXTERN
 
scsi_èsk
 *

825 
iscsi_ªadde„˘d©a12_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

826 
ªq_∂i°
, 
ªq_gli°
,

827 
de„˘_li°_f‹m©
,

828 
uöt32_t
 
addªss_des¸ùt‹_ödex
,

829 
uöt32_t
 
Æloc_Àn
,

830 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
);

831 
EXTERN
 
scsi_èsk
 *

832 
iscsi_ßnôize_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

833 
immed
, 
au£
, 
ß
, 
∑øm_Àn
,

834 
iscsi_d©a
 *
d©a
,

835 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
);

836 
EXTERN
 
scsi_èsk
 *

837 
iscsi_ßnôize_block_îa£_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

838 
immed
, 
au£
,

839 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
);

840 
EXTERN
 
scsi_èsk
 *

841 
iscsi_ßnôize_¸y±o_îa£_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

842 
immed
, 
au£
,

843 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
);

844 
EXTERN
 
scsi_èsk
 *

845 
iscsi_ßnôize_exô_Áûuª_mode_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

846 
immed
, 
au£
,

847 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
);

848 
EXTERN
 
scsi_èsk
 *

849 
iscsi_gë_lba_°©us_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

850 
uöt64_t
 
°¨tög_lba
, 
uöt32_t
 
Æloc_Àn
,

851 
iscsi_comm™d_cb
 
cb
,

852 *
¥iv©e_d©a
);

853 
EXTERN
 
scsi_èsk
 *

854 
iscsi_synchr⁄izeˇche10_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

855 
lba
, 
num_blocks
, 
syn˙v
,

856 
immed
, 
iscsi_comm™d_cb
 
cb
,

857 *
¥iv©e_d©a
);

858 
EXTERN
 
scsi_èsk
 *

859 
iscsi_synchr⁄izeˇche16_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

860 
uöt64_t
 
lba
, 
uöt32_t
 
num_blocks
, 
syn˙v
,

861 
immed
, 
iscsi_comm™d_cb
 
cb
,

862 *
¥iv©e_d©a
);

863 
EXTERN
 
scsi_èsk
 *

864 
iscsi_¥e„tch10_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

865 
uöt32_t
 
lba
, 
num_blocks
,

866 
immed
, 
group
,

867 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
);

868 
EXTERN
 
scsi_èsk
 *

869 
iscsi_¥e„tch16_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

870 
uöt64_t
 
lba
, 
num_blocks
,

871 
immed
, 
group
,

872 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
);

873 
EXTERN
 
scsi_èsk
 *

874 
iscsi_ªad6_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

875 
uöt32_t
 
d©Æí
, 
blocksize
, 
iscsi_comm™d_cb
 
cb
,

876 *
¥iv©e_d©a
);

877 
EXTERN
 
scsi_èsk
 *

878 
iscsi_ªad6_iov_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

879 
uöt32_t
 
d©Æí
, 
blocksize
, 
iscsi_comm™d_cb
 
cb
,

880 *
¥iv©e_d©a
, 
scsi_iovec
 *
iov
, 
niov
);

881 
EXTERN
 
scsi_èsk
 *

882 
iscsi_ªad10_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

883 
uöt32_t
 
d©Æí
, 
blocksize
,

884 
rd¥Ÿe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
,

885 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
);

886 
EXTERN
 
scsi_èsk
 *

887 
iscsi_ªad10_iov_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

888 
uöt32_t
 
d©Æí
, 
blocksize
,

889 
rd¥Ÿe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
,

890 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
, 
scsi_iovec
 *
iov
, 
niov
);

891 
EXTERN
 
scsi_èsk
 *

892 
iscsi_wrôe10_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

893 *
d©a
, 
uöt32_t
 
d©Æí
, 
blocksize
,

894 
wΩrŸe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
,

895 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
);

896 
EXTERN
 
scsi_èsk
 *

897 
iscsi_wrôe10_iov_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

898 *
d©a
, 
uöt32_t
 
d©Æí
, 
blocksize
,

899 
wΩrŸe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
,

900 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
, 
scsi_iovec
 *
iov
, 
niov
);

901 
EXTERN
 
scsi_èsk
 *

902 
iscsi_wrôevîify10_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

903 *
d©a
, 
uöt32_t
 
d©Æí
, 
blocksize
,

904 
wΩrŸe˘
, 
dpo
, 
bytchk
, 
group_numbî
,

905 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
);

906 
EXTERN
 
scsi_èsk
 *

907 
iscsi_wrôevîify10_iov_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

908 *
d©a
, 
uöt32_t
 
d©Æí
, 
blocksize
,

909 
wΩrŸe˘
, 
dpo
, 
bytchk
, 
group_numbî
,

910 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
, 
scsi_iovec
 *
iov
, 
niov
);

911 
EXTERN
 
scsi_èsk
 *

912 
iscsi_ªad12_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

913 
uöt32_t
 
d©Æí
, 
blocksize
,

914 
rd¥Ÿe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
,

915 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
);

916 
EXTERN
 
scsi_èsk
 *

917 
iscsi_ªad12_iov_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

918 
uöt32_t
 
d©Æí
, 
blocksize
,

919 
rd¥Ÿe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
,

920 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
, 
scsi_iovec
 *
iov
, 
niov
);

921 
EXTERN
 
scsi_èsk
 *

922 
iscsi_wrôe12_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

923 *
d©a
, 
uöt32_t
 
d©Æí
, 
blocksize
,

924 
wΩrŸe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
,

925 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
);

926 
EXTERN
 
scsi_èsk
 *

927 
iscsi_wrôe12_iov_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

928 *
d©a
, 
uöt32_t
 
d©Æí
, 
blocksize
,

929 
wΩrŸe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
,

930 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
, 
scsi_iovec
 *
iov
, 
niov
);

931 
EXTERN
 
scsi_èsk
 *

932 
iscsi_wrôevîify12_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

933 *
d©a
, 
uöt32_t
 
d©Æí
, 
blocksize
,

934 
wΩrŸe˘
, 
dpo
, 
bytchk
, 
group_numbî
,

935 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
);

936 
EXTERN
 
scsi_èsk
 *

937 
iscsi_wrôevîify12_iov_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

938 *
d©a
, 
uöt32_t
 
d©Æí
, 
blocksize
,

939 
wΩrŸe˘
, 
dpo
, 
bytchk
, 
group_numbî
,

940 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
, 
scsi_iovec
 *
iov
, 
niov
);

941 
EXTERN
 
scsi_èsk
 *

942 
iscsi_ªad16_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
,

943 
uöt32_t
 
d©Æí
, 
blocksize
,

944 
rd¥Ÿe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
,

945 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
);

946 
EXTERN
 
scsi_èsk
 *

947 
iscsi_ªad16_iov_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
,

948 
uöt32_t
 
d©Æí
, 
blocksize
,

949 
rd¥Ÿe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
,

950 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
, 
scsi_iovec
 *
iov
, 
niov
);

951 
EXTERN
 
scsi_èsk
 *

952 
iscsi_wrôe16_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
,

953 *
d©a
, 
uöt32_t
 
d©Æí
, 
blocksize
,

954 
wΩrŸe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
,

955 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
);

956 
EXTERN
 
scsi_èsk
 *

957 
iscsi_wrôe16_iov_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
,

958 *
d©a
, 
uöt32_t
 
d©Æí
, 
blocksize
,

959 
wΩrŸe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
,

960 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
, 
scsi_iovec
 *
iov
, 
niov
);

961 
EXTERN
 
scsi_èsk
 *

962 
iscsi_wrôótomic16_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
,

963 *
d©a
, 
uöt32_t
 
d©Æí
, 
blocksize
,

964 
wΩrŸe˘
, 
dpo
, 
fua
, 
group_numbî
,

965 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
);

966 
EXTERN
 
scsi_èsk
 *

967 
iscsi_wrôótomic16_iov_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
,

968 *
d©a
, 
uöt32_t
 
d©Æí
, 
blocksize
,

969 
wΩrŸe˘
, 
dpo
, 
fua
, 
group_numbî
,

970 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
,

971 
scsi_iovec
 *
iov
, 
niov
);

972 
EXTERN
 
scsi_èsk
 *

973 
iscsi_‹wrôe_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
,

974 *
d©a
, 
uöt32_t
 
d©Æí
, 
blocksize
,

975 
wΩrŸe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
,

976 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
);

977 
EXTERN
 
scsi_èsk
 *

978 
iscsi_‹wrôe_iov_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
,

979 *
d©a
, 
uöt32_t
 
d©Æí
, 
blocksize
,

980 
wΩrŸe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
,

981 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
, 
scsi_iovec
 *
iov
, 
niov
);

982 
EXTERN
 
scsi_èsk
 *

983 
iscsi_°¨t°›unô_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

984 
immed
, 
pcm
, 
pc
,

985 
no_Êush
, 
l€j
, 
°¨t
,

986 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
);

987 
EXTERN
 
scsi_èsk
 *

988 
iscsi_¥evíèŒow_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

989 
¥evít
,

990 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
);

991 
EXTERN
 
scsi_èsk
 *

992 
iscsi_com∑ª™dwrôe_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
,

993 *
d©a
, 
uöt32_t
 
d©Æí
, 
blocksize
,

994 
wΩrŸe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
,

995 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
);

996 
EXTERN
 
scsi_èsk
 *

997 
iscsi_com∑ª™dwrôe_iov_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
,

998 *
d©a
, 
uöt32_t
 
d©Æí
, 
blocksize
,

999 
wΩrŸe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
,

1000 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
, 
scsi_iovec
 *
iov
, 
niov
);

1001 
EXTERN
 
scsi_èsk
 *

1002 
iscsi_wrôevîify16_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
,

1003 *
d©a
, 
uöt32_t
 
d©Æí
, 
blocksize
,

1004 
wΩrŸe˘
, 
dpo
, 
bytchk
, 
group_numbî
,

1005 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
);

1006 
EXTERN
 
scsi_èsk
 *

1007 
iscsi_wrôevîify16_iov_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
,

1008 *
d©a
, 
uöt32_t
 
d©Æí
, 
blocksize
,

1009 
wΩrŸe˘
, 
dpo
, 
bytchk
, 
group_numbî
,

1010 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
, 
scsi_iovec
 *
iov
, 
niov
);

1011 
EXTERN
 
scsi_èsk
 *

1012 
iscsi_vîify10_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

1013 *
d©a
, 
uöt32_t
 
d©Æí
, uöt32_à
lba
,

1014 
v¥Ÿe˘
, 
dpo
, 
bytchk
,

1015 
blocksize
, 
iscsi_comm™d_cb
 
cb
,

1016 *
¥iv©e_d©a
);

1017 
EXTERN
 
scsi_èsk
 *

1018 
iscsi_vîify10_iov_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

1019 *
d©a
, 
uöt32_t
 
d©Æí
, uöt32_à
lba
,

1020 
v¥Ÿe˘
, 
dpo
, 
bytchk
,

1021 
blocksize
, 
iscsi_comm™d_cb
 
cb
,

1022 *
¥iv©e_d©a
, 
scsi_iovec
 *
iov
, 
niov
);

1023 
EXTERN
 
scsi_èsk
 *

1024 
iscsi_vîify12_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

1025 *
d©a
, 
uöt32_t
 
d©Æí
, uöt32_à
lba
,

1026 
v¥Ÿe˘
, 
dpo
, 
bytchk
,

1027 
blocksize
, 
iscsi_comm™d_cb
 
cb
,

1028 *
¥iv©e_d©a
);

1029 
EXTERN
 
scsi_èsk
 *

1030 
iscsi_vîify12_iov_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

1031 *
d©a
, 
uöt32_t
 
d©Æí
, uöt32_à
lba
,

1032 
v¥Ÿe˘
, 
dpo
, 
bytchk
,

1033 
blocksize
, 
iscsi_comm™d_cb
 
cb
,

1034 *
¥iv©e_d©a
, 
scsi_iovec
 *
iov
, 
niov
);

1035 
EXTERN
 
scsi_èsk
 *

1036 
iscsi_vîify16_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

1037 *
d©a
, 
uöt32_t
 
d©Æí
, 
uöt64_t
 
lba
,

1038 
v¥Ÿe˘
, 
dpo
, 
bytchk
,

1039 
blocksize
, 
iscsi_comm™d_cb
 
cb
,

1040 *
¥iv©e_d©a
);

1041 
EXTERN
 
scsi_èsk
 *

1042 
iscsi_vîify16_iov_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

1043 *
d©a
, 
uöt32_t
 
d©Æí
, 
uöt64_t
 
lba
,

1044 
v¥Ÿe˘
, 
dpo
, 
bytchk
,

1045 
blocksize
, 
iscsi_comm™d_cb
 
cb
,

1046 *
¥iv©e_d©a
, 
scsi_iovec
 *
iov
, 
niov
);

1047 
EXTERN
 
scsi_èsk
 *

1048 
iscsi_wrôeßme10_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

1049 *
d©a
, 
uöt32_t
 
d©Æí
,

1050 
uöt16_t
 
num_blocks
,

1051 
™ch‹
, 
unm≠
, 
wΩrŸe˘
, 
group
,

1052 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
);

1053 
EXTERN
 
scsi_èsk
 *

1054 
iscsi_wrôeßme10_iov_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

1055 *
d©a
, 
uöt32_t
 
d©Æí
,

1056 
uöt16_t
 
num_blocks
,

1057 
™ch‹
, 
unm≠
, 
wΩrŸe˘
, 
group
,

1058 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
,

1059 
scsi_iovec
 *
iov
, 
niov
);

1060 
EXTERN
 
scsi_èsk
 *

1061 
iscsi_wrôeßme16_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
,

1062 *
d©a
, 
uöt32_t
 
d©Æí
,

1063 
uöt32_t
 
num_blocks
,

1064 
™ch‹
, 
unm≠
, 
wΩrŸe˘
, 
group
,

1065 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
);

1066 
EXTERN
 
scsi_èsk
 *

1067 
iscsi_wrôeßme16_iov_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
,

1068 *
d©a
, 
uöt32_t
 
d©Æí
,

1069 
uöt32_t
 
num_blocks
,

1070 
™ch‹
, 
unm≠
, 
wΩrŸe˘
, 
group
,

1071 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
,

1072 
scsi_iovec
 *
iov
, 
niov
);

1073 
EXTERN
 
scsi_èsk
 *

1074 
iscsi_mode£À˘6_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

1075 
pf
, 
•
, 
scsi_mode_∑ge
 *
mp
,

1076 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
);

1077 
EXTERN
 
scsi_èsk
 *

1078 
iscsi_mode£À˘10_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

1079 
pf
, 
•
, 
scsi_mode_∑ge
 *
mp
,

1080 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
);

1081 
EXTERN
 
scsi_èsk
 *

1082 
iscsi_mode£n£6_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
dbd
,

1083 
pc
, 
∑ge_code
, 
sub_∑ge_code
,

1084 
Æloc_Àn
, 
iscsi_comm™d_cb
 
cb
,

1085 *
¥iv©e_d©a
);

1086 
EXTERN
 
scsi_èsk
 *

1087 
iscsi_mode£n£10_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
ŒbØ
, 
dbd
,

1088 
pc
, 
∑ge_code
, 
sub_∑ge_code
,

1089 
Æloc_Àn
, 
iscsi_comm™d_cb
 
cb
,

1090 *
¥iv©e_d©a
);

1092 
	sunm≠_li°
 {

1093 
uöt64_t
 
lba
;

1094 
uöt32_t
 
num
;

1097 
EXTERN
 
scsi_èsk
 *

1098 
iscsi_≥rsi°ít_ª£rve_ö_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

1099 
ß
, 
uöt16_t
 
x„æí
,

1100 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
);

1102 
EXTERN
 
scsi_èsk
 *

1103 
iscsi_≥rsi°ít_ª£rve_out_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

1104 
ß
, 
sc›e
, 
ty≥
, *
∑øms
,

1105 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
);

1107 
EXTERN
 
scsi_èsk
 *

1108 
iscsi_unm≠_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
™ch‹
, 
group
,

1109 
unm≠_li°
 *
li°
, 
li°_Àn
,

1110 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
);

1112 
EXTERN
 
scsi_èsk
 *

1113 
iscsi_ªadtoc_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
msf
, 
f‹m©
,

1114 
åack_£ssi⁄
, 
maxsize
,

1115 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
);

1117 
EXTERN
 
scsi_èsk
 *

1118 
iscsi_ª£rve6_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

1119 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
);

1121 
EXTERN
 
scsi_èsk
 *

1122 
iscsi_ªÀa£6_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

1123 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
);

1125 
EXTERN
 
scsi_èsk
 *

1126 
iscsi_ªp‹t_suµ‹ãd_›codes_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

1127 
r˘d
, 
›ti⁄s
,

1128 
›code
, 
ß
,

1129 
uöt32_t
 
Æloc_Àn
,

1130 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
);

1132 
EXTERN
 
scsi_èsk
 *

1133 
iscsi_ª˚ive_c›y_ªsu…s_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

1134 
ß
, 
li°_id
, 
Æloc_Àn
,

1135 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
);

1137 
EXTERN
 
scsi_èsk
 *

1138 
iscsi_exãnded_c›y_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

1139 
iscsi_d©a
 *
∑øm_d©a
,

1140 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
);

1145 
EXTERN
 
scsi_èsk
 *

1146 
iscsi_scsi_comm™d_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

1147 
scsi_èsk
 *
èsk
, 
iscsi_d©a
 *
d©a
);

1149 
EXTERN
 
scsi_èsk
 *

1150 
iscsi_mode£À˘6_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

1151 
pf
, 
•
, 
scsi_mode_∑ge
 *
mp
);

1153 
EXTERN
 
scsi_èsk
 *

1154 
iscsi_mode£À˘10_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

1155 
pf
, 
•
, 
scsi_mode_∑ge
 *
mp
);

1157 
EXTERN
 
scsi_èsk
 *

1158 
iscsi_mode£n£6_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
dbd
,

1159 
pc
, 
∑ge_code
, 
sub_∑ge_code
,

1160 
Æloc_Àn
);

1162 
EXTERN
 
scsi_èsk
 *

1163 
iscsi_mode£n£10_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
ŒbØ
, 
dbd
,

1164 
pc
, 
∑ge_code
, 
sub_∑ge_code
,

1165 
Æloc_Àn
);

1167 
EXTERN
 
scsi_èsk
 *

1168 
iscsi_ªp‹éuns_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
ªp‹t_ty≥
,

1169 
Æloc_Àn
);

1171 
EXTERN
 
scsi_èsk
 *

1172 
iscsi_ã°unôªady_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
);

1174 
EXTERN
 
scsi_èsk
 *

1175 
iscsi_öquúy_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
evpd
,

1176 
∑ge_code
, 
maxsize
);

1178 
EXTERN
 
scsi_èsk
 *

1179 
iscsi_ªad6_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

1180 
uöt32_t
 
d©Æí
, 
blocksize
);

1182 
EXTERN
 
scsi_èsk
 *

1183 
iscsi_ªad6_iov_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

1184 
uöt32_t
 
d©Æí
, 
blocksize
,

1185 
scsi_iovec
 *
iov
, 
niov
);

1187 
EXTERN
 
scsi_èsk
 *

1188 
iscsi_ªad10_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

1189 
uöt32_t
 
d©Æí
, 
blocksize
,

1190 
rd¥Ÿe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
);

1192 
EXTERN
 
scsi_èsk
 *

1193 
iscsi_ªad10_iov_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

1194 
uöt32_t
 
d©Æí
, 
blocksize
,

1195 
rd¥Ÿe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
,

1196 
scsi_iovec
 *
iov
, 
niov
);

1198 
EXTERN
 
scsi_èsk
 *

1199 
iscsi_wrôe10_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

1200 *
d©a
, 
uöt32_t
 
d©Æí
, 
blocksize
,

1201 
wΩrŸe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
);

1203 
EXTERN
 
scsi_èsk
 *

1204 
iscsi_wrôe10_iov_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

1205 *
d©a
, 
uöt32_t
 
d©Æí
, 
blocksize
,

1206 
wΩrŸe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
,

1207 
scsi_iovec
 *
iov
, 
niov
);

1208 
EXTERN
 
scsi_èsk
 *

1209 
iscsi_wrôevîify10_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

1210 *
d©a
, 
uöt32_t
 
d©Æí
, 
blocksize
,

1211 
wΩrŸe˘
, 
dpo
, 
bytchk
, 
group_numbî
);

1213 
EXTERN
 
scsi_èsk
 *

1214 
iscsi_wrôevîify10_iov_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

1215 *
d©a
, 
uöt32_t
 
d©Æí
, 
blocksize
,

1216 
wΩrŸe˘
, 
dpo
, 
bytchk
, 
group_numbî
,

1217 
scsi_iovec
 *
iov
, 
niov
);

1219 
EXTERN
 
scsi_èsk
 *

1220 
iscsi_ªad12_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

1221 
uöt32_t
 
d©Æí
, 
blocksize
,

1222 
rd¥Ÿe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
);

1224 
EXTERN
 
scsi_èsk
 *

1225 
iscsi_ªad12_iov_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

1226 
uöt32_t
 
d©Æí
, 
blocksize
,

1227 
rd¥Ÿe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
,

1228 
scsi_iovec
 *
iov
, 
niov
);

1230 
EXTERN
 
scsi_èsk
 *

1231 
iscsi_wrôe12_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

1232 *
d©a
, 
uöt32_t
 
d©Æí
, 
blocksize
,

1233 
wΩrŸe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
);

1235 
EXTERN
 
scsi_èsk
 *

1236 
iscsi_wrôe12_iov_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

1237 *
d©a
, 
uöt32_t
 
d©Æí
, 
blocksize
,

1238 
wΩrŸe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
,

1239 
scsi_iovec
 *
iov
, 
niov
);

1241 
EXTERN
 
scsi_èsk
 *

1242 
iscsi_wrôevîify12_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

1243 *
d©a
, 
uöt32_t
 
d©Æí
, 
blocksize
,

1244 
wΩrŸe˘
, 
dpo
, 
bytchk
, 
group_numbî
);

1246 
EXTERN
 
scsi_èsk
 *

1247 
iscsi_wrôevîify12_iov_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

1248 *
d©a
, 
uöt32_t
 
d©Æí
, 
blocksize
,

1249 
wΩrŸe˘
, 
dpo
, 
bytchk
, 
group_numbî
,

1250 
scsi_iovec
 *
iov
, 
niov
);

1252 
EXTERN
 
scsi_èsk
 *

1253 
iscsi_ªad16_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
,

1254 
uöt32_t
 
d©Æí
, 
blocksize
,

1255 
rd¥Ÿe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
);

1257 
EXTERN
 
scsi_èsk
 *

1258 
iscsi_ªad16_iov_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
,

1259 
uöt32_t
 
d©Æí
, 
blocksize
,

1260 
rd¥Ÿe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
,

1261 
scsi_iovec
 *
iov
, 
niov
);

1263 
EXTERN
 
scsi_èsk
 *

1264 
iscsi_wrôe16_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
,

1265 *
d©a
, 
uöt32_t
 
d©Æí
, 
blocksize
,

1266 
wΩrŸe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
);

1268 
EXTERN
 
scsi_èsk
 *

1269 
iscsi_wrôe16_iov_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
,

1270 *
d©a
, 
uöt32_t
 
d©Æí
, 
blocksize
,

1271 
wΩrŸe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
,

1272 
scsi_iovec
 *
iov
, 
niov
);

1274 
EXTERN
 
scsi_èsk
 *

1275 
iscsi_wrôótomic16_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
,

1276 *
d©a
, 
uöt32_t
 
d©Æí
, 
blocksize
,

1277 
wΩrŸe˘
, 
dpo
, 
fua
, 
group_numbî
);

1279 
EXTERN
 
scsi_èsk
 *

1280 
iscsi_wrôótomic16_iov_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
,

1281 *
d©a
, 
uöt32_t
 
d©Æí
, 
blocksize
,

1282 
wΩrŸe˘
, 
dpo
, 
fua
, 
group_numbî
,

1283 
scsi_iovec
 *
iov
, 
niov
);

1285 
EXTERN
 
scsi_èsk
 *

1286 
iscsi_‹wrôe_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
,

1287 *
d©a
, 
uöt32_t
 
d©Æí
, 
blocksize
,

1288 
wΩrŸe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
);

1290 
EXTERN
 
scsi_èsk
 *

1291 
iscsi_‹wrôe_iov_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
,

1292 *
d©a
, 
uöt32_t
 
d©Æí
, 
blocksize
,

1293 
wΩrŸe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
,

1294 
scsi_iovec
 *
iov
, 
niov
);

1296 
EXTERN
 
scsi_èsk
 *

1297 
iscsi_°¨t°›unô_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

1298 
immed
, 
pcm
, 
pc
,

1299 
no_Êush
, 
l€j
, 
°¨t
);

1301 
EXTERN
 
scsi_èsk
 *

1302 
iscsi_¥evíèŒow_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

1303 
¥evít
);

1305 
EXTERN
 
scsi_èsk
 *

1306 
iscsi_com∑ª™dwrôe_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
,

1307 *
d©a
, 
uöt32_t
 
d©Æí
, 
blocksize
,

1308 
wΩrŸe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
);

1310 
EXTERN
 
scsi_èsk
 *

1311 
iscsi_com∑ª™dwrôe_iov_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
,

1312 *
d©a
, 
uöt32_t
 
d©Æí
, 
blocksize
,

1313 
wΩrŸe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
,

1314 
scsi_iovec
 *
iov
, 
niov
);

1316 
EXTERN
 
scsi_èsk
 *

1317 
iscsi_wrôevîify16_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
,

1318 *
d©a
, 
uöt32_t
 
d©Æí
, 
blocksize
,

1319 
wΩrŸe˘
, 
dpo
, 
bytchk
, 
group_numbî
);

1321 
EXTERN
 
scsi_èsk
 *

1322 
iscsi_wrôevîify16_iov_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
,

1323 *
d©a
, 
uöt32_t
 
d©Æí
, 
blocksize
,

1324 
wΩrŸe˘
, 
dpo
, 
bytchk
, 
group_numbî
,

1325 
scsi_iovec
 *
iov
, 
niov
);

1327 
EXTERN
 
scsi_èsk
 *

1328 
iscsi_ªadˇ∑côy10_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
lba
,

1329 
pmi
);

1331 
EXTERN
 
scsi_èsk
 *

1332 
iscsi_ªadˇ∑côy16_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
);

1334 
EXTERN
 
scsi_èsk
 *

1335 
iscsi_ªadde„˘d©a10_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

1336 
ªq_∂i°
, 
ªq_gli°
,

1337 
de„˘_li°_f‹m©
, 
uöt16_t
 
Æloc_Àn
);

1339 
EXTERN
 
scsi_èsk
 *

1340 
iscsi_ªadde„˘d©a12_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

1341 
ªq_∂i°
, 
ªq_gli°
,

1342 
de„˘_li°_f‹m©
,

1343 
uöt32_t
 
addªss_des¸ùt‹_ödex
,

1344 
uöt32_t
 
Æloc_Àn
);

1345 
EXTERN
 
scsi_èsk
 *

1346 
iscsi_gë_lba_°©us_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
°¨tög_lba
, 
uöt32_t
 
Æloc_Àn
);

1348 
EXTERN
 
scsi_èsk
 *

1349 
iscsi_ßnôize_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

1350 
immed
, 
au£
, 
ß
, 
∑øm_Àn
,

1351 
iscsi_d©a
 *
d©a
);

1352 
EXTERN
 
scsi_èsk
 *

1353 
iscsi_ßnôize_block_îa£_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

1354 
immed
, 
au£
);

1355 
EXTERN
 
scsi_èsk
 *

1356 
iscsi_ßnôize_¸y±o_îa£_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

1357 
immed
, 
au£
);

1358 
EXTERN
 
scsi_èsk
 *

1359 
iscsi_ßnôize_exô_Áûuª_mode_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

1360 
immed
, 
au£
);

1361 
EXTERN
 
scsi_èsk
 *

1362 
iscsi_synchr⁄izeˇche10_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
lba
,

1363 
num_blocks
, 
syn˙v
, 
immed
);

1365 
EXTERN
 
scsi_èsk
 *

1366 
iscsi_synchr⁄izeˇche16_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
,

1367 
uöt32_t
 
num_blocks
, 
syn˙v
, 
immed
);

1369 
EXTERN
 
scsi_èsk
 *

1370 
iscsi_¥e„tch10_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

1371 
num_blocks
, 
immed
, 
group
);

1373 
EXTERN
 
scsi_èsk
 *

1374 
iscsi_¥e„tch16_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
,

1375 
num_blocks
, 
immed
, 
group
);

1377 
EXTERN
 
scsi_èsk
 *

1378 
iscsi_vîify10_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

1379 *
d©a
, 
uöt32_t
 
d©Æí
, uöt32_à
lba
,

1380 
v¥Ÿe˘
, 
dpo
, 
bytchk
,

1381 
blocksize
);

1383 
EXTERN
 
scsi_èsk
 *

1384 
iscsi_vîify10_iov_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

1385 *
d©a
, 
uöt32_t
 
d©Æí
, uöt32_à
lba
,

1386 
v¥Ÿe˘
, 
dpo
, 
bytchk
,

1387 
blocksize
, 
scsi_iovec
 *
iov
, 
niov
);

1389 
EXTERN
 
scsi_èsk
 *

1390 
iscsi_vîify12_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

1391 *
d©a
, 
uöt32_t
 
d©Æí
, uöt32_à
lba
,

1392 
v¥Ÿe˘
, 
dpo
, 
bytchk
,

1393 
blocksize
);

1395 
EXTERN
 
scsi_èsk
 *

1396 
iscsi_vîify12_iov_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

1397 *
d©a
, 
uöt32_t
 
d©Æí
, uöt32_à
lba
,

1398 
v¥Ÿe˘
, 
dpo
, 
bytchk
,

1399 
blocksize
, 
scsi_iovec
 *
iov
, 
niov
);

1401 
EXTERN
 
scsi_èsk
 *

1402 
iscsi_vîify16_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

1403 *
d©a
, 
uöt32_t
 
d©Æí
, 
uöt64_t
 
lba
,

1404 
v¥Ÿe˘
, 
dpo
, 
bytchk
,

1405 
blocksize
);

1407 
EXTERN
 
scsi_èsk
 *

1408 
iscsi_vîify16_iov_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

1409 *
d©a
, 
uöt32_t
 
d©Æí
, 
uöt64_t
 
lba
,

1410 
v¥Ÿe˘
, 
dpo
, 
bytchk
,

1411 
blocksize
, 
scsi_iovec
 *
iov
, 
niov
);

1413 
EXTERN
 
scsi_èsk
 *

1414 
iscsi_wrôeßme10_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

1415 *
d©a
, 
uöt32_t
 
d©Æí
,

1416 
uöt16_t
 
num_blocks
,

1417 
™ch‹
, 
unm≠
, 
wΩrŸe˘
, 
group
);

1419 
EXTERN
 
scsi_èsk
 *

1420 
iscsi_wrôeßme10_iov_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

1421 *
d©a
, 
uöt32_t
 
d©Æí
,

1422 
uöt16_t
 
num_blocks
,

1423 
™ch‹
, 
unm≠
, 
wΩrŸe˘
, 
group
,

1424 
scsi_iovec
 *
iov
, 
niov
);

1426 
EXTERN
 
scsi_èsk
 *

1427 
iscsi_wrôeßme16_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
,

1428 *
d©a
, 
uöt32_t
 
d©Æí
,

1429 
uöt32_t
 
num_blocks
,

1430 
™ch‹
, 
unm≠
, 
wΩrŸe˘
, 
group
);

1432 
EXTERN
 
scsi_èsk
 *

1433 
iscsi_wrôeßme16_iov_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
,

1434 *
d©a
, 
uöt32_t
 
d©Æí
,

1435 
uöt32_t
 
num_blocks
,

1436 
™ch‹
, 
unm≠
, 
wΩrŸe˘
, 
group
,

1437 
scsi_iovec
 *
iov
, 
niov
);

1439 
EXTERN
 
scsi_èsk
 *

1440 
iscsi_≥rsi°ít_ª£rve_ö_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

1441 
ß
, 
uöt16_t
 
x„æí
);

1443 
EXTERN
 
scsi_èsk
 *

1444 
iscsi_≥rsi°ít_ª£rve_out_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

1445 
ß
, 
sc›e
, 
ty≥
, *
∑øms
);

1447 
EXTERN
 
scsi_èsk
 *

1448 
iscsi_unm≠_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
™ch‹
, 
group
,

1449 
unm≠_li°
 *
li°
, 
li°_Àn
);

1451 
EXTERN
 
scsi_èsk
 *

1452 
iscsi_ªadtoc_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
msf
,

1453 
f‹m©
, 
åack_£ssi⁄
, 
maxsize
);

1455 
EXTERN
 
scsi_èsk
 *

1456 
iscsi_ª£rve6_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
);

1458 
EXTERN
 
scsi_èsk
 *

1459 
iscsi_ªÀa£6_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
);

1461 
EXTERN
 
scsi_èsk
 *

1462 
iscsi_ªp‹t_suµ‹ãd_›codes_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

1463 
r˘d
, 
›ti⁄s
,

1464 
›code
, 
ß
,

1465 
uöt32_t
 
Æloc_Àn
);

1467 
EXTERN
 
scsi_èsk
 *

1468 
iscsi_exãnded_c›y_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

1469 
iscsi_d©a
 *
∑øm_d©a
);

1471 
EXTERN
 
scsi_èsk
 *

1472 
iscsi_ª˚ive_c›y_ªsu…s_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

1473 
ß
, 
li°_id
, 
Æloc_Àn
);

1504 
EXTERN
 
scsi_èsk_add_d©a_ö_buf„r
(
scsi_èsk
 *
èsk
, 
Àn
, *
buf
);

1505 
EXTERN
 
scsi_èsk_add_d©a_out_buf„r
(
scsi_èsk
 *
èsk
, 
Àn
, *
buf
);

1507 
scsi_iovec
;

1508 
EXTERN
 
scsi_èsk_£t_iov_out
(
scsi_èsk
 *
èsk
, 
scsi_iovec
 *
iov
, 
niov
);

1509 
EXTERN
 
scsi_èsk_£t_iov_ö
(
scsi_èsk
 *
èsk
, 
scsi_iovec
 *
iov
, 
niov
);

1511 
EXTERN
 
scsi_èsk_gë_°©us
(
scsi_èsk
 *
èsk
, 
scsi_£n£
 *
£n£
);

1520 
EXTERN
 

1521 
iscsi_scsi_ˇn˚l_èsk
(
iscsi_c⁄ãxt
 *
iscsi
,

1522 
scsi_èsk
 *
èsk
);

1531 
EXTERN
 

1532 
iscsi_scsi_ˇn˚l_Æl_èsks
(
iscsi_c⁄ãxt
 *
iscsi
);

1545 
EXTERN
 

1546 
iscsi_£t_log_Àvñ
(
iscsi_c⁄ãxt
 *
iscsi
, 
Àvñ
);

1548 (*
iscsi_log_‚
)(
	tÀvñ
, c⁄° *
	tmeßge
);

1551 
EXTERN
 
iscsi_£t_log_‚
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_log_‚
 
‚
);

1554 
EXTERN
 
iscsi_log_to_°dîr
(
Àvñ
, c⁄° *
mesßge
);

1560 
EXTERN
 

1561 
iscsi_£t_t˝_u£r_timeout
(
iscsi_c⁄ãxt
 *
iscsi
, 
timeout_ms
);

1567 
EXTERN
 

1568 
iscsi_£t_t˝_kìpidÀ
(
iscsi_c⁄ãxt
 *
iscsi
, 
vÆue
);

1574 
EXTERN
 

1575 
iscsi_£t_t˝_kìp˙t
(
iscsi_c⁄ãxt
 *
iscsi
, 
vÆue
);

1581 
EXTERN
 

1582 
iscsi_£t_t˝_kìpötvl
(
iscsi_c⁄ãxt
 *
iscsi
, 
vÆue
);

1588 
EXTERN
 

1589 
iscsi_£t_t˝_syn˙t
(
iscsi_c⁄ãxt
 *
iscsi
, 
vÆue
);

1595 
EXTERN
 

1596 
iscsi_£t_böd_öãrÁ˚s
(
iscsi_c⁄ãxt
 *
iscsi
, * 
öãrÁ˚s
);

1604 
EXTERN
 

1605 
iscsi_£t_nﬂut‹ec⁄√˘
(
iscsi_c⁄ãxt
 *
iscsi
, 
°©e
);

1615 
EXTERN
 

1616 
iscsi_£t_ªc⁄√˘_max_ªåõs
(
iscsi_c⁄ãxt
 *
iscsi
, 
cou¡
);

1621 
EXTERN
 

1622 
iscsi_£t_no_ua_⁄_ªc⁄√˘
(
iscsi_c⁄ãxt
 *
iscsi
, 
°©e
);

1624 #ifde‡
__˝lu•lus


	@include/iser-private.h

17 #i‚de‡
__i£r_¥iv©e_h__


18 
	#__i£r_¥iv©e_h__


	)

20 
	~<°döt.h
>

21 
	~<time.h
>

23 
	~"iscsi-¥iv©e.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~<°rögs.h
>

26 
	~<√tdb.h
>

27 
	~<sys/sockë.h
>

28 
	~<√töë/ö.h
>

29 
	~<√töë/t˝.h
>

30 
	~<sys/io˘l.h
>

31 
	~<±hªad.h
>

32 
	~<£m≠h‹e.h
>

34 #ifde‡
__löux


36 
	~<öföib™d/vîbs.h
>

37 
	~<rdma/rdma_cma.h
>

38 
	~<rdma/rdma_vîbs.h
>

40 
	#u∆ikñy
(
x
Ë
	`__buûtö_ex≥˘
 (!!(x), 0)

	)

42 
	#ISER_VER
 0x10

	)

43 
	#ISER_WSV
 0x08

	)

44 
	#ISER_RSV
 0x04

	)

46 
	#NUM_MRS
 0x100

	)

47 
	#DATA_BUFFER_SIZE
 0x40000

	)

49 
	#ISER_HEADERS_LEN
 ((
i£r_hdr
Ë+ 
ISCSI_RAW_HEADER_SIZE
)

	)

51 
	#ISER_RECV_DATA_SEG_LEN
 128

	)

52 
	#ISER_RX_PAYLOAD_SIZE
 (
ISER_HEADERS_LEN
 + 
ISER_RECV_DATA_SEG_LEN
)

	)

54 
	#ISER_RX_LOGIN_SIZE
 (
ISER_HEADERS_LEN
 + 
ISCSI_DEF_MAX_RECV_SEG_LEN
)

	)

56 
	#ISCSI_DEF_MAX_RECV_SEG_LEN
 8192

	)

58 
	#BHSSC_FLAGS_R
 0x40

	)

59 
	#BHSSC_FLAGS_W
 0x20

	)

61 
	#ISER_MAX_CQ_LEN
 1024

	)

63 
	#ISER_ZBVA_NOT_SUPPORTED
 0x80

	)

64 
	#ISER_SEND_W_INV_NOT_SUPPORTED
 0x40

	)

66 
	edesc_ty≥
 {

67 
	mISCSI_CONTROL
 = 0,

68 
	mISCSI_COMMAND
};

70 
	ec⁄n_°©e
{

71 
	mCONN_ERROR
 = 0,

72 
	mCONN_DISCONNECTED
,

73 
	mCONN_ESTABLISHED
};

75 
	ed©a_dú
{

76 
	mDATA_WRITE
 = 0,

77 
	mDATA_READ
};

79 
	#SHIFT_4K
 12

	)

80 
	#SIZE_4K
 (1ULL << 
SHIFT_4K
)

	)

81 
	#MASK_4K
 (~(
SIZE_4K
-1))

	)

83 
	#ISER_DEF_XMIT_CMDS_MAX
 512

	)

84 
	#ISER_QP_MAX_RECV_DTOS
 (
ISER_DEF_XMIT_CMDS_MAX
)

	)

85 
	#ISER_MIN_POSTED_RX
 (
ISER_DEF_XMIT_CMDS_MAX
 >> 2)

	)

88 
	#ISER_RX_PAD_SIZE
 (256 - (
ISER_RX_PAYLOAD_SIZE
 + \

89 (
ibv_mr
*Ë+ (
ibv_sge
)))

	)

102 
	si£r_hdr
 {

103 
uöt8_t
 
	mÊags
;

104 
uöt8_t
 
	mrsvd
[3];

105 
uöt32_t
 
	mwrôe_°ag
;

106 
uöt64_t
 
	mwrôe_va
;

107 
uöt32_t
 
	mªad_°ag
;

108 
uöt64_t
 
	mªad_va
;

109 } 
__©åibuã__
((
∑cked
));

122 
	si£r_rx_desc
 {

123 
i£r_hdr
 
	mi£r_hódî
;

124 
	miscsi_hódî
[
ISCSI_RAW_HEADER_SIZE
];

125 
	md©a
[
ISER_RECV_DATA_SEG_LEN
];

126 
ibv_sge
 
	mrx_sg
;

127 
ibv_mr
 *
	mhdr_mr
;

128 
	m∑d
[
ISER_RX_PAD_SIZE
];

129 } 
__©åibuã__
((
∑cked
));

146 
	si£r_tx_desc
 {

147 
i£r_hdr
 
	mi£r_hódî
;

148 
	miscsi_hódî
[
ISCSI_RAW_HEADER_SIZE
];

149 
ibv_sge
 
	mtx_sg
[2];

150 
	mnum_sge
;

151 
ibv_mr
 *
	mhdr_mr
;

152 *
	md©a_buff
;

153 
ibv_mr
 *
	md©a_mr
;

154 
desc_ty≥
 
	mty≥
;

155 
d©a_dú
 
	md©a_dú
;

156 
i£r_tx_desc
 *
	m√xt
;

159 
	si£r_cm_hdr
 {

160 
uöt8_t
 
	mÊags
;

161 
uöt8_t
 
	mrsvd
[3];

162 } 
	g__∑cked
;

164 
	si£r_pdu
 {

165 
iscsi_pdu
 
	miscsi_pdu
;

166 
i£r_tx_desc
 *
	mdesc
;

169 
	si£r_c⁄n
 {

170 
rdma_cm_id
 *
	mcma_id
;

171 
rdma_evít_ch™√l
 *
	mcma_ch™√l
;

172 
rdma_cm_evít
 *
	mcma_evít
;

174 
ibv_pd
 *
	mpd
;

175 
ibv_cq
 *
	mcq
;

176 
ibv_qp
 *
	mqp
;

177 
ibv_comp_ch™√l
 *
	mcomp_ch™√l
;

179 
ibv_ªcv_wr
 
	mrx_wr
[
ISER_MIN_POSTED_RX
];

181 
£m_t
 
	m£m_c⁄√˘
;

183 
ibv_mr
 *
	mlogö_ª•_mr
;

184 
ibv_mr
 *
	mlogö_ªq_mr
;

185 *
	mlogö_buf
;

186 *
	mlogö_ªq_buf
;

187 *
	mlogö_ª•_buf
;

189 
±hªad_t
 
	mcmthªad
;

191 
i£r_rx_desc
 *
	mrx_descs
;

192 
uöt32_t
 
	mnum_rx_descs
;

193 
	mrx_desc_hód
;

195 
	mpo°_ªcv_buf_cou¡
;

196 
	mqp_max_ªcv_dtos
;

197 
	mmö_po°ed_rx
;

198 
uöt16_t
 
	mmax_cmds
;

200 
c⁄n_°©e
 
	mc⁄n_°©e
;

202 
i£r_tx_desc
 *
	mtx_desc
;

205 
iscsi_öô_i£r_å™•‹t
(
iscsi_c⁄ãxt
 *
iscsi
);

	@include/md5.h

23 #i‚de‡
MD5_H


24 
	#MD5_H


	)

26 #i‡
deföed
(
_WIN32
)

28 
	~<√töë/ö.h
>

31 
	~<°rög.h
>

32 
	~<sys/ty≥s.h
>

33 
	~<°döt.h
>

34 #i‡(
__BYTE_ORDER
 =
__BIG_ENDIAN
)

35 
	#WORDS_BIGENDIAN
 1

	)

38 
uöt32_t
 
	tUWORD32
;

41 #ifde‡
__˝lu•lus


46 
	#md5byã
 

	)

48 
	sMD5C⁄ãxt
 {

49 
UWORD32
 
buf
[4];

50 
UWORD32
 
byãs
[2];

51 
UWORD32
 
ö
[16];

54 
MD5Inô
(
MD5C⁄ãxt
 *
c⁄ãxt
);

55 
MD5Upd©e
(
MD5C⁄ãxt
 *
c⁄ãxt
, 
md5byã
 c⁄° *
buf
, 
Àn
);

56 
MD5FöÆ
(
dige°
[16], 
MD5C⁄ãxt
 *
c⁄ãxt
);

57 
MD5Tønsf‹m
(
UWORD32
 
buf
[4], UWORD32 c⁄° 
ö
[16]);

60 #ifde‡
__˝lu•lus


	@include/scsi-lowlevel.h

17 #i‚de‡
__scsi_lowÀvñ_h__


18 
	#__scsi_lowÀvñ_h__


	)

20 #i‡
deföed
(
_WIN32
)

21 
	#EXTERN
 
	`__de˛•ec
–
dŒexp‹t
 )

	)

23 
	#EXTERN


	)

26 #ifde‡
__˝lu•lus


30 
	#SCSI_CDB_MAX_SIZE
 16

	)

32 
	escsi_›code
 {

33 
SCSI_OPCODE_TESTUNITREADY
 = 0x00,

34 
SCSI_OPCODE_READ6
 = 0x08,

35 
SCSI_OPCODE_INQUIRY
 = 0x12,

36 
SCSI_OPCODE_MODESELECT6
 = 0x15,

37 
SCSI_OPCODE_RESERVE6
 = 0x16,

38 
SCSI_OPCODE_RELEASE6
 = 0x17,

39 
SCSI_OPCODE_MODESENSE6
 = 0x1a,

40 
SCSI_OPCODE_STARTSTOPUNIT
 = 0x1b,

41 
SCSI_OPCODE_PREVENTALLOW
 = 0x1e,

42 
SCSI_OPCODE_READCAPACITY10
 = 0x25,

43 
SCSI_OPCODE_READ10
 = 0x28,

44 
SCSI_OPCODE_WRITE10
 = 0x2A,

45 
SCSI_OPCODE_WRITE_VERIFY10
 = 0x2E,

46 
SCSI_OPCODE_VERIFY10
 = 0x2F,

47 
SCSI_OPCODE_PREFETCH10
 = 0x34,

48 
SCSI_OPCODE_SYNCHRONIZECACHE10
 = 0x35,

49 
SCSI_OPCODE_READ_DEFECT_DATA10
 = 0x37,

50 
SCSI_OPCODE_WRITE_SAME10
 = 0x41,

51 
SCSI_OPCODE_UNMAP
 = 0x42,

52 
SCSI_OPCODE_READTOC
 = 0x43,

53 
SCSI_OPCODE_SANITIZE
 = 0x48,

54 
SCSI_OPCODE_MODESELECT10
 = 0x55,

55 
SCSI_OPCODE_MODESENSE10
 = 0x5A,

56 
SCSI_OPCODE_PERSISTENT_RESERVE_IN
 = 0x5E,

57 
SCSI_OPCODE_PERSISTENT_RESERVE_OUT
 = 0x5F,

58 
SCSI_OPCODE_EXTENDED_COPY
 = 0x83,

59 
SCSI_OPCODE_RECEIVE_COPY_RESULTS
 = 0x84,

60 
SCSI_OPCODE_READ16
 = 0x88,

61 
SCSI_OPCODE_COMPARE_AND_WRITE
 = 0x89,

62 
SCSI_OPCODE_WRITE16
 = 0x8A,

63 
SCSI_OPCODE_ORWRITE
 = 0x8B,

64 
SCSI_OPCODE_WRITE_VERIFY16
 = 0x8E,

65 
SCSI_OPCODE_VERIFY16
 = 0x8F,

66 
SCSI_OPCODE_PREFETCH16
 = 0x90,

67 
SCSI_OPCODE_SYNCHRONIZECACHE16
 = 0x91,

68 
SCSI_OPCODE_WRITE_SAME16
 = 0x93,

69 
SCSI_OPCODE_WRITE_ATOMIC16
 = 0x9C,

70 
SCSI_OPCODE_SERVICE_ACTION_IN
 = 0x9E,

71 
SCSI_OPCODE_REPORTLUNS
 = 0xA0,

72 
SCSI_OPCODE_MAINTENANCE_IN
 = 0xA3,

73 
SCSI_OPCODE_READ12
 = 0xA8,

74 
SCSI_OPCODE_WRITE12
 = 0xAA,

75 
SCSI_OPCODE_WRITE_VERIFY12
 = 0xAE,

76 
SCSI_OPCODE_VERIFY12
 = 0xAF,

77 
SCSI_OPCODE_READ_DEFECT_DATA12
 = 0xB7

80 
	escsi_≥rsi°ít_ö_ß
 {

81 
SCSI_PERSISTENT_RESERVE_READ_KEYS
 = 0,

82 
SCSI_PERSISTENT_RESERVE_READ_RESERVATION
 = 1,

83 
SCSI_PERSISTENT_RESERVE_REPORT_CAPABILITIES
 = 2,

84 
SCSI_PERSISTENT_RESERVE_READ_FULL_STATUS
 = 3

87 
	escsi_£rvi˚_a˘i⁄_ö
 {

88 
SCSI_READCAPACITY16
 = 0x10,

89 
SCSI_GET_LBA_STATUS
 = 0x12

92 
	escsi_≥rsi°ít_out_ß
 {

93 
SCSI_PERSISTENT_RESERVE_REGISTER
 = 0,

94 
SCSI_PERSISTENT_RESERVE_RESERVE
 = 1,

95 
SCSI_PERSISTENT_RESERVE_RELEASE
 = 2,

96 
SCSI_PERSISTENT_RESERVE_CLEAR
 = 3,

97 
SCSI_PERSISTENT_RESERVE_PREEMPT
 = 4,

98 
SCSI_PERSISTENT_RESERVE_PREEMPT_AND_ABORT
 = 5,

99 
SCSI_PERSISTENT_RESERVE_REGISTER_AND_IGNORE_EXISTING_KEY
 = 6,

100 
SCSI_PERSISTENT_RESERVE_REGISTER_AND_MOVE
 = 7

103 
	escsi_≥rsi°ít_out_sc›e
 {

104 
SCSI_PERSISTENT_RESERVE_SCOPE_LU
 = 0

107 
	escsi_≥rsi°ít_out_ty≥
 {

108 
SCSI_PERSISTENT_RESERVE_TYPE_WRITE_EXCLUSIVE
 = 1,

109 
SCSI_PERSISTENT_RESERVE_TYPE_EXCLUSIVE_ACCESS
 = 3,

110 
SCSI_PERSISTENT_RESERVE_TYPE_WRITE_EXCLUSIVE_REGISTRANTS_ONLY
 = 5,

111 
SCSI_PERSISTENT_RESERVE_TYPE_EXCLUSIVE_ACCESS_REGISTRANTS_ONLY
 = 6,

112 
SCSI_PERSISTENT_RESERVE_TYPE_WRITE_EXCLUSIVE_ALL_REGISTRANTS
 = 7,

113 
SCSI_PERSISTENT_RESERVE_TYPE_EXCLUSIVE_ACCESS_ALL_REGISTRANTS
 = 8

116 
	sscsi_≥rsi°ít_ª£rve_out_basic
 {

117 
uöt64_t
 
ª£rv©i⁄_key
;

118 
uöt64_t
 
£rvi˚_a˘i⁄_ª£rv©i⁄_key
;

119 
uöt8_t
 
•ec_i_±
;

120 
uöt8_t
 
Æl_tg_±
;

121 
uöt8_t
 
≠çl
;

124 
	escsi_maöã«n˚_ö
 {

125 
SCSI_REPORT_SUPPORTED_OP_CODES
 = 0x0c

128 
	escsi_›_code_ªp‹tög_›ti⁄s
 {

129 
SCSI_REPORT_SUPPORTING_OPS_ALL
 = 0x00,

130 
SCSI_REPORT_SUPPORTING_OPCODE
 = 0x01,

131 
SCSI_REPORT_SUPPORTING_SERVICEACTION
 = 0x02

135 
	escsi_£n£_key
 {

136 
SCSI_SENSE_NO_SENSE
 = 0x00,

137 
SCSI_SENSE_RECOVERED_ERROR
 = 0x01,

138 
SCSI_SENSE_NOT_READY
 = 0x02,

139 
SCSI_SENSE_MEDIUM_ERROR
 = 0x03,

140 
SCSI_SENSE_HARDWARE_ERROR
 = 0x04,

141 
SCSI_SENSE_ILLEGAL_REQUEST
 = 0x05,

142 
SCSI_SENSE_UNIT_ATTENTION
 = 0x06,

143 
SCSI_SENSE_DATA_PROTECTION
 = 0x07,

144 
SCSI_SENSE_BLANK_CHECK
 = 0x08,

145 
SCSI_SENSE_VENDOR_SPECIFIC
 = 0x09,

146 
SCSI_SENSE_COPY_ABORTED
 = 0x0a,

147 
SCSI_SENSE_COMMAND_ABORTED
 = 0x0b,

148 
SCSI_SENSE_OBSOLETE_ERROR_CODE
 = 0x0c,

149 
SCSI_SENSE_OVERFLOW_COMMAND
 = 0x0d,

150 
SCSI_SENSE_MISCOMPARE
 = 0x0e

153 
EXTERN
 c⁄° *
scsi_£n£_key_°r
(
key
);

156 
	#SCSI_SENSE_ASCQ_NO_ADDL_SENSE
 0x0000

	)

157 
	#SCSI_SENSE_ASCQ_SANITIZE_IN_PROGRESS
 0x041b

	)

158 
	#SCSI_SENSE_ASCQ_UNREACHABLE_COPY_TARGET
 0x0804

	)

159 
	#SCSI_SENSE_ASCQ_COPY_TARGET_DEVICE_NOT_REACHABLE
 0x0d02

	)

160 
	#SCSI_SENSE_ASCQ_WRITE_AFTER_SANITIZE_REQUIRED
 0x1115

	)

161 
	#SCSI_SENSE_ASCQ_PARAMETER_LIST_LENGTH_ERROR
 0x1a00

	)

162 
	#SCSI_SENSE_ASCQ_MISCOMPARE_DURING_VERIFY
 0x1d00

	)

163 
	#SCSI_SENSE_ASCQ_MISCOMPARE_VERIFY_OF_UNMAPPED_LBA
 0x1d01

	)

164 
	#SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
 0x2000

	)

165 
	#SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
 0x2100

	)

166 
	#SCSI_SENSE_ASCQ_INVALID_FIELD_IN_CDB
 0x2400

	)

167 
	#SCSI_SENSE_ASCQ_LOGICAL_UNIT_NOT_SUPPORTED
 0x2500

	)

168 
	#SCSI_SENSE_ASCQ_INVALID_FIELD_IN_PARAMETER_LIST
 0x2600

	)

169 
	#SCSI_SENSE_ASCQ_TOO_MANY_TARGET_DESCRIPTORS
 0x2606

	)

170 
	#SCSI_SENSE_ASCQ_UNSUPPORTED_TARGET_DESCRIPTOR_TYPE_CODE
 0x2607

	)

171 
	#SCSI_SENSE_ASCQ_TOO_MANY_SEGMENT_DESCRIPTORS
 0x2608

	)

172 
	#SCSI_SENSE_ASCQ_UNSUPPORTED_SEGMENT_DESCRIPTOR_TYPE_CODE
 0x2609

	)

173 
	#SCSI_SENSE_ASCQ_WRITE_PROTECTED
 0x2700

	)

174 
	#SCSI_SENSE_ASCQ_HARDWARE_WRITE_PROTECTED
 0x2701

	)

175 
	#SCSI_SENSE_ASCQ_SOFTWARE_WRITE_PROTECTED
 0x2702

	)

176 
	#SCSI_SENSE_ASCQ_BUS_RESET
 0x2900

	)

177 
	#SCSI_SENSE_ASCQ_POWER_ON_OCCURED
 0x2901

	)

178 
	#SCSI_SENSE_ASCQ_SCSI_BUS_RESET_OCCURED
 0x2902

	)

179 
	#SCSI_SENSE_ASCQ_BUS_DEVICE_RESET_FUNCTION_OCCURED
 0x2903

	)

180 
	#SCSI_SENSE_ASCQ_DEVICE_INTERNAL_RESET
 0x2904

	)

181 
	#SCSI_SENSE_ASCQ_TRANSCEIVER_MODE_CHANGED_TO_SINGLE_ENDED
 0x2905

	)

182 
	#SCSI_SENSE_ASCQ_TRANSCEIVER_MODE_CHANGED_TO_LVD
 0x2906

	)

183 
	#SCSI_SENSE_ASCQ_NEXUS_LOSS
 0x2907

	)

184 
	#SCSI_SENSE_ASCQ_MODE_PARAMETERS_CHANGED
 0x2a01

	)

185 
	#SCSI_SENSE_ASCQ_CAPACITY_DATA_HAS_CHANGED
 0x2a09

	)

186 
	#SCSI_SENSE_ASCQ_THIN_PROVISION_SOFT_THRES_REACHED
 0x3807

	)

187 
	#SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT
 0x3a00

	)

188 
	#SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_CLOSED
 0x3a01

	)

189 
	#SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_OPEN
 0x3a02

	)

190 
	#SCSI_SENSE_ASCQ_INQUIRY_DATA_HAS_CHANGED
 0x3f03

	)

191 
	#SCSI_SENSE_ASCQ_INTERNAL_TARGET_FAILURE
 0x4400

	)

192 
	#SCSI_SENSE_ASCQ_MEDIUM_LOAD_OR_EJECT_FAILED
 0x5300

	)

193 
	#SCSI_SENSE_ASCQ_MEDIUM_REMOVAL_PREVENTED
 0x5302

	)

194 
	#SCSI_SENSE_ASCQ_INVALID_FIELD_IN_INFORMATION_UNIT
 0x0e03

	)

196 
EXTERN
 c⁄° *
scsi_£n£_ascq_°r
(
ascq
);

198 
EXTERN
 c⁄° *
scsi_¥_ty≥_°r
(
scsi_≥rsi°ít_out_ty≥
 
¥_ty≥
);

200 
	escsi_x„r_dú
 {

201 
SCSI_XFER_NONE
 = 0,

202 
SCSI_XFER_READ
 = 1,

203 
SCSI_XFER_WRITE
 = 2

209 
EXTERN
 
scsi_èsk
 *
scsi_cdb_ªadtoc
(
msf
, 
f‹m©
, 
åack_£ssi⁄
, 
uöt16_t
 
Æloc_Àn
);

211 
	escsi_ªadtoc_fmt
 {

212 
SCSI_READ_TOC
 = 0,

213 
SCSI_READ_SESSION_INFO
 = 1,

214 
SCSI_READ_FULL_TOC
 = 2,

215 
SCSI_READ_PMA
 = 3,

216 
SCSI_READ_ATIP
 = 4

218 
	sscsi_ªadtoc_desc
 {

220 
	sscsi_toc_desc
 {

221 
adr
;

222 
c⁄åﬁ
;

223 
åack
;

224 
uöt32_t
 
lba
;

225 } 
toc
;

226 
	sscsi_£ssi⁄_desc
 {

227 
adr
;

228 
c⁄åﬁ
;

229 
fú°_ö_œ°
;

230 
uöt32_t
 
lba
;

231 } 
£s
;

232 
	sscsi_fuŒtoc_desc
 {

233 
£ssi⁄
;

234 
adr
;

235 
c⁄åﬁ
;

236 
äo
;

237 
poöt
;

238 
mö
;

239 
£c
;

240 
‰ame
;

241 
zîo
;

242 
pmö
;

243 
p£c
;

244 
p‰ame
;

245 } 
fuŒ
;

246 } 
desc
;

249 
	sscsi_ªadtoc_li°
 {

250 
num
;

251 
fú°
;

252 
œ°
;

253 
scsi_ªadtoc_desc
 
desc
[0];

256 
	sscsi_ªp‹t_suµ‹ãd_∑øms
 {

257 
ªtu∫_timeouts
;

260 
	#SCSI_SENSE_FIXED_CURRENT
 0x70

	)

261 
	#SCSI_SENSE_FIXED_DEFERRED_ERRORS
 0x71

	)

262 
	#SCSI_SENSE_DESCRIPTOR_CURRENT
 0x72

	)

263 
	#SCSI_SENSE_DESCRIPTOR_DEFERRED_ERRORS
 0x73

	)

265 
	sscsi_£n£
 {

266 
îr‹_ty≥
;

267 
scsi_£n£_key
 
key
;

268 
ascq
;

274 
£n£_•ecific
:1;

275 
ûl_∑øm_ö_cdb
:1;

276 
bô_poöãr_vÆid
:1;

277 
bô_poöãr
;

278 
uöt16_t
 
fõld_poöãr
;

281 
	sscsi_d©a
 {

282 
size
;

283 *
d©a
;

286 
	escsi_ªsiduÆ
 {

287 
SCSI_RESIDUAL_NO_RESIDUAL
 = 0,

288 
SCSI_RESIDUAL_UNDERFLOW
,

289 
SCSI_RESIDUAL_OVERFLOW


294 
	sscsi_iovec
 {

295 *
iov_ba£
;

296 
size_t
 
iov_Àn
;

299 
	sscsi_iove˘‹
 {

300 
scsi_iovec
 *
iov
;

301 
niov
;

302 
«Œoc
;

303 
size_t
 
off£t
;

304 
c⁄sumed
;

307 
	sscsi_èsk
 {

308 
°©us
;

310 
cdb_size
;

311 
x„r_dú
;

312 
expx„æí
;

313 
cdb
[
SCSI_CDB_MAX_SIZE
];

315 
scsi_ªsiduÆ
 
ªsiduÆ_°©us
;

316 
size_t
 
ªsiduÆ
;

317 
scsi_£n£
 
£n£
;

318 
scsi_d©a
 
d©aö
;

319 
scsi_Æloˇãd_mem‹y
 *
mem
;

321 *
±r
;

323 
uöt32_t
 
ôt
;

324 
uöt32_t
 
cmd¢
;

325 
uöt32_t
 
lun
;

327 
scsi_iove˘‹
 
iove˘‹_ö
;

328 
scsi_iove˘‹
 
iove˘‹_out
;

335 
EXTERN
 
scsi_èsk
 *
scsi_¸óã_èsk
(
cdb_size
, *
cdb
,

336 
x„r_dú
, 
expx„æí
);

342 
EXTERN
 
scsi_‰ì_scsi_èsk
(
scsi_èsk
 *
èsk
);

344 
EXTERN
 
scsi_£t_èsk_¥iv©e_±r
(
scsi_èsk
 *
èsk
, *
±r
);

345 
EXTERN
 *
scsi_gë_èsk_¥iv©e_±r
(
scsi_èsk
 *
èsk
);

350 
EXTERN
 
scsi_èsk
 *
scsi_cdb_ã°unôªady
();

355 
	#SCSI_SANITIZE_OVERWRITE
 0x01

	)

356 
	#SCSI_SANITIZE_BLOCK_ERASE
 0x02

	)

357 
	#SCSI_SANITIZE_CRYPTO_ERASE
 0x03

	)

358 
	#SCSI_SANITIZE_EXIT_FAILURE_MODE
 0x1f

	)

360 
EXTERN
 
scsi_èsk
 *
scsi_cdb_ßnôize
(
immed
, 
au£
, 
ß
,

361 
∑øm_Àn
);

366 
	#SCSI_REPORTLUNS_REPORT_ALL_LUNS
 0x00

	)

367 
	#SCSI_REPORTLUNS_REPORT_WELL_KNOWN_ONLY
 0x01

	)

368 
	#SCSI_REPORTLUNS_REPORT_AVAILABLE_LUNS_ONLY
 0x02

	)

370 
	sscsi_ªp‹éuns_li°
 {

371 
uöt32_t
 
num
;

372 
uöt16_t
 
luns
[0];

375 
EXTERN
 
scsi_èsk
 *
scsi_ªp‹éuns_cdb
(
ªp‹t_ty≥
, 
Æloc_Àn
);

380 
EXTERN
 
scsi_èsk
 *
scsi_cdb_ª£rve6
();

384 
EXTERN
 
scsi_èsk
 *
scsi_cdb_ªÀa£6
();

389 
	sscsi_ªadˇ∑côy10
 {

390 
uöt32_t
 
lba
;

391 
uöt32_t
 
block_size
;

393 
EXTERN
 
scsi_èsk
 *
scsi_cdb_ªadˇ∑côy10
(
lba
, 
pmi
);

399 
	escsi_öquúy_≥rùhîÆ_quÆifõr
 {

400 
SCSI_INQUIRY_PERIPHERAL_QUALIFIER_CONNECTED
 = 0x00,

401 
SCSI_INQUIRY_PERIPHERAL_QUALIFIER_DISCONNECTED
 = 0x01,

402 
SCSI_INQUIRY_PERIPHERAL_QUALIFIER_NOT_SUPPORTED
 = 0x03

405 c⁄° *
scsi_devquÆifõr_to_°r
(

406 
scsi_öquúy_≥rùhîÆ_quÆifõr
 
quÆifõr
);

408 
	escsi_öquúy_≥rùhîÆ_devi˚_ty≥
 {

409 
SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_DIRECT_ACCESS
 = 0x00,

410 
SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_SEQUENTIAL_ACCESS
 = 0x01,

411 
SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_PRINTER
 = 0x02,

412 
SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_PROCESSOR
 = 0x03,

413 
SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_WRITE_ONCE
 = 0x04,

414 
SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_MMC
 = 0x05,

415 
SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_SCANNER
 = 0x06,

416 
SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_OPTICAL_MEMORY
 = 0x07,

417 
SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_MEDIA_CHANGER
 = 0x08,

418 
SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_COMMUNICATIONS
 = 0x09,

419 
SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_STORAGE_ARRAY_CONTROLLER
 = 0x0c,

420 
SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_ENCLOSURE_SERVICES
 = 0x0d,

421 
SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_SIMPLIFIED_DIRECT_ACCESS
 = 0x0e,

422 
SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_OPTICAL_CARD_READER
 = 0x0f,

423 
SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_BRIDGE_CONTROLLER
 = 0x10,

424 
SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_OSD
 = 0x11,

425 
SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_AUTOMATION
 = 0x12,

426 
SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_SEQURITY_MANAGER
 = 0x13,

427 
SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_WELL_KNOWN_LUN
 = 0x1e,

428 
SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_UNKNOWN
 = 0x1f

431 
EXTERN
 c⁄° *
scsi_devty≥_to_°r
(
scsi_öquúy_≥rùhîÆ_devi˚_ty≥
 
ty≥
);

433 
	escsi_vîsi⁄
 {

434 
SCSI_VERSION_SPC
 = 0x03,

435 
SCSI_VERSION_SPC2
 = 0x04,

436 
SCSI_VERSION_SPC3
 = 0x05

439 
EXTERN
 c⁄° *
scsi_vîsi⁄_to_°r
(
scsi_vîsi⁄
 
vîsi⁄
);

441 
	escsi_vîsi⁄_des¸ùt‹
 {

442 
SCSI_VERSION_DESCRIPTOR_ISCSI
 = 0x0960,

443 
SCSI_VERSION_DESCRIPTOR_SBC
 = 0x0180,

444 
SCSI_VERSION_DESCRIPTOR_SBC_ANSI_INCITS_306_1998
 = 0x019C,

445 
SCSI_VERSION_DESCRIPTOR_SBC_T10_0996_D_R08C
 = 0x019B,

446 
SCSI_VERSION_DESCRIPTOR_SBC_2
 = 0x0320,

447 
SCSI_VERSION_DESCRIPTOR_SBC_2_ISO_IEC_14776_322
 = 0x033E,

448 
SCSI_VERSION_DESCRIPTOR_SBC_2_ANSI_INCITS_405_2005
 = 0x033D,

449 
SCSI_VERSION_DESCRIPTOR_SBC_2_T10_1417_D_R16
 = 0x033B,

450 
SCSI_VERSION_DESCRIPTOR_SBC_2_T10_1417_D_R5A
 = 0x0322,

451 
SCSI_VERSION_DESCRIPTOR_SBC_2_T10_1417_D_R15
 = 0x0324,

452 
SCSI_VERSION_DESCRIPTOR_SBC_3
 = 0x04C0,

453 
SCSI_VERSION_DESCRIPTOR_SPC
 = 0x0120,

454 
SCSI_VERSION_DESCRIPTOR_SPC_ANSI_INCITS_301_1997
 = 0x013C,

455 
SCSI_VERSION_DESCRIPTOR_SPC_T10_0995_D_R11A
 = 0x013B,

456 
SCSI_VERSION_DESCRIPTOR_SPC_2
 = 0x0260,

457 
SCSI_VERSION_DESCRIPTOR_SPC_2_ISO_IEC_14776_452
 = 0x0278,

458 
SCSI_VERSION_DESCRIPTOR_SPC_2_ANSI_INCITS_351_2001
 = 0x0277,

459 
SCSI_VERSION_DESCRIPTOR_SPC_2_T10_1236_D_R20
 = 0x0276,

460 
SCSI_VERSION_DESCRIPTOR_SPC_2_T10_1236_D_R12
 = 0x0267,

461 
SCSI_VERSION_DESCRIPTOR_SPC_2_T10_1236_D_R18
 = 0x0269,

462 
SCSI_VERSION_DESCRIPTOR_SPC_2_T10_1236_D_R19
 = 0x0275,

463 
SCSI_VERSION_DESCRIPTOR_SPC_3
 = 0x0300,

464 
SCSI_VERSION_DESCRIPTOR_SPC_3_ISO_IEC_14776_453
 = 0x0316,

465 
SCSI_VERSION_DESCRIPTOR_SPC_3_ANSI_INCITS_408_2005
 = 0x0314,

466 
SCSI_VERSION_DESCRIPTOR_SPC_3_T10_1416_D_R7
 = 0x0301,

467 
SCSI_VERSION_DESCRIPTOR_SPC_3_T10_1416_D_R21
 = 0x0307,

468 
SCSI_VERSION_DESCRIPTOR_SPC_3_T10_1416_D_R22
 = 0x030F,

469 
SCSI_VERSION_DESCRIPTOR_SPC_3_T10_1416_D_R23
 = 0x0312,

470 
SCSI_VERSION_DESCRIPTOR_SPC_4
 = 0x0460,

471 
SCSI_VERSION_DESCRIPTOR_SPC_4_T10_1731_D_R16
 = 0x0461,

472 
SCSI_VERSION_DESCRIPTOR_SPC_4_T10_1731_D_R18
 = 0x0462,

473 
SCSI_VERSION_DESCRIPTOR_SPC_4_T10_1731_D_R23
 = 0x0463,

474 
SCSI_VERSION_DESCRIPTOR_SSC
 = 0x0200,

475 
SCSI_VERSION_DESCRIPTOR_UAS_T10_2095D_R04
 = 0x1747

478 
EXTERN
 c⁄° *
scsi_vîsi⁄_des¸ùt‹_to_°r
(
scsi_vîsi⁄_des¸ùt‹
 
vîsi⁄_des¸ùt‹
);

480 
	escsi_öquúy_çgs
 {

481 
SCSI_INQUIRY_TPGS_NO_SUPPORT
 = 0x00,

482 
SCSI_INQUIRY_TPGS_IMPLICIT
 = 0x01,

483 
SCSI_INQUIRY_TPGS_EXPLICIT
 = 0x02,

484 
SCSI_INQUIRY_TPGS_IMPLICIT_AND_EXPLICIT
 = 0x03

488 
	#≥rùîÆ_quÆifõr
 
quÆifõr


	)

489 
	#≥rùîÆ_devi˚_ty≥
 
devi˚_ty≥


	)

491 
	sscsi_öquúy_°™d¨d
 {

492 
scsi_öquúy_≥rùhîÆ_quÆifõr
 
quÆifõr
;

493 
scsi_öquúy_≥rùhîÆ_devi˚_ty≥
 
devi˚_ty≥
;

494 
rmb
;

495 
vîsi⁄
;

496 
n‹maˇ
;

497 
hisup
;

498 
ª•⁄£_d©a_f‹m©
;

500 
addôi⁄Æ_Àngth
;

502 
sccs
;

503 
acc
;

504 
çgs
;

505 
thªïc
;

506 
¥Ÿe˘
;

508 
íc£rv
;

509 
mu…ù
;

510 
addr16
;

511 
wbus16
;

512 
sync
;

513 
cmdque
;

515 
˛ockög
;

516 
qas
;

517 
ius
;

519 
víd‹_idítifiˇti⁄
[8+1];

520 
¥odu˘_idítifiˇti⁄
[16+1];

521 
¥odu˘_ªvisi⁄_Àvñ
[4+1];

523 
uöt16_t
 
vîsi⁄_des¸ùt‹
[8];

526 
	escsi_öquúy_∑gecode
 {

527 
SCSI_INQUIRY_PAGECODE_SUPPORTED_VPD_PAGES
 = 0x00,

528 
SCSI_INQUIRY_PAGECODE_UNIT_SERIAL_NUMBER
 = 0x80,

529 
SCSI_INQUIRY_PAGECODE_DEVICE_IDENTIFICATION
 = 0x83,

530 
SCSI_INQUIRY_PAGECODE_BLOCK_LIMITS
 = 0xB0,

531 
SCSI_INQUIRY_PAGECODE_BLOCK_DEVICE_CHARACTERISTICS
 = 0xB1,

532 
SCSI_INQUIRY_PAGECODE_LOGICAL_BLOCK_PROVISIONING
 = 0xB2

535 
EXTERN
 c⁄° *
scsi_öquúy_∑gecode_to_°r
(
∑gecode
);

537 
	sscsi_öquúy_suµ‹ãd_∑ges
 {

538 
scsi_öquúy_≥rùhîÆ_quÆifõr
 
quÆifõr
;

539 
scsi_öquúy_≥rùhîÆ_devi˚_ty≥
 
devi˚_ty≥
;

540 
scsi_öquúy_∑gecode
 
∑gecode
;

542 
num_∑ges
;

543 *
∑ges
;

546 
	sscsi_öquúy_block_limôs
 {

547 
scsi_öquúy_≥rùhîÆ_quÆifõr
 
quÆifõr
;

548 
scsi_öquúy_≥rùhîÆ_devi˚_ty≥
 
devi˚_ty≥
;

549 
scsi_öquúy_∑gecode
 
∑gecode
;

551 
w¢z
;

552 
uöt8_t
 
max_cmp
;

553 
uöt16_t
 
›t_gøn
;

554 
uöt32_t
 
max_x„r_Àn
;

555 
uöt32_t
 
›t_x„r_Àn
;

556 
uöt32_t
 
max_¥e„tch
;

557 
uöt32_t
 
max_unm≠
;

558 
uöt32_t
 
max_unm≠_bdc
;

559 
uöt32_t
 
›t_unm≠_gøn
;

560 
ugavÆid
;

561 
uöt32_t
 
unm≠_gøn_Æign
;

562 
uöt64_t
 
max_ws_Àn
;

565 
uöt32_t
 
max_©omic_x„r_Àn
;

566 
uöt32_t
 
©omic_Æign
;

567 
uöt32_t
 
©omic_gøn
;

568 
uöt32_t
 
max_©omic_é_wôh_©omic_bound¨y
;

569 
uöt32_t
 
max_©omic_bound¨y_size
;

572 
	sscsi_öquúy_block_devi˚_ch¨a˘îi°ics
 {

573 
scsi_öquúy_≥rùhîÆ_quÆifõr
 
quÆifõr
;

574 
scsi_öquúy_≥rùhîÆ_devi˚_ty≥
 
devi˚_ty≥
;

575 
scsi_öquúy_∑gecode
 
∑gecode
;

577 
medium_rŸ©i⁄_øã
;

578 
¥odu˘_ty≥
;

579 
wabîeq
;

580 
wa˚ªq
;

581 
nomöÆ_f‹m_Á˘‹
;

582 
fuab
;

583 
vbuls
;

586 
	escsi_öquúy_¥ovisi⁄ög_ty≥
 {

587 
PROVISIONING_TYPE_NONE
 = 0,

588 
PROVISIONING_TYPE_RESOURCE
 = 1,

589 
PROVISIONING_TYPE_THIN
 = 2

592 
	sscsi_öquúy_logiˇl_block_¥ovisi⁄ög
 {

593 
scsi_öquúy_≥rùhîÆ_quÆifõr
 
quÆifõr
;

594 
scsi_öquúy_≥rùhîÆ_devi˚_ty≥
 
devi˚_ty≥
;

595 
scsi_öquúy_∑gecode
 
∑gecode
;

597 
thªshﬁd_exp⁄ít
;

598 
lbpu
;

599 
lbpws
;

600 
lbpws10
;

601 
lb¥z
;

602 
™c_sup
;

603 
dp
;

604 
scsi_öquúy_¥ovisi⁄ög_ty≥
 
¥ovisi⁄ög_ty≥
;

607 
EXTERN
 
scsi_èsk
 *
scsi_cdb_öquúy
(
evpd
, 
∑ge_code
, 
Æloc_Àn
);

609 
	sscsi_öquúy_unô_£rül_numbî
 {

610 
scsi_öquúy_≥rùhîÆ_quÆifõr
 
quÆifõr
;

611 
scsi_öquúy_≥rùhîÆ_devi˚_ty≥
 
devi˚_ty≥
;

612 
scsi_öquúy_∑gecode
 
∑gecode
;

614 *
u¢
;

617 
	escsi_¥Ÿocﬁ_idítifõr
 {

618 
SCSI_PROTOCOL_IDENTIFIER_FIBRE_CHANNEL
 = 0x00,

619 
SCSI_PROTOCOL_IDENTIFIER_PARALLEL_SCSI
 = 0x01,

620 
SCSI_PROTOCOL_IDENTIFIER_SSA
 = 0x02,

621 
SCSI_PROTOCOL_IDENTIFIER_IEEE_1394
 = 0x03,

622 
SCSI_PROTOCOL_IDENTIFIER_RDMA
 = 0x04,

623 
SCSI_PROTOCOL_IDENTIFIER_ISCSI
 = 0x05,

624 
SCSI_PROTOCOL_IDENTIFIER_SAS
 = 0x06,

625 
SCSI_PROTOCOL_IDENTIFIER_ADT
 = 0x07,

626 
SCSI_PROTOCOL_IDENTIFIER_ATA
 = 0x08

629 
EXTERN
 c⁄° *
scsi_¥Ÿocﬁ_idítifõr_to_°r
(
idítifõr
);

631 
	escsi_code£t
 {

632 
SCSI_CODESET_BINARY
 = 0x01,

633 
SCSI_CODESET_ASCII
 = 0x02,

634 
SCSI_CODESET_UTF8
 = 0x03

637 
EXTERN
 c⁄° *
scsi_code£t_to_°r
(
code£t
);

639 
	escsi_assocüti⁄
 {

640 
SCSI_ASSOCIATION_LOGICAL_UNIT
 = 0x00,

641 
SCSI_ASSOCIATION_TARGET_PORT
 = 0x01,

642 
SCSI_ASSOCIATION_TARGET_DEVICE
 = 0x02

645 
EXTERN
 c⁄° *
scsi_assocüti⁄_to_°r
(
assocüti⁄
);

647 
	escsi_desig«t‹_ty≥
 {

648 
SCSI_DESIGNATOR_TYPE_VENDOR_SPECIFIC
 = 0x00,

649 
SCSI_DESIGNATOR_TYPE_T10_VENDORT_ID
 = 0x01,

650 
SCSI_DESIGNATOR_TYPE_EUI_64
 = 0x02,

651 
SCSI_DESIGNATOR_TYPE_NAA
 = 0x03,

652 
SCSI_DESIGNATOR_TYPE_RELATIVE_TARGET_PORT
 = 0x04,

653 
SCSI_DESIGNATOR_TYPE_TARGET_PORT_GROUP
 = 0x05,

654 
SCSI_DESIGNATOR_TYPE_LOGICAL_UNIT_GROUP
 = 0x06,

655 
SCSI_DESIGNATOR_TYPE_MD5_LOGICAL_UNIT_IDENTIFIER
 = 0x07,

656 
SCSI_DESIGNATOR_TYPE_SCSI_NAME_STRING
 = 0x08

659 
EXTERN
 c⁄° *
scsi_desig«t‹_ty≥_to_°r
(
assocüti⁄
);

661 
	sscsi_öquúy_devi˚_desig«t‹
 {

662 
scsi_öquúy_devi˚_desig«t‹
 *
√xt
;

664 
scsi_¥Ÿocﬁ_idítifõr
 
¥Ÿocﬁ_idítifõr
;

665 
scsi_code£t
 
code_£t
;

666 
piv
;

667 
scsi_assocüti⁄
 
assocüti⁄
;

668 
scsi_desig«t‹_ty≥
 
desig«t‹_ty≥
;

669 
desig«t‹_Àngth
;

670 *
desig«t‹
;

673 
	sscsi_öquúy_devi˚_idítifiˇti⁄
 {

674 
scsi_öquúy_≥rùhîÆ_quÆifõr
 
quÆifõr
;

675 
scsi_öquúy_≥rùhîÆ_devi˚_ty≥
 
devi˚_ty≥
;

676 
scsi_öquúy_∑gecode
 
∑gecode
;

678 
scsi_öquúy_devi˚_desig«t‹
 *
desig«t‹s
;

684 
	escsi_mode£n£_∑ge_c⁄åﬁ
 {

685 
SCSI_MODESENSE_PC_CURRENT
 = 0x00,

686 
SCSI_MODESENSE_PC_CHANGEABLE
 = 0x01,

687 
SCSI_MODESENSE_PC_DEFAULT
 = 0x02,

688 
SCSI_MODESENSE_PC_SAVED
 = 0x03

691 
	sscsi_mode_∑ge_ˇchög
 {

692 
ic
;

693 
abpf
;

694 
ˇp
;

695 
disc
;

696 
size
;

697 
w˚
;

698 
mf
;

699 
rcd
;

701 
dem™d_ªad_ªã¡i⁄_¥i‹ôy
;

702 
wrôe_ªã¡i⁄_¥i‹ôy
;

704 
dißbÀ_¥e„tch_å™s„r_Àngth
;

705 
möimum_¥e„tch
;

706 
maximum_¥e„tch
;

707 
maximum_¥e„tch_˚ûög
;

709 
fsw
;

710 
lbcss
;

711 
dø
;

712 
nv_dis
;

714 
numbî_of_ˇche_£gmíts
;

715 
ˇche_£gmít_size
;

718 
	sscsi_mode_∑ge_powî_c⁄dôi⁄
 {

719 
pm_bg_¥e˚dí˚
;

720 
°™dby_y
;

722 
idÀ_c
;

723 
idÀ_b
;

724 
idÀ_a
;

725 
°™dby_z
;

727 
uöt32_t
 
idÀ_a_c⁄dôi⁄_timî
;

728 
uöt32_t
 
°™dby_z_c⁄dôi⁄_timî
;

729 
uöt32_t
 
idÀ_b_c⁄dôi⁄_timî
;

730 
uöt32_t
 
idÀ_c_c⁄dôi⁄_timî
;

731 
uöt32_t
 
°™dby_y_c⁄dôi⁄_timî
;

733 
ccf_idÀ
;

734 
ccf_°™dby
;

735 
ccf_°›≥d
;

738 
	sscsi_mode_∑ge_c⁄åﬁ
 {

739 
t°
;

740 
tmf_⁄ly
;

741 
dpicz
;

742 
d_£n£
;

743 
g…sd
;

744 
æec
;

746 
queue_Æg‹ôhm_modifõr
;

747 
nu¨
;

748 
qîr
;

750 
vs
;

751 
øc
;

752 
ua_öéck_˘æ
;

753 
swp
;

755 
©o
;

756 
ès
;

757 
©m≥
;

758 
rwwp
;

759 
autﬁﬂd_mode
;

761 
busy_timeout_≥riod
;

762 
exãnded_£l·e°_com∂ëi⁄_time
;

765 
	sscsi_mode_∑ge_disc⁄√˘_ªc⁄√˘
 {

766 
buf„r_fuŒ_øtio
;

767 
buf„r_em±y_øtio
;

768 
bus_öa˘ivôy_limô
;

769 
disc⁄√˘_time_limô
;

770 
c⁄√˘_time_limô
;

771 
maximum_bur°_size
;

772 
emdp
;

773 
Áú_¨bôøti⁄
;

774 
dimm
;

775 
dtdc
;

776 
fú°_bur°_size
;

779 
	sscsi_mode_∑ge_öf‹m©i⁄Æ_ex˚±i⁄s_c⁄åﬁ
 {

780 
≥rf
;

781 
ebf
;

782 
ewasc
;

783 
dex˝t
;

784 
ã°
;

785 
ebackîr
;

786 
logîr
;

787 
mrõ
;

788 
öãrvÆ_timî
;

789 
ªp‹t_cou¡
;

792 
	escsi_mode£n£_∑ge_code
 {

793 
SCSI_MODEPAGE_READ_WRITE_ERROR_RECOVERY
 = 0x01,

794 
SCSI_MODEPAGE_DISCONNECT_RECONNECT
 = 0x02,

795 
SCSI_MODEPAGE_VERIFY_ERROR_RECOVERY
 = 0x07,

796 
SCSI_MODEPAGE_CACHING
 = 0x08,

797 
SCSI_MODEPAGE_XOR_CONTROL
 = 0x10,

798 
SCSI_MODEPAGE_CONTROL
 = 0x0a,

799 
SCSI_MODEPAGE_POWER_CONDITION
 = 0x1a,

800 
SCSI_MODEPAGE_INFORMATIONAL_EXCEPTIONS_CONTROL
 = 0x1c,

801 
SCSI_MODEPAGE_RETURN_ALL_PAGES
 = 0x3f

808 
	#SCSI_MODESENSE_PAGECODE_READ_WRITE_ERROR_RECOVERY
 
SCSI_MODEPAGE_READ_WRITE_ERROR_RECOVERY


	)

809 
	#SCSI_MODESENSE_PAGECODE_DISCONNECT_RECONNECT
 
SCSI_MODEPAGE_DISCONNECT_RECONNECT


	)

810 
	#SCSI_MODESENSE_PAGECODE_VERIFY_ERROR_RECOVERY
 
SCSI_MODEPAGE_VERIFY_ERROR_RECOVERY


	)

811 
	#SCSI_MODESENSE_PAGECODE_CACHING
 
SCSI_MODEPAGE_CACHING


	)

812 
	#SCSI_MODESENSE_PAGECODE_XOR_CONTROL
 
SCSI_MODEPAGE_XOR_CONTROL


	)

813 
	#SCSI_MODESENSE_PAGECODE_CONTROL
 
SCSI_MODEPAGE_CONTROL


	)

814 
	#SCSI_MODESENSE_PAGECODE_INFORMATIONAL_EXCEPTIONS_CONTROL
 
SCSI_MODEPAGE_INFORMATIONAL_EXCEPTIONS_CONTROL


	)

815 
	#SCSI_MODESENSE_PAGECODE_RETURN_ALL_PAGES
 
SCSI_MODEPAGE_RETURN_ALL_PAGES


	)

817 
	sscsi_mode_∑ge
 {

818 
scsi_mode_∑ge
 *
√xt
;

819 
ps
;

820 
•f
;

821 
scsi_mode£n£_∑ge_code
 
∑ge_code
;

822 
sub∑ge_code
;

823 
Àn
;

825 
scsi_mode_∑ge_ˇchög
 
ˇchög
;

826 
scsi_mode_∑ge_c⁄åﬁ
 
c⁄åﬁ
;

827 
scsi_mode_∑ge_disc⁄√˘_ªc⁄√˘
 
disc⁄√˘_ªc⁄√˘
;

828 
scsi_mode_∑ge_öf‹m©i⁄Æ_ex˚±i⁄s_c⁄åﬁ
 
õc
;

829 
scsi_mode_∑ge_powî_c⁄dôi⁄
 
powî_c⁄dôi⁄
;

833 
	sscsi_mode_£n£
 {

834 
uöt16_t
 
mode_d©a_Àngth
;

835 
uöt8_t
 
medium_ty≥
;

836 
uöt8_t
 
devi˚_•ecific_∑ømëî
;

837 
uöt8_t
 
l⁄glba
;

838 
uöt8_t
 
block_des¸ùt‹_Àngth
;

839 
scsi_mode_∑ge
 *
∑ges
;

842 
EXTERN
 
scsi_mode_∑ge
 *

843 
scsi_mode£n£_gë_∑ge
(
scsi_mode_£n£
 *
ms
,

844 
scsi_mode£n£_∑ge_code
 
∑ge_code
,

845 
sub∑ge_code
);

847 
EXTERN
 
scsi_èsk
 *
scsi_cdb_mode£n£6
(
dbd
,

848 
scsi_mode£n£_∑ge_c⁄åﬁ
 
pc
,

849 
scsi_mode£n£_∑ge_code
 
∑ge_code
,

850 
sub_∑ge_code
,

851 
Æloc_Àn
);

853 
EXTERN
 
scsi_èsk
 *
scsi_cdb_mode£n£10
(
ŒbØ
, 
dbd
,

854 
scsi_mode£n£_∑ge_c⁄åﬁ
 
pc
,

855 
scsi_mode£n£_∑ge_code
 
∑ge_code
,

856 
sub_∑ge_code
,

857 
Æloc_Àn
);

860 
EXTERN
 
scsi_èsk
 *
scsi_cdb_mode£À˘6
(
pf
, 
•
, 
∑øm_Àn
);

862 
EXTERN
 
scsi_èsk
 *
scsi_cdb_mode£À˘10
(
pf
, 
•
, 
∑øm_Àn
);

864 
EXTERN
 
scsi_d©a
 *

865 
scsi_mode£n£_d©aout_m¨shÆl
(
scsi_èsk
 *
èsk
,

866 
scsi_mode_∑ge
 *
mp
,

867 
is_mode£À˘6
);

870 
	sscsi_ªadˇ∑côy16
 {

871 
uöt64_t
 
ªtu∫ed_lba
;

872 
uöt32_t
 
block_Àngth
;

873 
uöt8_t
 
p_ty≥
;

874 
uöt8_t
 
¥Ÿ_í
;

875 
uöt8_t
 
p_i_exp
;

876 
uöt8_t
 
lbµbe
;

877 
uöt8_t
 
lbpme
;

878 
uöt8_t
 
lb¥z
;

879 
uöt16_t
 
œlba
;

882 
	escsi_¥ovisi⁄ög_ty≥
 {

883 
SCSI_PROVISIONING_TYPE_MAPPED
 = 0x00,

884 
SCSI_PROVISIONING_TYPE_DEALLOCATED
 = 0x01,

885 
SCSI_PROVISIONING_TYPE_ANCHORED
 = 0x02

888 
	sscsi_lba_°©us_des¸ùt‹
 {

889 
uöt64_t
 
lba
;

890 
uöt32_t
 
num_blocks
;

891 
scsi_¥ovisi⁄ög_ty≥
 
¥ovisi⁄ög
;

894 
	sscsi_gë_lba_°©us
 {

895 
uöt32_t
 
num_des¸ùt‹s
;

896 
scsi_lba_°©us_des¸ùt‹
 *
des¸ùt‹s
;

900 
	sscsi_›_timeout_des¸ùt‹
 {

901 
uöt16_t
 
des¸ùt‹_Àngth
;

902 
uöt8_t
 
comm™d_•ecific
;

903 
uöt32_t
 
nomöÆ_¥o˚ssög_timeout
;

904 
uöt32_t
 
ªcommíded_timeout
;

907 
	sscsi_comm™d_des¸ùt‹
 {

908 
uöt8_t
 
›code
;

909 
uöt16_t
 
ß
;

910 
uöt8_t
 
˘dp
;

911 
uöt8_t
 
£rva˘v
;

912 
uöt16_t
 
cdb_Àn
;

915 
scsi_›_timeout_des¸ùt‹
 
to
;

918 
	sscsi_ªp‹t_suµ‹ãd_›_codes
 {

919 
num_des¸ùt‹s
;

920 
scsi_comm™d_des¸ùt‹
 
des¸ùt‹s
[0];

923 
	sscsi_ªp‹t_suµ‹ãd_›_codes_⁄e_comm™d
 {

924 
uöt8_t
 
˘dp
;

925 
uöt8_t
 
suµ‹t
;

926 
uöt8_t
 
cdb_Àngth
;

927 
uöt8_t
 
cdb_ußge_d©a
[16];

930 
scsi_›_timeout_des¸ùt‹
 
to
;

933 
	sscsi_≥rsi°ít_ª£rve_ö_ªad_keys
 {

934 
uöt32_t
 
¥gíî©i⁄
;

935 
uöt32_t
 
addôi⁄Æ_Àngth
;

937 
num_keys
;

938 
uöt64_t
 
keys
[0];

941 
	sscsi_≥rsi°ít_ª£rve_ö_ªad_ª£rv©i⁄
 {

942 
uöt32_t
 
¥gíî©i⁄
;

943 
uöt32_t
 
addôi⁄Æ_Àngth
;

945 
ª£rved
;

947 
uöt64_t
 
ª£rv©i⁄_key
;

948 
¥_sc›e
;

949 
¥_ty≥
;

952 
	escsi_≥rsi°ít_ª£rv©i⁄_ty≥_mask
 {

953 
SCSI_PR_TYPE_MASK_EX_AC_AR
 = (1 << 0),

954 
SCSI_PR_TYPE_MASK_WR_EX
 = (1 << 9),

955 
SCSI_PR_TYPE_MASK_EX_AC
 = (1 << 11),

956 
SCSI_PR_TYPE_MASK_WR_EX_RO
 = (1 << 13),

957 
SCSI_PR_TYPE_MASK_EX_AC_RO
 = (1 << 14),

958 
SCSI_PR_TYPE_MASK_WR_EX_AR
 = (1 << 15),

960 
SCSI_PR_TYPE_MASK_ALL
 = (
SCSI_PR_TYPE_MASK_EX_AC_AR


961 | 
SCSI_PR_TYPE_MASK_WR_EX


962 | 
SCSI_PR_TYPE_MASK_EX_AC


963 | 
SCSI_PR_TYPE_MASK_WR_EX_RO


964 | 
SCSI_PR_TYPE_MASK_EX_AC_RO


965 | 
SCSI_PR_TYPE_MASK_WR_EX_AR
)

968 
	sscsi_≥rsi°ít_ª£rve_ö_ªp‹t_ˇ∑bûôõs
 {

969 
uöt16_t
 
Àngth
;

970 
uöt8_t
 
¸h
;

971 
uöt8_t
 
sù_c
;

972 
uöt8_t
 
©p_c
;

973 
uöt8_t
 
±∂_c
;

974 
uöt8_t
 
tmv
;

975 
uöt8_t
 
Ælow_comm™ds
;

976 
uöt8_t
 
±∂_a
;

977 
uöt16_t
 
≥rsi°ít_ª£rv©i⁄_ty≥_mask
;

980 
	sscsi_ªad6_cdb
 {

981 
scsi_›code
 
›code
;

982 
uöt32_t
 
lba
;

983 
uöt16_t
 
å™s„r_Àngth
;

984 
uöt8_t
 
c⁄åﬁ
;

987 
	sscsi_ªad10_cdb
 {

988 
scsi_›code
 
›code
;

989 
uöt8_t
 
rd¥Ÿe˘
;

990 
uöt8_t
 
dpo
;

991 
uöt8_t
 
fua
;

992 
uöt8_t
 
fua_nv
;

993 
uöt32_t
 
lba
;

994 
uöt8_t
 
group
;

995 
uöt16_t
 
å™s„r_Àngth
;

996 
uöt8_t
 
c⁄åﬁ
;

999 
	sscsi_ªad12_cdb
 {

1000 
scsi_›code
 
›code
;

1001 
uöt8_t
 
rd¥Ÿe˘
;

1002 
uöt8_t
 
dpo
;

1003 
uöt8_t
 
fua
;

1004 
uöt8_t
 
ørc
;

1005 
uöt8_t
 
fua_nv
;

1006 
uöt32_t
 
lba
;

1007 
uöt32_t
 
å™s„r_Àngth
;

1008 
uöt8_t
 
group
;

1009 
uöt8_t
 
c⁄åﬁ
;

1012 
	sscsi_ªad16_cdb
 {

1013 
scsi_›code
 
›code
;

1014 
uöt8_t
 
rd¥Ÿe˘
;

1015 
uöt8_t
 
dpo
;

1016 
uöt8_t
 
fua
;

1017 
uöt8_t
 
ørc
;

1018 
uöt8_t
 
fua_nv
;

1019 
uöt64_t
 
lba
;

1020 
uöt32_t
 
å™s„r_Àngth
;

1021 
uöt8_t
 
group
;

1022 
uöt8_t
 
c⁄åﬁ
;

1025 
	sscsi_vîify10_cdb
 {

1026 
scsi_›code
 
›code
;

1027 
uöt8_t
 
vΩrŸe˘
;

1028 
uöt8_t
 
dpo
;

1029 
uöt8_t
 
bytchk
;

1030 
uöt32_t
 
lba
;

1031 
uöt8_t
 
group
;

1032 
uöt16_t
 
vîifiˇti⁄_Àngth
;

1033 
uöt8_t
 
c⁄åﬁ
;

1036 
	sscsi_vîify12_cdb
 {

1037 
scsi_›code
 
›code
;

1038 
uöt8_t
 
vΩrŸe˘
;

1039 
uöt8_t
 
dpo
;

1040 
uöt8_t
 
bytchk
;

1041 
uöt32_t
 
lba
;

1042 
uöt32_t
 
vîifiˇti⁄_Àngth
;

1043 
uöt8_t
 
group
;

1044 
uöt8_t
 
c⁄åﬁ
;

1047 
	sscsi_vîify16_cdb
 {

1048 
scsi_›code
 
›code
;

1049 
uöt8_t
 
vΩrŸe˘
;

1050 
uöt8_t
 
dpo
;

1051 
uöt8_t
 
bytchk
;

1052 
uöt64_t
 
lba
;

1053 
uöt32_t
 
vîifiˇti⁄_Àngth
;

1054 
uöt8_t
 
group
;

1055 
uöt8_t
 
c⁄åﬁ
;

1058 
	sscsi_wrôe10_cdb
 {

1059 
scsi_›code
 
›code
;

1060 
uöt8_t
 
wΩrŸe˘
;

1061 
uöt8_t
 
dpo
;

1062 
uöt8_t
 
fua
;

1063 
uöt8_t
 
fua_nv
;

1064 
uöt32_t
 
lba
;

1065 
uöt8_t
 
group
;

1066 
uöt16_t
 
å™s„r_Àngth
;

1067 
uöt8_t
 
c⁄åﬁ
;

1070 
	sscsi_wrôe12_cdb
 {

1071 
scsi_›code
 
›code
;

1072 
uöt8_t
 
wΩrŸe˘
;

1073 
uöt8_t
 
dpo
;

1074 
uöt8_t
 
fua
;

1075 
uöt8_t
 
fua_nv
;

1076 
uöt32_t
 
lba
;

1077 
uöt32_t
 
å™s„r_Àngth
;

1078 
uöt8_t
 
group
;

1079 
uöt8_t
 
c⁄åﬁ
;

1082 
	sscsi_wrôe16_cdb
 {

1083 
scsi_›code
 
›code
;

1084 
uöt8_t
 
wΩrŸe˘
;

1085 
uöt8_t
 
dpo
;

1086 
uöt8_t
 
fua
;

1087 
uöt8_t
 
fua_nv
;

1088 
uöt32_t
 
lba
;

1089 
uöt32_t
 
å™s„r_Àngth
;

1090 
uöt8_t
 
group
;

1091 
uöt8_t
 
c⁄åﬁ
;

1094 
	sscsi_wrôótomic16_cdb
 {

1095 
scsi_›code
 
›code
;

1096 
uöt8_t
 
wΩrŸe˘
;

1097 
uöt8_t
 
dpo
;

1098 
uöt8_t
 
fua
;

1099 
uöt32_t
 
lba
;

1100 
uöt16_t
 
å™s„r_Àngth
;

1101 
uöt8_t
 
group
;

1102 
uöt8_t
 
c⁄åﬁ
;

1105 
EXTERN
 
scsi_d©aö_gëfuŒsize
(
scsi_èsk
 *
èsk
);

1106 
EXTERN
 *
scsi_d©aö_unm¨shÆl
(
scsi_èsk
 *
èsk
);

1107 
EXTERN
 *
scsi_cdb_unm¨shÆl
(
scsi_èsk
 *
èsk
, 
scsi_›code
 
›code
);

1109 
EXTERN
 
scsi_∑r£_£n£_d©a
(
scsi_£n£
 *
£n£
, c⁄° 
uöt8_t
 *
sb
);

1111 
EXTERN
 
scsi_èsk
 *
scsi_cdb_com∑ª™dwrôe
(
uöt64_t
 
lba
, 
uöt32_t
 
x„æí
, 
blocksize
, 
wΩrŸe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
);

1112 
EXTERN
 
scsi_èsk
 *
scsi_cdb_gë_lba_°©us
(
uöt64_t
 
°¨tög_lba
, 
uöt32_t
 
Æloc_Àn
);

1113 
EXTERN
 
scsi_èsk
 *
scsi_cdb_‹wrôe
(
uöt64_t
 
lba
, 
uöt32_t
 
x„æí
, 
blocksize
, 
wΩrŸe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
);

1114 
EXTERN
 
scsi_èsk
 *
scsi_cdb_≥rsi°ít_ª£rve_ö
(
scsi_≥rsi°ít_ö_ß
 
ß
, 
uöt16_t
 
x„æí
);

1115 
EXTERN
 
scsi_èsk
 *
scsi_cdb_≥rsi°ít_ª£rve_out
(
scsi_≥rsi°ít_out_ß
 
ß
, 
scsi_≥rsi°ít_out_sc›e
 
sc›e
, 
scsi_≥rsi°ít_out_ty≥
 
ty≥
, *
∑øms
);

1116 
EXTERN
 
scsi_èsk
 *
scsi_cdb_¥e„tch10
(
uöt32_t
 
lba
, 
num_blocks
, 
immed
, 
group
);

1117 
EXTERN
 
scsi_èsk
 *
scsi_cdb_¥e„tch16
(
uöt64_t
 
lba
, 
num_blocks
, 
immed
, 
group
);

1118 
EXTERN
 
scsi_èsk
 *
scsi_cdb_¥evíèŒow
(
¥evít
);

1119 
EXTERN
 
scsi_èsk
 *
scsi_cdb_ªad6
(
uöt32_t
 
lba
, uöt32_à
x„æí
, 
blocksize
);

1120 
EXTERN
 
scsi_èsk
 *
scsi_cdb_ªad10
(
uöt32_t
 
lba
, uöt32_à
x„æí
, 
blocksize
, 
rd¥Ÿe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
);

1121 
EXTERN
 
scsi_èsk
 *
scsi_cdb_ªad12
(
uöt32_t
 
lba
, uöt32_à
x„æí
, 
blocksize
, 
rd¥Ÿe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
);

1122 
EXTERN
 
scsi_èsk
 *
scsi_cdb_ªad16
(
uöt64_t
 
lba
, 
uöt32_t
 
x„æí
, 
blocksize
, 
rd¥Ÿe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
);

1123 
EXTERN
 
scsi_èsk
 *
scsi_cdb_ªadˇ∑côy16
();

1124 
EXTERN
 
scsi_èsk
 *
scsi_cdb_ªadde„˘d©a10
(
ªq_∂i°
, 
ªq_gli°
, 
de„˘_li°_f‹m©
, 
uöt16_t
 
Æloc_Àn
);

1125 
EXTERN
 
scsi_èsk
 *
scsi_cdb_ªadde„˘d©a12
(
ªq_∂i°
, 
ªq_gli°
, 
de„˘_li°_f‹m©
, 
uöt32_t
 
addªss_des¸ùt‹_ödex
, uöt32_à
Æloc_Àn
);

1126 
EXTERN
 
scsi_èsk
 *
scsi_cdb_ªp‹t_suµ‹ãd_›codes
(
r˘d
, 
›ti⁄s
, 
scsi_›code
 
›code
, 
ß
, 
uöt32_t
 
Æloc_Àn
);

1127 
EXTERN
 
scsi_èsk
 *
scsi_cdb_£rvi˚a˘i⁄ö16
(
scsi_£rvi˚_a˘i⁄_ö
 
ß
, 
uöt32_t
 
x„æí
);

1128 
EXTERN
 
scsi_èsk
 *
scsi_cdb_°¨t°›unô
(
immed
, 
pcm
, 
pc
, 
no_Êush
, 
l€j
, 
°¨t
);

1129 
EXTERN
 
scsi_èsk
 *
scsi_cdb_synchr⁄izeˇche10
(
lba
, 
num_blocks
, 
syn˙v
, 
immed
);

1130 
EXTERN
 
scsi_èsk
 *
scsi_cdb_synchr⁄izeˇche16
(
uöt64_t
 
lba
, 
uöt32_t
 
num_blocks
, 
syn˙v
, 
immed
);

1131 
EXTERN
 
scsi_èsk
 *
scsi_cdb_unm≠
(
™ch‹
, 
group
, 
uöt16_t
 
x„æí
);

1132 
EXTERN
 
scsi_èsk
 *
scsi_cdb_vîify10
(
uöt32_t
 
lba
, uöt32_à
x„æí
, 
v¥Ÿe˘
, 
dpo
, 
bytchk
, 
blocksize
);

1133 
EXTERN
 
scsi_èsk
 *
scsi_cdb_vîify12
(
uöt32_t
 
lba
, uöt32_à
x„æí
, 
v¥Ÿe˘
, 
dpo
, 
bytchk
, 
blocksize
);

1134 
EXTERN
 
scsi_èsk
 *
scsi_cdb_vîify16
(
uöt64_t
 
lba
, 
uöt32_t
 
x„æí
, 
v¥Ÿe˘
, 
dpo
, 
bytchk
, 
blocksize
);

1135 
EXTERN
 
scsi_èsk
 *
scsi_cdb_wrôe10
(
uöt32_t
 
lba
, uöt32_à
x„æí
, 
blocksize
, 
wΩrŸe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
);

1136 
EXTERN
 
scsi_èsk
 *
scsi_cdb_wrôe12
(
uöt32_t
 
lba
, uöt32_à
x„æí
, 
blocksize
, 
wΩrŸe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
);

1137 
EXTERN
 
scsi_èsk
 *
scsi_cdb_wrôe16
(
uöt64_t
 
lba
, 
uöt32_t
 
x„æí
, 
blocksize
, 
wΩrŸe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
);

1138 
EXTERN
 
scsi_èsk
 *
scsi_cdb_wrôótomic16
(
uöt64_t
 
lba
, 
uöt32_t
 
x„æí
, 
blocksize
, 
wΩrŸe˘
, 
dpo
, 
fua
, 
group_numbî
);

1139 
EXTERN
 
scsi_èsk
 *
scsi_cdb_wrôeßme10
(
wΩrŸe˘
, 
™ch‹
, 
unm≠
, 
uöt32_t
 
lba
, 
group
, 
uöt16_t
 
num_blocks
, uöt32_à
d©Æí
);

1140 
EXTERN
 
scsi_èsk
 *
scsi_cdb_wrôeßme16
(
wΩrŸe˘
, 
™ch‹
, 
unm≠
, 
uöt64_t
 
lba
, 
group
, 
uöt32_t
 
num_blocks
, uöt32_à
d©Æí
);

1141 
EXTERN
 
scsi_èsk
 *
scsi_cdb_wrôevîify10
(
uöt32_t
 
lba
, uöt32_à
x„æí
, 
blocksize
, 
wΩrŸe˘
, 
dpo
, 
bytchk
, 
group_numbî
);

1142 
EXTERN
 
scsi_èsk
 *
scsi_cdb_wrôevîify12
(
uöt32_t
 
lba
, uöt32_à
x„æí
, 
blocksize
, 
wΩrŸe˘
, 
dpo
, 
bytchk
, 
group_numbî
);

1143 
EXTERN
 
scsi_èsk
 *
scsi_cdb_wrôevîify16
(
uöt64_t
 
lba
, 
uöt32_t
 
x„æí
, 
blocksize
, 
wΩrŸe˘
, 
dpo
, 
bytchk
, 
group_numbî
);

1149 
	#XCOPY_DESC_OFFSET
 16

	)

1150 
	#SEG_DESC_SRC_INDEX_OFFSET
 4

	)

1151 
	eli°_id_ußge
 {

1152 
LIST_ID_USAGE_HOLD
 = 0,

1153 
LIST_ID_USAGE_DISCARD
 = 2,

1154 
LIST_ID_USAGE_DISABLE
 = 3

1157 
	eec_des¸_ty≥_code
 {

1159 
BLK_TO_STRM_SEG_DESCR
 = 0x00,

1160 
STRM_TO_BLK_SEG_DESCR
 = 0x01,

1161 
BLK_TO_BLK_SEG_DESCR
 = 0x02,

1162 
STRM_TO_STRM_SEG_DESCR
 = 0x03,

1165 
IDENT_DESCR_TGT_DESCR
 = 0xE4,

1166 
IPV4_TGT_DESCR
 = 0xE5,

1167 
IPV6_TGT_DESCR
 = 0xEA,

1168 
IP_COPY_SVC_TGT_DESCR
 = 0xEB

1171 
	elu_id_ty≥
 {

1172 
LU_ID_TYPE_LUN
 = 0x00,

1173 
LU_ID_TYPE_PROXY_TOKEN
 = 0x01,

1174 
LU_ID_TYPE_RSVD
 = 0x02,

1175 
LU_ID_TYPE_RSVD1
 = 0x03

1178 
EXTERN
 
scsi_èsk
 *
scsi_cdb_exãnded_c›y
(
immed
);

1183 
	escsi_c›y_ªsu…s_ß
 {

1184 
SCSI_COPY_RESULTS_COPY_STATUS
 = 0,

1185 
SCSI_COPY_RESULTS_RECEIVE_DATA
 = 1,

1186 
SCSI_COPY_RESULTS_OP_PARAMS
 = 3,

1187 
SCSI_COPY_RESULTS_FAILED_SEGMENT
 = 4,

1190 
EXTERN
 
scsi_èsk
 *
scsi_cdb_ª˚ive_c›y_ªsu…s
(
scsi_c›y_ªsu…s_ß
 
ß
, 
li°_id
, 
x„æí
);

1192 
	sscsi_c›y_ªsu…s_c›y_°©us
 {

1193 
uöt32_t
 
avaûabÀ_d©a
;

1194 
uöt8_t
 
c›y_m™agî_°©us
;

1195 
uöt8_t
 
hdd
;

1196 
uöt16_t
 
£gmíts_¥o˚s£d
;

1197 
uöt8_t
 
å™s„r_cou¡_unôs
;

1198 
uöt32_t
 
å™s„r_cou¡
;

1201 
	sscsi_c›y_ªsu…s_›_∑øms
 {

1202 
uöt32_t
 
avaûabÀ_d©a
;

1203 
uöt16_t
 
max_èrgë_desc_cou¡
;

1204 
uöt16_t
 
max_£gmít_desc_cou¡
;

1205 
uöt32_t
 
max_desc_li°_Àngth
;

1206 
uöt32_t
 
max_£gmít_Àngth
;

1207 
uöt32_t
 
max_ölöe_d©a_Àngth
;

1208 
uöt32_t
 
hñd_d©a_limô
;

1209 
uöt32_t
 
max_°ªam_devi˚_å™s„r_size
;

1210 
uöt16_t
 
tŸÆ_c⁄cuºít_c›õs
;

1211 
uöt8_t
 
max_c⁄cuºít_c›õs
;

1212 
uöt8_t
 
d©a_£gmít_gønuœrôy
;

1213 
uöt8_t
 
ölöe_d©a_gønuœrôy
;

1214 
uöt8_t
 
hñd_d©a_gønuœrôy
;

1215 
uöt8_t
 
im∂_desc_li°_Àngth
;

1216 
uöt8_t
 
imp_desc_ty≥_codes
[0];

1218 *
scsi_mÆloc
(
scsi_èsk
 *
èsk
, 
size_t
 
size
);

1220 
uöt64_t
 
scsi_gë_uöt64
(c⁄° *
c
);

1221 
uöt32_t
 
scsi_gë_uöt32
(c⁄° *
c
);

1222 
uöt16_t
 
scsi_gë_uöt16
(c⁄° *
c
);

1223 
scsi_£t_uöt64
(*
c
, 
uöt64_t
 
vÆ
);

1224 
scsi_£t_uöt32
(*
c
, 
uöt32_t
 
vÆ
);

1225 
scsi_£t_uöt16
(*
c
, 
uöt16_t
 
vÆ
);

1227 #ifde‡
__˝lu•lus


	@include/slist.h

18 #i‚de‡
__iscsi_¶i°_h__


19 
	#__iscsi_¶i°_h__


	)

21 
	#ISCSI_LIST_ADD
(
li°
, 
ôem
) \

23 (
ôem
)->
√xt
 = (*
li°
); \

24 (*
li°
Ë(
ôem
); \

25 } 0);

	)

27 
	#ISCSI_LIST_ADD_END
(
li°
, 
ôem
) \

28 i‡((*
li°
Ë=
NULL
) { \

29 
	`ISCSI_LIST_ADD
((
li°
), (
ôem
)); \

31 *
hód
 = (*
li°
); \

32 (*
li°
)->
√xt
) \

33 (*
li°
Ë(*li°)->
√xt
; \

34 (*
li°
)->
√xt
 = (
ôem
); \

35 (
ôem
)->
√xt
 = 
NULL
; \

36 (*
li°
Ë
hód
; \

37 }

	)

39 
	#ISCSI_LIST_REMOVE
(
li°
, 
ôem
) \

40 i‡((*
li°
Ë=(
ôem
)) { \

41 (*
li°
Ë(
ôem
)->
√xt
; \

43 *
hód
 = (*
li°
); \

44 (*
li°
)->
√xt
 && (*li°)->√xà!(
ôem
)) \

45 (*
li°
Ë(*li°)->
√xt
; \

46 i‡((*
li°
)->
√xt
 !
NULL
) { \

47 (*
li°
)->
√xt
 = (*list)->next->next; \

49 (*
li°
Ë
hód
; \

50 }

	)

52 
	#ISCSI_LIST_LENGTH
(
li°
,
Àngth
) \

54 (
Àngth
) = 0; \

55 *
hód
 = (*
li°
); \

56 (*
li°
)) { \

57 (*
li°
Ë(*li°)->
√xt
; \

58 (
Àngth
)++; \

60 (*
li°
Ë
hód
; \

61 } 0);

	)

	@lib/connect.c

18 #i‡
deföed
(
_WIN32
)

19 
	~"wö32/wö32_com∑t.h
"

21 
	~<uni°d.h
>

24 #ifde‡
HAVE_SYS_SOCKET_H


25 
	~<sys/sockë.h
>

28 #ifde‡
HAVE_NETINET_IN_H


29 
	~<√töë/ö.h
>

32 
	~<°dio.h
>

33 
	~<°rög.h
>

34 
	~<°dlib.h
>

35 
	~<î∫o.h
>

36 
	~<time.h
>

37 
	~"¶i°.h
"

38 
	~"iscsi.h
"

39 
	~"iscsi-¥iv©e.h
"

40 
	~"scsi-lowÀvñ.h
"

42 
	sc⁄√˘_èsk
 {

43 
iscsi_comm™d_cb
 
	mcb
;

44 *
	m¥iv©e_d©a
;

45 
	mlun
;

46 
	mnum_uas
;

50 
iscsi_c⁄√˘_cb
(
iscsi_c⁄ãxt
 *
iscsi
, 
°©us
, *
comm™d_d©a
 
_U_
,

51 *
¥iv©e_d©a
);

66 
scsi_èsk
 *

67 
	$iscsi_ã°unôªady_c⁄√˘
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

68 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

70 
scsi_èsk
 *
èsk
;

71 
iscsi_c⁄ãxt
 *
ﬁd_iscsi
 = 
iscsi
->old_iscsi;

73 
iscsi
->
ﬁd_iscsi
 = 
NULL
;

74 
èsk
 = 
	`iscsi_ã°unôªady_èsk
(
iscsi
, 
lun
, 
cb
, 
¥iv©e_d©a
);

75 
iscsi
->
ﬁd_iscsi
 = old_iscsi;

77  
èsk
;

78 
	}
}

81 
	$iscsi_ã°unôªady_cb
(
iscsi_c⁄ãxt
 *
iscsi
, 
°©us
,

82 *
comm™d_d©a
, *
¥iv©e_d©a
)

84 
c⁄√˘_èsk
 *
˘
 = 
¥iv©e_d©a
;

85 
scsi_èsk
 *
èsk
 = 
comm™d_d©a
;

87 i‡(
°©us
 != 0) {

88 i‡(
èsk
->
£n£
.
key
 =
SCSI_SENSE_UNIT_ATTENTION
) {

95 
˘
->
num_uas
++;

96 i‡(
˘
->
num_uas
 > 10) {

97 
	`iscsi_£t_îr‹
(
iscsi
, "iscsi_testunitready "

100 
˘
->
	`cb
(
iscsi
, 
SCSI_STATUS_ERROR
, 
NULL
,

101 
˘
->
¥iv©e_d©a
);

102 
	`iscsi_‰ì
(
iscsi
, 
˘
);

103 
	`scsi_‰ì_scsi_èsk
(
èsk
);

106 i‡(
	`iscsi_ã°unôªady_c⁄√˘
(
iscsi
, 
˘
->
lun
,

107 
iscsi_ã°unôªady_cb
,

108 
˘
Ë=
NULL
) {

109 
	`iscsi_£t_îr‹
(
iscsi
, "iscsi_testunitready "

111 
˘
->
	`cb
(
iscsi
, 
SCSI_STATUS_ERROR
, 
NULL
,

112 
˘
->
¥iv©e_d©a
);

113 
	`iscsi_‰ì
(
iscsi
, 
˘
);

115 
	`scsi_‰ì_scsi_èsk
(
èsk
);

121 i‡(
°©us
 != 0

122 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_NOT_READY


123 && (
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT


124 || 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_CLOSED


125 || 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_OPEN
)) {

126 
°©us
 = 0;

130 i‡(
°©us
 =
SCSI_STATUS_RESERVATION_CONFLICT
) {

131 
°©us
 = 0;

135 i‡(
°©us
 != 0

136 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_NOT_READY


137 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_SANITIZE_IN_PROGRESS
) {

138 
°©us
 = 0;

141 
˘
->
	`cb
(
iscsi
, 
°©us
?
SCSI_STATUS_ERROR
:
SCSI_STATUS_GOOD
, 
NULL
,

142 
˘
->
¥iv©e_d©a
);

143 
	`scsi_‰ì_scsi_èsk
(
èsk
);

144 
	`iscsi_‰ì
(
iscsi
, 
˘
);

145 
	}
}

148 
	$iscsi_logö_cb
(
iscsi_c⁄ãxt
 *
iscsi
, 
°©us
, *
comm™d_d©a
 
_U_
,

149 *
¥iv©e_d©a
)

151 
c⁄√˘_èsk
 *
˘
 = 
¥iv©e_d©a
;

153 i‡(
°©us
 =
SCSI_STATUS_REDIRECT
 && 
iscsi
->
èrgë_addªss
[0]) {

154 
	`iscsi_disc⁄√˘
(
iscsi
);

155 i‡(
iscsi
->
böd_öãrÁ˚s
[0]Ë
	`iscsi_de¸emít_iÁ˚_º
();

156 i‡(
	`iscsi_c⁄√˘_async
(
iscsi
, iscsi->
èrgë_addªss
, 
iscsi_c⁄√˘_cb
, iscsi->
c⁄√˘_d©a
) != 0) {

157 
	`iscsi_‰ì
(
iscsi
, 
˘
);

163 i‡(
°©us
 != 0) {

164 
˘
->
	`cb
(
iscsi
, 
SCSI_STATUS_ERROR
, 
NULL
, ct->
¥iv©e_d©a
);

165 
	`iscsi_‰ì
(
iscsi
, 
˘
);

173 i‡(
iscsi
->
no_ua_⁄_ªc⁄√˘
 || (
˘
->
lun
 !-1 && !iscsi->
ﬁd_iscsi
)) {

174 i‡(
	`iscsi_ã°unôªady_c⁄√˘
(
iscsi
, 
˘
->
lun
,

175 
iscsi_ã°unôªady_cb
,

176 
˘
Ë=
NULL
) {

177 
	`iscsi_£t_îr‹
(
iscsi
, "iscsi_testunitready_async failed.");

178 
˘
->
	`cb
(
iscsi
, 
SCSI_STATUS_ERROR
, 
NULL
, ct->
¥iv©e_d©a
);

179 
	`iscsi_‰ì
(
iscsi
, 
˘
);

182 
˘
->
	`cb
(
iscsi
, 
SCSI_STATUS_GOOD
, 
NULL
, ct->
¥iv©e_d©a
);

183 
	`iscsi_‰ì
(
iscsi
, 
˘
);

185 
	}
}

188 
	$iscsi_c⁄√˘_cb
(
iscsi_c⁄ãxt
 *
iscsi
, 
°©us
, *
comm™d_d©a
 
_U_
,

189 *
¥iv©e_d©a
)

191 
c⁄√˘_èsk
 *
˘
 = 
¥iv©e_d©a
;

193 i‡(
°©us
 != 0) {

194 
	`iscsi_£t_îr‹
(
iscsi
, "FailedÅo connectÅo iSCSI socket. "

195 "%s", 
	`iscsi_gë_îr‹
(
iscsi
));

196 
˘
->
	`cb
(
iscsi
, 
SCSI_STATUS_ERROR
, 
NULL
, ct->
¥iv©e_d©a
);

197 
	`iscsi_‰ì
(
iscsi
, 
˘
);

201 i‡(
	`iscsi_logö_async
(
iscsi
, 
iscsi_logö_cb
, 
˘
) != 0) {

202 
	`iscsi_£t_îr‹
(
iscsi
, "iscsi_login_async failed: %s",

203 
	`iscsi_gë_îr‹
(
iscsi
));

204 
˘
->
	`cb
(
iscsi
, 
SCSI_STATUS_ERROR
, 
NULL
, ct->
¥iv©e_d©a
);

205 
	`iscsi_‰ì
(
iscsi
, 
˘
);

207 
	}
}

211 
	$iscsi_fuŒ_c⁄√˘_async
(
iscsi_c⁄ãxt
 *
iscsi
, c⁄° *
p‹èl
,

212 
lun
, 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

214 
c⁄√˘_èsk
 *
˘
;

216 
iscsi
->
lun
 =Üun;

217 i‡(
iscsi
->
p‹èl
 !=Öortal) {

218 
	`°∫˝y
(
iscsi
->
p‹èl
,Ö‹èl, 
MAX_STRING_SIZE
);

221 
˘
 = 
	`iscsi_mÆloc
(
iscsi
, (
c⁄√˘_èsk
));

222 i‡(
˘
 =
NULL
) {

223 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory. FailedÅoállocate "

225  -
ENOMEM
;

227 
˘
->
cb
 = cb;

228 
˘
->
lun
 =Üun;

229 
˘
->
num_uas
 = 0;

230 
˘
->
¥iv©e_d©a
 =Örivate_data;

231 i‡(
	`iscsi_c⁄√˘_async
(
iscsi
, 
p‹èl
, 
iscsi_c⁄√˘_cb
, 
˘
) != 0) {

232 
	`iscsi_‰ì
(
iscsi
, 
˘
);

233  -
ENOMEM
;

236 
	}
}

241 
	$iscsi_£t_nﬂut‹ec⁄√˘
(
iscsi_c⁄ãxt
 *
iscsi
, 
°©e
)

243 
iscsi
->
no_auto_ªc⁄√˘
 = 
°©e
;

248 i‡(!
°©e
 && 
iscsi
->
ªc⁄√˘_de„ºed
) {

249 
iscsi
->
ªc⁄√˘_de„ºed
 = 0;

250 
	`iscsi_ªc⁄√˘
(
iscsi
);

252 
	}
}

261 
	$iscsi_£t_no_ua_⁄_ªc⁄√˘
(
iscsi_c⁄ãxt
 *
iscsi
, 
°©e
)

263 
iscsi
->
no_ua_⁄_ªc⁄√˘
 = 
°©e
;

264 
	}
}

266 
	$iscsi_£t_ªc⁄√˘_max_ªåõs
(
iscsi_c⁄ãxt
 *
iscsi
, 
cou¡
)

268 
iscsi
->
ªc⁄√˘_max_ªåõs
 = 
cou¡
;

269 
	}
}

271 
	$iscsi_de„r_ªc⁄√˘
(
iscsi_c⁄ãxt
 *
iscsi
)

273 
iscsi
->
ªc⁄√˘_de„ºed
 = 1;

275 
	`ISCSI_LOG
(
iscsi
, 2, "reconnect deferred, cancellingállÅasks");

277 
	`iscsi_ˇn˚l_pdus
(
iscsi
);

278 
	}
}

280 
	$iscsi_ªc⁄√˘_cb
(
iscsi_c⁄ãxt
 *
iscsi
 
_U_
, 
°©us
,

281 *
comm™d_d©a
 
_U_
, *
¥iv©e_d©a
 _U_)

283 
iscsi_c⁄ãxt
 *
ﬁd_iscsi
;

284 
i
;

286 i‡(
°©us
 !
SCSI_STATUS_GOOD
) {

287 
backoff
 = ++
iscsi
->
ﬁd_iscsi
->
ªåy_˙t
;

288 i‡(
backoff
 > 10) {

289 
backoff
 +
	`ønd
() % 10;

290 
backoff
 -= 5;

292 i‡(
backoff
 > 30) {

293 
backoff
 = 30;

295 i‡(
iscsi
->
ªc⁄√˘_max_ªåõs
 != -1 &&

296 
iscsi
->
ﬁd_iscsi
->
ªåy_˙t
 > iscsi->
ªc⁄√˘_max_ªåõs
) {

298 
backoff
 = 0;

300 
	`ISCSI_LOG
(
iscsi
, 1, "ªc⁄√˘Åry %d faûed, waôög %d sec⁄ds", iscsi->
ﬁd_iscsi
->
ªåy_˙t
, 
backoff
);

301 
iscsi
->
√xt_ªc⁄√˘
 = 
	`time
(
NULL
Ë+ 
backoff
;

302 
iscsi
->
≥ndög_ªc⁄√˘
 = 1;

306 
ﬁd_iscsi
 = 
iscsi
->old_iscsi;

307 
iscsi
->
ﬁd_iscsi
 = 
NULL
;

309 
ﬁd_iscsi
->
outqueue
) {

310 
iscsi_pdu
 *
pdu
 = 
ﬁd_iscsi
->
outqueue
;

311 
	`ISCSI_LIST_REMOVE
(&
ﬁd_iscsi
->
outqueue
, 
pdu
);

312 
	`ISCSI_LIST_ADD_END
(&
ﬁd_iscsi
->
waôpdu
, 
pdu
);

315 
ﬁd_iscsi
->
waôpdu
) {

316 
iscsi_pdu
 *
pdu
 = 
ﬁd_iscsi
->
waôpdu
;

318 
	`ISCSI_LIST_REMOVE
(&
ﬁd_iscsi
->
waôpdu
, 
pdu
);

319 i‡(
pdu
->
ôt
 == 0xffffffff) {

320 
iscsi
->
drv
->
	`‰ì_pdu
(
ﬁd_iscsi
, 
pdu
);

324 i‡(
pdu
->
Êags
 & 
ISCSI_PDU_DROP_ON_RECONNECT
) {

330 i‡(
pdu
->
ˇŒback
) {

331 
pdu
->
	`ˇŒback
(
iscsi
, 
SCSI_STATUS_CANCELLED
,

332 
NULL
, 
pdu
->
¥iv©e_d©a
);

334 
iscsi
->
drv
->
	`‰ì_pdu
(
ﬁd_iscsi
, 
pdu
);

338 
	`scsi_èsk_ª£t_iov
(&
pdu
->
scsi_cbd©a
.
èsk
->
iove˘‹_ö
);

339 
	`scsi_èsk_ª£t_iov
(&
pdu
->
scsi_cbd©a
.
èsk
->
iove˘‹_out
);

345 i‡(
	`iscsi_scsi_comm™d_async
(
iscsi
, 
pdu
->
lun
,

346 
pdu
->
scsi_cbd©a
.
èsk
,

347 
pdu
->
scsi_cbd©a
.
ˇŒback
,

348 
NULL
,

349 
pdu
->
scsi_cbd©a
.
¥iv©e_d©a
)) {

352 
iscsi
->
drv
->
	`‰ì_pdu
(
ﬁd_iscsi
, 
pdu
);

355 i‡(
ﬁd_iscsi
->
öcomög
 !
NULL
) {

356 
	`iscsi_‰ì_iscsi_ö_pdu
(
ﬁd_iscsi
, old_iscsi->
öcomög
);

359 i‡(
ﬁd_iscsi
->
outqueue_cuºít
 !
NULL
 && old_iscsi->outqueue_cuºít->
Êags
 & 
ISCSI_PDU_DELETE_WHEN_SENT
) {

360 
iscsi
->
drv
->
	`‰ì_pdu
(
ﬁd_iscsi
, old_iscsi->
outqueue_cuºít
);

363 
	`iscsi_‰ì
(
ﬁd_iscsi
, old_iscsi->
›aque
);

365 
i
 = 0; i < 
ﬁd_iscsi
->
smÆloc_‰ì
; i++) {

366 
	`iscsi_‰ì
(
ﬁd_iscsi
, old_iscsi->
smÆloc_±rs
[
i
]);

369 
iscsi
->
mÆlocs
 +
ﬁd_iscsi
->mallocs;

370 
iscsi
->
‰ìs
 +
ﬁd_iscsi
->frees;

372 
	`‰ì
(
ﬁd_iscsi
);

375 
iscsi
->
√xt_ªc⁄√˘
 = 
	`time
(
NULL
) + 3;

377 
	`ISCSI_LOG
(
iscsi
, 2, "reconnect was successful");

379 
iscsi
->
≥ndög_ªc⁄√˘
 = 0;

380 
	}
}

382 
	$iscsi_ªc⁄√˘
(
iscsi_c⁄ãxt
 *
iscsi
)

384 
iscsi_c⁄ãxt
 *
tmp_iscsi
;

387 i‡(
iscsi
->
ªc⁄√˘_de„ºed
) {

388 
	`ISCSI_LOG
(
iscsi
, 2, "reconnect initiated, butÑeconnect isálready deferred");

396 i‡(
iscsi
->
no_auto_ªc⁄√˘
) {

397 
	`iscsi_de„r_ªc⁄√˘
(
iscsi
);

401 i‡(
iscsi
->
ﬁd_iscsi
 && !iscsi->
≥ndög_ªc⁄√˘
) {

405 i‡(
	`time
(
NULL
Ë< 
iscsi
->
√xt_ªc⁄√˘
) {

406 
iscsi
->
≥ndög_ªc⁄√˘
 = 1;

410 i‡(
iscsi
->
ªc⁄√˘_max_ªåõs
 !-1 && iscsi->
ﬁd_iscsi
 &&

411 
iscsi
->
ﬁd_iscsi
->
ªåy_˙t
 > iscsi->
ªc⁄√˘_max_ªåõs
) {

412 
	`iscsi_de„r_ªc⁄√˘
(
iscsi
);

416 
tmp_iscsi
 = 
	`iscsi_¸óã_c⁄ãxt
(
iscsi
->
öôüt‹_«me
);

417 i‡(
tmp_iscsi
 =
NULL
) {

418 
	`ISCSI_LOG
(
iscsi
, 2, "failedÅo createÇew context forÑeconnection");

422 
	`ISCSI_LOG
(
iscsi
, 2, "reconnect initiated");

424 
	`iscsi_£t_èrgë«me
(
tmp_iscsi
, 
iscsi
->
èrgë_«me
);

426 
	`iscsi_£t_hódî_dige°
(
tmp_iscsi
, 
iscsi
->
w™t_hódî_dige°
);

428 
	`iscsi_£t_öôüt‹_u£∫ame_pwd
(
tmp_iscsi
, 
iscsi
->
u£r
, iscsi->
∑sswd
);

429 
	`iscsi_£t_èrgë_u£∫ame_pwd
(
tmp_iscsi
, 
iscsi
->
èrgë_u£r
, iscsi->
èrgë_∑sswd
);

431 
	`iscsi_£t_£ssi⁄_ty≥
(
tmp_iscsi
, 
ISCSI_SESSION_NORMAL
);

433 
tmp_iscsi
->
lun
 = 
iscsi
->lun;

435 
	`°∫˝y
(
tmp_iscsi
->
p‹èl
, 
iscsi
->p‹èl, 
MAX_STRING_SIZE
);

437 
	`°∫˝y
(
tmp_iscsi
->
böd_öãrÁ˚s
, 
iscsi
->böd_öãrÁ˚s, 
MAX_STRING_SIZE
);

438 
tmp_iscsi
->
böd_öãrÁ˚s_˙t
 = 
iscsi
->bind_interfaces_cnt;

440 
tmp_iscsi
->
log_Àvñ
 = 
iscsi
->log_level;

441 
tmp_iscsi
->
log_‚
 = 
iscsi
->log_fn;

442 
tmp_iscsi
->
t˝_u£r_timeout
 = 
iscsi
->tcp_user_timeout;

443 
tmp_iscsi
->
t˝_kìpidÀ
 = 
iscsi
->tcp_keepidle;

444 
tmp_iscsi
->
t˝_kìp˙t
 = 
iscsi
->tcp_keepcnt;

445 
tmp_iscsi
->
t˝_kìpötvl
 = 
iscsi
->tcp_keepintvl;

446 
tmp_iscsi
->
t˝_syn˙t
 = 
iscsi
->tcp_syncnt;

447 
tmp_iscsi
->
ˇche_Æloˇti⁄s
 = 
iscsi
->cache_allocations;

448 
tmp_iscsi
->
scsi_timeout
 = 
iscsi
->scsi_timeout;

449 
tmp_iscsi
->
no_ua_⁄_ªc⁄√˘
 = 
iscsi
->no_ua_on_reconnect;

451 
tmp_iscsi
->
ªc⁄√˘_max_ªåõs
 = 
iscsi
->reconnect_max_retries;

453 i‡(
iscsi
->
ﬁd_iscsi
) {

454 
i
;

455 
i
 = 0; i < 
iscsi
->
smÆloc_‰ì
; i++) {

456 
	`iscsi_‰ì
(
iscsi
, iscsi->
smÆloc_±rs
[
i
]);

458 
tmp_iscsi
->
ﬁd_iscsi
 = 
iscsi
->old_iscsi;

460 
tmp_iscsi
->
ﬁd_iscsi
 = 
	`mÆloc
((
iscsi_c⁄ãxt
));

461 
	`mem˝y
(
tmp_iscsi
->
ﬁd_iscsi
, 
iscsi
, (
iscsi_c⁄ãxt
));

463 
	`mem˝y
(
iscsi
, 
tmp_iscsi
, (
iscsi_c⁄ãxt
));

464 
	`‰ì
(
tmp_iscsi
);

466  
	`iscsi_fuŒ_c⁄√˘_async
(
iscsi
, iscsi->
p‹èl
,

467 
iscsi
->
lun
, 
iscsi_ªc⁄√˘_cb
, 
NULL
);

468 
	}
}

	@lib/crc32c.c

18 #i‡
deföed
(
_WIN32
)

20 
	~<uni°d.h
>

23 
	~"iscsi.h
"

24 
	~"iscsi-¥iv©e.h
"

46 
uöt32_t
 
	g¸˘abÀ
[256] = {

113 
uöt32_t
 
	$¸c32c
(
uöt8_t
 *
buf
, 
Àn
)

115 
uöt32_t
 
¸c
 = 0xffffffff;

116 
Àn
-- > 0) {

117 
¸c
 = (¸c>>8Ë^ 
¸˘abÀ
[(¸¯^ (*
buf
++)) & 0xFF];

119  
¸c
^0xffffffff;

120 
	}
}

	@lib/discovery.c

18 #ifde‡
HAVE_CONFIG_H


19 
	~"c⁄fig.h
"

22 #ifde‡
HAVE_SYS_TYPES_H


23 
	~<sys/ty≥s.h
>

26 #ifde‡
HAVE_ARPA_INET_H


27 
	~<¨∑/öë.h
>

30 
	~<°dio.h
>

31 
	~<°dlib.h
>

32 
	~<°rög.h
>

33 
	~"iscsi.h
"

34 
	~"iscsi-¥iv©e.h
"

37 
	$iscsi_discovîy_async
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_comm™d_cb
 
cb
,

38 *
¥iv©e_d©a
)

40 
iscsi_pdu
 *
pdu
;

41 *
°r
;

43 i‡(
iscsi
->
£ssi⁄_ty≥
 !
ISCSI_SESSION_DISCOVERY
) {

44 
	`iscsi_£t_îr‹
(
iscsi
, "TryingÅo do discovery on "

49 
pdu
 = 
	`iscsi_Æloˇã_pdu
(
iscsi
, 
ISCSI_PDU_TEXT_REQUEST
,

50 
ISCSI_PDU_TEXT_RESPONSE
,

51 
	`iscsi_ôt_po°_ö¸emít
(
iscsi
),

52 
ISCSI_PDU_DROP_ON_RECONNECT
);

53 i‡(
pdu
 =
NULL
) {

54 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅoállocate "

60 
	`iscsi_pdu_£t_immedüã
(
pdu
);

63 
	`iscsi_pdu_£t_cmd¢
(
pdu
, 
iscsi
->
cmd¢
);

66 
	`iscsi_pdu_£t_pduÊags
(
pdu
, 
ISCSI_PDU_TEXT_FINAL
);

69 
	`iscsi_pdu_£t_ât
(
pdu
, 0xffffffff);

72 
°r
 = (*)"SendTargets=All";

73 i‡(
	`iscsi_pdu_add_d©a
(
iscsi
, 
pdu
, (*)
°r
, 
	`°æí
(str)+1)

75 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory:Öduádd data failed.");

76 
iscsi
->
drv
->
	`‰ì_pdu
(iscsi, 
pdu
);

80 
pdu
->
ˇŒback
 = 
cb
;

81 
pdu
->
¥iv©e_d©a
 =Örivate_data;

83 i‡(
	`iscsi_queue_pdu
(
iscsi
, 
pdu
) != 0) {

84 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: failedÅo queue iscsi "

86 
iscsi
->
drv
->
	`‰ì_pdu
(iscsi, 
pdu
);

91 
	}
}

94 
	$iscsi_‰ì_discovîy_addªs£s
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_discovîy_addªss
 *
addªs£s
)

96 
addªs£s
 !
NULL
) {

97 
iscsi_discovîy_addªss
 *
√xt
 = 
addªs£s
->next;

99 
	`iscsi_‰ì
(
iscsi
, 
	`disˇrd_c⁄°
(
addªs£s
->
èrgë_«me
));

100 
addªs£s
->
èrgë_«me
 = 
NULL
;

102 
addªs£s
->
p‹èls
 !
NULL
) {

103 
iscsi_èrgë_p‹èl
 *
√xt_p‹èl
 = 
addªs£s
->
p‹èls
->
√xt
;

105 
	`iscsi_‰ì
(
iscsi
, 
	`disˇrd_c⁄°
(
addªs£s
->
p‹èls
->
p‹èl
));

106 
	`iscsi_‰ì
(
iscsi
, 
	`disˇrd_c⁄°
(
addªs£s
->
p‹èls
));

108 
addªs£s
->
p‹èls
 = 
√xt_p‹èl
;

110 
addªs£s
->
p‹èls
 = 
NULL
;

112 
addªs£s
->
√xt
 = 
NULL
;

113 
	`iscsi_‰ì
(
iscsi
, 
addªs£s
);

114 
addªs£s
 = 
√xt
;

116 
	}
}

119 
	$iscsi_¥o˚ss_ãxt_ª∂y
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_pdu
 *
pdu
,

120 
iscsi_ö_pdu
 *
ö
)

122 
iscsi_discovîy_addªss
 *
èrgës
 = 
NULL
;

123 *
±r
 = 
ö
->
d©a
;

124 
size
 = 
ö
->
d©a_pos
;

127 i‡(
ö
->
hdr
[1] !
ISCSI_PDU_TEXT_FINAL
) {

128 
	`iscsi_£t_îr‹
(
iscsi
, "unsupported flags inÅext "

129 "ª∂y %02x", 
ö
->
hdr
[1]);

130 i‡(
pdu
->
ˇŒback
) {

131 
pdu
->
	`ˇŒback
(
iscsi
, 
SCSI_STATUS_ERROR
, 
NULL
,

132 
pdu
->
¥iv©e_d©a
);

137 
size
 > 0) {

138 *
íd
;

139 
Àn
;

141 
íd
 = 
	`memchr
(
±r
, 0, 
size
);

142 i‡(
íd
 =
NULL
) {

143 
	`iscsi_£t_îr‹
(
iscsi
, "NULÇot foundáfter offset %ld "

145 ()(
±r
 - 
ö
->
d©a
));

146 i‡(
pdu
->
ˇŒback
) {

147 
pdu
->
	`ˇŒback
(
iscsi
, 
SCSI_STATUS_ERROR
, 
NULL
,

148 
pdu
->
¥iv©e_d©a
);

150 
	`iscsi_‰ì_discovîy_addªs£s
(
iscsi
, 
èrgës
);

154 
Àn
 = 
íd
 - 
±r
;

155 i‡(
Àn
 == 0) {

160 i‡(!
	`°∫cmp
((*)
±r
, "TargetName=", 11)) {

161 
iscsi_discovîy_addªss
 *
èrgë
;

163 
èrgë
 = 
	`iscsi_zmÆloc
(
iscsi
, (
iscsi_discovîy_addªss
));

164 i‡(
èrgë
 =
NULL
) {

165 
	`iscsi_£t_îr‹
(
iscsi
, "FailedÅoállocate "

168 i‡(
pdu
->
ˇŒback
) {

169 
pdu
->
	`ˇŒback
(
iscsi
, 
SCSI_STATUS_ERROR
, 
NULL
,

170 
pdu
->
¥iv©e_d©a
);

172 
	`iscsi_‰ì_discovîy_addªs£s
(
iscsi
, 
èrgës
);

175 
èrgë
->
èrgë_«me
 = 
	`iscsi_°rdup
(
iscsi
,(*)
±r
+11);

176 i‡(
èrgë
->
èrgë_«me
 =
NULL
) {

177 
	`iscsi_£t_îr‹
(
iscsi
, "FailedÅoállocate "

180 i‡(
pdu
->
ˇŒback
) {

181 
pdu
->
	`ˇŒback
(
iscsi
, 
SCSI_STATUS_ERROR
, 
NULL
,

182 
pdu
->
¥iv©e_d©a
);

184 
	`iscsi_‰ì
(
iscsi
, 
èrgë
);

185 
èrgë
 = 
NULL
;

186 
	`iscsi_‰ì_discovîy_addªs£s
(
iscsi
, 
èrgës
);

189 
èrgë
->
√xt
 = 
èrgës
;

190 
èrgës
 = 
èrgë
;

191 } i‡(!
	`°∫cmp
((*)
±r
, "TargetAddress=", 14)) {

192 
iscsi_èrgë_p‹èl
 *
p‹èl
;

194 i‡(
èrgës
 =
NULL
) {

195 
	`iscsi_£t_îr‹
(
iscsi
, "Invalid discovery "

197 i‡(
pdu
->
ˇŒback
) {

198 
pdu
->
	`ˇŒback
(
iscsi
, 
SCSI_STATUS_ERROR
, 
NULL
,

199 
pdu
->
¥iv©e_d©a
);

201 
	`iscsi_‰ì_discovîy_addªs£s
(
iscsi
, 
èrgës
);

204 
p‹èl
 = 
	`iscsi_zmÆloc
(
iscsi
, (
iscsi_èrgë_p‹èl
));

205 i‡(
p‹èl
 =
NULL
) {

206 
	`iscsi_£t_îr‹
(
iscsi
, "FailedÅo malloc "

208 i‡(
pdu
->
ˇŒback
) {

209 
pdu
->
	`ˇŒback
(
iscsi
, 
SCSI_STATUS_ERROR
, 
NULL
,

210 
pdu
->
¥iv©e_d©a
);

212 
	`iscsi_‰ì_discovîy_addªs£s
(
iscsi
, 
èrgës
);

216 
p‹èl
->
√xt
 = 
èrgës
->
p‹èls
;

217 
èrgës
->
p‹èls
 = 
p‹èl
;

219 
p‹èl
->p‹è»
	`iscsi_°rdup
(
iscsi
, (*)
±r
+14);

220 i‡(
p‹èl
->p‹è»=
NULL
) {

221 
	`iscsi_£t_îr‹
(
iscsi
, "FailedÅoállocate "

224 i‡(
pdu
->
ˇŒback
) {

225 
pdu
->
	`ˇŒback
(
iscsi
, 
SCSI_STATUS_ERROR
, 
NULL
,

226 
pdu
->
¥iv©e_d©a
);

228 
	`iscsi_‰ì_discovîy_addªs£s
(
iscsi
, 
èrgës
);

232 
	`iscsi_£t_îr‹
(
iscsi
, "Don't know howÅo handle "

233 "discovîy såög : %s", 
±r
);

234 i‡(
pdu
->
ˇŒback
) {

235 
pdu
->
	`ˇŒback
(
iscsi
, 
SCSI_STATUS_ERROR
, 
NULL
,

236 
pdu
->
¥iv©e_d©a
);

238 
	`iscsi_‰ì_discovîy_addªs£s
(
iscsi
, 
èrgës
);

242 
±r
 +
Àn
 + 1;

243 
size
 -
Àn
 + 1;

246 i‡(
pdu
->
ˇŒback
) {

247 
pdu
->
	`ˇŒback
(
iscsi
, 
SCSI_STATUS_GOOD
, 
èrgës
,Ödu->
¥iv©e_d©a
);

249 
	`iscsi_‰ì_discovîy_addªs£s
(
iscsi
, 
èrgës
);

252 
	}
}

	@lib/init.c

18 #ifde‡
HAVE_CONFIG_H


19 
	~"c⁄fig.h
"

22 
	#_GNU_SOURCE


	)

24 #i‡
deföed
(
_WIN32
)

25 
	~"wö32/wö32_com∑t.h
"

27 
	~<°rögs.h
>

28 
	~<uni°d.h
>

31 
	~<as£π.h
>

32 
	~<f˙é.h
>

33 
	~<±hªad.h
>

34 
	~<°dboﬁ.h
>

35 
	~<°dio.h
>

36 
	~<°dlib.h
>

37 
	~<°rög.h
>

38 
	~<°dlib.h
>

39 
	~<°d¨g.h
>

40 
	~<sys/ty≥s.h
>

41 
	~<time.h
>

42 
	~"iscsi.h
"

43 
	~"iscsi-¥iv©e.h
"

44 #ifde‡
HAVE_LINUX_ISER


45 
	~"i£r-¥iv©e.h
"

47 
	~"¶i°.h
"

54 
	$iscsi_öô_å™•‹t
(
iscsi_c⁄ãxt
 *
iscsi
,

55 
iscsi_å™•‹t_ty≥
 
å™•‹t
) {

56 
iscsi
->
å™•‹t
 =Åransport;

58 
iscsi
->
å™•‹t
) {

59 
TCP_TRANSPORT
:

60 
	`iscsi_öô_t˝_å™•‹t
(
iscsi
);

62 #ifde‡
HAVE_LINUX_ISER


63 
ISER_TRANSPORT
:

64 
	`iscsi_öô_i£r_å™•‹t
(
iscsi
);

68 
	`iscsi_£t_îr‹
(
iscsi
, "UnfamiliarÅransportÅype");

73 
	}
}

79 
	$iscsi_£t_ˇche_Æloˇti⁄s
(
iscsi_c⁄ãxt
 *
iscsi
, 
ˇ
)

81 
iscsi
->
ˇche_Æloˇti⁄s
 = 
ˇ
;

82 
	}
}

84 * 
	$iscsi_mÆloc
(
iscsi_c⁄ãxt
 *
iscsi
, 
size_t
 
size
) {

85 * 
±r
 = 
	`mÆloc
(
size
);

86 i‡(
±r
 !
NULL
Ë
iscsi
->
mÆlocs
++;

87  
±r
;

88 
	}
}

90 * 
	$iscsi_zmÆloc
(
iscsi_c⁄ãxt
 *
iscsi
, 
size_t
 
size
) {

91 * 
±r
 = 
	`mÆloc
(
size
);

92 i‡(
±r
 !
NULL
) {

93 
	`mem£t
(
±r
,0x00,
size
);

94 
iscsi
->
mÆlocs
++;

96  
±r
;

97 
	}
}

99 * 
	$iscsi_ªÆloc
(
iscsi_c⁄ãxt
 *
iscsi
, * 
±r
, 
size_t
 
size
) {

100 * 
_±r
 = 
	`ªÆloc
(
±r
, 
size
);

101 i‡(
_±r
 !
NULL
) {

102 
iscsi
->
ªÆlocs
++;

104  
_±r
;

105 
	}
}

107 
	$iscsi_‰ì
(
iscsi_c⁄ãxt
 *
iscsi
, * 
±r
) {

108 i‡(
±r
 =
NULL
) ;

109 
	`‰ì
(
±r
);

110 
iscsi
->
‰ìs
++;

111 
	}
}

113 * 
	$iscsi_°rdup
(
iscsi_c⁄ãxt
 *
iscsi
, c⁄° * 
°r
) {

114 *
°r2
 = 
	`°rdup
(
°r
);

115 i‡(
°r2
 !
NULL
Ë
iscsi
->
mÆlocs
++;

116  
°r2
;

117 
	}
}

119 * 
	$iscsi_smÆloc
(
iscsi_c⁄ãxt
 *
iscsi
, 
size_t
 
size
) {

120 *
±r
;

121 i‡(
size
 > 
iscsi
->
smÆloc_size
Ë 
NULL
;

122 i‡(
iscsi
->
smÆloc_‰ì
 > 0) {

123 
±r
 = 
iscsi
->
smÆloc_±rs
[--iscsi->
smÆloc_‰ì
];

124 
iscsi
->
smÆlocs
++;

126 
±r
 = 
	`iscsi_mÆloc
(
iscsi
, iscsi->
smÆloc_size
);

128  
±r
;

129 
	}
}

131 * 
	$iscsi_szmÆloc
(
iscsi_c⁄ãxt
 *
iscsi
, 
size_t
 
size
) {

132 *
±r
 = 
	`iscsi_smÆloc
(
iscsi
, 
size
);

133 i‡(
±r
) {

134 
	`mem£t
(
±r
, 0, 
size
);

136  
±r
;

137 
	}
}

139 
	$iscsi_s‰ì
(
iscsi_c⁄ãxt
 *
iscsi
, * 
±r
) {

140 i‡(
±r
 =
NULL
) {

143 i‡(!
iscsi
->
ˇche_Æloˇti⁄s
) {

144 
	`iscsi_‰ì
(
iscsi
, 
±r
);

145 } i‡(
iscsi
->
smÆloc_‰ì
 =
SMALL_ALLOC_MAX_FREE
) {

148 
	`ISCSI_LOG
(
iscsi
, 6, "smalloc free == SMALLOC_MAX_FREE");

149 
	`iscsi_‰ì
(
iscsi
, 
±r
);

151 
iscsi
->
smÆloc_±rs
[iscsi->
smÆloc_‰ì
++] = 
±r
;

153 
	}
}

155 
boﬁ
 
	grd_£t
 = 
Ál£
;

156 
±hªad_muãx_t
 
	grd_muãx
 = 
PTHREAD_MUTEX_INITIALIZER
;

159 
	$iscsi_§™d_öô
(
iscsi_c⁄ãxt
 *
iscsi
) {

160 
£ed
;

161 
uønd_fd
;

162 
ssize_t
 
rc
;

163 
îr
;

165 i‡(
rd_£t
) {

170 
îr
 = 
	`±hªad_muãx_lock
(&
rd_muãx
);

171 
	`as£π
(
îr
 == 0);

173 i‡(
rd_£t
) {

175 
out
;

178 
uønd_fd
 = 
	`›í
("/dev/uøndom", 
O_RDONLY
);

179 i‡(
uønd_fd
 == -1) {

180 
ÁŒback
;

183 
rc
 = 
	`ªad
(
uønd_fd
, &
£ed
, (seed));

184 
	`˛o£
(
uønd_fd
);

185 i‡(
rc
 == -1) {

186 
ÁŒback
;

189 
	`§™d
(
£ed
);

190 
out
;

192 
ÁŒback
:

194 
	`§™d
(
	`gëpid
(Ë^ (
uöt32_t
)((
uöçå_t
Ë
iscsi
));

196 
out
:

197 
rd_£t
 = 
åue
;

198 
îr
 = 
	`±hªad_muãx_u∆ock
(&
rd_muãx
);

199 
	`as£π
(
îr
 == 0);

200 
	}
}

202 
iscsi_c⁄ãxt
 *

203 
	$iscsi_¸óã_c⁄ãxt
(c⁄° *
öôüt‹_«me
)

205 
iscsi_c⁄ãxt
 *
iscsi
;

206 
size_t
 
ªquúed
 = 
ISCSI_RAW_HEADER_SIZE
 + 
ISCSI_DIGEST_SIZE
;

207 *
ˇ
;

209 i‡(!
öôüt‹_«me
[0]) {

210  
NULL
;

213 
iscsi
 = 
	`mÆloc
((
iscsi_c⁄ãxt
));

214 i‡(
iscsi
 =
NULL
) {

215  
NULL
;

218 
	`mem£t
(
iscsi
, 0, (
iscsi_c⁄ãxt
));

221 i‡(
	`iscsi_öô_å™•‹t
(
iscsi
, 
TCP_TRANSPORT
)) {

222 
	`iscsi_£t_îr‹
(
iscsi
, "FailedállocatingÅransport");

223  
NULL
;

226 
	`°∫˝y
(
iscsi
->
öôüt‹_«me
,öôüt‹_«me,
MAX_STRING_SIZE
);

228 
iscsi
->
fd
 = -1;

229 
	`¥ötf
("\niscsi->öôüt‹_«me:%s", 
iscsi
->
öôüt‹_«me
);

231 
	`iscsi_§™d_öô
(
iscsi
);

232 
	`iscsi_£t_isid_øndom
(
iscsi
, 
	`ønd
(), 0);

235 
iscsi
->
cuºít_pha£
 = 
ISCSI_PDU_LOGIN_CSG_SECNEG
;

236 
iscsi
->
√xt_pha£
 = 
ISCSI_PDU_LOGIN_NSG_OPNEG
;

237 
iscsi
->
£˙eg_pha£
 = 
ISCSI_LOGIN_SECNEG_PHASE_OFFER_CHAP
;

239 
iscsi
->
max_bur°_Àngth
 = 262144;

240 
iscsi
->
fú°_bur°_Àngth
 = 262144;

241 
iscsi
->
öôüt‹_max_ªcv_d©a_£gmít_Àngth
 = 262144;

242 
iscsi
->
èrgë_max_ªcv_d©a_£gmít_Àngth
 = 8192;

243 
iscsi
->
w™t_öôül_r2t
 = 
ISCSI_INITIAL_R2T_NO
;

244 
iscsi
->
u£_öôül_r2t
 = 
ISCSI_INITIAL_R2T_YES
;

245 
iscsi
->
w™t_immedüã_d©a
 = 
ISCSI_IMMEDIATE_DATA_YES
;

246 
iscsi
->
u£_immedüã_d©a
 = 
ISCSI_IMMEDIATE_DATA_YES
;

247 
iscsi
->
w™t_hódî_dige°
 = 
ISCSI_HEADER_DIGEST_NONE_CRC32C
;

249 
iscsi
->
t˝_kìp˙t
=3;

250 
iscsi
->
t˝_kìpötvl
=30;

251 
iscsi
->
t˝_kìpidÀ
=30;

253 
iscsi
->
ªc⁄√˘_max_ªåõs
 = -1;

255 i‡(
	`gëív
("LIBISCSI_DEBUG"Ë!
NULL
) {

256 
	`iscsi_£t_log_Àvñ
(
iscsi
, 
	`©oi
(
	`gëív
("LIBISCSI_DEBUG")));

257 
	`iscsi_£t_log_‚
(
iscsi
, 
iscsi_log_to_°dîr
);

260 i‡(
	`gëív
("LIBISCSI_TCP_USER_TIMEOUT"Ë!
NULL
) {

261 
	`iscsi_£t_t˝_u£r_timeout
(
iscsi
,
	`©oi
(
	`gëív
("LIBISCSI_TCP_USER_TIMEOUT")));

264 i‡(
	`gëív
("LIBISCSI_TCP_KEEPCNT"Ë!
NULL
) {

265 
	`iscsi_£t_t˝_kìp˙t
(
iscsi
,
	`©oi
(
	`gëív
("LIBISCSI_TCP_KEEPCNT")));

268 i‡(
	`gëív
("LIBISCSI_TCP_KEEPINTVL"Ë!
NULL
) {

269 
	`iscsi_£t_t˝_kìpötvl
(
iscsi
,
	`©oi
(
	`gëív
("LIBISCSI_TCP_KEEPINTVL")));

272 i‡(
	`gëív
("LIBISCSI_TCP_KEEPIDLE"Ë!
NULL
) {

273 
	`iscsi_£t_t˝_kìpidÀ
(
iscsi
,
	`©oi
(
	`gëív
("LIBISCSI_TCP_KEEPIDLE")));

276 i‡(
	`gëív
("LIBISCSI_TCP_SYNCNT"Ë!
NULL
) {

277 
	`iscsi_£t_t˝_syn˙t
(
iscsi
,
	`©oi
(
	`gëív
("LIBISCSI_TCP_SYNCNT")));

280 i‡(
	`gëív
("LIBISCSI_BIND_INTERFACES"Ë!
NULL
) {

281 
	`iscsi_£t_böd_öãrÁ˚s
(
iscsi
,
	`gëív
("LIBISCSI_BIND_INTERFACES"));

287 
ªquúed
 = 
	`MAX
‘equúed, (
iscsi_pdu
));

288 
ªquúed
 = 
	`MAX
‘equúed, (
iscsi_ö_pdu
));

289 
iscsi
->
smÆloc_size
 = 1;

290 
iscsi
->
smÆloc_size
 < 
ªquúed
) {

291 
iscsi
->
smÆloc_size
 <<= 1;

293 
	`ISCSI_LOG
(
iscsi
,5,"smÆ»Æloˇti⁄ sizêi†%d byã", iscsi->
smÆloc_size
);

295 
ˇ
 = 
	`gëív
("LIBISCSI_CACHE_ALLOCATIONS");

296 i‡(!
ˇ
 || 
	`©oi
(ca) != 0) {

297 
iscsi
->
ˇche_Æloˇti⁄s
 = 1;

300  
iscsi
;

301 
	}
}

304 
	$iscsi_£t_isid_oui
(
iscsi_c⁄ãxt
 *
iscsi
, 
uöt32_t
 
oui
, uöt32_à
quÆifõr
)

306 
iscsi
->
isid
[0] = (
oui
 >> 16) & 0x3f;

307 
iscsi
->
isid
[1] = (
oui
 >> 8) & 0xff;

308 
iscsi
->
isid
[2] = (
oui
 ) & 0xff;

310 
iscsi
->
isid
[3] = (
quÆifõr
 >> 16) & 0xff;

311 
iscsi
->
isid
[4] = (
quÆifõr
 >> 8) & 0xff;

312 
iscsi
->
isid
[5] = (
quÆifõr
 ) & 0xff;

315 
	}
}

318 
	$iscsi_£t_isid_í
(
iscsi_c⁄ãxt
 *
iscsi
, 
uöt32_t
 
í
, uöt32_à
quÆifõr
)

320 
iscsi
->
isid
[0] = 0x40;

322 
iscsi
->
isid
[1] = (
í
 >> 16) & 0xff;

323 
iscsi
->
isid
[2] = (
í
 >> 8) & 0xff;

324 
iscsi
->
isid
[3] = (
í
 ) & 0xff;

326 
iscsi
->
isid
[4] = (
quÆifõr
 >> 8) & 0xff;

327 
iscsi
->
isid
[5] = (
quÆifõr
 ) & 0xff;

330 
	}
}

333 
	$iscsi_£t_isid_øndom
(
iscsi_c⁄ãxt
 *
iscsi
, 
uöt32_t
 
∫d
, uöt32_à
quÆifõr
)

335 
iscsi
->
isid
[0] = 0x80;

337 
iscsi
->
isid
[1] = (
∫d
 >> 16) & 0xff;

338 
iscsi
->
isid
[2] = (
∫d
 >> 8) & 0xff;

339 
iscsi
->
isid
[3] = (
∫d
 ) & 0xff;

341 
iscsi
->
isid
[4] = (
quÆifõr
 >> 8) & 0xff;

342 
iscsi
->
isid
[5] = (
quÆifõr
 ) & 0xff;

345 
	}
}

349 
	$iscsi_£t_isid_ª£rved
(
iscsi_c⁄ãxt
 *
iscsi
)

351 
iscsi
->
isid
[0] = 0xc0;

353 
iscsi
->
isid
[1] = 0x00;

354 
iscsi
->
isid
[2] = 0x00;

355 
iscsi
->
isid
[3] = 0x00;

356 
iscsi
->
isid
[4] = 0x00;

357 
iscsi
->
isid
[5] = 0x00;

360 
	}
}

363 
	$iscsi_£t_Æüs
(
iscsi_c⁄ãxt
 *
iscsi
, c⁄° *
Æüs
)

365 i‡(
iscsi
->
is_loggedö
 != 0) {

366 
	`iscsi_£t_îr‹
(
iscsi
, "AlreadyÜogged in whenáddingálias");

370 
	`°∫˝y
(
iscsi
->
Æüs
,Æüs,
MAX_STRING_SIZE
);

372 
	}
}

375 
	$iscsi_£t_èrgë«me
(
iscsi_c⁄ãxt
 *
iscsi
, c⁄° *
èrgë_«me
)

377 i‡(
iscsi
->
is_loggedö
 != 0) {

378 
	`iscsi_£t_îr‹
(
iscsi
, "AlreadyÜogged in whenádding "

383 
	`°∫˝y
(
iscsi
->
èrgë_«me
,èrgë_«me,
MAX_STRING_SIZE
);

386 
	}
}

389 
	$iscsi_de°roy_c⁄ãxt
(
iscsi_c⁄ãxt
 *
iscsi
)

391 
i
;

393 i‡(
iscsi
 =
NULL
) {

397 i‡(
iscsi
->
fd
 != -1) {

398 
	`iscsi_disc⁄√˘
(
iscsi
);

401 
	`iscsi_ˇn˚l_pdus
(
iscsi
);

403 i‡(
iscsi
->
outqueue_cuºít
 !
NULL
 && iscsi->outqueue_cuºít->
Êags
 & 
ISCSI_PDU_DELETE_WHEN_SENT
) {

404 
iscsi
->
drv
->
	`‰ì_pdu
(iscsi, iscsi->
outqueue_cuºít
);

407 i‡(
iscsi
->
öcomög
 !
NULL
) {

408 
	`iscsi_‰ì_iscsi_ö_pdu
(
iscsi
, iscsi->
öcomög
);

411 
iscsi
->
c⁄√˘_d©a
 = 
NULL
;

413 
i
=0;i<
iscsi
->
smÆloc_‰ì
;i++) {

414 
	`iscsi_‰ì
(
iscsi
, iscsi->
smÆloc_±rs
[
i
]);

417 i‡(
iscsi
->
mÆlocs
 !iscsi->
‰ìs
) {

418 
	`ISCSI_LOG
(
iscsi
,1,"%d mem‹y block†lo°áàiscsi_de°roy_c⁄ãxt(Ëa·î %d mÆloc(s), %dÑóŒoc(s), %d fªe(sË™d %dÑeu£d smÆ»Æloˇti⁄s",iscsi->
mÆlocs
-iscsi->
‰ìs
,iscsi->mÆlocs,iscsi->
ªÆlocs
,iscsi->‰ìs,iscsi->
smÆlocs
);

420 
	`ISCSI_LOG
(
iscsi
,5,"mem‹y i†˛ó¿© iscsi_de°roy_c⁄ãxt(Ëa·î %d mÆlocs, %dÑóŒoc(s), %d fªe(sË™d %dÑeu£d smÆ»Æloˇti⁄s",iscsi->
mÆlocs
,iscsi->
ªÆlocs
,iscsi->
‰ìs
,iscsi->
smÆlocs
);

423 i‡(
iscsi
->
ﬁd_iscsi
) {

424 
iscsi
->
ﬁd_iscsi
->
fd
 = -1;

425 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
->
ﬁd_iscsi
);

428 
	`iscsi_‰ì
(
iscsi
, iscsi->
›aque
);

430 
	`mem£t
(
iscsi
, 0, (
iscsi_c⁄ãxt
));

431 
	`‰ì
(
iscsi
);

434 
	}
}

437 
	$iscsi_£t_îr‹
(
iscsi_c⁄ãxt
 *
iscsi
, c⁄° *
îr‹_°rög
, ...)

439 
va_li°
 
≠
;

440 
îr°r
[
MAX_STRING_SIZE
 + 1] = {0};

442 
	`va_°¨t
(
≠
, 
îr‹_°rög
);

443 i‡(
	`v¢¥ötf
(
îr°r
, 
MAX_STRING_SIZE
, 
îr‹_°rög
, 
≠
) < 0) {

444 
	`°∫˝y
(
îr°r
, "couldÇŸ f‹m©Éº‹ såög!", 
MAX_STRING_SIZE
);

446 
	`va_íd
(
≠
);

448 i‡(
iscsi
 !
NULL
) {

449 
	`°∫˝y
(
iscsi
->
îr‹_°rög
, 
îr°r
,
MAX_STRING_SIZE
);

450 
	`ISCSI_LOG
(
iscsi
, 1, "%s",iscsi->
îr‹_°rög
);

452 
	}
}

455 
	$iscsi_£t_log_Àvñ
(
iscsi_c⁄ãxt
 *
iscsi
, 
Àvñ
)

457 
iscsi
->
log_Àvñ
 = 
Àvñ
;

458 
	`ISCSI_LOG
(
iscsi
, 2, "£àlogÜevñÅÿ%d", 
Àvñ
);

459 
	}
}

462 
	$iscsi_gë_îr‹
(
iscsi_c⁄ãxt
 *
iscsi
)

464  
iscsi
 ? iscsi->
îr‹_°rög
 : "";

465 
	}
}

468 
	$iscsi_gë_èrgë_addªss
(
iscsi_c⁄ãxt
 *
iscsi
)

470  
iscsi
->
èrgë_addªss
;

471 
	}
}

475 
	$iscsi_£t_hódî_dige°
(
iscsi_c⁄ãxt
 *
iscsi
,

476 
iscsi_hódî_dige°
 
hódî_dige°
)

478 i‡(
iscsi
->
is_loggedö
) {

479 
	`iscsi_£t_îr‹
(
iscsi
, "tryingÅo set header digest while "

483 i‡(()
hódî_dige°
 > 
ISCSI_HEADER_DIGEST_LAST
) {

484 
	`iscsi_£t_îr‹
(
iscsi
, "invalid header digest value");

488 
iscsi
->
w™t_hódî_dige°
 = 
hódî_dige°
;

491 
	}
}

494 
	$iscsi_is_logged_ö
(
iscsi_c⁄ãxt
 *
iscsi
)

496  
iscsi
->
is_loggedö
;

497 
	}
}

500 
	$h2i
(
h
)

502 i‡(
h
 >= 'a' && h <= 'f') {

503  
h
 - 'a' + 10;

505 i‡(
h
 >= 'A' && h <= 'F') {

506  
h
 - 'A' + 10;

508  
h
 - '0';

509 
	}
}

512 
	$iscsi_decode_uæ_°rög
(*
°r
)

514 *
°r
) {

515 *
tmp
 = 
°r
;

516 
c
;

518 i‡(*
°r
++ != '%') {

522 i‡(*
°r
 == 0) {

525 
c
 = 
	`h2i
(*
°r
++) << 4;

527 i‡(*
°r
 == 0) {

530 
c
 |
	`h2i
(*
°r
++);

532 *
tmp
++ = 
c
;

533 
	`memmove
(
tmp
, 
°r
, 
	`°æí
(str));

534 
tmp
[
	`°æí
(
°r
)] = 0;

536 
	}
}

538 
iscsi_uæ
 *

539 
	$iscsi_∑r£_uæ
(
iscsi_c⁄ãxt
 *
iscsi
, c⁄° *
uæ
, 
fuŒ
)

541 
iscsi_uæ
 *iscsi_url;

542 
°r
[
MAX_STRING_SIZE
+1];

543 *
p‹èl
;

544 *
u£r
 = 
NULL
;

545 *
∑sswd
 = 
NULL
;

546 *
èrgë_u£r
 = 
NULL
;

547 *
èrgë_∑sswd
 = 
NULL
;

548 *
èrgë
 = 
NULL
;

549 *
lun
;

550 *
tmp
;

551 
l
 = 0;

552 #ifde‡
HAVE_LINUX_ISER


553 
is_i£r
 = 0;

556 i‡(
	`°∫cmp
(
uæ
, "iscsi://", 8)

557 #ifde‡
HAVE_LINUX_ISER


558 && 
	`°∫cmp
(
uæ
, "iser://", 7)

561 i‡(
fuŒ
) {

562 
	`iscsi_£t_îr‹
(
iscsi
, "Invalid URL %s\niSCSI URL must "

564 
uæ
, 
ISCSI_URL_SYNTAX
);

566 
	`iscsi_£t_îr‹
(
iscsi
, "Invalid URL %s\niSCSI Portal "

568 
uæ
, 
ISCSI_PORTAL_URL_SYNTAX
);

570  
NULL
;

573 #ifde‡
HAVE_LINUX_ISER


574 i‡(!
	`°∫cmp
(
uæ
, "iser://", 7)) {

575 
is_i£r
 = 1;

576 
	`°∫˝y
(
°r
, 
uæ
 + 7, 
MAX_STRING_SIZE
);

579 i‡(!
	`°∫cmp
(
uæ
, "iscsi://", 8)) {

580 
	`°∫˝y
(
°r
, 
uæ
 + 8, 
MAX_STRING_SIZE
);

582 
p‹èl
 = 
°r
;

584 
u£r
 = 
	`gëív
("LIBISCSI_CHAP_USERNAME");

585 
∑sswd
 = 
	`gëív
("LIBISCSI_CHAP_PASSWORD");

586 
èrgë_u£r
 = 
	`gëív
("LIBISCSI_CHAP_TARGET_USERNAME");

587 
èrgë_∑sswd
 = 
	`gëív
("LIBISCSI_CHAP_TARGET_PASSWORD");

589 
tmp
 = 
	`°rchr
(
p‹èl
, '?');

590 i‡(
tmp
) {

591 *
tmp
++ = 0;

592 
tmp
 && *tmp) {

593 *
√xt
 = 
	`°rchr
(
tmp
, '&');

594 *
key
, *
vÆue
;

595 i‡(
√xt
 !
NULL
) {

596 *
√xt
++ = 0;

598 
key
 = 
tmp
;

599 
vÆue
 = 
	`°rchr
(
key
, '=');

600 i‡(
vÆue
 !
NULL
) {

601 *
vÆue
++ = 0;

603 i‡(!
	`°rcmp
(
key
, "header_digest")) {

604 i‡(!
	`°rcmp
(
vÆue
, "crc32c")) {

605 
	`iscsi_£t_hódî_dige°
(

606 
iscsi
, 
ISCSI_HEADER_DIGEST_CRC32C
);

607 } i‡(!
	`°rcmp
(
vÆue
, "none")) {

608 
	`iscsi_£t_hódî_dige°
(

609 
iscsi
, 
ISCSI_HEADER_DIGEST_NONE
);

611 
	`iscsi_£t_îr‹
(
iscsi
,

612 "InvÆid URLárgumíàf‹ hódî_dige°: %s", 
vÆue
);

613  
NULL
;

616 i‡(!
	`°rcmp
(
key
, "target_user")) {

617 
èrgë_u£r
 = 
vÆue
;

618 } i‡(!
	`°rcmp
(
key
, "target_password")) {

619 
èrgë_∑sswd
 = 
vÆue
;

620 #ifde‡
HAVE_LINUX_ISER


621 } i‡(!
	`°rcmp
(
key
, "iser")) {

622 
is_i£r
 = 1;

625 
tmp
 = 
√xt
;

629 
tmp
 = 
	`°rchr
(
p‹èl
, '@');

630 i‡(
tmp
 !
NULL
) {

631 
u£r
 = 
p‹èl
;

632 *
tmp
++ = 0;

633 
p‹èl
 = 
tmp
;

635 
tmp
 = 
	`°rchr
(
u£r
, '%');

636 i‡(
tmp
 =
NULL
) {

637 
tmp
 = 
	`°rchr
(
u£r
, ':');

639 i‡(
tmp
 !
NULL
) {

640 *
tmp
++ = 0;

641 
∑sswd
 = 
tmp
;

645 i‡(
fuŒ
) {

646 
èrgë
 = 
	`°rchr
(
p‹èl
, '/');

647 i‡(
èrgë
 =
NULL
) {

648 
	`iscsi_£t_îr‹
(
iscsi
, "Invalid URL %s\nCouldÇot "

651 
uæ
, 
ISCSI_URL_SYNTAX
);

652  
NULL
;

654 *
èrgë
++ = 0;

656 i‡(*
èrgë
 == 0) {

657 
	`iscsi_£t_îr‹
(
iscsi
, "Invalid URL %s\nCouldÇot "

660 
uæ
, 
ISCSI_URL_SYNTAX
);

661  
NULL
;

664 
lun
 = 
	`°rchr
(
èrgë
, '/');

665 i‡(
lun
 =
NULL
) {

666 
	`iscsi_£t_îr‹
(
iscsi
, "Invalid URL %s\nCouldÇot "

669 
uæ
, 
ISCSI_URL_SYNTAX
);

670  
NULL
;

672 *
lun
++ = 0;

674 
l
 = 
	`°πﬁ
(
lun
, &
tmp
, 10);

675 i‡(*
lun
 =0 || *
tmp
 != 0) {

676 
	`iscsi_£t_îr‹
(
iscsi
, "Invalid URL %s\nCouldÇot "

679 
uæ
, 
ISCSI_URL_SYNTAX
);

680  
NULL
;

683 
tmp
=
	`°rchr
(
p‹èl
,'/');

684 i‡(
tmp
) {

685 *
tmp
=0;

689 i‡(
iscsi
 !
NULL
) {

690 
iscsi_uæ
 = 
	`iscsi_mÆloc
(
iscsi
, (iscsi_url));

692 
iscsi_uæ
 = 
	`mÆloc
((iscsi_url));

695 i‡(
iscsi_uæ
 =
NULL
) {

696 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅoállocate "

698  
NULL
;

700 
	`mem£t
(
iscsi_uæ
, 0, (iscsi_url));

701 
iscsi_uæ
->
iscsi
= iscsi;

703 
	`°∫˝y
(
iscsi_uæ
->
p‹èl
,p‹èl,
MAX_STRING_SIZE
);

705 i‡(
u£r
 && 
∑sswd
 && user[0] &&Öasswd[0]) {

706 
	`°∫˝y
(
iscsi_uæ
->
u£r
, u£r, 
MAX_STRING_SIZE
);

707 
	`°∫˝y
(
iscsi_uæ
->
∑sswd
,Öasswd, 
MAX_STRING_SIZE
);

711 i‡(
èrgë_u£r
 && 
èrgë_∑sswd
 &&Åarget_user[0] &&Åarget_passwd[0]) {

712 
	`°∫˝y
(
iscsi_uæ
->
èrgë_u£r
,Å¨gë_u£r, 
MAX_STRING_SIZE
);

713 
	`°∫˝y
(
iscsi_uæ
->
èrgë_∑sswd
,Å¨gë_∑sswd, 
MAX_STRING_SIZE
);

717 #ifde‡
HAVE_LINUX_ISER


718 i‡(
iscsi
) {

719 i‡(
is_i£r
) {

720 i‡(
	`iscsi_öô_å™•‹t
(
iscsi
, 
ISER_TRANSPORT
))

721 
	`iscsi_£t_îr‹
(
iscsi
, "Cannot setÅransportÅo iSER");

724 
iscsi_uæ
->
å™•‹t
 = 
is_i£r
;

727 i‡(
fuŒ
) {

728 
	`°∫˝y
(
iscsi_uæ
->
èrgë
,Å¨gë, 
MAX_STRING_SIZE
);

729 
iscsi_uæ
->
lun
 = 
l
;

732 
	`iscsi_decode_uæ_°rög
(&
iscsi_uæ
->
èrgë
[0]);

736 i‡(
iscsi
) {

737 
	`iscsi_£t_èrgë«me
(
iscsi
, 
iscsi_uæ
->
èrgë
);

738 
	`iscsi_£t_öôüt‹_u£∫ame_pwd
(
iscsi
, 
iscsi_uæ
->
u£r
, iscsi_uæ->
∑sswd
);

739 
	`iscsi_£t_èrgë_u£∫ame_pwd
(
iscsi
, 
iscsi_uæ
->
èrgë_u£r
, iscsi_uæ->
èrgë_∑sswd
);

742  
iscsi_uæ
;

743 
	}
}

745 
iscsi_uæ
 *

746 
	$iscsi_∑r£_fuŒ_uæ
(
iscsi_c⁄ãxt
 *
iscsi
, c⁄° *
uæ
)

748  
	`iscsi_∑r£_uæ
(
iscsi
,
uæ
,1);

749 
	}
}

751 
iscsi_uæ
 *

752 
	$iscsi_∑r£_p‹èl_uæ
(
iscsi_c⁄ãxt
 *
iscsi
, c⁄° *
uæ
)

754  
	`iscsi_∑r£_uæ
(
iscsi
,
uæ
,0);

755 
	}
}

758 
	$iscsi_de°roy_uæ
(
iscsi_uæ
 *iscsi_url)

760 
iscsi_c⁄ãxt
 *
iscsi
 = 
iscsi_uæ
->iscsi;

761 
	`mem£t
(
iscsi_uæ
, 0, (iscsi_url));

762 i‡(
iscsi
 !
NULL
)

763 
	`iscsi_‰ì
(
iscsi
, 
iscsi_uæ
);

765 
	`‰ì
(
iscsi_uæ
);

766 
	}
}

770 
	$iscsi_£t_öôüt‹_u£∫ame_pwd
(
iscsi_c⁄ãxt
 *
iscsi
,

771 c⁄° *
u£r
, c⁄° *
∑sswd
)

773 i‡(!
u£r
 || !
∑sswd
 || !user[0] || !passwd[0]) {

774 
iscsi
->
u£r
[0] = 0;

775 
iscsi
->
∑sswd
[0] = 0;

778 
	`°∫˝y
(
iscsi
->
u£r
,u£r,
MAX_STRING_SIZE
);

779 
	`°∫˝y
(
iscsi
->
∑sswd
,∑sswd,
MAX_STRING_SIZE
);

781 
	}
}

785 
	$iscsi_£t_èrgë_u£∫ame_pwd
(
iscsi_c⁄ãxt
 *
iscsi
,

786 c⁄° *
u£r
, c⁄° *
∑sswd
)

788 i‡(!
u£r
 || !
∑sswd
 || !user[0] || !passwd[0]) {

789 
iscsi
->
èrgë_u£r
[0] = 0;

790 
iscsi
->
èrgë_∑sswd
[0] = 0;

793 
	`°∫˝y
(
iscsi
->
èrgë_u£r
, 
u£r
, 
MAX_STRING_SIZE
);

794 
	`°∫˝y
(
iscsi
->
èrgë_∑sswd
, 
∑sswd
, 
MAX_STRING_SIZE
);

796 
	}
}

800 
	$iscsi_£t_immedüã_d©a
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_immedüã_d©a
 
immedüã_d©a
)

802 i‡(
iscsi
->
is_loggedö
 != 0) {

803 
	`iscsi_£t_îr‹
(
iscsi
, "AlreadyÜogged in whenÅryingÅo set immediate_data");

807 
iscsi
->
w™t_immedüã_d©a
 = 
immedüã_d©a
;

808 
iscsi
->
u£_immedüã_d©a
 = 
immedüã_d©a
;

810 
	}
}

813 
	$iscsi_£t_öôül_r2t
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_öôül_r2t
 
öôül_r2t
)

815 i‡(
iscsi
->
is_loggedö
 != 0) {

816 
	`iscsi_£t_îr‹
(
iscsi
, "AlreadyÜogged in whenÅryingÅo set initial_r2t");

820 
iscsi
->
w™t_öôül_r2t
 = 
öôül_r2t
;

822 
	}
}

825 
	$iscsi_£t_timeout
(
iscsi_c⁄ãxt
 *
iscsi
, 
timeout
)

827 
iscsi
->
scsi_timeout
 = 
timeout
;

829 
	}
}

	@lib/iscsi-command.c

18 #ifde‡
HAVE_CONFIG_H


19 
	~"c⁄fig.h
"

22 #ifde‡
HAVE_SYS_TYPES_H


23 
	~<sys/ty≥s.h
>

26 #ifde‡
HAVE_ARPA_INET_H


27 
	~<¨∑/öë.h
>

30 #i‡
deföed
(
_WIN32
)

31 
	~<wösock2.h
>

34 
	~<°dio.h
>

35 
	~<°dlib.h
>

36 
	~<°rög.h
>

37 
	~"iscsi.h
"

38 
	~"iscsi-¥iv©e.h
"

39 
	~"scsi-lowÀvñ.h
"

40 
	~"¶i°.h
"

43 
	$iscsi_scsi_ª•⁄£_cb
(
iscsi_c⁄ãxt
 *
iscsi
, 
°©us
,

44 *
comm™d_d©a
 
_U_
, *
¥iv©e_d©a
)

46 
iscsi_scsi_cbd©a
 *
scsi_cbd©a
 =

47 (
iscsi_scsi_cbd©a
 *)
¥iv©e_d©a
;

49 
°©us
) {

50 
SCSI_STATUS_RESERVATION_CONFLICT
:

51 
SCSI_STATUS_CHECK_CONDITION
:

52 
SCSI_STATUS_GOOD
:

53 
SCSI_STATUS_BUSY
:

54 
SCSI_STATUS_CONDITION_MET
:

55 
SCSI_STATUS_TASK_SET_FULL
:

56 
SCSI_STATUS_ACA_ACTIVE
:

57 
SCSI_STATUS_TASK_ABORTED
:

58 
SCSI_STATUS_ERROR
:

59 
SCSI_STATUS_CANCELLED
:

60 
SCSI_STATUS_TIMEOUT
:

61 
scsi_cbd©a
->
èsk
->
°©us
 = status;

62 i‡(
scsi_cbd©a
->
ˇŒback
) {

63 
scsi_cbd©a
->
	`ˇŒback
(
iscsi
, 
°©us
, scsi_cbd©a->
èsk
,

64 
scsi_cbd©a
->
¥iv©e_d©a
);

68 
scsi_cbd©a
->
èsk
->
°©us
 = 
SCSI_STATUS_ERROR
;

69 
	`iscsi_£t_îr‹
(
iscsi
, "Cant handle scsi status %d yet.",

70 
°©us
);

71 i‡(
scsi_cbd©a
->
ˇŒback
) {

72 
scsi_cbd©a
->
	`ˇŒback
(
iscsi
, 
SCSI_STATUS_ERROR
, scsi_cbd©a->
èsk
,

73 
scsi_cbd©a
->
¥iv©e_d©a
);

76 
	}
}

79 
	$iscsi_£nd_d©a_out
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_pdu
 *
cmd_pdu
,

80 
uöt32_t
 
ât
, uöt32_à
off£t
, uöt32_à
tŸ_Àn
)

82 
tŸ_Àn
 > 0) {

83 
uöt32_t
 
Àn
 = 
tŸ_Àn
;

84 
iscsi_pdu
 *
pdu
;

85 
Êags
;

87 
Àn
 = 
	`MIN
÷í, 
iscsi
->
èrgë_max_ªcv_d©a_£gmít_Àngth
);

89 
pdu
 = 
	`iscsi_Æloˇã_pdu
(
iscsi
,

90 
ISCSI_PDU_DATA_OUT
,

91 
ISCSI_PDU_NO_PDU
,

92 
cmd_pdu
->
ôt
,

93 
ISCSI_PDU_DROP_ON_RECONNECT
|
ISCSI_PDU_DELETE_WHEN_SENT
);

94 i‡(
pdu
 =
NULL
) {

95 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory, FailedÅoállocate "

97 
îr‹
;

99 
pdu
->
scsi_cbd©a
.
èsk
 = 
cmd_pdu
->scsi_cbdata.task;

103 
pdu
->
cmd¢
 = 
cmd_pdu
->cmdsn;

105 i‡(
tŸ_Àn
 =
Àn
) {

106 
Êags
 = 
ISCSI_PDU_SCSI_FINAL
;

108 
Êags
 = 0;

112 
	`iscsi_pdu_£t_pduÊags
(
pdu
, 
Êags
);

115 
	`iscsi_pdu_£t_lun
(
pdu
, 
cmd_pdu
->
lun
);

118 
	`iscsi_pdu_£t_ât
(
pdu
, 
ât
);

121 
	`iscsi_pdu_£t_d©a¢
(
pdu
, 
cmd_pdu
->
d©a¢
++);

124 
	`iscsi_pdu_£t_buf„roff£t
(
pdu
, 
off£t
);

126 
pdu
->
∑ylﬂd_off£t
 = 
off£t
;

127 
pdu
->
∑ylﬂd_Àn
 = 
Àn
;

130 
	`scsi_£t_uöt32
(&
pdu
->
outd©a
.
d©a
[4],Ödu->
∑ylﬂd_Àn
);

132 i‡(
	`iscsi_queue_pdu
(
iscsi
, 
pdu
) != 0) {

133 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: failedÅo queue iscsi "

135 
îr‹
;

138 
tŸ_Àn
 -
Àn
;

139 
off£t
 +
Àn
;

143 
îr‹
:

144 
	`ISCSI_LIST_REMOVE
(&
iscsi
->
outqueue
, 
cmd_pdu
);

145 
	`ISCSI_LIST_REMOVE
(&
iscsi
->
waôpdu
, 
cmd_pdu
);

146 i‡(
cmd_pdu
->
ˇŒback
) {

147 
cmd_pdu
->
	`ˇŒback
(
iscsi
, 
SCSI_STATUS_ERROR
, 
NULL
,

148 
cmd_pdu
->
¥iv©e_d©a
);

150 
iscsi
->
drv
->
	`‰ì_pdu
(iscsi, 
cmd_pdu
);

152 
	}
}

155 
	$iscsi_£nd_unsﬁicôed_d©a_out
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_pdu
 *
pdu
)

157 
uöt32_t
 
Àn
 = 
	`MIN
(
pdu
->
expx„æí
, 
iscsi
->
fú°_bur°_Àngth
Ë-Ödu->
∑ylﬂd_Àn
;

159  
	`iscsi_£nd_d©a_out
(
iscsi
, 
pdu
, 0xffffffff,

160 
pdu
->
∑ylﬂd_Àn
, 
Àn
);

161 
	}
}

167 
	$iscsi_scsi_comm™d_async
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

168 
scsi_èsk
 *
èsk
, 
iscsi_comm™d_cb
 
cb
,

169 
iscsi_d©a
 *
d
, *
¥iv©e_d©a
)

171 
iscsi_pdu
 *
pdu
;

172 
Êags
;

174 i‡(
iscsi
->
ﬁd_iscsi
) {

175 
iscsi
 = iscsi->
ﬁd_iscsi
;

176 
	`ISCSI_LOG
(
iscsi
, 2, "iscsi_scsi_command_async: queuing cmdÅo old_iscsi whileÑeconnecting");

179 i‡(
iscsi
->
£ssi⁄_ty≥
 !
ISCSI_SESSION_NORMAL
) {

180 
	`iscsi_£t_îr‹
(
iscsi
, "TryingÅo send command on "

185 i‡(
iscsi
->
is_loggedö
 =0 && !iscsi->
≥ndög_ªc⁄√˘
) {

186 
	`iscsi_£t_îr‹
(
iscsi
, "TryingÅo send command while "

194 i‡(
d
 !
NULL
 && d->
d©a
 != NULL) {

195 
scsi_iovec
 *
iov
;

197 
iov
 = 
	`scsi_mÆloc
(
èsk
, (
scsi_iovec
));

198 i‡(
iov
 =
NULL
) {

201 
iov
->
iov_ba£
 = 
d
->
d©a
;

202 
iov
->
iov_Àn
 = 
d
->
size
;

203 
	`scsi_èsk_£t_iov_out
(
èsk
, 
iov
, 1);

206 
pdu
 = 
	`iscsi_Æloˇã_pdu
(
iscsi
,

207 
ISCSI_PDU_SCSI_REQUEST
,

208 
ISCSI_PDU_SCSI_RESPONSE
,

209 
	`iscsi_ôt_po°_ö¸emít
(
iscsi
),

211 i‡(
pdu
 =
NULL
) {

212 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory, FailedÅoállocate "

217 
pdu
->
scsi_cbd©a
.
èsk
 =Åask;

218 
pdu
->
scsi_cbd©a
.
ˇŒback
 = 
cb
;

219 
pdu
->
scsi_cbd©a
.
¥iv©e_d©a
 =Örivate_data;

221 
pdu
->
∑ylﬂd_off£t
 = 0;

222 
pdu
->
∑ylﬂd_Àn
 = 0;

224 
	`scsi_£t_èsk_¥iv©e_±r
(
èsk
, &
pdu
->
scsi_cbd©a
);

227 
Êags
 = 
ISCSI_PDU_SCSI_FINAL
|
ISCSI_PDU_SCSI_ATTR_SIMPLE
;

228 
èsk
->
x„r_dú
) {

229 
SCSI_XFER_NONE
:

231 
SCSI_XFER_READ
:

232 
Êags
 |
ISCSI_PDU_SCSI_READ
;

234 
SCSI_XFER_WRITE
:

235 
Êags
 |
ISCSI_PDU_SCSI_WRITE
;

238 i‡(
iscsi
->
u£_immedüã_d©a
 =
ISCSI_IMMEDIATE_DATA_YES
) {

239 
uöt32_t
 
Àn
 = 
èsk
->
expx„æí
;

241 
Àn
 = 
	`MIN
÷í, 
iscsi
->
fú°_bur°_Àngth
);

242 
Àn
 = 
	`MIN
÷í, 
iscsi
->
èrgë_max_ªcv_d©a_£gmít_Àngth
);

244 
pdu
->
∑ylﬂd_off£t
 = 0;

245 
pdu
->
∑ylﬂd_Àn
 = 
Àn
;

248 
	`scsi_£t_uöt32
(&
pdu
->
outd©a
.
d©a
[4],Ödu->
∑ylﬂd_Àn
);

255 i‡(
iscsi
->
u£_öôül_r2t
 =
ISCSI_INITIAL_R2T_NO


256 && 
pdu
->
∑ylﬂd_Àn
 < (
uöt32_t
)
èsk
->
expx„æí


257 && 
pdu
->
∑ylﬂd_Àn
 < 
iscsi
->
fú°_bur°_Àngth
) {

261 
Êags
 &~
ISCSI_PDU_SCSI_FINAL
;

265 
	`iscsi_pdu_£t_pduÊags
(
pdu
, 
Êags
);

268 
	`iscsi_pdu_£t_lun
(
pdu
, 
lun
);

269 
pdu
->
lun
 =Üun;

272 
	`iscsi_pdu_£t_expx„æí
(
pdu
, 
èsk
->
expx„æí
);

275 
	`iscsi_pdu_£t_cmd¢
(
pdu
, 
iscsi
->
cmd¢
++);

278 
	`iscsi_pdu_£t_cdb
(
pdu
, 
èsk
);

280 
pdu
->
ˇŒback
 = 
iscsi_scsi_ª•⁄£_cb
;

281 
pdu
->
¥iv©e_d©a
 = &pdu->
scsi_cbd©a
;

283 i‡(
	`iscsi_queue_pdu
(
iscsi
, 
pdu
) != 0) {

284 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: failedÅo queue iscsi "

286 
iscsi
->
drv
->
	`‰ì_pdu
(iscsi, 
pdu
);

295 i‡(!(
Êags
 & 
ISCSI_PDU_SCSI_FINAL
)) {

296 
	`iscsi_£nd_unsﬁicôed_d©a_out
(
iscsi
, 
pdu
);

300 
èsk
->
cmd¢
 = 
pdu
->cmdsn;

301 
èsk
->
ôt
 = 
pdu
->itt;

302 
èsk
->
lun
 =Üun;

305 
	}
}

308 
	$∑r£_£n£_•ec
(
scsi_£n£
 *
£n£
, c⁄° 
uöt8_t
 
öf
[3])

310 i‡(!(
öf
[0] & 0x80))

313 
£n£
->
£n£_•ecific
 = 1;

314 
£n£
->
ûl_∑øm_ö_cdb
 = !!(
öf
[0] & 0x40);

315 i‡(
öf
[0] & 8) {

316 
£n£
->
bô_poöãr_vÆid
 = 1;

317 
£n£
->
bô_poöãr
 = 
öf
[0] & 7;

319 
£n£
->
fõld_poöãr
 = 
	`scsi_gë_uöt16
(&
öf
[1]);

320 
	}
}

323 
	$∑r£_£n£_des¸ùt‹s
(
scsi_£n£
 *
£n£
, c⁄° 
uöt8_t
 *
sb
,

324 
sb_Àn
)

326 c⁄° *
p
, *c⁄° 
íd
 = 
sb
 + 
sb_Àn
;

328 
p
 = 
sb
;Ö < 
íd
;Ö +=Ö[1]) {

329 i‡(
p
[1] < 4)

331 i‡(!(
p
[2] & 0x80))

333 
p
[0]) {

336 
	`∑r£_£n£_•ec
(
£n£
, 
p
 + 4);

340 
	}
}

342 
	$scsi_∑r£_£n£_d©a
(
scsi_£n£
 *
£n£
, c⁄° 
uöt8_t
 *
sb
)

344 
£n£
->
îr‹_ty≥
 = 
sb
[0] & 0x7f;

345 
£n£
->
îr‹_ty≥
) {

349 
£n£
->
key
 = 
sb
[2] & 0x0f;

350 
£n£
->
ascq
 = 
	`scsi_gë_uöt16
(&
sb
[12]);

351 
	`∑r£_£n£_•ec
(
£n£
, 
sb
 + 15);

356 
£n£
->
key
 = 
sb
[1] & 0x0f;

357 
£n£
->
ascq
 = 
	`scsi_gë_uöt16
(&
sb
[2]);

358 
	`∑r£_£n£_des¸ùt‹s
(
£n£
, 
sb
 + 8, sb[7]);

361 
	}
}

364 
	$iscsi_¥o˚ss_scsi_ª∂y
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_pdu
 *
pdu
,

365 
iscsi_ö_pdu
 *
ö
)

367 
uöt8_t
 
Êags
, 
ª•⁄£
, 
°©us
;

368 
iscsi_scsi_cbd©a
 *
scsi_cbd©a
 = &
pdu
->scsi_cbdata;

369 
scsi_èsk
 *
èsk
 = 
scsi_cbd©a
->task;

371 
Êags
 = 
ö
->
hdr
[1];

372 i‡((
Êags
&
ISCSI_PDU_DATA_FINAL
) == 0) {

373 
	`iscsi_£t_îr‹
(
iscsi
, "scsiÑesponseÖdu but Final bit is "

374 "nŸ së: 0x%02x.", 
Êags
);

375 i‡(
pdu
->
ˇŒback
) {

376 
pdu
->
	`ˇŒback
(
iscsi
, 
SCSI_STATUS_ERROR
, 
èsk
,

377 
pdu
->
¥iv©e_d©a
);

381 i‡((
Êags
&
ISCSI_PDU_DATA_ACK_REQUESTED
) != 0) {

382 
	`iscsi_£t_îr‹
(
iscsi
, "scsiÑesponseásked for ACK "

383 "0x%02x.", 
Êags
);

384 i‡(
pdu
->
ˇŒback
) {

385 
pdu
->
	`ˇŒback
(
iscsi
, 
SCSI_STATUS_ERROR
, 
èsk
,

386 
pdu
->
¥iv©e_d©a
);

391 
ª•⁄£
 = 
ö
->
hdr
[2];

393 
èsk
->
ªsiduÆ_°©us
 = 
SCSI_RESIDUAL_NO_RESIDUAL
;

394 
èsk
->
ªsiduÆ
 = 0;

396 i‡(
Êags
 & (
ISCSI_PDU_DATA_RESIDUAL_OVERFLOW
|

397 
ISCSI_PDU_DATA_RESIDUAL_UNDERFLOW
)) {

398 i‡(
ª•⁄£
 != 0) {

399 
	`iscsi_£t_îr‹
(
iscsi
, "protocolÉrror: flags %#02x;"

400 "Ñe•⁄£ %#02x.", 
Êags
, 
ª•⁄£
);

401 i‡(
pdu
->
ˇŒback
) {

402 
pdu
->
	`ˇŒback
(
iscsi
, 
SCSI_STATUS_ERROR
, 
èsk
,

403 
pdu
->
¥iv©e_d©a
);

407 
èsk
->
ªsiduÆ
 = 
	`scsi_gë_uöt32
(&
ö
->
hdr
[44]);

408 i‡(
Êags
 & 
ISCSI_PDU_DATA_RESIDUAL_UNDERFLOW
) {

409 
èsk
->
ªsiduÆ_°©us
 = 
SCSI_RESIDUAL_UNDERFLOW
;

411 
èsk
->
ªsiduÆ_°©us
 = 
SCSI_RESIDUAL_OVERFLOW
;

415 
°©us
 = 
ö
->
hdr
[3];

417 
°©us
) {

418 
SCSI_STATUS_GOOD
:

419 
SCSI_STATUS_CONDITION_MET
:

420 
èsk
->
d©aö
.
d©a
 = 
pdu
->
öd©a
.data;

421 
èsk
->
d©aö
.
size
 = 
pdu
->
öd©a
.size;

427 i‡(
pdu
->
öd©a
.
d©a
 !
NULL
Ë
iscsi
->
‰ìs
++;

429 
pdu
->
öd©a
.
d©a
 = 
NULL
;

430 
pdu
->
öd©a
.
size
 = 0;

432 i‡(
pdu
->
ˇŒback
) {

433 
pdu
->
	`ˇŒback
(
iscsi
, 
SCSI_STATUS_GOOD
, 
èsk
,

434 
pdu
->
¥iv©e_d©a
);

437 
SCSI_STATUS_CHECK_CONDITION
:

438 
èsk
->
d©aö
.
size
 = 
ö
->
d©a_pos
;

439 
èsk
->
d©aö
.
d©a
 = 
	`mÆloc
—ask->d©aö.
size
);

440 i‡(
èsk
->
d©aö
.
d©a
 =
NULL
) {

441 
	`iscsi_£t_îr‹
(
iscsi
, "failedÅoállocate blob for "

445 
	`mem˝y
(
èsk
->
d©aö
.
d©a
, 
ö
->d©a,Åask->d©aö.
size
);

447 
	`scsi_∑r£_£n£_d©a
(&
èsk
->
£n£
, &èsk->
d©aö
.
d©a
[2]);

448 
	`iscsi_£t_îr‹
(
iscsi
, "SENSE KEY:%s(%d) ASCQ:%s(0x%04x)",

449 
	`scsi_£n£_key_°r
(
èsk
->
£n£
.
key
),

450 
èsk
->
£n£
.
key
,

451 
	`scsi_£n£_ascq_°r
(
èsk
->
£n£
.
ascq
),

452 
èsk
->
£n£
.
ascq
);

453 i‡(
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST
) {

454 
	`iscsi_dump_pdu_hódî
(
iscsi
, 
pdu
->
outd©a
.
d©a
);

456 i‡(
pdu
->
ˇŒback
) {

457 
pdu
->
	`ˇŒback
(
iscsi
, 
SCSI_STATUS_CHECK_CONDITION
, 
èsk
,

458 
pdu
->
¥iv©e_d©a
);

461 
SCSI_STATUS_RESERVATION_CONFLICT
:

462 
	`iscsi_£t_îr‹
(
iscsi
, "RESERVATION CONFLICT");

463 i‡(
pdu
->
ˇŒback
) {

464 
pdu
->
	`ˇŒback
(
iscsi
, 
SCSI_STATUS_RESERVATION_CONFLICT
,

465 
èsk
, 
pdu
->
¥iv©e_d©a
);

468 
SCSI_STATUS_TASK_SET_FULL
:

469 
	`iscsi_£t_îr‹
(
iscsi
, "TASK_SET_FULL");

470 i‡(
pdu
->
ˇŒback
) {

471 
pdu
->
	`ˇŒback
(
iscsi
, 
SCSI_STATUS_TASK_SET_FULL
,

472 
èsk
, 
pdu
->
¥iv©e_d©a
);

475 
SCSI_STATUS_ACA_ACTIVE
:

476 
	`iscsi_£t_îr‹
(
iscsi
, "ACA_ACTIVE");

477 i‡(
pdu
->
ˇŒback
) {

478 
pdu
->
	`ˇŒback
(
iscsi
, 
SCSI_STATUS_ACA_ACTIVE
,

479 
èsk
, 
pdu
->
¥iv©e_d©a
);

482 
SCSI_STATUS_TASK_ABORTED
:

483 
	`iscsi_£t_îr‹
(
iscsi
, "TASK_ABORTED");

484 i‡(
pdu
->
ˇŒback
) {

485 
pdu
->
	`ˇŒback
(
iscsi
, 
SCSI_STATUS_TASK_ABORTED
,

486 
èsk
, 
pdu
->
¥iv©e_d©a
);

489 
SCSI_STATUS_BUSY
:

490 
	`iscsi_£t_îr‹
(
iscsi
, "BUSY");

491 i‡(
pdu
->
ˇŒback
) {

492 
pdu
->
	`ˇŒback
(
iscsi
, 
SCSI_STATUS_BUSY
,

493 
èsk
, 
pdu
->
¥iv©e_d©a
);

497 
	`iscsi_£t_îr‹
(
iscsi
, "Unknow¿SCSI sètu†:%d.", 
°©us
);

498 i‡(
pdu
->
ˇŒback
) {

499 
pdu
->
	`ˇŒback
(
iscsi
, 
SCSI_STATUS_ERROR
,

500 
èsk
, 
pdu
->
¥iv©e_d©a
);

506 
	}
}

509 
	$iscsi_¥o˚ss_scsi_d©a_ö
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_pdu
 *
pdu
,

510 
iscsi_ö_pdu
 *
ö
, *
is_föished
)

512 
uöt32_t
 
Êags
, 
°©us
;

513 
iscsi_scsi_cbd©a
 *
scsi_cbd©a
 = &
pdu
->scsi_cbdata;

514 
scsi_èsk
 *
èsk
 = 
scsi_cbd©a
->task;

515 
d¶
;

517 
Êags
 = 
ö
->
hdr
[1];

518 i‡((
Êags
&
ISCSI_PDU_DATA_ACK_REQUESTED
) != 0) {

519 
	`iscsi_£t_îr‹
(
iscsi
, "scsiÑesponseásked for ACK "

520 "0x%02x.", 
Êags
);

521 i‡(
pdu
->
ˇŒback
) {

522 
pdu
->
	`ˇŒback
(
iscsi
, 
SCSI_STATUS_ERROR
, 
èsk
,

523 
pdu
->
¥iv©e_d©a
);

527 
d¶
 = 
	`scsi_gë_uöt32
(&
ö
->
hdr
[4]) & 0x00ffffff;

530 i‡(
èsk
->
iove˘‹_ö
.
iov
 =
NULL
) {

531 i‡(
	`iscsi_add_d©a
(
iscsi
, &
pdu
->
öd©a
, 
ö
->
d©a
, 
d¶
, 0) != 0) {

532 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: failedÅoádd data "

538 i‡((
Êags
&
ISCSI_PDU_DATA_FINAL
) == 0) {

539 *
is_föished
 = 0;

541 i‡((
Êags
&
ISCSI_PDU_DATA_CONTAINS_STATUS
) == 0) {

542 *
is_föished
 = 0;

545 i‡(*
is_föished
 == 0) {

549 
èsk
->
ªsiduÆ_°©us
 = 
SCSI_RESIDUAL_NO_RESIDUAL
;

550 
èsk
->
ªsiduÆ
 = 0;

555 i‡(
Êags
 & (
ISCSI_PDU_DATA_RESIDUAL_OVERFLOW
|
ISCSI_PDU_DATA_RESIDUAL_UNDERFLOW
)) {

556 
èsk
->
ªsiduÆ
 = 
	`scsi_gë_uöt32
(&
ö
->
hdr
[44]);

557 i‡(
Êags
 & 
ISCSI_PDU_DATA_RESIDUAL_UNDERFLOW
) {

558 
èsk
->
ªsiduÆ_°©us
 = 
SCSI_RESIDUAL_UNDERFLOW
;

560 
èsk
->
ªsiduÆ_°©us
 = 
SCSI_RESIDUAL_OVERFLOW
;

568 
°©us
 = 
ö
->
hdr
[3];

569 
èsk
->
d©aö
.
d©a
 = 
pdu
->
öd©a
.data;

570 
èsk
->
d©aö
.
size
 = 
pdu
->
öd©a
.size;

576 i‡(
pdu
->
öd©a
.
d©a
 !
NULL
Ë
iscsi
->
‰ìs
++;

578 
pdu
->
öd©a
.
d©a
 = 
NULL
;

579 
pdu
->
öd©a
.
size
 = 0;

581 i‡(
pdu
->
ˇŒback
) {

582 
pdu
->
	`ˇŒback
(
iscsi
, 
°©us
, 
èsk
,Ödu->
¥iv©e_d©a
);

586 
	}
}

589 
	$iscsi_¥o˚ss_r2t
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_pdu
 *
pdu
,

590 
iscsi_ö_pdu
 *
ö
)

592 
uöt32_t
 
ât
, 
off£t
, 
Àn
;

594 
ât
 = 
	`scsi_gë_uöt32
(&
ö
->
hdr
[20]);

595 
off£t
 = 
	`scsi_gë_uöt32
(&
ö
->
hdr
[40]);

596 
Àn
 = 
	`scsi_gë_uöt32
(&
ö
->
hdr
[44]);

598 
pdu
->
d©a¢
 = 0;

599 
	`iscsi_£nd_d©a_out
(
iscsi
, 
pdu
, 
ât
, 
off£t
, 
Àn
);

601 
	}
}

607 
scsi_èsk
 *

608 
	$iscsi_ã°unôªady_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

609 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

611 
scsi_èsk
 *
èsk
;

613 
èsk
 = 
	`scsi_cdb_ã°unôªady
();

614 i‡(
èsk
 =
NULL
) {

615 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅo create "

617  
NULL
;

619 i‡(
	`iscsi_scsi_comm™d_async
(
iscsi
, 
lun
, 
èsk
, 
cb
,

620 
NULL
, 
¥iv©e_d©a
) != 0) {

621 
	`scsi_‰ì_scsi_èsk
(
èsk
);

622  
NULL
;

625  
èsk
;

626 
	}
}

628 
scsi_èsk
 *

629 
	$iscsi_ªp‹éuns_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
ªp‹t_ty≥
,

630 
Æloc_Àn
, 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

632 
scsi_èsk
 *
èsk
;

634 i‡(
Æloc_Àn
 < 16) {

635 
	`iscsi_£t_îr‹
(
iscsi
, "MinimumállowedállocÜen for "

637 
Æloc_Àn
);

638  
NULL
;

641 
èsk
 = 
	`scsi_ªp‹éuns_cdb
(
ªp‹t_ty≥
, 
Æloc_Àn
);

642 i‡(
èsk
 =
NULL
) {

643 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅo create "

645  
NULL
;

648 i‡(
	`iscsi_scsi_comm™d_async
(
iscsi
, 0, 
èsk
, 
cb
,

649 
NULL
, 
¥iv©e_d©a
) != 0) {

650 
	`scsi_‰ì_scsi_èsk
(
èsk
);

651  
NULL
;

654  
èsk
;

655 
	}
}

657 
scsi_èsk
 *

658 
	$iscsi_öquúy_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
evpd
,

659 
∑ge_code
, 
maxsize
,

660 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

662 
scsi_èsk
 *
èsk
;

664 
èsk
 = 
	`scsi_cdb_öquúy
(
evpd
, 
∑ge_code
, 
maxsize
);

665 i‡(
èsk
 =
NULL
) {

666 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅo create "

668  
NULL
;

670 i‡(
	`iscsi_scsi_comm™d_async
(
iscsi
, 
lun
, 
èsk
, 
cb
,

671 
NULL
, 
¥iv©e_d©a
) != 0) {

672 
	`scsi_‰ì_scsi_èsk
(
èsk
);

673  
NULL
;

676  
èsk
;

677 
	}
}

679 
scsi_èsk
 *

680 
	$iscsi_ªadˇ∑côy10_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
lba
,

681 
pmi
, 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

683 
scsi_èsk
 *
èsk
;

685 
èsk
 = 
	`scsi_cdb_ªadˇ∑côy10
(
lba
, 
pmi
);

686 i‡(
èsk
 =
NULL
) {

687 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅo create "

689  
NULL
;

691 i‡(
	`iscsi_scsi_comm™d_async
(
iscsi
, 
lun
, 
èsk
, 
cb
,

692 
NULL
, 
¥iv©e_d©a
) != 0) {

693 
	`scsi_‰ì_scsi_èsk
(
èsk
);

694  
NULL
;

697  
èsk
;

698 
	}
}

700 
scsi_èsk
 *

701 
	$iscsi_ªadˇ∑côy16_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

702 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

704 
scsi_èsk
 *
èsk
;

706 
èsk
 = 
	`scsi_cdb_ªadˇ∑côy16
();

707 i‡(
èsk
 =
NULL
) {

708 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅo create "

710  
NULL
;

712 i‡(
	`iscsi_scsi_comm™d_async
(
iscsi
, 
lun
, 
èsk
, 
cb
,

713 
NULL
, 
¥iv©e_d©a
) != 0) {

714 
	`scsi_‰ì_scsi_èsk
(
èsk
);

715  
NULL
;

718  
èsk
;

719 
	}
}

721 
scsi_èsk
 *

722 
	$iscsi_ªadde„˘d©a10_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

723 
ªq_∂i°
, 
ªq_gli°
,

724 
de„˘_li°_f‹m©
, 
uöt16_t
 
Æloc_Àn
,

725 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

727 
scsi_èsk
 *
èsk
;

729 
èsk
 = 
	`scsi_cdb_ªadde„˘d©a10
(
ªq_∂i°
, 
ªq_gli°
,

730 
de„˘_li°_f‹m©
, 
Æloc_Àn
);

731 i‡(
èsk
 =
NULL
) {

732 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅo create "

734  
NULL
;

736 i‡(
	`iscsi_scsi_comm™d_async
(
iscsi
, 
lun
, 
èsk
, 
cb
,

737 
NULL
, 
¥iv©e_d©a
) != 0) {

738 
	`scsi_‰ì_scsi_èsk
(
èsk
);

739  
NULL
;

742  
èsk
;

743 
	}
}

745 
scsi_èsk
 *

746 
	$iscsi_ªadde„˘d©a12_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

747 
ªq_∂i°
, 
ªq_gli°
,

748 
de„˘_li°_f‹m©
,

749 
uöt32_t
 
addªss_des¸ùt‹_ödex
,

750 
uöt32_t
 
Æloc_Àn
,

751 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

753 
scsi_èsk
 *
èsk
;

755 
èsk
 = 
	`scsi_cdb_ªadde„˘d©a12
(
ªq_∂i°
, 
ªq_gli°
,

756 
de„˘_li°_f‹m©
,

757 
addªss_des¸ùt‹_ödex
, 
Æloc_Àn
);

758 i‡(
èsk
 =
NULL
) {

759 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅo create "

761  
NULL
;

763 i‡(
	`iscsi_scsi_comm™d_async
(
iscsi
, 
lun
, 
èsk
, 
cb
,

764 
NULL
, 
¥iv©e_d©a
) != 0) {

765 
	`scsi_‰ì_scsi_èsk
(
èsk
);

766  
NULL
;

769  
èsk
;

770 
	}
}

772 
scsi_èsk
 *

773 
	$iscsi_gë_lba_°©us_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

774 
uöt64_t
 
°¨tög_lba
, 
uöt32_t
 
Æloc_Àn
,

775 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

777 
scsi_èsk
 *
èsk
;

779 
èsk
 = 
	`scsi_cdb_gë_lba_°©us
(
°¨tög_lba
, 
Æloc_Àn
);

780 i‡(
èsk
 =
NULL
) {

781 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅo create "

783  
NULL
;

785 i‡(
	`iscsi_scsi_comm™d_async
(
iscsi
, 
lun
, 
èsk
, 
cb
,

786 
NULL
, 
¥iv©e_d©a
) != 0) {

787 
	`scsi_‰ì_scsi_èsk
(
èsk
);

788  
NULL
;

791  
èsk
;

792 
	}
}

794 
scsi_èsk
 *

795 
	$iscsi_ªad6_iov_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

796 
uöt32_t
 
d©Æí
, 
blocksize
,

797 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
, 
scsi_iovec
 *
iov
, 
niov
)

799 
scsi_èsk
 *
èsk
;

801 i‡(
d©Æí
 % 
blocksize
 != 0) {

802 
	`iscsi_£t_îr‹
(
iscsi
, "Datalen:%d isÇotá multiple of "

803 "thêblocksize:%d.", 
d©Æí
, 
blocksize
);

804  
NULL
;

807 
èsk
 = 
	`scsi_cdb_ªad6
(
lba
, 
d©Æí
, 
blocksize
);

808 i‡(
èsk
 =
NULL
) {

809 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅo create "

811  
NULL
;

814 i‡(
iov
 !
NULL
)

815 
	`scsi_èsk_£t_iov_ö
(
èsk
, 
iov
, 
niov
);

817 i‡(
	`iscsi_scsi_comm™d_async
(
iscsi
, 
lun
, 
èsk
, 
cb
,

818 
NULL
, 
¥iv©e_d©a
) != 0) {

819 
	`scsi_‰ì_scsi_èsk
(
èsk
);

820  
NULL
;

823  
èsk
;

824 
	}
}

826 
scsi_èsk
 *

827 
	$iscsi_ªad6_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

828 
uöt32_t
 
d©Æí
, 
blocksize
,

829 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

831 
scsi_èsk
 *
èsk
;

833 i‡(
d©Æí
 % 
blocksize
 != 0) {

834 
	`iscsi_£t_îr‹
(
iscsi
, "Datalen:%d isÇotá multiple of "

835 "thêblocksize:%d.", 
d©Æí
, 
blocksize
);

836  
NULL
;

839 
èsk
 = 
	`scsi_cdb_ªad6
(
lba
, 
d©Æí
, 
blocksize
);

840 i‡(
èsk
 =
NULL
) {

841 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅo create "

843  
NULL
;

845 i‡(
	`iscsi_scsi_comm™d_async
(
iscsi
, 
lun
, 
èsk
, 
cb
,

846 
NULL
, 
¥iv©e_d©a
) != 0) {

847 
	`scsi_‰ì_scsi_èsk
(
èsk
);

848  
NULL
;

851  
èsk
;

852 
	}
}

854 
scsi_èsk
 *

855 
	$iscsi_ªad10_iov_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

856 
uöt32_t
 
d©Æí
, 
blocksize
,

857 
rd¥Ÿe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
,

858 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
, 
scsi_iovec
 *
iov
, 
niov
)

860 
scsi_èsk
 *
èsk
;

862 i‡(
d©Æí
 % 
blocksize
 != 0) {

863 
	`iscsi_£t_îr‹
(
iscsi
, "Datalen:%d isÇotá multiple of "

864 "thêblocksize:%d.", 
d©Æí
, 
blocksize
);

865  
NULL
;

868 
èsk
 = 
	`scsi_cdb_ªad10
(
lba
, 
d©Æí
, 
blocksize
, 
rd¥Ÿe˘
,

869 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
);

870 i‡(
èsk
 =
NULL
) {

871 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅo create "

873  
NULL
;

876 i‡(
iov
 !
NULL
)

877 
	`scsi_èsk_£t_iov_ö
(
èsk
, 
iov
, 
niov
);

879 i‡(
	`iscsi_scsi_comm™d_async
(
iscsi
, 
lun
, 
èsk
, 
cb
,

880 
NULL
, 
¥iv©e_d©a
) != 0) {

881 
	`scsi_‰ì_scsi_èsk
(
èsk
);

882  
NULL
;

885  
èsk
;

886 
	}
}

887 
scsi_èsk
 *

888 
	$iscsi_ªad10_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

889 
uöt32_t
 
d©Æí
, 
blocksize
,

890 
rd¥Ÿe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
,

891 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

893 
scsi_èsk
 *
èsk
;

895 i‡(
d©Æí
 % 
blocksize
 != 0) {

896 
	`iscsi_£t_îr‹
(
iscsi
, "Datalen:%d isÇotá multiple of "

897 "thêblocksize:%d.", 
d©Æí
, 
blocksize
);

898  
NULL
;

901 
èsk
 = 
	`scsi_cdb_ªad10
(
lba
, 
d©Æí
, 
blocksize
, 
rd¥Ÿe˘
,

902 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
);

903 i‡(
èsk
 =
NULL
) {

904 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅo create "

906  
NULL
;

908 i‡(
	`iscsi_scsi_comm™d_async
(
iscsi
, 
lun
, 
èsk
, 
cb
,

909 
NULL
, 
¥iv©e_d©a
) != 0) {

910 
	`scsi_‰ì_scsi_èsk
(
èsk
);

911  
NULL
;

914  
èsk
;

915 
	}
}

917 
scsi_èsk
 *

918 
	$iscsi_ªad12_iov_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

919 
uöt32_t
 
d©Æí
, 
blocksize
,

920 
rd¥Ÿe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
,

921 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
, 
scsi_iovec
 *
iov
, 
niov
)

923 
scsi_èsk
 *
èsk
;

925 i‡(
d©Æí
 % 
blocksize
 != 0) {

926 
	`iscsi_£t_îr‹
(
iscsi
, "Datalen:%d isÇotá multiple of "

927 "thêblocksize:%d.", 
d©Æí
, 
blocksize
);

928  
NULL
;

931 
èsk
 = 
	`scsi_cdb_ªad12
(
lba
, 
d©Æí
, 
blocksize
, 
rd¥Ÿe˘
,

932 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
);

933 i‡(
èsk
 =
NULL
) {

934 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅo create "

936  
NULL
;

939 i‡(
iov
 !
NULL
)

940 
	`scsi_èsk_£t_iov_ö
(
èsk
, 
iov
, 
niov
);

942 i‡(
	`iscsi_scsi_comm™d_async
(
iscsi
, 
lun
, 
èsk
, 
cb
,

943 
NULL
, 
¥iv©e_d©a
) != 0) {

944 
	`scsi_‰ì_scsi_èsk
(
èsk
);

945  
NULL
;

948  
èsk
;

949 
	}
}

951 
scsi_èsk
 *

952 
	$iscsi_ªad12_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

953 
uöt32_t
 
d©Æí
, 
blocksize
,

954 
rd¥Ÿe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
,

955 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

957 
scsi_èsk
 *
èsk
;

959 i‡(
d©Æí
 % 
blocksize
 != 0) {

960 
	`iscsi_£t_îr‹
(
iscsi
, "Datalen:%d isÇotá multiple of "

961 "thêblocksize:%d.", 
d©Æí
, 
blocksize
);

962  
NULL
;

965 
èsk
 = 
	`scsi_cdb_ªad12
(
lba
, 
d©Æí
, 
blocksize
, 
rd¥Ÿe˘
,

966 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
);

967 i‡(
èsk
 =
NULL
) {

968 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅo create "

970  
NULL
;

972 i‡(
	`iscsi_scsi_comm™d_async
(
iscsi
, 
lun
, 
èsk
, 
cb
,

973 
NULL
, 
¥iv©e_d©a
) != 0) {

974 
	`scsi_‰ì_scsi_èsk
(
èsk
);

975  
NULL
;

978  
èsk
;

979 
	}
}

981 
scsi_èsk
 *

982 
	$iscsi_ªad16_iov_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
,

983 
uöt32_t
 
d©Æí
, 
blocksize
,

984 
rd¥Ÿe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
,

985 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
, 
scsi_iovec
 *
iov
, 
niov
)

987 
scsi_èsk
 *
èsk
;

989 i‡(
d©Æí
 % 
blocksize
 != 0) {

990 
	`iscsi_£t_îr‹
(
iscsi
, "Datalen:%d isÇotá multiple of "

991 "thêblocksize:%d.", 
d©Æí
, 
blocksize
);

992  
NULL
;

995 
èsk
 = 
	`scsi_cdb_ªad16
(
lba
, 
d©Æí
, 
blocksize
, 
rd¥Ÿe˘
,

996 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
);

997 i‡(
èsk
 =
NULL
) {

998 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅo create "

1000  
NULL
;

1003 i‡(
iov
 !
NULL
)

1004 
	`scsi_èsk_£t_iov_ö
(
èsk
, 
iov
, 
niov
);

1006 i‡(
	`iscsi_scsi_comm™d_async
(
iscsi
, 
lun
, 
èsk
, 
cb
,

1007 
NULL
, 
¥iv©e_d©a
) != 0) {

1008 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1009  
NULL
;

1012  
èsk
;

1013 
	}
}

1015 
scsi_èsk
 *

1016 
	$iscsi_ªad16_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
,

1017 
uöt32_t
 
d©Æí
, 
blocksize
,

1018 
rd¥Ÿe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
,

1019 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

1021 
scsi_èsk
 *
èsk
;

1023 i‡(
d©Æí
 % 
blocksize
 != 0) {

1024 
	`iscsi_£t_îr‹
(
iscsi
, "Datalen:%d isÇotá multiple of "

1025 "thêblocksize:%d.", 
d©Æí
, 
blocksize
);

1026  
NULL
;

1029 
èsk
 = 
	`scsi_cdb_ªad16
(
lba
, 
d©Æí
, 
blocksize
, 
rd¥Ÿe˘
,

1030 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
);

1031 i‡(
èsk
 =
NULL
) {

1032 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅo create "

1034  
NULL
;

1036 i‡(
	`iscsi_scsi_comm™d_async
(
iscsi
, 
lun
, 
èsk
, 
cb
,

1037 
NULL
, 
¥iv©e_d©a
) != 0) {

1038 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1039  
NULL
;

1042  
èsk
;

1043 
	}
}

1045 
scsi_èsk
 *

1046 
	$iscsi_wrôe10_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

1047 *
d©a
, 
uöt32_t
 
d©Æí
, 
blocksize
,

1048 
wΩrŸe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
,

1049 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

1051 
scsi_èsk
 *
èsk
;

1052 
iscsi_d©a
 
d
;

1054 i‡(
d©Æí
 % 
blocksize
 != 0) {

1055 
	`iscsi_£t_îr‹
(
iscsi
, "Datalen:%d isÇotá multiple ofÅhe "

1056 "blocksize:%d.", 
d©Æí
, 
blocksize
);

1057  
NULL
;

1060 
èsk
 = 
	`scsi_cdb_wrôe10
(
lba
, 
d©Æí
, 
blocksize
, 
wΩrŸe˘
,

1061 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
);

1062 i‡(
èsk
 =
NULL
) {

1063 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅo create "

1065  
NULL
;

1067 
d
.
d©a
 = data;

1068 
d
.
size
 = 
d©Æí
;

1070 i‡(
	`iscsi_scsi_comm™d_async
(
iscsi
, 
lun
, 
èsk
, 
cb
,

1071 &
d
, 
¥iv©e_d©a
) != 0) {

1072 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1073  
NULL
;

1076  
èsk
;

1077 
	}
}

1079 
scsi_èsk
 *

1080 
	$iscsi_wrôe10_iov_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

1081 *
d©a
, 
uöt32_t
 
d©Æí
, 
blocksize
,

1082 
wΩrŸe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
,

1083 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
, 
scsi_iovec
 *
iov
, 
niov
)

1085 
scsi_èsk
 *
èsk
;

1086 
iscsi_d©a
 
d
;

1088 i‡(
d©Æí
 % 
blocksize
 != 0) {

1089 
	`iscsi_£t_îr‹
(
iscsi
, "Datalen:%d isÇotá multiple ofÅhe "

1090 "blocksize:%d.", 
d©Æí
, 
blocksize
);

1091  
NULL
;

1094 
èsk
 = 
	`scsi_cdb_wrôe10
(
lba
, 
d©Æí
, 
blocksize
, 
wΩrŸe˘
,

1095 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
);

1096 i‡(
èsk
 =
NULL
) {

1097 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅo create "

1099  
NULL
;

1101 
d
.
d©a
 = data;

1102 
d
.
size
 = 
d©Æí
;

1104 i‡(
iov
 !
NULL
)

1105 
	`scsi_èsk_£t_iov_out
(
èsk
, 
iov
, 
niov
);

1108 i‡(
	`iscsi_scsi_comm™d_async
(
iscsi
, 
lun
, 
èsk
, 
cb
,

1109 &
d
, 
¥iv©e_d©a
) != 0) {

1110 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1111  
NULL
;

1114  
èsk
;

1115 
	}
}

1117 
scsi_èsk
 *

1118 
	$iscsi_wrôe12_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

1119 *
d©a
, 
uöt32_t
 
d©Æí
, 
blocksize
,

1120 
wΩrŸe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
,

1121 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

1123 
scsi_èsk
 *
èsk
;

1124 
iscsi_d©a
 
d
;

1126 i‡(
d©Æí
 % 
blocksize
 != 0) {

1127 
	`iscsi_£t_îr‹
(
iscsi
, "Datalen:%d isÇotá multiple ofÅhe "

1128 "blocksize:%d.", 
d©Æí
, 
blocksize
);

1129  
NULL
;

1132 
èsk
 = 
	`scsi_cdb_wrôe12
(
lba
, 
d©Æí
, 
blocksize
, 
wΩrŸe˘
,

1133 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
);

1134 i‡(
èsk
 =
NULL
) {

1135 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅo create "

1137  
NULL
;

1139 
d
.
d©a
 = data;

1140 
d
.
size
 = 
d©Æí
;

1142 i‡(
	`iscsi_scsi_comm™d_async
(
iscsi
, 
lun
, 
èsk
, 
cb
,

1143 &
d
, 
¥iv©e_d©a
) != 0) {

1144 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1145  
NULL
;

1148  
èsk
;

1149 
	}
}

1151 
scsi_èsk
 *

1152 
	$iscsi_wrôe12_iov_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

1153 *
d©a
, 
uöt32_t
 
d©Æí
, 
blocksize
,

1154 
wΩrŸe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
,

1155 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
, 
scsi_iovec
 *
iov
, 
niov
)

1157 
scsi_èsk
 *
èsk
;

1158 
iscsi_d©a
 
d
;

1160 i‡(
d©Æí
 % 
blocksize
 != 0) {

1161 
	`iscsi_£t_îr‹
(
iscsi
, "Datalen:%d isÇotá multiple ofÅhe "

1162 "blocksize:%d.", 
d©Æí
, 
blocksize
);

1163  
NULL
;

1166 
èsk
 = 
	`scsi_cdb_wrôe12
(
lba
, 
d©Æí
, 
blocksize
, 
wΩrŸe˘
,

1167 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
);

1168 i‡(
èsk
 =
NULL
) {

1169 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅo create "

1171  
NULL
;

1173 
d
.
d©a
 = data;

1174 
d
.
size
 = 
d©Æí
;

1176 i‡(
iov
 !
NULL
)

1177 
	`scsi_èsk_£t_iov_out
(
èsk
, 
iov
, 
niov
);

1179 i‡(
	`iscsi_scsi_comm™d_async
(
iscsi
, 
lun
, 
èsk
, 
cb
,

1180 &
d
, 
¥iv©e_d©a
) != 0) {

1181 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1182  
NULL
;

1185  
èsk
;

1186 
	}
}

1188 
scsi_èsk
 *

1189 
	$iscsi_wrôe16_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
,

1190 *
d©a
, 
uöt32_t
 
d©Æí
, 
blocksize
,

1191 
wΩrŸe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
,

1192 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

1194 
scsi_èsk
 *
èsk
;

1195 
iscsi_d©a
 
d
;

1197 i‡(
d©Æí
 % 
blocksize
 != 0) {

1198 
	`iscsi_£t_îr‹
(
iscsi
, "Datalen:%d isÇotá multiple ofÅhe "

1199 "blocksize:%d.", 
d©Æí
, 
blocksize
);

1200  
NULL
;

1203 
èsk
 = 
	`scsi_cdb_wrôe16
(
lba
, 
d©Æí
, 
blocksize
, 
wΩrŸe˘
,

1204 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
);

1205 i‡(
èsk
 =
NULL
) {

1206 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅo create "

1208  
NULL
;

1210 
d
.
d©a
 = data;

1211 
d
.
size
 = 
d©Æí
;

1213 i‡(
	`iscsi_scsi_comm™d_async
(
iscsi
, 
lun
, 
èsk
, 
cb
,

1214 &
d
, 
¥iv©e_d©a
) != 0) {

1215 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1216  
NULL
;

1219  
èsk
;

1220 
	}
}

1222 
scsi_èsk
 *

1223 
	$iscsi_wrôe16_iov_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
,

1224 *
d©a
, 
uöt32_t
 
d©Æí
, 
blocksize
,

1225 
wΩrŸe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
,

1226 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
, 
scsi_iovec
 *
iov
, 
niov
)

1228 
scsi_èsk
 *
èsk
;

1229 
iscsi_d©a
 
d
;

1231 i‡(
d©Æí
 % 
blocksize
 != 0) {

1232 
	`iscsi_£t_îr‹
(
iscsi
, "Datalen:%d isÇotá multiple ofÅhe "

1233 "blocksize:%d.", 
d©Æí
, 
blocksize
);

1234  
NULL
;

1237 
èsk
 = 
	`scsi_cdb_wrôe16
(
lba
, 
d©Æí
, 
blocksize
, 
wΩrŸe˘
,

1238 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
);

1239 i‡(
èsk
 =
NULL
) {

1240 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅo create "

1242  
NULL
;

1244 
d
.
d©a
 = data;

1245 
d
.
size
 = 
d©Æí
;

1247 i‡(
iov
 !
NULL
)

1248 
	`scsi_èsk_£t_iov_out
(
èsk
, 
iov
, 
niov
);

1250 i‡(
	`iscsi_scsi_comm™d_async
(
iscsi
, 
lun
, 
èsk
, 
cb
,

1251 &
d
, 
¥iv©e_d©a
) != 0) {

1252 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1253  
NULL
;

1256  
èsk
;

1257 
	}
}

1259 
scsi_èsk
 *

1260 
	$iscsi_wrôótomic16_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
,

1261 *
d©a
, 
uöt32_t
 
d©Æí
, 
blocksize
,

1262 
wΩrŸe˘
, 
dpo
, 
fua
, 
group_numbî
,

1263 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

1265 
scsi_èsk
 *
èsk
;

1266 
iscsi_d©a
 
d
;

1268 i‡(
d©Æí
 % 
blocksize
 != 0) {

1269 
	`iscsi_£t_îr‹
(
iscsi
, "Datalen:%d isÇotá multiple ofÅhe "

1270 "blocksize:%d.", 
d©Æí
, 
blocksize
);

1271  
NULL
;

1274 
èsk
 = 
	`scsi_cdb_wrôótomic16
(
lba
, 
d©Æí
, 
blocksize
, 
wΩrŸe˘
,

1275 
dpo
, 
fua
, 
group_numbî
);

1276 i‡(
èsk
 =
NULL
) {

1277 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅo create "

1279  
NULL
;

1281 
d
.
d©a
 = data;

1282 
d
.
size
 = 
d©Æí
;

1284 i‡(
	`iscsi_scsi_comm™d_async
(
iscsi
, 
lun
, 
èsk
, 
cb
,

1285 &
d
, 
¥iv©e_d©a
) != 0) {

1286 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1287  
NULL
;

1290  
èsk
;

1291 
	}
}

1293 
scsi_èsk
 *

1294 
	$iscsi_wrôótomic16_iov_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
,

1295 *
d©a
, 
uöt32_t
 
d©Æí
, 
blocksize
,

1296 
wΩrŸe˘
, 
dpo
, 
fua
, 
group_numbî
,

1297 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
,

1298 
scsi_iovec
 *
iov
, 
niov
)

1300 
scsi_èsk
 *
èsk
;

1301 
iscsi_d©a
 
d
;

1303 i‡(
d©Æí
 % 
blocksize
 != 0) {

1304 
	`iscsi_£t_îr‹
(
iscsi
, "Datalen:%d isÇotá multiple ofÅhe "

1305 "blocksize:%d.", 
d©Æí
, 
blocksize
);

1306  
NULL
;

1309 
èsk
 = 
	`scsi_cdb_wrôótomic16
(
lba
, 
d©Æí
, 
blocksize
, 
wΩrŸe˘
,

1310 
dpo
, 
fua
, 
group_numbî
);

1311 i‡(
èsk
 =
NULL
) {

1312 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅo create "

1314  
NULL
;

1316 
d
.
d©a
 = data;

1317 
d
.
size
 = 
d©Æí
;

1319 i‡(
iov
 !
NULL
)

1320 
	`scsi_èsk_£t_iov_out
(
èsk
, 
iov
, 
niov
);

1322 i‡(
	`iscsi_scsi_comm™d_async
(
iscsi
, 
lun
, 
èsk
, 
cb
,

1323 &
d
, 
¥iv©e_d©a
) != 0) {

1324 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1325  
NULL
;

1328  
èsk
;

1329 
	}
}

1331 
scsi_èsk
 *

1332 
	$iscsi_‹wrôe_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
,

1333 *
d©a
, 
uöt32_t
 
d©Æí
, 
blocksize
,

1334 
wΩrŸe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
,

1335 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

1337 
scsi_èsk
 *
èsk
;

1338 
iscsi_d©a
 
d
;

1340 i‡(
d©Æí
 % 
blocksize
 != 0) {

1341 
	`iscsi_£t_îr‹
(
iscsi
, "Datalen:%d isÇotá multiple ofÅhe "

1342 "blocksize:%d.", 
d©Æí
, 
blocksize
);

1343  
NULL
;

1346 
èsk
 = 
	`scsi_cdb_‹wrôe
(
lba
, 
d©Æí
, 
blocksize
, 
wΩrŸe˘
,

1347 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
);

1348 i‡(
èsk
 =
NULL
) {

1349 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅo create "

1351  
NULL
;

1353 
d
.
d©a
 = data;

1354 
d
.
size
 = 
d©Æí
;

1356 i‡(
	`iscsi_scsi_comm™d_async
(
iscsi
, 
lun
, 
èsk
, 
cb
,

1357 &
d
, 
¥iv©e_d©a
) != 0) {

1358 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1359  
NULL
;

1362  
èsk
;

1363 
	}
}

1365 
scsi_èsk
 *

1366 
	$iscsi_‹wrôe_iov_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
,

1367 *
d©a
, 
uöt32_t
 
d©Æí
, 
blocksize
,

1368 
wΩrŸe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
,

1369 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
, 
scsi_iovec
 *
iov
, 
niov
)

1371 
scsi_èsk
 *
èsk
;

1372 
iscsi_d©a
 
d
;

1374 i‡(
d©Æí
 % 
blocksize
 != 0) {

1375 
	`iscsi_£t_îr‹
(
iscsi
, "Datalen:%d isÇotá multiple ofÅhe "

1376 "blocksize:%d.", 
d©Æí
, 
blocksize
);

1377  
NULL
;

1380 
èsk
 = 
	`scsi_cdb_‹wrôe
(
lba
, 
d©Æí
, 
blocksize
, 
wΩrŸe˘
,

1381 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
);

1382 i‡(
èsk
 =
NULL
) {

1383 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅo create "

1385  
NULL
;

1387 
d
.
d©a
 = data;

1388 
d
.
size
 = 
d©Æí
;

1390 i‡(
iov
 !
NULL
)

1391 
	`scsi_èsk_£t_iov_out
(
èsk
, 
iov
, 
niov
);

1393 i‡(
	`iscsi_scsi_comm™d_async
(
iscsi
, 
lun
, 
èsk
, 
cb
,

1394 &
d
, 
¥iv©e_d©a
) != 0) {

1395 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1396  
NULL
;

1399  
èsk
;

1400 
	}
}

1402 
scsi_èsk
 *

1403 
	$iscsi_com∑ª™dwrôe_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
,

1404 *
d©a
, 
uöt32_t
 
d©Æí
, 
blocksize
,

1405 
wΩrŸe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
,

1406 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

1408 
scsi_èsk
 *
èsk
;

1409 
iscsi_d©a
 
d
;

1411 i‡(
d©Æí
 % (
blocksize
 * 2) != 0) {

1412 
	`iscsi_£t_îr‹
(
iscsi
, "Datalen:%d isÇotá multiple ofÅhe "

1413 "blocksizê* 2:%d.", 
d©Æí
, 
blocksize
 * 2);

1414  
NULL
;

1417 
èsk
 = 
	`scsi_cdb_com∑ª™dwrôe
(
lba
, 
d©Æí
, 
blocksize
, 
wΩrŸe˘
,

1418 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
);

1419 i‡(
èsk
 =
NULL
) {

1420 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅo create "

1422  
NULL
;

1424 
d
.
d©a
 = data;

1425 
d
.
size
 = 
d©Æí
;

1427 i‡(
	`iscsi_scsi_comm™d_async
(
iscsi
, 
lun
, 
èsk
, 
cb
,

1428 &
d
, 
¥iv©e_d©a
) != 0) {

1429 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1430  
NULL
;

1433  
èsk
;

1434 
	}
}

1436 
scsi_èsk
 *

1437 
	$iscsi_com∑ª™dwrôe_iov_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
,

1438 *
d©a
, 
uöt32_t
 
d©Æí
, 
blocksize
,

1439 
wΩrŸe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
,

1440 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
, 
scsi_iovec
 *
iov
, 
niov
)

1442 
scsi_èsk
 *
èsk
;

1443 
iscsi_d©a
 
d
;

1445 i‡(
d©Æí
 % (
blocksize
 * 2) != 0) {

1446 
	`iscsi_£t_îr‹
(
iscsi
, "Datalen:%d isÇotá multiple ofÅhe "

1447 "blocksizê* 2:%d.", 
d©Æí
, 
blocksize
 * 2);

1448  
NULL
;

1451 
èsk
 = 
	`scsi_cdb_com∑ª™dwrôe
(
lba
, 
d©Æí
, 
blocksize
, 
wΩrŸe˘
,

1452 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
);

1453 i‡(
èsk
 =
NULL
) {

1454 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅo create "

1456  
NULL
;

1458 
d
.
d©a
 = data;

1459 
d
.
size
 = 
d©Æí
;

1461 i‡(
iov
 !
NULL
)

1462 
	`scsi_èsk_£t_iov_out
(
èsk
, 
iov
, 
niov
);

1464 i‡(
	`iscsi_scsi_comm™d_async
(
iscsi
, 
lun
, 
èsk
, 
cb
,

1465 &
d
, 
¥iv©e_d©a
) != 0) {

1466 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1467  
NULL
;

1470  
èsk
;

1471 
	}
}

1473 
scsi_èsk
 *

1474 
	$iscsi_wrôevîify10_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

1475 *
d©a
, 
uöt32_t
 
d©Æí
, 
blocksize
,

1476 
wΩrŸe˘
, 
dpo
, 
bytchk
, 
group_numbî
,

1477 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

1479 
scsi_èsk
 *
èsk
;

1480 
iscsi_d©a
 
d
;

1482 i‡(
d©Æí
 % 
blocksize
 != 0) {

1483 
	`iscsi_£t_îr‹
(
iscsi
, "Datalen:%d isÇotá multiple ofÅhe "

1484 "blocksize:%d.", 
d©Æí
, 
blocksize
);

1485  
NULL
;

1488 
èsk
 = 
	`scsi_cdb_wrôevîify10
(
lba
, 
d©Æí
, 
blocksize
, 
wΩrŸe˘
,

1489 
dpo
, 
bytchk
, 
group_numbî
);

1490 i‡(
èsk
 =
NULL
) {

1491 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅo create "

1493  
NULL
;

1495 
d
.
d©a
 = data;

1496 
d
.
size
 = 
d©Æí
;

1498 i‡(
	`iscsi_scsi_comm™d_async
(
iscsi
, 
lun
, 
èsk
, 
cb
,

1499 &
d
, 
¥iv©e_d©a
) != 0) {

1500 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1501  
NULL
;

1504  
èsk
;

1505 
	}
}

1507 
scsi_èsk
 *

1508 
	$iscsi_wrôevîify10_iov_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

1509 *
d©a
, 
uöt32_t
 
d©Æí
, 
blocksize
,

1510 
wΩrŸe˘
, 
dpo
, 
bytchk
, 
group_numbî
,

1511 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
,

1512 
scsi_iovec
 *
iov
, 
niov
)

1514 
scsi_èsk
 *
èsk
;

1515 
iscsi_d©a
 
d
;

1517 i‡(
d©Æí
 % 
blocksize
 != 0) {

1518 
	`iscsi_£t_îr‹
(
iscsi
, "Datalen:%d isÇotá multiple ofÅhe "

1519 "blocksize:%d.", 
d©Æí
, 
blocksize
);

1520  
NULL
;

1523 
èsk
 = 
	`scsi_cdb_wrôevîify10
(
lba
, 
d©Æí
, 
blocksize
, 
wΩrŸe˘
,

1524 
dpo
, 
bytchk
, 
group_numbî
);

1525 i‡(
èsk
 =
NULL
) {

1526 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅo create "

1528  
NULL
;

1530 
d
.
d©a
 = data;

1531 
d
.
size
 = 
d©Æí
;

1533 i‡(
iov
 !
NULL
)

1534 
	`scsi_èsk_£t_iov_out
(
èsk
, 
iov
, 
niov
);

1536 i‡(
	`iscsi_scsi_comm™d_async
(
iscsi
, 
lun
, 
èsk
, 
cb
,

1537 &
d
, 
¥iv©e_d©a
) != 0) {

1538 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1539  
NULL
;

1542  
èsk
;

1543 
	}
}

1545 
scsi_èsk
 *

1546 
	$iscsi_wrôevîify12_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

1547 *
d©a
, 
uöt32_t
 
d©Æí
, 
blocksize
,

1548 
wΩrŸe˘
, 
dpo
, 
bytchk
, 
group_numbî
,

1549 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

1551 
scsi_èsk
 *
èsk
;

1552 
iscsi_d©a
 
d
;

1554 i‡(
d©Æí
 % 
blocksize
 != 0) {

1555 
	`iscsi_£t_îr‹
(
iscsi
, "Datalen:%d isÇotá multiple ofÅhe "

1556 "blocksize:%d.", 
d©Æí
, 
blocksize
);

1557  
NULL
;

1560 
èsk
 = 
	`scsi_cdb_wrôevîify12
(
lba
, 
d©Æí
, 
blocksize
, 
wΩrŸe˘
,

1561 
dpo
, 
bytchk
, 
group_numbî
);

1562 i‡(
èsk
 =
NULL
) {

1563 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅo create "

1565  
NULL
;

1567 
d
.
d©a
 = data;

1568 
d
.
size
 = 
d©Æí
;

1570 i‡(
	`iscsi_scsi_comm™d_async
(
iscsi
, 
lun
, 
èsk
, 
cb
,

1571 &
d
, 
¥iv©e_d©a
) != 0) {

1572 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1573  
NULL
;

1576  
èsk
;

1577 
	}
}

1579 
scsi_èsk
 *

1580 
	$iscsi_wrôevîify12_iov_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

1581 *
d©a
, 
uöt32_t
 
d©Æí
, 
blocksize
,

1582 
wΩrŸe˘
, 
dpo
, 
bytchk
, 
group_numbî
,

1583 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
,

1584 
scsi_iovec
 *
iov
, 
niov
)

1586 
scsi_èsk
 *
èsk
;

1587 
iscsi_d©a
 
d
;

1589 i‡(
d©Æí
 % 
blocksize
 != 0) {

1590 
	`iscsi_£t_îr‹
(
iscsi
, "Datalen:%d isÇotá multiple ofÅhe "

1591 "blocksize:%d.", 
d©Æí
, 
blocksize
);

1592  
NULL
;

1595 
èsk
 = 
	`scsi_cdb_wrôevîify12
(
lba
, 
d©Æí
, 
blocksize
, 
wΩrŸe˘
,

1596 
dpo
, 
bytchk
, 
group_numbî
);

1597 i‡(
èsk
 =
NULL
) {

1598 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅo create "

1600  
NULL
;

1602 
d
.
d©a
 = data;

1603 
d
.
size
 = 
d©Æí
;

1605 i‡(
iov
 !
NULL
)

1606 
	`scsi_èsk_£t_iov_out
(
èsk
, 
iov
, 
niov
);

1608 i‡(
	`iscsi_scsi_comm™d_async
(
iscsi
, 
lun
, 
èsk
, 
cb
,

1609 &
d
, 
¥iv©e_d©a
) != 0) {

1610 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1611  
NULL
;

1614  
èsk
;

1615 
	}
}

1617 
scsi_èsk
 *

1618 
	$iscsi_wrôevîify16_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
,

1619 *
d©a
, 
uöt32_t
 
d©Æí
, 
blocksize
,

1620 
wΩrŸe˘
, 
dpo
, 
bytchk
, 
group_numbî
,

1621 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

1623 
scsi_èsk
 *
èsk
;

1624 
iscsi_d©a
 
d
;

1626 i‡(
d©Æí
 % 
blocksize
 != 0) {

1627 
	`iscsi_£t_îr‹
(
iscsi
, "Datalen:%d isÇotá multiple ofÅhe "

1628 "blocksize:%d.", 
d©Æí
, 
blocksize
);

1629  
NULL
;

1632 
èsk
 = 
	`scsi_cdb_wrôevîify16
(
lba
, 
d©Æí
, 
blocksize
, 
wΩrŸe˘
,

1633 
dpo
, 
bytchk
, 
group_numbî
);

1634 i‡(
èsk
 =
NULL
) {

1635 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅo create "

1637  
NULL
;

1639 
d
.
d©a
 = data;

1640 
d
.
size
 = 
d©Æí
;

1642 i‡(
	`iscsi_scsi_comm™d_async
(
iscsi
, 
lun
, 
èsk
, 
cb
,

1643 &
d
, 
¥iv©e_d©a
) != 0) {

1644 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1645  
NULL
;

1648  
èsk
;

1649 
	}
}

1651 
scsi_èsk
 *

1652 
	$iscsi_wrôevîify16_iov_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
,

1653 *
d©a
, 
uöt32_t
 
d©Æí
, 
blocksize
,

1654 
wΩrŸe˘
, 
dpo
, 
bytchk
, 
group_numbî
,

1655 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
,

1656 
scsi_iovec
 *
iov
, 
niov
)

1658 
scsi_èsk
 *
èsk
;

1659 
iscsi_d©a
 
d
;

1661 i‡(
d©Æí
 % 
blocksize
 != 0) {

1662 
	`iscsi_£t_îr‹
(
iscsi
, "Datalen:%d isÇotá multiple ofÅhe "

1663 "blocksize:%d.", 
d©Æí
, 
blocksize
);

1664  
NULL
;

1667 
èsk
 = 
	`scsi_cdb_wrôevîify16
(
lba
, 
d©Æí
, 
blocksize
, 
wΩrŸe˘
,

1668 
dpo
, 
bytchk
, 
group_numbî
);

1669 i‡(
èsk
 =
NULL
) {

1670 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅo create "

1672  
NULL
;

1674 
d
.
d©a
 = data;

1675 
d
.
size
 = 
d©Æí
;

1677 i‡(
iov
 !
NULL
)

1678 
	`scsi_èsk_£t_iov_out
(
èsk
, 
iov
, 
niov
);

1680 i‡(
	`iscsi_scsi_comm™d_async
(
iscsi
, 
lun
, 
èsk
, 
cb
,

1681 &
d
, 
¥iv©e_d©a
) != 0) {

1682 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1683  
NULL
;

1686  
èsk
;

1687 
	}
}

1689 
scsi_èsk
 *

1690 
	$iscsi_vîify10_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, *
d©a
,

1691 
uöt32_t
 
d©Æí
, uöt32_à
lba
, 
v¥Ÿe˘
, 
dpo
, 
bytchk
, 
blocksize
,

1692 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

1694 
scsi_èsk
 *
èsk
;

1695 
iscsi_d©a
 
d
;

1697 i‡(
d©Æí
 % 
blocksize
 != 0) {

1698 
	`iscsi_£t_îr‹
(
iscsi
, "Datalen:%d isÇotá multiple ofÅhe "

1699 "blocksize:%d.", 
d©Æí
, 
blocksize
);

1700  
NULL
;

1703 
èsk
 = 
	`scsi_cdb_vîify10
(
lba
, 
d©Æí
, 
v¥Ÿe˘
, 
dpo
, 
bytchk
, 
blocksize
);

1704 i‡(
èsk
 =
NULL
) {

1705 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅo create "

1707  
NULL
;

1709 
d
.
d©a
 = data;

1710 
d
.
size
 = 
d©Æí
;

1712 i‡(
	`iscsi_scsi_comm™d_async
(
iscsi
, 
lun
, 
èsk
, 
cb
,

1713 &
d
, 
¥iv©e_d©a
) != 0) {

1714 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1715  
NULL
;

1718  
èsk
;

1719 
	}
}

1721 
scsi_èsk
 *

1722 
	$iscsi_vîify10_iov_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, *
d©a
,

1723 
uöt32_t
 
d©Æí
, uöt32_à
lba
, 
v¥Ÿe˘
, 
dpo
, 
bytchk
, 
blocksize
,

1724 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
, 
scsi_iovec
 *
iov
, 
niov
)

1726 
scsi_èsk
 *
èsk
;

1727 
iscsi_d©a
 
d
;

1729 i‡(
d©Æí
 % 
blocksize
 != 0) {

1730 
	`iscsi_£t_îr‹
(
iscsi
, "Datalen:%d isÇotá multiple ofÅhe "

1731 "blocksize:%d.", 
d©Æí
, 
blocksize
);

1732  
NULL
;

1735 
èsk
 = 
	`scsi_cdb_vîify10
(
lba
, 
d©Æí
, 
v¥Ÿe˘
, 
dpo
, 
bytchk
, 
blocksize
);

1736 i‡(
èsk
 =
NULL
) {

1737 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅo create "

1739  
NULL
;

1741 
d
.
d©a
 = data;

1742 
d
.
size
 = 
d©Æí
;

1744 i‡(
iov
 !
NULL
)

1745 
	`scsi_èsk_£t_iov_out
(
èsk
, 
iov
, 
niov
);

1747 i‡(
	`iscsi_scsi_comm™d_async
(
iscsi
, 
lun
, 
èsk
, 
cb
,

1748 &
d
, 
¥iv©e_d©a
) != 0) {

1749 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1750  
NULL
;

1753  
èsk
;

1754 
	}
}

1756 
scsi_èsk
 *

1757 
	$iscsi_vîify12_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, *
d©a
,

1758 
uöt32_t
 
d©Æí
, uöt32_à
lba
, 
v¥Ÿe˘
, 
dpo
, 
bytchk
, 
blocksize
,

1759 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

1761 
scsi_èsk
 *
èsk
;

1762 
iscsi_d©a
 
d
;

1764 i‡(
d©Æí
 % 
blocksize
 != 0) {

1765 
	`iscsi_£t_îr‹
(
iscsi
, "Datalen:%d isÇotá multiple ofÅhe "

1766 "blocksize:%d.", 
d©Æí
, 
blocksize
);

1767  
NULL
;

1770 
èsk
 = 
	`scsi_cdb_vîify12
(
lba
, 
d©Æí
, 
v¥Ÿe˘
, 
dpo
, 
bytchk
, 
blocksize
);

1771 i‡(
èsk
 =
NULL
) {

1772 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅo create "

1774  
NULL
;

1776 
d
.
d©a
 = data;

1777 
d
.
size
 = 
d©Æí
;

1779 i‡(
	`iscsi_scsi_comm™d_async
(
iscsi
, 
lun
, 
èsk
, 
cb
,

1780 &
d
, 
¥iv©e_d©a
) != 0) {

1781 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1782  
NULL
;

1785  
èsk
;

1786 
	}
}

1788 
scsi_èsk
 *

1789 
	$iscsi_vîify12_iov_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, *
d©a
,

1790 
uöt32_t
 
d©Æí
, uöt32_à
lba
, 
v¥Ÿe˘
, 
dpo
, 
bytchk
, 
blocksize
,

1791 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
, 
scsi_iovec
 *
iov
, 
niov
)

1793 
scsi_èsk
 *
èsk
;

1794 
iscsi_d©a
 
d
;

1796 i‡(
d©Æí
 % 
blocksize
 != 0) {

1797 
	`iscsi_£t_îr‹
(
iscsi
, "Datalen:%d isÇotá multiple ofÅhe "

1798 "blocksize:%d.", 
d©Æí
, 
blocksize
);

1799  
NULL
;

1802 
èsk
 = 
	`scsi_cdb_vîify12
(
lba
, 
d©Æí
, 
v¥Ÿe˘
, 
dpo
, 
bytchk
, 
blocksize
);

1803 i‡(
èsk
 =
NULL
) {

1804 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅo create "

1806  
NULL
;

1808 
d
.
d©a
 = data;

1809 
d
.
size
 = 
d©Æí
;

1811 i‡(
iov
 !
NULL
)

1812 
	`scsi_èsk_£t_iov_out
(
èsk
, 
iov
, 
niov
);

1814 i‡(
	`iscsi_scsi_comm™d_async
(
iscsi
, 
lun
, 
èsk
, 
cb
,

1815 &
d
, 
¥iv©e_d©a
) != 0) {

1816 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1817  
NULL
;

1820  
èsk
;

1821 
	}
}

1823 
scsi_èsk
 *

1824 
	$iscsi_vîify16_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, *
d©a
,

1825 
uöt32_t
 
d©Æí
, 
uöt64_t
 
lba
, 
v¥Ÿe˘
, 
dpo
, 
bytchk
, 
blocksize
,

1826 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

1828 
scsi_èsk
 *
èsk
;

1829 
iscsi_d©a
 
d
;

1831 i‡(
d©Æí
 % 
blocksize
 != 0) {

1832 
	`iscsi_£t_îr‹
(
iscsi
, "Datalen:%d isÇotá multiple ofÅhe "

1833 "blocksize:%d.", 
d©Æí
, 
blocksize
);

1834  
NULL
;

1837 
èsk
 = 
	`scsi_cdb_vîify16
(
lba
, 
d©Æí
, 
v¥Ÿe˘
, 
dpo
, 
bytchk
, 
blocksize
);

1838 i‡(
èsk
 =
NULL
) {

1839 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅo create "

1841  
NULL
;

1843 
d
.
d©a
 = data;

1844 
d
.
size
 = 
d©Æí
;

1846 i‡(
	`iscsi_scsi_comm™d_async
(
iscsi
, 
lun
, 
èsk
, 
cb
,

1847 &
d
, 
¥iv©e_d©a
) != 0) {

1848 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1849  
NULL
;

1852  
èsk
;

1853 
	}
}

1855 
scsi_èsk
 *

1856 
	$iscsi_vîify16_iov_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, *
d©a
,

1857 
uöt32_t
 
d©Æí
, 
uöt64_t
 
lba
, 
v¥Ÿe˘
, 
dpo
, 
bytchk
, 
blocksize
,

1858 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
, 
scsi_iovec
 *
iov
, 
niov
)

1860 
scsi_èsk
 *
èsk
;

1861 
iscsi_d©a
 
d
;

1863 i‡(
d©Æí
 % 
blocksize
 != 0) {

1864 
	`iscsi_£t_îr‹
(
iscsi
, "Datalen:%d isÇotá multiple ofÅhe "

1865 "blocksize:%d.", 
d©Æí
, 
blocksize
);

1866  
NULL
;

1869 
èsk
 = 
	`scsi_cdb_vîify16
(
lba
, 
d©Æí
, 
v¥Ÿe˘
, 
dpo
, 
bytchk
, 
blocksize
);

1870 i‡(
èsk
 =
NULL
) {

1871 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅo create "

1873  
NULL
;

1875 
d
.
d©a
 = data;

1876 
d
.
size
 = 
d©Æí
;

1878 i‡(
iov
 !
NULL
)

1879 
	`scsi_èsk_£t_iov_out
(
èsk
, 
iov
, 
niov
);

1881 i‡(
	`iscsi_scsi_comm™d_async
(
iscsi
, 
lun
, 
èsk
, 
cb
,

1882 &
d
, 
¥iv©e_d©a
) != 0) {

1883 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1884  
NULL
;

1887  
èsk
;

1888 
	}
}

1890 
scsi_èsk
 *

1891 
	$iscsi_mode£À˘6_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

1892 
pf
, 
•
, 
scsi_mode_∑ge
 *
mp
,

1893 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

1895 
scsi_èsk
 *
èsk
;

1896 
scsi_d©a
 *
d©a
;

1897 
iscsi_d©a
 
d
;

1899 
èsk
 = 
	`scsi_cdb_mode£À˘6
(
pf
, 
•
, 255);

1900 i‡(
èsk
 =
NULL
) {

1901 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅo create "

1903  
NULL
;

1905 
d©a
 = 
	`scsi_mode£n£_d©aout_m¨shÆl
(
èsk
, 
mp
, 1);

1906 i‡(
d©a
 =
NULL
) {

1907 
	`iscsi_£t_îr‹
(
iscsi
, "Error: FailedÅo marshall "

1909 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1910  
NULL
;

1913 
d
.
d©a
 = data->data;

1914 
d
.
size
 = 
d©a
->size;

1915 
èsk
->
cdb
[4] = 
d©a
->
size
;

1916 
èsk
->
expx„æí
 = 
d©a
->
size
;

1918 i‡(
	`iscsi_scsi_comm™d_async
(
iscsi
, 
lun
, 
èsk
, 
cb
,

1919 &
d
, 
¥iv©e_d©a
) != 0) {

1920 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1921  
NULL
;

1924  
èsk
;

1925 
	}
}

1927 
scsi_èsk
 *

1928 
	$iscsi_mode£À˘10_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

1929 
pf
, 
•
, 
scsi_mode_∑ge
 *
mp
,

1930 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

1932 
scsi_èsk
 *
èsk
;

1933 
scsi_d©a
 *
d©a
;

1934 
iscsi_d©a
 
d
;

1936 
èsk
 = 
	`scsi_cdb_mode£À˘10
(
pf
, 
•
, 255);

1937 i‡(
èsk
 =
NULL
) {

1938 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅo create "

1940  
NULL
;

1942 
d©a
 = 
	`scsi_mode£n£_d©aout_m¨shÆl
(
èsk
, 
mp
, 0);

1943 i‡(
d©a
 =
NULL
) {

1944 
	`iscsi_£t_îr‹
(
iscsi
, "Error: FailedÅo marshall "

1946 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1947  
NULL
;

1950 
d
.
d©a
 = data->data;

1951 
d
.
size
 = 
d©a
->size;

1952 
èsk
->
cdb
[7] = 
d©a
->
size
 >> 8;

1953 
èsk
->
cdb
[8] = 
d©a
->
size
 & 0xff;

1955 
èsk
->
expx„æí
 = 
d©a
->
size
;

1957 i‡(
	`iscsi_scsi_comm™d_async
(
iscsi
, 
lun
, 
èsk
, 
cb
,

1958 &
d
, 
¥iv©e_d©a
) != 0) {

1959 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1960  
NULL
;

1963  
èsk
;

1964 
	}
}

1966 
scsi_èsk
 *

1967 
	$iscsi_mode£n£6_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
dbd
, 
pc
,

1968 
∑ge_code
, 
sub_∑ge_code
,

1969 
Æloc_Àn
,

1970 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

1972 
scsi_èsk
 *
èsk
;

1974 
èsk
 = 
	`scsi_cdb_mode£n£6
(
dbd
, 
pc
, 
∑ge_code
, 
sub_∑ge_code
,

1975 
Æloc_Àn
);

1976 i‡(
èsk
 =
NULL
) {

1977 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅo create "

1979  
NULL
;

1981 i‡(
	`iscsi_scsi_comm™d_async
(
iscsi
, 
lun
, 
èsk
, 
cb
,

1982 
NULL
, 
¥iv©e_d©a
) != 0) {

1983 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1984  
NULL
;

1987  
èsk
;

1988 
	}
}

1990 
scsi_èsk
 *

1991 
	$iscsi_mode£n£10_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

1992 
ŒbØ
, 
dbd
, 
pc
,

1993 
∑ge_code
, 
sub_∑ge_code
,

1994 
Æloc_Àn
,

1995 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

1997 
scsi_èsk
 *
èsk
;

1999 
èsk
 = 
	`scsi_cdb_mode£n£10
(
ŒbØ
, 
dbd
, 
pc
, 
∑ge_code
, 
sub_∑ge_code
,

2000 
Æloc_Àn
);

2001 i‡(
èsk
 =
NULL
) {

2002 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅo create "

2004  
NULL
;

2006 i‡(
	`iscsi_scsi_comm™d_async
(
iscsi
, 
lun
, 
èsk
, 
cb
,

2007 
NULL
, 
¥iv©e_d©a
) != 0) {

2008 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2009  
NULL
;

2012  
èsk
;

2013 
	}
}

2015 
scsi_èsk
 *

2016 
	$iscsi_°¨t°›unô_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

2017 
immed
, 
pcm
, 
pc
,

2018 
no_Êush
, 
l€j
, 
°¨t
,

2019 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

2021 
scsi_èsk
 *
èsk
;

2023 
èsk
 = 
	`scsi_cdb_°¨t°›unô
(
immed
, 
pcm
, 
pc
, 
no_Êush
,

2024 
l€j
, 
°¨t
);

2025 i‡(
èsk
 =
NULL
) {

2026 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅo create "

2028  
NULL
;

2030 i‡(
	`iscsi_scsi_comm™d_async
(
iscsi
, 
lun
, 
èsk
, 
cb
,

2031 
NULL
, 
¥iv©e_d©a
) != 0) {

2032 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2033  
NULL
;

2036  
èsk
;

2037 
	}
}

2039 
scsi_èsk
 *

2040 
	$iscsi_¥evíèŒow_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

2041 
¥evít
,

2042 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

2044 
scsi_èsk
 *
èsk
;

2046 
èsk
 = 
	`scsi_cdb_¥evíèŒow
(
¥evít
);

2047 i‡(
èsk
 =
NULL
) {

2048 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅo create "

2050  
NULL
;

2052 i‡(
	`iscsi_scsi_comm™d_async
(
iscsi
, 
lun
, 
èsk
, 
cb
,

2053 
NULL
, 
¥iv©e_d©a
) != 0) {

2054 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2055  
NULL
;

2058  
èsk
;

2059 
	}
}

2061 
scsi_èsk
 *

2062 
	$iscsi_synchr⁄izeˇche10_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
lba
,

2063 
num_blocks
, 
syn˙v
, 
immed
,

2064 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

2066 
scsi_èsk
 *
èsk
;

2068 
èsk
 = 
	`scsi_cdb_synchr⁄izeˇche10
(
lba
, 
num_blocks
, 
syn˙v
,

2069 
immed
);

2070 i‡(
èsk
 =
NULL
) {

2071 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅo create "

2073  
NULL
;

2075 i‡(
	`iscsi_scsi_comm™d_async
(
iscsi
, 
lun
, 
èsk
, 
cb
,

2076 
NULL
, 
¥iv©e_d©a
) != 0) {

2077 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2078  
NULL
;

2081  
èsk
;

2082 
	}
}

2084 
scsi_èsk
 *

2085 
	$iscsi_synchr⁄izeˇche16_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
,

2086 
uöt32_t
 
num_blocks
, 
syn˙v
, 
immed
,

2087 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

2089 
scsi_èsk
 *
èsk
;

2091 
èsk
 = 
	`scsi_cdb_synchr⁄izeˇche16
(
lba
, 
num_blocks
, 
syn˙v
,

2092 
immed
);

2093 i‡(
èsk
 =
NULL
) {

2094 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅo create "

2096  
NULL
;

2098 i‡(
	`iscsi_scsi_comm™d_async
(
iscsi
, 
lun
, 
èsk
, 
cb
,

2099 
NULL
, 
¥iv©e_d©a
) != 0) {

2100 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2101  
NULL
;

2104  
èsk
;

2105 
	}
}

2107 
scsi_èsk
 *

2108 
	$iscsi_≥rsi°ít_ª£rve_ö_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

2109 
ß
, 
uöt16_t
 
x„æí
,

2110 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

2112 
scsi_èsk
 *
èsk
;

2114 
èsk
 = 
	`scsi_cdb_≥rsi°ít_ª£rve_ö
(
ß
, 
x„æí
);

2115 i‡(
èsk
 =
NULL
) {

2116 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅo create "

2118  
NULL
;

2120 i‡(
	`iscsi_scsi_comm™d_async
(
iscsi
, 
lun
, 
èsk
, 
cb
,

2121 
NULL
, 
¥iv©e_d©a
) != 0) {

2122 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2123  
NULL
;

2126  
èsk
;

2127 
	}
}

2129 
scsi_èsk
 *

2130 
	$iscsi_≥rsi°ít_ª£rve_out_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

2131 
ß
, 
sc›e
, 
ty≥
, *
∑øm
,

2132 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

2134 
scsi_èsk
 *
èsk
;

2136 
èsk
 = 
	`scsi_cdb_≥rsi°ít_ª£rve_out
(
ß
, 
sc›e
, 
ty≥
, 
∑øm
);

2137 i‡(
èsk
 =
NULL
) {

2138 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅo create "

2140  
NULL
;

2142 i‡(
	`iscsi_scsi_comm™d_async
(
iscsi
, 
lun
, 
èsk
, 
cb
,

2143 
NULL
, 
¥iv©e_d©a
) != 0) {

2144 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2145  
NULL
;

2148  
èsk
;

2149 
	}
}

2151 
scsi_èsk
 *

2152 
	$iscsi_¥e„tch10_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

2153 
num_blocks
, 
immed
, 
group
,

2154 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

2156 
scsi_èsk
 *
èsk
;

2158 
èsk
 = 
	`scsi_cdb_¥e„tch10
(
lba
, 
num_blocks
, 
immed
, 
group
);

2159 i‡(
èsk
 =
NULL
) {

2160 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅo create "

2162  
NULL
;

2164 i‡(
	`iscsi_scsi_comm™d_async
(
iscsi
, 
lun
, 
èsk
, 
cb
,

2165 
NULL
, 
¥iv©e_d©a
) != 0) {

2166 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2167  
NULL
;

2170  
èsk
;

2171 
	}
}

2173 
scsi_èsk
 *

2174 
	$iscsi_¥e„tch16_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
,

2175 
num_blocks
, 
immed
, 
group
,

2176 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

2178 
scsi_èsk
 *
èsk
;

2180 
èsk
 = 
	`scsi_cdb_¥e„tch16
(
lba
, 
num_blocks
, 
immed
, 
group
);

2181 i‡(
èsk
 =
NULL
) {

2182 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅo create "

2184  
NULL
;

2186 i‡(
	`iscsi_scsi_comm™d_async
(
iscsi
, 
lun
, 
èsk
, 
cb
,

2187 
NULL
, 
¥iv©e_d©a
) != 0) {

2188 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2189  
NULL
;

2192  
èsk
;

2193 
	}
}

2195 
scsi_èsk
 *

2196 
	$iscsi_wrôeßme10_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

2197 *
d©a
, 
uöt32_t
 
d©Æí
,

2198 
uöt16_t
 
num_blocks
,

2199 
™ch‹
, 
unm≠
, 
wΩrŸe˘
, 
group
,

2200 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

2202 
scsi_èsk
 *
èsk
;

2203 
iscsi_d©a
 
d
;

2205 
èsk
 = 
	`scsi_cdb_wrôeßme10
(
wΩrŸe˘
, 
™ch‹
, 
unm≠
, 
lba
, 
group
,

2206 
num_blocks
, 
d©Æí
);

2207 i‡(
èsk
 =
NULL
) {

2208 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅo create "

2210  
NULL
;

2212 
d
.
d©a
 = data;

2213 
d
.
size
 = 
d©Æí
;

2215 i‡(
d©a
 !
NULL
) {

2216 
èsk
->
expx„æí
 = 
d©Æí
;

2218 
èsk
->
expx„æí
 = 0;

2219 
èsk
->
x„r_dú
 = 
SCSI_XFER_NONE
;

2221 i‡(
	`iscsi_scsi_comm™d_async
(
iscsi
, 
lun
, 
èsk
, 
cb
,

2222 &
d
, 
¥iv©e_d©a
) != 0) {

2223 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2224  
NULL
;

2226  
èsk
;

2227 
	}
}

2229 
scsi_èsk
 *

2230 
	$iscsi_wrôeßme10_iov_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

2231 *
d©a
, 
uöt32_t
 
d©Æí
,

2232 
uöt16_t
 
num_blocks
,

2233 
™ch‹
, 
unm≠
, 
wΩrŸe˘
, 
group
,

2234 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
,

2235 
scsi_iovec
 *
iov
, 
niov
)

2237 
scsi_èsk
 *
èsk
;

2238 
iscsi_d©a
 
d
;

2240 
èsk
 = 
	`scsi_cdb_wrôeßme10
(
wΩrŸe˘
, 
™ch‹
, 
unm≠
, 
lba
, 
group
,

2241 
num_blocks
, 
d©Æí
);

2242 i‡(
èsk
 =
NULL
) {

2243 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅo create "

2245  
NULL
;

2247 
d
.
d©a
 = data;

2248 
d
.
size
 = 
d©Æí
;

2250 i‡(
iov
 !
NULL
)

2251 
	`scsi_èsk_£t_iov_out
(
èsk
, 
iov
, 
niov
);

2253 i‡(
d©a
 !
NULL
) {

2254 
èsk
->
expx„æí
 = 
d©Æí
;

2256 
èsk
->
expx„æí
 = 0;

2257 
èsk
->
x„r_dú
 = 
SCSI_XFER_NONE
;

2259 i‡(
	`iscsi_scsi_comm™d_async
(
iscsi
, 
lun
, 
èsk
, 
cb
,

2260 &
d
, 
¥iv©e_d©a
) != 0) {

2261 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2262  
NULL
;

2264  
èsk
;

2265 
	}
}

2267 
scsi_èsk
 *

2268 
	$iscsi_wrôeßme16_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
,

2269 *
d©a
, 
uöt32_t
 
d©Æí
,

2270 
uöt32_t
 
num_blocks
,

2271 
™ch‹
, 
unm≠
, 
wΩrŸe˘
, 
group
,

2272 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

2274 
scsi_èsk
 *
èsk
;

2275 
iscsi_d©a
 
d
;

2277 
èsk
 = 
	`scsi_cdb_wrôeßme16
(
wΩrŸe˘
, 
™ch‹
, 
unm≠
, 
lba
, 
group
,

2278 
num_blocks
, 
d©Æí
);

2279 i‡(
èsk
 =
NULL
) {

2280 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅo create "

2282  
NULL
;

2284 
d
.
d©a
 = data;

2285 
d
.
size
 = 
d©Æí
;

2287 i‡(
d©a
 !
NULL
) {

2288 
èsk
->
expx„æí
 = 
d©Æí
;

2290 
èsk
->
expx„æí
 = 0;

2291 
èsk
->
x„r_dú
 = 
SCSI_XFER_NONE
;

2294 i‡(
	`iscsi_scsi_comm™d_async
(
iscsi
, 
lun
, 
èsk
, 
cb
,

2295 &
d
, 
¥iv©e_d©a
) != 0) {

2296 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2297  
NULL
;

2300  
èsk
;

2301 
	}
}

2303 
scsi_èsk
 *

2304 
	$iscsi_wrôeßme16_iov_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
,

2305 *
d©a
, 
uöt32_t
 
d©Æí
,

2306 
uöt32_t
 
num_blocks
,

2307 
™ch‹
, 
unm≠
, 
wΩrŸe˘
, 
group
,

2308 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
,

2309 
scsi_iovec
 *
iov
, 
niov
)

2311 
scsi_èsk
 *
èsk
;

2312 
iscsi_d©a
 
d
;

2314 
èsk
 = 
	`scsi_cdb_wrôeßme16
(
wΩrŸe˘
, 
™ch‹
, 
unm≠
, 
lba
, 
group
,

2315 
num_blocks
, 
d©Æí
);

2316 i‡(
èsk
 =
NULL
) {

2317 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅo create "

2319  
NULL
;

2321 
d
.
d©a
 = data;

2322 
d
.
size
 = 
d©Æí
;

2324 i‡(
iov
 !
NULL
)

2325 
	`scsi_èsk_£t_iov_out
(
èsk
, 
iov
, 
niov
);

2327 i‡(
d©a
 !
NULL
) {

2328 
èsk
->
expx„æí
 = 
d©Æí
;

2330 
èsk
->
expx„æí
 = 0;

2331 
èsk
->
x„r_dú
 = 
SCSI_XFER_NONE
;

2334 i‡(
	`iscsi_scsi_comm™d_async
(
iscsi
, 
lun
, 
èsk
, 
cb
,

2335 &
d
, 
¥iv©e_d©a
) != 0) {

2336 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2337  
NULL
;

2340  
èsk
;

2341 
	}
}

2343 
scsi_èsk
 *

2344 
	$iscsi_unm≠_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
™ch‹
, 
group
,

2345 
unm≠_li°
 *
li°
, 
li°_Àn
,

2346 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

2348 
scsi_èsk
 *
èsk
;

2349 
scsi_iovec
 *
iov
;

2350 *
d©a
;

2351 
x„æí
;

2352 
i
;

2354 
x„æí
 = 8 + 
li°_Àn
 * 16;

2356 
èsk
 = 
	`scsi_cdb_unm≠
(
™ch‹
, 
group
, 
x„æí
);

2357 i‡(
èsk
 =
NULL
) {

2358 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅo create "

2360  
NULL
;

2363 
d©a
 = 
	`scsi_mÆloc
(
èsk
, 
x„æí
);

2364 i‡(
d©a
 =
NULL
) {

2365 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅo create "

2367 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2368  
NULL
;

2370 
	`scsi_£t_uöt16
(&
d©a
[0], 
x„æí
 - 2);

2371 
	`scsi_£t_uöt16
(&
d©a
[2], 
x„æí
 - 8);

2372 
i
 = 0; i < 
li°_Àn
; i++) {

2373 
	`scsi_£t_uöt32
(&
d©a
[8 + 16 * 
i
], 
li°
[i].
lba
 >> 32);

2374 
	`scsi_£t_uöt32
(&
d©a
[8 + 16 * 
i
 + 4], 
li°
[i].
lba
 & 0xffffffff);

2375 
	`scsi_£t_uöt32
(&
d©a
[8 + 16 * 
i
 + 8], 
li°
[i].
num
);

2378 
iov
 = 
	`scsi_mÆloc
(
èsk
, (
scsi_iovec
));

2379 i‡(
iov
 =
NULL
) {

2380 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2381  
NULL
;

2383 
iov
->
iov_ba£
 = 
d©a
;

2384 
iov
->
iov_Àn
 = 
x„æí
;

2385 
	`scsi_èsk_£t_iov_out
(
èsk
, 
iov
, 1);

2387 i‡(
	`iscsi_scsi_comm™d_async
(
iscsi
, 
lun
, 
èsk
, 
cb
,

2388 
NULL
, 
¥iv©e_d©a
) != 0) {

2389 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2390  
NULL
;

2393  
èsk
;

2394 
	}
}

2396 
scsi_iove˘‹
 *

2397 
	$iscsi_gë_scsi_èsk_iove˘‹_ö
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_ö_pdu
 *
ö
)

2399 
iscsi_pdu
 *
pdu
;

2400 
uöt32_t
 
ôt
;

2402 i‡((
ö
->
hdr
[0] & 0x3fË!
ISCSI_PDU_DATA_IN
) {

2403  
NULL
;

2406 
ôt
 = 
	`scsi_gë_uöt32
(&
ö
->
hdr
[16]);

2407 
pdu
 = 
iscsi
->
waôpdu
;Ödu;Ödu =Ödu->
√xt
) {

2408 i‡(
pdu
->
ôt
 == itt) {

2413 i‡(
pdu
 =
NULL
) {

2414  
NULL
;

2417 i‡(
pdu
->
scsi_cbd©a
.
èsk
->
iove˘‹_ö
.
iov
 =
NULL
) {

2418  
NULL
;

2421  &
pdu
->
scsi_cbd©a
.
èsk
->
iove˘‹_ö
;

2422 
	}
}

2424 
scsi_iove˘‹
 *

2425 
	$iscsi_gë_scsi_èsk_iove˘‹_out
(
iscsi_c⁄ãxt
 *
iscsi
 
_U_
, 
iscsi_pdu
 *
pdu
)

2427 i‡(
pdu
->
scsi_cbd©a
.
èsk
->
iove˘‹_out
.
iov
 =
NULL
) {

2428  
NULL
;

2431  &
pdu
->
scsi_cbd©a
.
èsk
->
iove˘‹_out
;

2432 
	}
}

2434 
scsi_èsk
 *

2435 
	$iscsi_ªadtoc_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
msf
,

2436 
f‹m©
, 
åack_£ssi⁄
, 
maxsize
,

2437 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

2439 
scsi_èsk
 *
èsk
;

2441 
èsk
 = 
	`scsi_cdb_ªadtoc
(
msf
, 
f‹m©
, 
åack_£ssi⁄
, 
maxsize
);

2442 i‡(
èsk
 =
NULL
) {

2443 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅo create "

2445  
NULL
;

2447 i‡(
	`iscsi_scsi_comm™d_async
(
iscsi
, 
lun
, 
èsk
, 
cb
,

2448 
NULL
, 
¥iv©e_d©a
) != 0) {

2449 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2450  
NULL
;

2453  
èsk
;

2454 
	}
}

2456 
scsi_èsk
 *

2457 
	$iscsi_ª£rve6_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

2458 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

2460 
scsi_èsk
 *
èsk
;

2462 
èsk
 = 
	`scsi_cdb_ª£rve6
();

2463 i‡(
èsk
 =
NULL
) {

2464 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅo create "

2466  
NULL
;

2468 i‡(
	`iscsi_scsi_comm™d_async
(
iscsi
, 
lun
, 
èsk
, 
cb
,

2469 
NULL
, 
¥iv©e_d©a
) != 0) {

2470 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2471  
NULL
;

2474  
èsk
;

2475 
	}
}

2477 
scsi_èsk
 *

2478 
	$iscsi_ªÀa£6_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

2479 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

2481 
scsi_èsk
 *
èsk
;

2483 
èsk
 = 
	`scsi_cdb_ªÀa£6
();

2484 i‡(
èsk
 =
NULL
) {

2485 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅo create "

2487  
NULL
;

2489 i‡(
	`iscsi_scsi_comm™d_async
(
iscsi
, 
lun
, 
èsk
, 
cb
,

2490 
NULL
, 
¥iv©e_d©a
) != 0) {

2491 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2492  
NULL
;

2495  
èsk
;

2496 
	}
}

2499 
scsi_èsk
 *

2500 
	$iscsi_ßnôize_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

2501 
immed
, 
au£
, 
ß
, 
∑øm_Àn
,

2502 
iscsi_d©a
 *
d©a
,

2503 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

2505 
scsi_èsk
 *
èsk
;

2507 
èsk
 = 
	`scsi_cdb_ßnôize
(
immed
, 
au£
, 
ß
, 
∑øm_Àn
);

2508 i‡(
èsk
 =
NULL
) {

2509 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅo create "

2511  
NULL
;

2513 i‡(
	`iscsi_scsi_comm™d_async
(
iscsi
, 
lun
, 
èsk
, 
cb
,

2514 
d©a
, 
¥iv©e_d©a
) != 0) {

2515 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2516  
NULL
;

2519  
èsk
;

2520 
	}
}

2522 
scsi_èsk
 *

2523 
	$iscsi_ßnôize_block_îa£_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

2524 
immed
, 
au£
,

2525 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

2527 
scsi_èsk
 *
èsk
;

2529 
èsk
 = 
	`scsi_cdb_ßnôize
(
immed
, 
au£
, 
SCSI_SANITIZE_BLOCK_ERASE
, 0);

2530 i‡(
èsk
 =
NULL
) {

2531 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅo create "

2533  
NULL
;

2535 i‡(
	`iscsi_scsi_comm™d_async
(
iscsi
, 
lun
, 
èsk
, 
cb
,

2536 
NULL
, 
¥iv©e_d©a
) != 0) {

2537 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2538  
NULL
;

2541  
èsk
;

2542 
	}
}

2544 
scsi_èsk
 *

2545 
	$iscsi_ßnôize_¸y±o_îa£_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

2546 
immed
, 
au£
,

2547 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

2549 
scsi_èsk
 *
èsk
;

2551 
èsk
 = 
	`scsi_cdb_ßnôize
(
immed
, 
au£
, 
SCSI_SANITIZE_CRYPTO_ERASE
, 0);

2552 i‡(
èsk
 =
NULL
) {

2553 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅo create "

2555  
NULL
;

2557 i‡(
	`iscsi_scsi_comm™d_async
(
iscsi
, 
lun
, 
èsk
, 
cb
,

2558 
NULL
, 
¥iv©e_d©a
) != 0) {

2559 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2560  
NULL
;

2563  
èsk
;

2564 
	}
}

2566 
scsi_èsk
 *

2567 
	$iscsi_ßnôize_exô_Áûuª_mode_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

2568 
immed
, 
au£
,

2569 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

2571 
scsi_èsk
 *
èsk
;

2573 
èsk
 = 
	`scsi_cdb_ßnôize
(
immed
, 
au£
,

2574 
SCSI_SANITIZE_EXIT_FAILURE_MODE
, 0);

2575 i‡(
èsk
 =
NULL
) {

2576 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅo create "

2578  
NULL
;

2580 i‡(
	`iscsi_scsi_comm™d_async
(
iscsi
, 
lun
, 
èsk
, 
cb
,

2581 
NULL
, 
¥iv©e_d©a
) != 0) {

2582 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2583  
NULL
;

2586  
èsk
;

2587 
	}
}

2589 
scsi_èsk
 *

2590 
	$iscsi_ªp‹t_suµ‹ãd_›codes_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

2591 
r˘d
, 
›ti⁄s
,

2592 
›code
, 
ß
,

2593 
uöt32_t
 
Æloc_Àn
,

2594 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

2596 
scsi_èsk
 *
èsk
;

2598 
èsk
 = 
	`scsi_cdb_ªp‹t_suµ‹ãd_›codes
(
r˘d
, 
›ti⁄s
, 
›code
, 
ß
,

2599 
Æloc_Àn
);

2600 i‡(
èsk
 =
NULL
) {

2601 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅo create "

2603  
NULL
;

2605 i‡(
	`iscsi_scsi_comm™d_async
(
iscsi
, 
lun
, 
èsk
, 
cb
,

2606 
NULL
, 
¥iv©e_d©a
) != 0) {

2607 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2608  
NULL
;

2611  
èsk
;

2612 
	}
}

2614 
scsi_èsk
 *

2615 
	$iscsi_ª˚ive_c›y_ªsu…s_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

2616 
ß
, 
li°_id
, 
Æloc_Àn
,

2617 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

2619 
scsi_èsk
 *
èsk
;

2621 
èsk
 = 
	`scsi_cdb_ª˚ive_c›y_ªsu…s
(
ß
, 
li°_id
, 
Æloc_Àn
);

2622 i‡(
èsk
 =
NULL
) {

2623 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅo create "

2625  
NULL
;

2628 i‡(
	`iscsi_scsi_comm™d_async
(
iscsi
, 
lun
, 
èsk
, 
cb
,

2629 
NULL
, 
¥iv©e_d©a
) != 0) {

2630 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2631  
NULL
;

2634  
èsk
;

2635 
	}
}

2637 
scsi_èsk
 *

2638 
	$iscsi_exãnded_c›y_èsk
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

2639 
iscsi_d©a
 *
∑øm_d©a
,

2640 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

2642 
scsi_èsk
 *
èsk
;

2644 
èsk
 = 
	`scsi_cdb_exãnded_c›y
(
∑øm_d©a
->
size
);

2645 i‡(
èsk
 =
NULL
) {

2646 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅo create "

2648  
NULL
;

2651 i‡(
	`iscsi_scsi_comm™d_async
(
iscsi
, 
lun
, 
èsk
, 
cb
,

2652 
∑øm_d©a
, 
¥iv©e_d©a
) != 0) {

2653 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2654  
NULL
;

2657  
èsk
;

2658 
	}
}

2660 
scsi_èsk
 *

2661 
	$iscsi_scsi_gë_èsk_‰om_pdu
(
iscsi_pdu
 *
pdu
)

2663  
pdu
->
scsi_cbd©a
.
èsk
;

2664 
	}
}

2667 
	$iscsi_scsi_ˇn˚l_èsk
(
iscsi_c⁄ãxt
 *
iscsi
,

2668 
scsi_èsk
 *
èsk
)

2670 
iscsi_pdu
 *
pdu
;

2672 
pdu
 = 
iscsi
->
waôpdu
;Ödu;Ödu =Ödu->
√xt
) {

2673 i‡(
pdu
->
ôt
 =
èsk
->itt) {

2674 
	`ISCSI_LIST_REMOVE
(&
iscsi
->
waôpdu
, 
pdu
);

2675 i‡(
pdu
->
ˇŒback
) {

2676 
pdu
->
	`ˇŒback
(
iscsi
, 
SCSI_STATUS_CANCELLED
, 
NULL
,

2677 
pdu
->
¥iv©e_d©a
);

2679 
iscsi
->
drv
->
	`‰ì_pdu
(iscsi, 
pdu
);

2683 
pdu
 = 
iscsi
->
outqueue
;Ödu;Ödu =Ödu->
√xt
) {

2684 i‡(
pdu
->
ôt
 =
èsk
->itt) {

2685 
	`ISCSI_LIST_REMOVE
(&
iscsi
->
outqueue
, 
pdu
);

2686 i‡(
pdu
->
ˇŒback
) {

2687 
pdu
->
	`ˇŒback
(
iscsi
, 
SCSI_STATUS_CANCELLED
, 
NULL
,

2688 
pdu
->
¥iv©e_d©a
);

2690 
iscsi
->
drv
->
	`‰ì_pdu
(iscsi, 
pdu
);

2695 
	}
}

2698 
	$iscsi_scsi_ˇn˚l_Æl_èsks
(
iscsi_c⁄ãxt
 *
iscsi
)

2700 
	`iscsi_ˇn˚l_pdus
(
iscsi
);

2701 
	}
}

	@lib/iser.c

18 
	~<sys/ty≥s.h
>

19 
	~<sys/°©.h
>

20 
	~<f˙é.h
>

21 
	~<°dlib.h
>

22 
	~"¶i°.h
"

23 
	~<°rög.h
>

24 
	~<°dboﬁ.h
>

25 
	~<uni°d.h
>

26 
	~<öây≥s.h
>

27 
	~"iscsi.h
"

28 
	~"i£r-¥iv©e.h
"

29 
	~"iscsi-¥iv©e.h
"

30 
	~"scsi-lowÀvñ.h
"

31 
	~<±hªad.h
>

32 
	~<£m≠h‹e.h
>

33 
	~<pﬁl.h
>

36 #i‚de‡
c⁄èöî_of


44 
	#c⁄èöî_of
(
±r
, 
ty≥
, 
membî
) \

45 ((
ty≥
 *Ë((
uöt8_t
 *)(
±r
Ë- 
	`off£tof
—y≥, 
membî
)))

	)

49 #ifde‡
__löux


52 
	usockë_addªss
 {

53 
sockaddr_ö
 
	msö
;

54 
sockaddr_ö6
 
	msö6
;

55 
sockaddr
 
	mß
;

58 
cq_h™dÀ
(
i£r_c⁄n
 *iser_conn);

65 
	$iscsi_i£r_gë_fd
(
iscsi_c⁄ãxt
 *
iscsi
)

67 
i£r_c⁄n
 *i£r_c⁄¿
iscsi
->
›aque
;

68  
i£r_c⁄n
->
comp_ch™√l
->
fd
;

69 
	}
}

81 
	$iscsi_i£r_which_evíts
(
iscsi_c⁄ãxt
 *
iscsi
 
_U_
)

85 
	}
}

97 
	$iscsi_i£r_£rvi˚
(
iscsi_c⁄ãxt
 *
iscsi
, 
ªvíts
)

99 
ªt
 = 0;

100 
i£r_c⁄n
 *i£r_c⁄¿
iscsi
->
›aque
;

102 i‡(
ªvíts
 =
POLLIN
)

103 
ªt
 = 
	`cq_h™dÀ
(
i£r_c⁄n
);

105 
	`iscsi_£t_îr‹
(
iscsi
, "revents isÇot POLLIN");

109 i‡(
ªt
) {

110 
	`iscsi_£t_îr‹
(
iscsi
, "CQ handle Failed");

115 
	}
}

122 
	$i£r_‰ì_rx_des¸ùt‹s
(
i£r_c⁄n
 *iser_conn)

124 
i£r_rx_desc
 *
rx_desc
;

125 
iscsi_c⁄ãxt
 *
iscsi
 = 
i£r_c⁄n
->
cma_id
->
c⁄ãxt
;

126 
i
;

128 
rx_desc
 = 
i£r_c⁄n
->
rx_descs
;

129 
i
 = 0; i < 
i£r_c⁄n
->
qp_max_ªcv_dtos
; i++, 
rx_desc
++)

130 i‡(
	`ibv_dîeg_mr
(
rx_desc
->
hdr_mr
))

131 
	`iscsi_£t_îr‹
(
iscsi
, "FailedÅi deregister hdr mr");

132 
	`iscsi_‰ì
(
iscsi
, 
i£r_c⁄n
->
rx_descs
);

134 
i£r_c⁄n
->
rx_descs
 = 
NULL
;

137 
	}
}

144 
	$i£r_‰ì_logö_buf
(
i£r_c⁄n
 *iser_conn)

146 
iscsi_c⁄ãxt
 *
iscsi
 = 
i£r_c⁄n
->
cma_id
->
c⁄ãxt
;

148 
	`iscsi_‰ì
(
iscsi
, 
i£r_c⁄n
->
logö_buf
);

149 
i£r_c⁄n
->
logö_buf
 = 
NULL
;

152 
	}
}

155 
	$i£r_‰ì_ªg_mr
(
i£r_c⁄n
 *iser_conn)

157 
i£r_tx_desc
 *
tx_desc
 = 
i£r_c⁄n
->tx_desc;

158 
iscsi_c⁄ãxt
 *
iscsi
 = 
i£r_c⁄n
->
cma_id
->
c⁄ãxt
;

159 
i£r_tx_desc
 *
ãmp_tx_desc
;

161 
tx_desc
) {

162 
	`ibv_dîeg_mr
(
tx_desc
->
hdr_mr
);

163 
	`ibv_dîeg_mr
(
tx_desc
->
d©a_mr
);

165 i‡(
tx_desc
->
d©a_buff
)

166 
	`iscsi_‰ì
(
iscsi
, 
tx_desc
->
d©a_buff
);

168 
ãmp_tx_desc
 = 
tx_desc
;

169 
tx_desc
 =Åx_desc->
√xt
;

170 
	`iscsi_‰ì
(
iscsi
, 
ãmp_tx_desc
);

172 
i£r_c⁄n
->
tx_desc
 = 
NULL
;

175 
	}
}

182 
	$i£r_‰ì_i£r_c⁄n_ªs
(
i£r_c⁄n
 *i£r_c⁄n, 
boﬁ
 
de°roy
)

184 
ªt
;

185 
iscsi_c⁄ãxt
 *
iscsi
 = 
i£r_c⁄n
->
cma_id
->
c⁄ãxt
;

187 i‡(
i£r_c⁄n
->
qp
) {

188 
	`rdma_de°roy_qp
(
i£r_c⁄n
->
cma_id
);

189 
i£r_c⁄n
->
qp
 = 
NULL
;

192 i‡(
de°roy
) {

194 i‡(
i£r_c⁄n
->
cmthªad
) {

195 
	`±hªad_ˇn˚l
(
i£r_c⁄n
->
cmthªad
);

196 
i£r_c⁄n
->
cmthªad
 = 0;

199 
	`i£r_‰ì_ªg_mr
(
i£r_c⁄n
);

201 i‡(
i£r_c⁄n
->
logö_buf
)

202 
	`i£r_‰ì_logö_buf
(
i£r_c⁄n
);

204 i‡(
i£r_c⁄n
->
rx_descs
) {

205 
	`i£r_‰ì_rx_des¸ùt‹s
(
i£r_c⁄n
);

206 
i£r_c⁄n
->
rx_descs
 = 
NULL
;

209 i‡(
i£r_c⁄n
->
logö_ª•_mr
) {

210 
ªt
 = 
	`ibv_dîeg_mr
(
i£r_c⁄n
->
logö_ª•_mr
);

211 i‡(
ªt
)

212 
	`iscsi_£t_îr‹
(
iscsi
, "FailedÅo deregisterÜoginÑesponse mr");

215 i‡(
i£r_c⁄n
->
cq
) {

216 
ªt
 = 
	`ibv_de°roy_cq
(
i£r_c⁄n
->
cq
);

217 i‡(
ªt
)

218 
	`iscsi_£t_îr‹
(
iscsi
, "FailedÅo destroy cq");

221 i‡(
i£r_c⁄n
->
comp_ch™√l
) {

222 
ªt
 = 
	`ibv_de°roy_comp_ch™√l
(
i£r_c⁄n
->
comp_ch™√l
);

223 i‡(
ªt
)

224 
	`iscsi_£t_îr‹
(
iscsi
, "FailedÅo destroy completion channel");

227 i‡(
i£r_c⁄n
->
pd
) {

228 
ªt
 = 
	`ibv_dóŒoc_pd
(
i£r_c⁄n
->
pd
);

229 i‡(
ªt
)

230 
	`iscsi_£t_îr‹
(
iscsi
, "FailedÅo deallocateÖd");

235 
	}
}

243 
	$i£r_c⁄n_ªÀa£
(
i£r_c⁄n
 *iser_conn)

245 
ªt
;

246 
iscsi_c⁄ãxt
 *
iscsi
 = 
i£r_c⁄n
->
cma_id
->
c⁄ãxt
;

248 
	`i£r_‰ì_i£r_c⁄n_ªs
(
i£r_c⁄n
,
åue
);

250 i‡(
i£r_c⁄n
->
cma_id
) {

251 
ªt
 = 
	`rdma_de°roy_id
(
i£r_c⁄n
->
cma_id
);

252 i‡(
ªt
)

253 
	`iscsi_£t_îr‹
(
iscsi
, "Failed destroying cm id");

255 
i£r_c⁄n
->
cma_id
 = 
NULL
;

259 
	}
}

266 
	$i£r_c⁄n_ãrmö©e
(
i£r_c⁄n
 *iser_conn)

268 
ªt
;

269 
iscsi_c⁄ãxt
 *
iscsi
 = 
i£r_c⁄n
->
cma_id
->
c⁄ãxt
;

271 if(
i£r_c⁄n
->
cma_id
) {

272 
ªt
 = 
	`rdma_disc⁄√˘
(
i£r_c⁄n
->
cma_id
);

273 i‡(
ªt
)

274 
	`iscsi_£t_îr‹
(
iscsi
, "FailedÅo disconnect, conn: 0x%p,Érr %d\n",

275 
i£r_c⁄n
, 
ªt
);

279 
	}
}

287 
	$iscsi_i£r_disc⁄√˘
(
iscsi_c⁄ãxt
 *
iscsi
) {

289 
i£r_c⁄n
 *i£r_c⁄¿
iscsi
->
›aque
;

291 
	`i£r_c⁄n_ãrmö©e
(
i£r_c⁄n
);

292 
	`i£r_c⁄n_ªÀa£
(
i£r_c⁄n
);

294 
iscsi
->
fd
 = -1;

295 
iscsi
->
is_c⁄√˘ed
 = 0;

296 
iscsi
->
is_c‹ked
 = 0;

299 
	}
}

301 
iscsi_pdu
*

302 
iscsi_i£r_√w_pdu
(
iscsi_c⁄ãxt
 *
iscsi
, 
__©åibuã__
((
unu£d
))
size_t
 
size
) {

304 
iscsi_pdu
 *
	gpdu
;

305 
i£r_pdu
 *
	gi£r_pdu
;

307 
	gi£r_pdu
 = 
iscsi_zmÆloc
(
iscsi
, (*
i£r_pdu
));

308 
	gpdu
 = &
i£r_pdu
->
iscsi_pdu
;

309 
	gpdu
->
	göd©a
.
	gd©a
 = 
NULL
;

311  
	gpdu
;

315 
	$iscsi_i£r_‰ì_pdu
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_pdu
 *
pdu
)

317 
i£r_pdu
 *iser_pdu;

319 i‡(
pdu
 =
NULL
) {

320 
	`iscsi_£t_îr‹
(
iscsi
, "tryingÅo free NULLÖdu");

324 
i£r_pdu
 = 
	`c⁄èöî_of
(
pdu
, i£r_pdu, 
iscsi_pdu
);

326 i‡(
pdu
->
outd©a
.
size
 <
iscsi
->
smÆloc_size
) {

327 
	`iscsi_s‰ì
(
iscsi
, 
pdu
->
outd©a
.
d©a
);

329 
	`iscsi_‰ì
(
iscsi
, 
pdu
->
outd©a
.
d©a
);

331 
pdu
->
outd©a
.
d©a
 = 
NULL
;

333 i‡(
pdu
->
öd©a
.
size
 <
iscsi
->
smÆloc_size
) {

334 
	`iscsi_s‰ì
(
iscsi
, 
pdu
->
öd©a
.
d©a
);

336 
	`iscsi_‰ì
(
iscsi
, 
pdu
->
öd©a
.
d©a
);

339 
pdu
->
öd©a
.
d©a
 = 
NULL
;

341 i‡(
iscsi
->
outqueue_cuºít
 =
pdu
) {

342 
iscsi
->
outqueue_cuºít
 = 
NULL
;

345 
	`iscsi_‰ì
(
iscsi
, 
i£r_pdu
);

346 
	}
}

354 
	$i£r_¸óã_£nd_desc
(
i£r_pdu
 *iser_pdu) {

356 *
iscsi_hódî
 = 
i£r_pdu
->
iscsi_pdu
.
outd©a
.
d©a
;

357 
i£r_tx_desc
 *
tx_desc
 = 
i£r_pdu
->
desc
;

359 
	`mem£t
(&
tx_desc
->
i£r_hódî
, 0, (
i£r_hdr
));

360 
tx_desc
->
i£r_hódî
.
Êags
 = 
ISER_VER
;

361 
tx_desc
->
num_sge
 = 1;

362 
	`mem˝y
(
tx_desc
->
iscsi_hódî
, iscsi_hódî, 
ISCSI_RAW_HEADER_SIZE
);

363 
	}
}

371 
	$i£r_po°_ªcvl
(
i£r_c⁄n
 *iser_conn) {

372 
ibv_ªcv_wr
 
rx_wr
;

373 
ibv_ªcv_wr
 *
rx_wr_Áûed
;

374 
ibv_sge
 
sge
;

375 
ªt
;

376 
iscsi_c⁄ãxt
 *
iscsi
 = 
i£r_c⁄n
->
cma_id
->
c⁄ãxt
;

378 
sge
.
addr
 = (
uöçå_t
)
i£r_c⁄n
->
logö_ª•_buf
;

379 
sge
.
Àngth
 = 
ISER_RX_LOGIN_SIZE
;

380 
sge
.
lkey
 = 
i£r_c⁄n
->
logö_ª•_mr
->lkey;

382 
rx_wr
.
wr_id
 = (
uöçå_t
)
i£r_c⁄n
->
logö_ª•_buf
;

383 
rx_wr
.
sg_li°
 = &
sge
;

384 
rx_wr
.
num_sge
 = 1;

385 
rx_wr
.
√xt
 = 
NULL
;

387 
i£r_c⁄n
->
po°_ªcv_buf_cou¡
++;

388 
ªt
 = 
	`ibv_po°_ªcv
(
i£r_c⁄n
->
qp
, &
rx_wr
, &
rx_wr_Áûed
);

389 i‡(
ªt
) {

390 
	`iscsi_£t_îr‹
(
iscsi
, "FailedÅoÖostÑecvÜoginÑesponse\n");

391 
i£r_c⁄n
->
po°_ªcv_buf_cou¡
--;

396 
	}
}

409 
	$i£r_po°_£nd
(
i£r_c⁄n
 *i£r_c⁄n, 
i£r_tx_desc
 *
tx_desc
, 
boﬁ
 
sig«l
) {

411 
ªt
;

412 
ibv_£nd_wr
 
£nd_wr
;

413 
ibv_£nd_wr
 *
£nd_wr_Áûed
;

414 
iscsi_c⁄ãxt
 *
iscsi
 = 
i£r_c⁄n
->
cma_id
->
c⁄ãxt
;

416 
	`mem£t
(&
£nd_wr
, 0, (send_wr));

417 
£nd_wr
.
√xt
 = 
NULL
;

418 
£nd_wr
.
wr_id
 = (
uöçå_t
)
tx_desc
;

419 
£nd_wr
.
sg_li°
 = 
tx_desc
->
tx_sg
;

420 
£nd_wr
.
num_sge
 = 
tx_desc
->num_sge;

421 
£nd_wr
.
›code
 = 
IBV_WR_SEND
;

422 
£nd_wr
.
£nd_Êags
 = 
sig«l
 ? 
IBV_SEND_SIGNALED
 : 0;

424 
ªt
 = 
	`ibv_po°_£nd
(
i£r_c⁄n
->
qp
, &
£nd_wr
, &
£nd_wr_Áûed
);

425 i‡(
ªt
) {

426 
	`iscsi_£t_îr‹
(
iscsi
, "FailedÅoÖost send\n");

431 
	}
}

440 
	$i£r_£nd_c⁄åﬁ
(
i£r_c⁄n
 *i£r_c⁄n, 
i£r_pdu
 *iser_pdu) {

442 
i£r_tx_desc
 *
tx_desc
;

443 
ªt
;

444 
iscsi_c⁄ãxt
 *
iscsi
 = 
i£r_c⁄n
->
cma_id
->
c⁄ãxt
;

445 
size_t
 
d©Æí
;

447 i‡(
i£r_pdu
 =
NULL
) {

448 
	`iscsi_£t_îr‹
(
iscsi
, "Failed in iser_pdu");

451 
d©Æí
 = 
i£r_pdu
->
iscsi_pdu
.
outd©a
.
size
 - 
ISCSI_RAW_HEADER_SIZE
;

452 
tx_desc
 = 
i£r_pdu
->
desc
;

453 
tx_desc
->
ty≥
 = 
ISCSI_CONTROL
;

455 
	`i£r_¸óã_£nd_desc
(
i£r_pdu
);

457 i‡(
d©Æí
 > 0) {

458 * 
d©a
 = (*)&
i£r_pdu
->
iscsi_pdu
.
outd©a
.d©a[
ISCSI_RAW_HEADER_SIZE
];

459 
ibv_sge
 *
tx_dsg
 = &
tx_desc
->
tx_sg
[1];

461 
i£r_c⁄n
->
logö_ªq_mr
 = 
	`ibv_ªg_mr
(i£r_c⁄n->
pd
, i£r_c⁄n->
logö_ªq_buf
,

462 
d©Æí
 , 
IBV_ACCESS_LOCAL_WRITE
);

463 i‡(
i£r_c⁄n
->
logö_ªq_mr
 =
NULL
) {

464 
	`iscsi_£t_îr‹
(
iscsi
, "Failed Reg iser_conn->login_req_mr");

468 
	`mem˝y
(
i£r_c⁄n
->
logö_ªq_buf
, 
d©a
, 
d©Æí
);

470 
tx_dsg
->
addr
 = (
uöçå_t
)
i£r_c⁄n
->
logö_ªq_buf
;

471 
tx_dsg
->
Àngth
 = 
d©Æí
;

472 
tx_dsg
->
lkey
 = 
i£r_c⁄n
->
logö_ªq_mr
->lkey;

473 
tx_desc
->
num_sge
 = 2;

476 i‡(
i£r_pdu
->
iscsi_pdu
.
ª•⁄£_›code
 =
ISCSI_PDU_LOGIN_RESPONSE
 ||

477 
iscsi
->
£ssi⁄_ty≥
 =
ISCSI_SESSION_DISCOVERY
) {

478 
ªt
 = 
	`i£r_po°_ªcvl
(
i£r_c⁄n
);

479 i‡(
ªt
) {

480 
	`iscsi_£t_îr‹
(
iscsi
, "Failed Post RecvÜogin");

485 
ªt
 = 
	`i£r_po°_£nd
(
i£r_c⁄n
, 
tx_desc
, 
åue
);

486 i‡(
ªt
) {

487 
	`iscsi_£t_îr‹
(
iscsi
, "FailedÅoÖost send");

493 
	}
}

502 
	$i£r_öôülize_hódîs
(
i£r_pdu
 *i£r_pdu, 
i£r_c⁄n
 *iser_conn)

504 
i£r_tx_desc
 *
tx_desc
;

506 
tx_desc
 = 
i£r_c⁄n
->tx_desc;

507 
	`ISCSI_LIST_REMOVE
(&
i£r_c⁄n
->
tx_desc
,Åx_desc);

509 
i£r_pdu
->
desc
 = 
tx_desc
;

511 
tx_desc
->
tx_sg
[0].
addr
 = (
uöçå_t
)tx_desc;

512 
tx_desc
->
tx_sg
[0].
Àngth
 = 
ISER_HEADERS_LEN
;

513 
tx_desc
->
tx_sg
[0].
lkey
 =Åx_desc->
hdr_mr
->lkey;

516 
	}
}

529 
	$i£r_¥ï¨e_ªad_cmd
(
i£r_c⁄n
 *i£r_c⁄n,
i£r_pdu
 *iser_pdu)

531 
i£r_hdr
 *
hdr
 = &
i£r_pdu
->
desc
->
i£r_hódî
;

532 
i£r_tx_desc
 *
tx_desc
 = 
i£r_pdu
->
desc
;

533 
scsi_èsk
 *
èsk
 = 
i£r_pdu
->
iscsi_pdu
.
scsi_cbd©a
.task;

534 
iscsi_c⁄ãxt
 *
iscsi
 = 
i£r_c⁄n
->
cma_id
->
c⁄ãxt
;

535 
size_t
 
d©a_size
 = 
èsk
->
expx„æí
;

537 i‡(
d©a_size
 > 0) {

539 i‡(
èsk
->
iove˘‹_ö
.
iov
 =
NULL
) {

540 
i£r_pdu
->
iscsi_pdu
.
öd©a
.
d©a
 = 
	`iscsi_mÆloc
(
iscsi
, 
d©a_size
);

541 i‡(
i£r_pdu
->
iscsi_pdu
.
öd©a
.
d©a
 =
NULL
) {

542 
	`iscsi_£t_îr‹
(
iscsi
, "FailedÅoáloocate data buffer");

545 
i£r_pdu
->
iscsi_pdu
.
öd©a
.
size
 = 
d©a_size
;

548 
tx_desc
->
d©a_dú
 = 
DATA_READ
;

549 
hdr
->
ªad_va
 = 
	`htobe64
((
öçå_t
)
tx_desc
->
d©a_buff
);

550 
hdr
->
ªad_°ag
 = 
	`htobe32
((
uöt32_t
)
tx_desc
->
d©a_mr
->
rkey
);

551 
hdr
->
Êags
 |
ISER_RSV
;

556 
	`iscsi_£t_îr‹
(
iscsi
, "Read command withÇoÉxpectedÅransferÜength");

559 
	}
}

568 
	$i£r_¥ï¨e_wrôe_cmd
(
i£r_c⁄n
 *i£r_c⁄n, 
i£r_pdu
 *iser_pdu)

570 
i£r_hdr
 *
hdr
 = &
i£r_pdu
->
desc
->
i£r_hódî
;

571 
iscsi_c⁄ãxt
 *
iscsi
 = 
i£r_c⁄n
->
cma_id
->
c⁄ãxt
;

572 
i£r_tx_desc
 *
tx_desc
 = 
i£r_pdu
->
desc
;

573 
scsi_iove˘‹
 *
iove˘‹
 = 
	`iscsi_gë_scsi_èsk_iove˘‹_out
(
iscsi
, &
i£r_pdu
->
iscsi_pdu
);

574 
i
, 
off£t
 = 0;

576 i‡(
iove˘‹
 =
NULL
) {

577 
	`iscsi_£t_îr‹
(
iscsi
, "Can't find iovector data for DATA-OUT (RDMA)");

581 
tx_desc
->
d©a_dú
 = 
DATA_WRITE
;

583 
i
 = 0 ; i < 
iove˘‹
->
niov
 ; i++) {

584 
	`mem˝y
(&
tx_desc
->
d©a_buff
[
off£t
], 
iove˘‹
->
iov
[
i
].
iov_ba£
, iove˘‹->iov[i].
iov_Àn
);

585 
off£t
 +
iove˘‹
->
iov
[
i
].
iov_Àn
;

588 
hdr
->
Êags
 |
ISER_WSV
;

589 
hdr
->
wrôe_°ag
 = 
	`htobe32
((
uöt32_t
)(
tx_desc
->
d©a_mr
->
rkey
));

590 
hdr
->
wrôe_va
 = 
	`htobe64
((
öçå_t
)(
tx_desc
->
d©a_buff
));

593 
	}
}

600 
boﬁ


601 
	$is_c⁄åﬁ_›code
(
uöt8_t
 
›code
)

603 
boﬁ
 
is_c⁄åﬁ
 = 
Ál£
;

605 
›code
 & 
ISCSI_PDU_REJECT
) {

606 
ISCSI_PDU_NOP_OUT
:

607 
ISCSI_PDU_LOGIN_REQUEST
:

608 
ISCSI_PDU_LOGOUT_REQUEST
:

609 
ISCSI_PDU_TEXT_REQUEST
:

610 
is_c⁄åﬁ
 = 
åue
;

612 
ISCSI_PDU_SCSI_REQUEST
:

613 
is_c⁄åﬁ
 = 
Ál£
;

616 
is_c⁄åﬁ
 = 
Ál£
;

619  
is_c⁄åﬁ
;

620 
	}
}

623 
	$ovîÊow_d©a_size
(
i£r_pdu
 *iser_pdu)

625 
d©a_size
;

627 
d©a_size
 = 
i£r_pdu
->
iscsi_pdu
.
scsi_cbd©a
.
èsk
->
expx„æí
;

629  (
d©a_size
 > 
DATA_BUFFER_SIZE
);

630 
	}
}

642 
	$i£r_£nd_comm™d
(
i£r_c⁄n
 *i£r_c⁄n, 
i£r_pdu
 *iser_pdu)

644 
i£r_tx_desc
 *
tx_desc
 = 
i£r_pdu
->
desc
;

645 
îr
 = 0;

646 
iscsi_c⁄ãxt
 *
iscsi
 = 
i£r_c⁄n
->
cma_id
->
c⁄ãxt
;

648 
tx_desc
->
ty≥
 = 
ISCSI_COMMAND
;

650 
	`i£r_¸óã_£nd_desc
(
i£r_pdu
);

652 i‡(
	`ovîÊow_d©a_size
(
i£r_pdu
)) {

653 
	`iscsi_£t_îr‹
(
iscsi
, "Libiscsi-iSER supports messages smallerÅhan 512k\n");

657 i‡(
i£r_pdu
->
desc
->
iscsi_hódî
[1] & 
BHSSC_FLAGS_R
) {

658 
îr
 = 
	`i£r_¥ï¨e_ªad_cmd
(
i£r_c⁄n
, 
i£r_pdu
);

659 i‡(
îr
) {

660 
	`iscsi_£t_îr‹
(
iscsi
, "error inÖrepareÑead cmd\n");

663 } i‡(
i£r_pdu
->
desc
->
iscsi_hódî
[1] & 
BHSSC_FLAGS_W
) {

664 
îr
 = 
	`i£r_¥ï¨e_wrôe_cmd
(
i£r_c⁄n
, 
i£r_pdu
);

665 i‡(
îr
) {

666 
	`iscsi_£t_îr‹
(
iscsi
, "error inÖrepare write cmd\n");

671 
îr
 = 
	`i£r_po°_£nd
(
i£r_c⁄n
, 
tx_desc
, 
åue
);

672 i‡(
îr
)

675 
	}
}

689 
	$iscsi_i£r_queue_pdu
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_pdu
 *
pdu
) {

691 
i£r_pdu
 *iser_pdu;

692 
i£r_c⁄n
 *i£r_c⁄¿
iscsi
->
›aque
;

693 
uöt8_t
 
›code
;

695 i‡(
pdu
 =
NULL
) {

696 
	`iscsi_£t_îr‹
(
iscsi
, "tryingÅo queue NULLÖdu");

700 
i£r_pdu
 = 
	`c⁄èöî_of
(
pdu
, i£r_pdu, 
iscsi_pdu
);

701 
›code
 = 
pdu
->
outd©a
.
d©a
[0];

703 
	`iscsi_pdu_£t_exp°©¢
(
pdu
, 
iscsi
->
°©¢
 + 1);

704 
	`ISCSI_LIST_ADD_END
(&
iscsi
->
waôpdu
, 
pdu
);

706 i‡(
	`i£r_öôülize_hódîs
(
i£r_pdu
, 
i£r_c⁄n
)) {

707 
	`iscsi_£t_îr‹
(
iscsi
, "initialize headers Failed\n");

711 i‡(
	`u∆ikñy
(
	`is_c⁄åﬁ_›code
(
›code
))) {

712 i‡(
	`i£r_£nd_c⁄åﬁ
(
i£r_c⁄n
, 
i£r_pdu
)) {

713 
	`iscsi_£t_îr‹
(
iscsi
, "iser_send_command Failed\n");

717 i‡(
	`i£r_£nd_comm™d
(
i£r_c⁄n
, 
i£r_pdu
)) {

718 
	`iscsi_£t_îr‹
(
iscsi
, "iser_send_command Failed\n");

724 
	}
}

731 
	$i£r_¸óã_i£r_c⁄n_ªs
(
i£r_c⁄n
 *iser_conn) {

733 
ibv_qp_öô_©å
 
öô_©å
;

734 
ªt
;

735 
iscsi_c⁄ãxt
 *
iscsi
 = 
i£r_c⁄n
->
cma_id
->
c⁄ãxt
;

737 
	`mem£t
(&
öô_©å
, 0, (
ibv_qp_öô_©å
));

738 
öô_©å
.
qp_c⁄ãxt
 = (*)
i£r_c⁄n
->
cma_id
->
c⁄ãxt
;

739 
öô_©å
.
£nd_cq
 = 
i£r_c⁄n
->
cq
;

740 
öô_©å
.
ªcv_cq
 = 
i£r_c⁄n
->
cq
;

741 
öô_©å
.
ˇp
.
max_£nd_wr
 = 
ISER_QP_MAX_RECV_DTOS
;

742 
öô_©å
.
ˇp
.
max_ªcv_wr
 = 
ISER_QP_MAX_RECV_DTOS
;

743 
öô_©å
.
ˇp
.
max_£nd_sge
 = 2;

744 
öô_©å
.
ˇp
.
max_ªcv_sge
 = 1;

745 
öô_©å
.
qp_ty≥
 = 
IBV_QPT_RC
;

747 
ªt
 = 
	`rdma_¸óã_qp
(
i£r_c⁄n
->
cma_id
, i£r_c⁄n->
pd
, &
öô_©å
);

748 i‡(
ªt
) {

749 
	`iscsi_£t_îr‹
(
iscsi
, "FailedÅo create qp\n");

752 
i£r_c⁄n
->
qp
 = i£r_c⁄n->
cma_id
->qp;

754  
ªt
;

755 
	}
}

763 
	$i£r_addr_h™dÀr
(
rdma_cm_id
 *
cma_id
) {

764 
iscsi_c⁄ãxt
 *
iscsi
 = 
cma_id
->
c⁄ãxt
;

765 
i£r_c⁄n
 *i£r_c⁄¿
iscsi
->
›aque
;

766 
ªt
, 
Êags
;

768 
ªt
 = 
	`rdma_ªsﬁve_rouã
(
cma_id
, 1000);

769 i‡(
ªt
) {

770 
	`iscsi_£t_îr‹
(
iscsi
, "FailedÑesolvingáddress\n");

774 
i£r_c⁄n
->
pd
 = 
	`ibv_Æloc_pd
(
cma_id
->
vîbs
);

775 i‡(!
i£r_c⁄n
->
pd
) {

776 
	`iscsi_£t_îr‹
(
iscsi
, "FailedÅoállocÖd\n");

779 
i£r_c⁄n
->
comp_ch™√l
 = 
	`ibv_¸óã_comp_ch™√l
(
cma_id
->
vîbs
);

780 i‡(!
i£r_c⁄n
->
comp_ch™√l
) {

781 
	`iscsi_£t_îr‹
(
iscsi
, "FailedÅo create comp channel");

782 
pd_îr‹
;

785 
Êags
 = 
	`f˙é
(
i£r_c⁄n
->
comp_ch™√l
->
fd
, 
F_GETFL
);

786 
ªt
 = 
	`f˙é
(
i£r_c⁄n
->
comp_ch™√l
->
fd
, 
F_SETFL
, 
Êags
 | 
O_NONBLOCK
);

787 i‡(
ªt
) {

788 
	`iscsi_£t_îr‹
(
iscsi
, "FailedÅo set channelÅoÇonblocking");

792 
i£r_c⁄n
->
cq
 = 
	`ibv_¸óã_cq
(
cma_id
->
vîbs
,

793 
ISER_MAX_CQ_LEN
,

794 
i£r_c⁄n
,

795 
i£r_c⁄n
->
comp_ch™√l
,

797 i‡(!
i£r_c⁄n
->
cq
) {

798 
	`iscsi_£t_îr‹
(
iscsi
, "FailedÅo create cq\n");

799 
pd_îr‹
;

802 i‡(
	`ibv_ªq_nŸify_cq
(
i£r_c⁄n
->
cq
, 0)) {

803 
	`iscsi_£t_îr‹
(
iscsi
, "ibv_req_notify_cq failed\n");

804 
cq_îr‹
;

807 
i£r_c⁄n
->
logö_buf
 = 
	`iscsi_mÆloc
(
iscsi
, 
ISCSI_DEF_MAX_RECV_SEG_LEN
 + 
ISER_RX_LOGIN_SIZE
);

808 i‡(!
i£r_c⁄n
->
logö_buf
) {

809 
	`iscsi_£t_îr‹
(
iscsi
, "FailedÅoállocate memory forÜogin_buf\n");

810 
	`iscsi_‰ì
(
iscsi
, 
i£r_c⁄n
->
logö_buf
);

811 
cq_îr‹
;

814 
i£r_c⁄n
->
logö_ªq_buf
 = i£r_c⁄n->
logö_buf
;

815 
i£r_c⁄n
->
logö_ª•_buf
 = i£r_c⁄n->
logö_buf
 + 
ISCSI_DEF_MAX_RECV_SEG_LEN
;

816 
i£r_c⁄n
->
logö_ª•_mr
 = 
	`ibv_ªg_mr
(i£r_c⁄n->
pd
, i£r_c⁄n->
logö_ª•_buf
,

817 
ISER_RX_LOGIN_SIZE
, 
IBV_ACCESS_LOCAL_WRITE
);

818 if(!
i£r_c⁄n
->
logö_ª•_mr
) {

819 
	`iscsi_£t_îr‹
(
iscsi
, "FailedÅoÑegÜogin_resp_mr\n");

820 
	`iscsi_‰ì
(
iscsi
, 
i£r_c⁄n
->
logö_buf
);

821 
cq_îr‹
;

826 
cq_îr‹
:

827 
	`ibv_de°roy_cq
(
i£r_c⁄n
->
cq
);

829 
pd_îr‹
:

830 
	`ibv_dóŒoc_pd
(
i£r_c⁄n
->
pd
);

833 
	}
}

840 
	$i£r_rouã_h™dÀr
(
rdma_cm_id
 *
cma_id
) {

841 
rdma_c⁄n_∑øm
 
c⁄n_∑øm
;

842 
i£r_cm_hdr
 
ªq_hdr
;

843 
iscsi_c⁄ãxt
* 
iscsi
 = 
cma_id
->
c⁄ãxt
;

844 
ªt
;

845 
i£r_c⁄n
 *i£r_c⁄¿
iscsi
->
›aque
;

847 
ªt
 = 
	`i£r_¸óã_i£r_c⁄n_ªs
(
i£r_c⁄n
);

848 i‡(
ªt
) {

849 
	`iscsi_£t_îr‹
(
iscsi
, "FailedÅo create ib connÑes\n");

850 
logö_mr_îr‹
;

853 
	`mem£t
(&
c⁄n_∑øm
, 0, (
rdma_c⁄n_∑øm
));

854 
c⁄n_∑øm
.
ª•⁄dî_ªsour˚s
 = 4;

855 
c⁄n_∑øm
.
ªåy_cou¡
 = 7;

856 
c⁄n_∑øm
.
∫r_ªåy_cou¡
 = 6;

858 
	`mem£t
(&
ªq_hdr
, 0, (req_hdr));

859 
ªq_hdr
.
Êags
 = (
ISER_ZBVA_NOT_SUPPORTED
 |

860 
ISER_SEND_W_INV_NOT_SUPPORTED
);

861 
c⁄n_∑øm
.
¥iv©e_d©a
 = (*)&
ªq_hdr
;

862 
c⁄n_∑øm
.
¥iv©e_d©a_Àn
 = (
i£r_cm_hdr
);

864 
ªt
 = 
	`rdma_c⁄√˘
(
cma_id
, &
c⁄n_∑øm
);

865 i‡(
ªt
) {

866 
	`iscsi_£t_îr‹
(
iscsi
, "c⁄¿%∞Áûuª c⁄√˘ög: %d", 
i£r_c⁄n
, 
ªt
);

869  
ªt
;

871 
logö_mr_îr‹
:

872 
	`ibv_dîeg_mr
(
i£r_c⁄n
->
logö_ª•_mr
);

874 
	`ibv_de°roy_cq
(
i£r_c⁄n
->
cq
);

876 
	`ibv_dóŒoc_pd
(
i£r_c⁄n
->
pd
);

879 
	}
}

888 
	$i£r_Æloc_rx_des¸ùt‹s
(
i£r_c⁄n
 *i£r_c⁄n, 
cmds_max
)

890 
i
,
j
;

891 
i£r_rx_desc
 *
rx_desc
;

892 
ibv_sge
 *
rx_sg
;

893 
iscsi_c⁄ãxt
 *
iscsi
 = 
i£r_c⁄n
->
cma_id
->
c⁄ãxt
;

895 
i£r_c⁄n
->
qp_max_ªcv_dtos
 = 
cmds_max
;

896 
i£r_c⁄n
->
mö_po°ed_rx
 = 
ISER_MIN_POSTED_RX
;

898 
i£r_c⁄n
->
num_rx_descs
 = 
cmds_max
;

900 
i£r_c⁄n
->
rx_descs
 = 
	`iscsi_mÆloc
(
iscsi
, i£r_c⁄n->
num_rx_descs
 * (*
rx_desc
));

901 i‡(!
i£r_c⁄n
->
rx_descs
) {

902 
	`iscsi_£t_îr‹
(
iscsi
, "FailedÅoállocateÑx descriptors\n");

906 
rx_desc
 = 
i£r_c⁄n
->
rx_descs
;

908 
i
 = 0; i < 
i£r_c⁄n
->
qp_max_ªcv_dtos
; i++, 
rx_desc
++) {

909 
rx_desc
->
hdr_mr
 = 
	`ibv_ªg_mr
(
i£r_c⁄n
->
pd
,Ñx_desc, 
ISER_RX_PAYLOAD_SIZE
, 
IBV_ACCESS_LOCAL_WRITE
);

911 i‡(
rx_desc
->
hdr_mr
 =
NULL
) {

912 
	`iscsi_£t_îr‹
(
iscsi
, "FaûedÅÿªgi°î (%iËªg_mr\n", 
i
);

913 
Áû_Æloc_mrs
;

916 
rx_sg
 = &
rx_desc
->rx_sg;

917 
rx_sg
->
addr
 = (
uöçå_t
)
rx_desc
;

918 
rx_sg
->
Àngth
 = 
ISER_RX_PAYLOAD_SIZE
;

919 
rx_sg
->
lkey
 = 
rx_desc
->
hdr_mr
->lkey;

922 
i£r_c⁄n
->
rx_desc_hód
 = 0;

926 
Áû_Æloc_mrs
:

928 
rx_desc
 = 
i£r_c⁄n
->
rx_descs
;

929 
j
 = 0; j < 
i
 ; j++, 
rx_desc
++)

930 
	`ibv_dîeg_mr
(
rx_desc
->
hdr_mr
);

932 
	`iscsi_‰ì
(
iscsi
, 
i£r_c⁄n
->
rx_descs
);

935 
	}
}

944 
	$i£r_po°_ªcvm
(
i£r_c⁄n
 *i£r_c⁄n, 
cou¡
)

946 
ibv_ªcv_wr
 *
rx_wr
, *
rx_wr_Áûed
;

947 
i
, 
ªt
;

948 
my_rx_hód
 = 
i£r_c⁄n
->
rx_desc_hód
;

949 
i£r_rx_desc
 *
rx_desc
;

950 
iscsi_c⁄ãxt
 *
iscsi
 = 
i£r_c⁄n
->
cma_id
->
c⁄ãxt
;

952 
rx_wr
 = 
i£r_c⁄n
->rx_wr, 
i
 = 0; i < 
cou¡
; i++,Ñx_wr++) {

953 
rx_desc
 = &
i£r_c⁄n
->
rx_descs
[
my_rx_hód
];

954 
rx_wr
->
wr_id
 = (
uöçå_t
)
rx_desc
;

955 
rx_wr
->
sg_li°
 = &
rx_desc
->
rx_sg
;

956 
rx_wr
->
num_sge
 = 1;

957 
rx_wr
->
√xt
 =Ñx_wr + 1;

958 
my_rx_hód
 = (my_rx_hód + 1Ë% 
i£r_c⁄n
->
qp_max_ªcv_dtos
;

961 
rx_wr
--;

962 
rx_wr
->
√xt
 = 
NULL
;

964 
i£r_c⁄n
->
po°_ªcv_buf_cou¡
 +
cou¡
;

965 
ªt
 = 
	`ibv_po°_ªcv
(
i£r_c⁄n
->
qp
, i£r_c⁄n->
rx_wr
, &
rx_wr_Áûed
);

966 i‡(
ªt
) {

967 
	`iscsi_£t_îr‹
(
iscsi
, "po°ög %dÑx bufs, ib_po°_ªcv faûedÑë=%d", 
cou¡
, 
ªt
);

968 
i£r_c⁄n
->
po°_ªcv_buf_cou¡
 -
cou¡
;

970 
i£r_c⁄n
->
rx_desc_hód
 = 
my_rx_hód
;

972  
ªt
;

973 
	}
}

976 
	$i£r_ªg_mr
(
i£r_c⁄n
 *iser_conn)

978 
i
;

979 
iscsi_c⁄ãxt
 *
iscsi
 = 
i£r_c⁄n
->
cma_id
->
c⁄ãxt
;

980 
i£r_tx_desc
 *
tx_desc
;

982 
i
 = 0 ; i < 
NUM_MRS
 ; i++) {

984 
tx_desc
 = 
	`iscsi_mÆloc
(
iscsi
, (*tx_desc));

985 i‡(
tx_desc
 =
NULL
) {

986 
	`iscsi_£t_îr‹
(
iscsi
, "Out-Of-Memory, failedÅoállocate data buffer");

990 
tx_desc
->
hdr_mr
 = 
	`ibv_ªg_mr
(
i£r_c⁄n
->
pd
,Åx_desc, 
ISER_HEADERS_LEN
, 
IBV_ACCESS_LOCAL_WRITE
);

991 i‡(
tx_desc
->
hdr_mr
 =
NULL
) {

992 
	`iscsi_£t_îr‹
(
iscsi
, "FailedÅoÑegister data mr");

996 
tx_desc
->
d©a_buff
 = 
	`iscsi_mÆloc
(
iscsi
, 
DATA_BUFFER_SIZE
);

997 i‡(
tx_desc
->
d©a_buff
 =
NULL
) {

998 
	`iscsi_£t_îr‹
(
iscsi
, "Out-Of-Memory, failedÅoállocate data buffer");

1002 
tx_desc
->
d©a_mr
 = 
	`ibv_ªg_mr
(
i£r_c⁄n
->
pd
,Åx_desc->
d©a_buff
, 
DATA_BUFFER_SIZE
,

1003 
IBV_ACCESS_LOCAL_WRITE
 | 
IBV_ACCESS_REMOTE_READ
 | 
IBV_ACCESS_REMOTE_WRITE
);

1004 i‡(
tx_desc
->
d©a_mr
 =
NULL
) {

1005 
	`iscsi_£t_îr‹
(
iscsi
, "FailedÅoÑegister data mr");

1009 
	`ISCSI_LIST_ADD_END
(&
i£r_c⁄n
->
tx_desc
,Åx_desc);

1013 
	}
}

1027 
	$i£r_rcv_com∂ëi⁄
(
i£r_rx_desc
 *
rx_desc
,

1028 
i£r_c⁄n
 *iser_conn)

1030 
iscsi_ö_pdu
 *
ö
 = 
NULL
;

1031 
em±y
, 
îr
;

1032 
iscsi_c⁄ãxt
 *
iscsi
 = 
i£r_c⁄n
->
cma_id
->
c⁄ãxt
;

1034 
ö
 = 
	`iscsi_mÆloc
(
iscsi
, (*in));

1036 i‡((*)
rx_desc
 =
i£r_c⁄n
->
logö_ª•_buf
)

1037 i‡(
iscsi
->
£ssi⁄_ty≥
 =
ISCSI_SESSION_NORMAL
) {

1038 if(
	`i£r_Æloc_rx_des¸ùt‹s
(
i£r_c⁄n
,255)) {

1039 
	`iscsi_£t_îr‹
(
iscsi
, "iser_alloc_rx_descriptors Failed\n");

1040 
îr
 = -1;

1041 
îr‹
;

1043 
îr
 = 
	`i£r_po°_ªcvm
(
i£r_c⁄n
, 
ISER_MIN_POSTED_RX
);

1044 i‡(
îr
) {

1045 
îr
 = -1;

1046 
îr‹
;

1049 
ö
->
hdr
 = (*)
rx_desc
->
iscsi_hódî
;

1050 
ö
->
d©a_pos
 = 
	`iscsi_gë_pdu_d©a_size
(&ö->
hdr
[0]);

1051 
ö
->
d©a
 = (*)
rx_desc
->data;

1053 
iscsi_›code
 
›code
 = 
ö
->
hdr
[0] & 0x3f;

1054 
uöt32_t
 
ôt
 = 
	`scsi_gë_uöt32
(&
ö
->
hdr
[16]);

1056 i‡(
›code
 =
ISCSI_PDU_NOP_IN
 && 
ôt
 == 0xffffffff)

1057 
n›_èrgë
;

1059 
iscsi_pdu
 *iscsi_pdu;

1060 
i£r_pdu
 *iser_pdu;

1061 
iscsi_pdu
 = 
iscsi
->
waôpdu
 ; iscsi_pdu ; iscsi_pdu = iscsi_pdu->
√xt
) {

1062 if(
iscsi_pdu
->
ôt
 == itt)

1066 
i£r_pdu
 = 
	`c⁄èöî_of
(
iscsi_pdu
, iser_pdu, iscsi_pdu);

1071 i‡(
i£r_pdu
->
desc
->
ty≥
 =
ISCSI_COMMAND
 &&

1072 
i£r_pdu
->
desc
->
d©a_dú
 =
DATA_READ
) {

1074 
i
, 
off£t
 = 0;

1075 
scsi_èsk
 *
èsk
 = 
i£r_pdu
->
iscsi_pdu
.
scsi_cbd©a
.task;

1076 
scsi_iove˘‹
 *
iove˘‹_ö
 = &
èsk
->iovector_in;

1078 i‡(
iove˘‹_ö
->
iov
 =
NULL
) {

1079 
	`mem˝y
(
i£r_pdu
->
iscsi_pdu
.
öd©a
.
d©a
, &i£r_pdu->
desc
->
d©a_buff
[
off£t
],

1080 
i£r_pdu
->
iscsi_pdu
.
öd©a
.
size
);

1082 
i
 = 0 ; i < 
iove˘‹_ö
->
niov
 ; i++) {

1083 
	`mem˝y
(
iove˘‹_ö
->
iov
[
i
].
iov_ba£
, &
i£r_pdu
->
desc
->
d©a_buff
[
off£t
],

1084 
iove˘‹_ö
->
iov
[
i
].
iov_Àn
);

1085 
off£t
 +
iove˘‹_ö
->
iov
[
i
].
iov_Àn
;

1090 
	`ISCSI_LIST_ADD_END
(&
i£r_c⁄n
->
tx_desc
, 
i£r_pdu
->
desc
);

1092 
n›_èrgë
:

1097 
i£r_c⁄n
->
po°_ªcv_buf_cou¡
--;

1099 i‡((*)
rx_desc
 !
i£r_c⁄n
->
logö_ª•_buf
) {

1100 
em±y
 = 
i£r_c⁄n
->
qp_max_ªcv_dtos
 - i£r_c⁄n->
po°_ªcv_buf_cou¡
;

1101 i‡(
em±y
 >
i£r_c⁄n
->
mö_po°ed_rx
) {

1102 
îr
 = 
	`i£r_po°_ªcvm
(
i£r_c⁄n
, 
em±y
);

1103 i‡(
îr
) {

1104 
îr
 = -1;

1105 
îr‹
;

1110 
îr
 = 
	`iscsi_¥o˚ss_pdu
(
iscsi
, 
ö
);

1112 
îr‹
:

1113 
	`iscsi_‰ì
(
iscsi
, 
ö
);

1114  
îr
;

1115 
	}
}

1125 
	$i£r_¢d_com∂ëi⁄
(
i£r_tx_desc
 *
tx_desc
 
_U_
,

1126 
i£r_c⁄n
 *i£r_c⁄¿
_U_
)

1129 
	}
}

1138 
	$i£r_h™dÀ_wc
(
ibv_wc
 *
wc
,
i£r_c⁄n
 *iser_conn)

1140 
i£r_tx_desc
 *
tx_desc
;

1141 
i£r_rx_desc
 *
rx_desc
;

1142 
iscsi_c⁄ãxt
 *
iscsi
 = 
i£r_c⁄n
->
cma_id
->
c⁄ãxt
;

1144 i‡(
wc
->
°©us
 =
IBV_WC_SUCCESS
) {

1145 i‡(
wc
->
›code
 =
IBV_WC_RECV
) {

1146 
rx_desc
 = (
i£r_rx_desc
 *)(
uöçå_t
)
wc
->
wr_id
;

1148  
	`i£r_rcv_com∂ëi⁄
(
rx_desc
, 
i£r_c⁄n
);

1150 i‡(
wc
->
›code
 =
IBV_WC_SEND
) {

1151 
tx_desc
 = (
i£r_tx_desc
 *)(
uöçå_t
)
wc
->
wr_id
;

1153  
	`i£r_¢d_com∂ëi⁄
(
tx_desc
, 
i£r_c⁄n
);

1155 
	`iscsi_£t_îr‹
(
iscsi
, "Unknow¿w¯›codê%d\n", 
wc
->
›code
);

1160 i‡(
wc
->
°©us
 !
IBV_WC_WR_FLUSH_ERR
) {

1161 
	`ISCSI_LOG
(
iscsi
, 3, "wr id %lx status %d vend_err %x\n",

1162 
wc
->
wr_id
, wc->
°©us
, wc->
víd‹_îr
);

1163  
	`iscsi_£rvi˚_ªc⁄√˘_if_loggedö
(
iscsi
);

1165 
	`iscsi_£t_îr‹
(
iscsi
, "ÊushÉº‹: w∏id %" 
PRIx64
 "\n", 
wc
->
wr_id
);

1170 
	}
}

1181 
	$cq_evít_h™dÀr
(
i£r_c⁄n
 *iser_conn)

1183 
ibv_wc
 
wc
[16];

1184 
i
;

1185 
n
;

1186 
com∂ëed
 = 0;

1188 (
n
 = 
	`ibv_pﬁl_cq
(
i£r_c⁄n
->
cq
, 16, 
wc
)) > 0) {

1189 
i
 = 0; i < 
n
; i++)

1190 i‡(
	`i£r_h™dÀ_wc
(&
wc
[
i
], 
i£r_c⁄n
))

1193 
com∂ëed
 +
n
;

1194 i‡(
com∂ëed
 >= 512)

1199 
	}
}

1210 
	$cq_h™dÀ
(
i£r_c⁄n
 *iser_conn)

1212 *
ev_˘x
 = 
NULL
;

1213 
ªt
;

1214 
iscsi_c⁄ãxt
 *
iscsi
 = 
i£r_c⁄n
->
cma_id
->
c⁄ãxt
;

1216 
	`ibv_gë_cq_evít
(
i£r_c⁄n
->
comp_ch™√l
, &i£r_c⁄n->
cq
, &
ev_˘x
);

1217 
ªt
 = 
	`ibv_ªq_nŸify_cq
(
i£r_c⁄n
->
cq
, 0);

1220 
	`ibv_ack_cq_evíts
(
i£r_c⁄n
->
cq
, 1);

1221 i‡(
ªt
) {

1222 
	`iscsi_£t_îr‹
(
iscsi
, "failedÇotify oráck CQ");

1226 
ªt
 = 
	`cq_evít_h™dÀr
(
i£r_c⁄n
);

1227 i‡(
ªt
) {

1228 
	`iscsi_£t_îr‹
(
iscsi
, "failed CQ handler");

1233 
	}
}

1242 
	$i£r_c⁄√˘ed_h™dÀr
(
rdma_cm_id
 *
cma_id
) {

1244 
iscsi_c⁄ãxt
 *
iscsi
 = 
cma_id
->
c⁄ãxt
;

1245 
i£r_c⁄n
 *i£r_c⁄¿
iscsi
->
›aque
;

1247 
i£r_c⁄n
->
po°_ªcv_buf_cou¡
 = 0;

1249  
	`i£r_ªg_mr
(
i£r_c⁄n
);

1251 
	}
}

1262 
	$i£r_cma_h™dÀr
(
i£r_c⁄n
 *i£r_c⁄n,
rdma_cm_id
 *
cma_id
, 
rdma_cm_evít
 *
evít
) {

1264 
ªt
 = 0;

1266 
evít
->event) {

1268 
RDMA_CM_EVENT_ADDR_RESOLVED
:

1269 
ªt
 = 
	`i£r_addr_h™dÀr
(
cma_id
);

1271 
RDMA_CM_EVENT_ROUTE_RESOLVED
:

1272 
ªt
 = 
	`i£r_rouã_h™dÀr
(
cma_id
);

1274 
RDMA_CM_EVENT_ESTABLISHED
:

1275 
ªt
 = 
	`i£r_c⁄√˘ed_h™dÀr
(
cma_id
);

1276 if(
ªt
)

1277 
i£r_c⁄n
->
c⁄n_°©e
 = 
CONN_ERROR
;

1279 
i£r_c⁄n
->
c⁄n_°©e
 = 
CONN_ESTABLISHED
;

1280 
	`£m_po°
(&
i£r_c⁄n
->
£m_c⁄√˘
);

1282 
RDMA_CM_EVENT_ADDR_ERROR
:

1283 
RDMA_CM_EVENT_ROUTE_ERROR
:

1284 
RDMA_CM_EVENT_CONNECT_ERROR
:

1285 
RDMA_CM_EVENT_UNREACHABLE
:

1286 
RDMA_CM_EVENT_REJECTED
:

1287 
i£r_c⁄n
->
c⁄n_°©e
 = 
CONN_ERROR
;

1288 
ªt
 = -1;

1289 
	`£m_po°
(&
i£r_c⁄n
->
£m_c⁄√˘
);

1291 
RDMA_CM_EVENT_DISCONNECTED
:

1292 
RDMA_CM_EVENT_ADDR_CHANGE
:

1293 
RDMA_CM_EVENT_TIMEWAIT_EXIT
:

1294 
i£r_c⁄n
->
c⁄n_°©e
 = 
CONN_DISCONNECTED
;

1295 
ªt
 = -1;

1296 
	`£m_po°
(&
i£r_c⁄n
->
£m_c⁄√˘
);

1299 
i£r_c⁄n
->
c⁄n_°©e
 = 
CONN_ERROR
;

1300 
ªt
 = -1;

1301 
	`£m_po°
(&
i£r_c⁄n
->
£m_c⁄√˘
);

1304  
ªt
;

1305 
	}
}

1315 *
	$cm_thªad
(*
¨g
)

1317 
i£r_c⁄n
 *i£r_c⁄¿
¨g
;

1318 
rdma_cm_evít
 
evít_c›y
;

1319 
ªt
;

1320 
iscsi_c⁄ãxt
 *
iscsi
 = 
i£r_c⁄n
->
cma_id
->
c⁄ãxt
;

1323 
ªt
 = 
	`rdma_gë_cm_evít
(
i£r_c⁄n
->
cma_ch™√l
, &i£r_c⁄n->
cma_evít
);

1324 i‡(
ªt
) {

1325 
	`iscsi_£t_îr‹
(
iscsi
, "FailedÅo get RDMA-CM Event\n");

1326 
	`±hªad_exô
(
NULL
);

1328 
	`mem˝y
(&
evít_c›y
, 
i£r_c⁄n
->
cma_evít
, (
rdma_cm_evít
));

1329 
ªt
 = 
	`i£r_cma_h™dÀr
(
i£r_c⁄n
, i£r_c⁄n->
cma_id
, &
evít_c›y
);

1330 
	`rdma_ack_cm_evít
(
i£r_c⁄n
->
cma_evít
);

1331 i‡(
ªt
) {

1332 
	`iscsi_£t_îr‹
(
iscsi
, "FailedÅo handleÉvent\n");

1333 
	`±hªad_exô
(
NULL
);

1336 
	}
}

1350 
iscsi_i£r_c⁄√˘
(
iscsi_c⁄ãxt
 *
iscsi
, 
sockë_addªss
 *
ß
,
__©åibuã__
((
unu£d
)Ë
ai_Ámûy
) {

1352 
i£r_c⁄n
 *
	gi£r_c⁄n
 = 
iscsi
->
›aque
;

1353 
	gªt
;

1355 
¥ötf
("\n####iser connecting");

1356 
£m_öô
(&
i£r_c⁄n
->
£m_c⁄√˘
, 0, 0);

1358 
	gi£r_c⁄n
->
	gcma_ch™√l
 = 
rdma_¸óã_evít_ch™√l
();

1360 i‡(
	gi£r_c⁄n
->
	gcma_ch™√l
 =
NULL
) {

1361 
iscsi_£t_îr‹
(
iscsi
, "Failed creating Event Channel\n");

1365 i‡(
rdma_¸óã_id
(
i£r_c⁄n
->
cma_ch™√l
, &i£r_c⁄n->
cma_id
, (*)
iscsi
, 
RDMA_PS_TCP
)) {

1366 
iscsi_£t_îr‹
(
iscsi
, "Failed create channel_id");

1370 
	gªt
 = 
±hªad_¸óã
(&
i£r_c⁄n
->
cmthªad
, 
NULL
, 
cm_thªad
, iser_conn);

1371 if(
	gªt
) {

1372 
iscsi_£t_îr‹
(
iscsi
, "Failed create Connection Manager Thread");

1376 if(
rdma_ªsﬁve_addr
(
i£r_c⁄n
->
cma_id
, 
NULL
, &
ß
->sa, 2000)) {

1377 
iscsi_£t_îr‹
(
iscsi
, "FailedÑesolveáddress");

1381 
£m_waô
(&
i£r_c⁄n
->
£m_c⁄√˘
);

1383 
	gi£r_c⁄n
->
	gc⁄n_°©e
) {

1385 
	gCONN_ERROR
:

1386 
iscsi_£t_îr‹
(
iscsi
, "Conn ErrorÉvent");

1389 
	gCONN_DISCONNECTED
:

1390 
iscsi_£t_îr‹
(
iscsi
, "Conn disconnectedÉvent");

1393 
	gCONN_ESTABLISHED
:

1397 
iscsi_£t_îr‹
(
iscsi
, "Unknown State of connection");

1403 
	giscsi
->
	gis_c⁄√˘ed
 = 1;

1404 
	giscsi
->
sockë_°©us_cb
(
iscsi
, 
SCSI_STATUS_GOOD
, 
NULL
, iscsi->
c⁄√˘_d©a
);

1405 
	giscsi
->
	gsockë_°©us_cb
 = 
NULL
;

1410 
iscsi_å™•‹t
 
	giscsi_å™•‹t_i£r
 = {

1411 .
c⁄√˘
 = 
iscsi_i£r_c⁄√˘
,

1412 .
	gqueue_pdu
 = 
iscsi_i£r_queue_pdu
,

1413 .
	g√w_pdu
 = 
iscsi_i£r_√w_pdu
,

1414 .
	gdisc⁄√˘
 = 
iscsi_i£r_disc⁄√˘
,

1415 .
	g‰ì_pdu
 = 
iscsi_i£r_‰ì_pdu
,

1416 .
	g£rvi˚
 = 
iscsi_i£r_£rvi˚
,

1417 .
	ggë_fd
 = 
iscsi_i£r_gë_fd
,

1418 .
	gwhich_evíts
 = 
iscsi_i£r_which_evíts
,

1421 
	$iscsi_öô_i£r_å™•‹t
(
iscsi_c⁄ãxt
 *
iscsi
)

1423 
iscsi
->
drv
 = &
iscsi_å™•‹t_i£r
;

1424 
iscsi
->
›aque
 = 
	`iscsi_mÆloc
(iscsi, (
i£r_c⁄n
));

1425 
iscsi
->
å™•‹t
 = 
ISER_TRANSPORT
;

1426 
	}
}

	@lib/logging.c

18 #ifde‡
HAVE_CONFIG_H


19 
	~"c⁄fig.h
"

22 #ifde‡
HAVE_SYS_TYPES_H


23 
	~<sys/ty≥s.h
>

26 #ifde‡
HAVE_ARPA_INET_H


27 
	~<¨∑/öë.h
>

30 #ifde‡
HAVE_UNISTD_H


31 
	~<uni°d.h
>

34 #i‡
deföed
(
_WIN32
)

35 
	~"wö32/wö32_com∑t.h
"

38 
	~<°dio.h
>

39 
	~<°d¨g.h
>

40 
	~"iscsi.h
"

41 
	~"iscsi-¥iv©e.h
"

42 
	~"scsi-lowÀvñ.h
"

45 
	$iscsi_log_to_°dîr
(
Àvñ
, c⁄° *
mesßge
)

47 
	`Ârötf
(
°dîr
, "libiscsi:%d %s\n", 
Àvñ
, 
mesßge
);

48 
	}
}

51 
	$iscsi_£t_log_‚
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_log_‚
 
‚
)

53 
iscsi
->
log_‚
 = 
‚
;

54 
	}
}

57 
	$iscsi_log_mesßge
(
iscsi_c⁄ãxt
 *
iscsi
, 
Àvñ
, c⁄° *
f‹m©
, ...)

59 
va_li°
 
≠
;

60 
mesßge
[1024];

61 
ªt
;

63 i‡(
iscsi
->
log_‚
 =
NULL
) {

67 
	`va_°¨t
(
≠
, 
f‹m©
);

68 
ªt
 = 
	`v¢¥ötf
(
mesßge
, 1024, 
f‹m©
, 
≠
);

69 
	`va_íd
(
≠
);

71 i‡(
ªt
 < 0) {

75 i‡(
iscsi
->
èrgë_«me
[0]) {

76 
mesßge2
[1282];

78 
	`¢¥ötf
(
mesßge2
, 1282, "%†[%s]", 
mesßge
, 
iscsi
->
èrgë_«me
);

79 
iscsi
->
	`log_‚
(
Àvñ
, 
mesßge2
);

82 
iscsi
->
	`log_‚
(
Àvñ
, 
mesßge
);

83 
	}
}

	@lib/login.c

19 #i‚de‡
_GNU_SOURCE


20 
	#_GNU_SOURCE


	)

23 #ifde‡
HAVE_CONFIG_H


24 
	~"c⁄fig.h
"

27 #ifde‡
HAVE_SYS_TYPES_H


28 
	~<sys/ty≥s.h
>

31 #ifde‡
HAVE_ARPA_INET_H


32 
	~<¨∑/öë.h
>

35 #i‡
deföed
(
_WIN32
)

36 
	~<wösock2.h
>

37 
	~"wö32/wö32_com∑t.h
"

40 
	~<°dio.h
>

41 
	~<as£π.h
>

42 
	~<°dlib.h
>

43 
	~<°rög.h
>

44 
	~"iscsi.h
"

45 
	~"iscsi-¥iv©e.h
"

46 
	~"scsi-lowÀvñ.h
"

47 
	~"md5.h
"

48 #ifde‡
HAVE_LIBGCRYPT


49 
	~<g¸y±.h
>

53 
	$iscsi_logö_add_öôüt‹«me
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_pdu
 *
pdu
)

55 
°r
[
MAX_STRING_SIZE
+1];

58 i‡((
iscsi
->
cuºít_pha£
 !
ISCSI_PDU_LOGIN_CSG_OPNEG


59 && 
iscsi
->
£˙eg_pha£
 !
ISCSI_LOGIN_SECNEG_PHASE_OFFER_CHAP
)

60 || 
iscsi
->
£˙eg_pha£
 !
ISCSI_LOGIN_SECNEG_PHASE_OFFER_CHAP
) {

64 i‡(
	`¢¥ötf
(
°r
, 
MAX_STRING_SIZE
, "Inôüt‹Name=%s", 
iscsi
->
öôüt‹_«me
) == -1) {

65 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory:áprintf failed.");

68 i‡(
	`iscsi_pdu_add_d©a
(
iscsi
, 
pdu
, (*)
°r
, 
	`°æí
(str)+1)

70 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory:Öduádd data failed.");

74 
	}
}

77 
	$iscsi_logö_add_Æüs
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_pdu
 *
pdu
)

79 
°r
[
MAX_STRING_SIZE
+1];

82 i‡((
iscsi
->
cuºít_pha£
 !
ISCSI_PDU_LOGIN_CSG_OPNEG


83 && 
iscsi
->
£˙eg_pha£
 !
ISCSI_LOGIN_SECNEG_PHASE_OFFER_CHAP
)

84 || 
iscsi
->
£˙eg_pha£
 !
ISCSI_LOGIN_SECNEG_PHASE_OFFER_CHAP
) {

88 i‡(
	`¢¥ötf
(
°r
, 
MAX_STRING_SIZE
, "Inôüt‹Alüs=%s", 
iscsi
->
Æüs
) == -1) {

89 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory:áprintf failed.");

93 i‡(
	`iscsi_pdu_add_d©a
(
iscsi
, 
pdu
, (*)
°r
, 
	`°æí
(str)+1)

95 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory:Öduádd data failed.");

99 
	}
}

102 
	$iscsi_logö_add_èrgë«me
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_pdu
 *
pdu
)

104 
°r
[
MAX_STRING_SIZE
+1];

107 i‡((
iscsi
->
cuºít_pha£
 !
ISCSI_PDU_LOGIN_CSG_OPNEG


108 && 
iscsi
->
£˙eg_pha£
 !
ISCSI_LOGIN_SECNEG_PHASE_OFFER_CHAP
)

109 || 
iscsi
->
£˙eg_pha£
 !
ISCSI_LOGIN_SECNEG_PHASE_OFFER_CHAP
) {

113 i‡(!
iscsi
->
èrgë_«me
[0]) {

114 
	`iscsi_£t_îr‹
(
iscsi
, "TryingÇormal connect but "

119 i‡(
	`¢¥ötf
(
°r
, 
MAX_STRING_SIZE
, "T¨gëName=%s", 
iscsi
->
èrgë_«me
) == -1) {

120 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory:áprintf failed.");

124 i‡(
	`iscsi_pdu_add_d©a
(
iscsi
, 
pdu
, (*)
°r
, 
	`°æí
(str)+1)

126 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory:Öduádd data failed.");

130 
	}
}

133 
	$iscsi_logö_add_£ssi⁄ty≥
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_pdu
 *
pdu
)

135 
°r
[
MAX_STRING_SIZE
+1];

138 i‡((
iscsi
->
cuºít_pha£
 !
ISCSI_PDU_LOGIN_CSG_OPNEG


139 && 
iscsi
->
£˙eg_pha£
 !
ISCSI_LOGIN_SECNEG_PHASE_OFFER_CHAP
)

140 || 
iscsi
->
£˙eg_pha£
 !
ISCSI_LOGIN_SECNEG_PHASE_OFFER_CHAP
) {

144 
iscsi
->
£ssi⁄_ty≥
) {

145 
ISCSI_SESSION_DISCOVERY
:

146 
	`°∫˝y
(
°r
,"Sessi⁄Ty≥=Discovîy",
MAX_STRING_SIZE
);

148 
ISCSI_SESSION_NORMAL
:

149 
	`°∫˝y
(
°r
,"Sessi⁄Ty≥=N‹mÆ",
MAX_STRING_SIZE
);

152 
	`iscsi_£t_îr‹
(
iscsi
, "CanÇot handle sessions %d yet.",

153 
iscsi
->
£ssi⁄_ty≥
);

156 i‡(
	`iscsi_pdu_add_d©a
(
iscsi
, 
pdu
, (*)
°r
, 
	`°æí
(str)+1)

158 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory:Öduádd data failed.");

163 
	}
}

166 
	$iscsi_logö_add_hódîdige°
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_pdu
 *
pdu
)

168 
°r
[
MAX_STRING_SIZE
+1];

171 i‡(
iscsi
->
cuºít_pha£
 !
ISCSI_PDU_LOGIN_CSG_OPNEG
) {

175 
iscsi
->
w™t_hódî_dige°
) {

176 
ISCSI_HEADER_DIGEST_NONE
:

177 
	`°∫˝y
(
°r
,"HódîDige°=N⁄e",
MAX_STRING_SIZE
);

179 
ISCSI_HEADER_DIGEST_NONE_CRC32C
:

180 
	`°∫˝y
(
°r
,"HódîDige°=N⁄e,CRC32C",
MAX_STRING_SIZE
);

182 
ISCSI_HEADER_DIGEST_CRC32C_NONE
:

183 
	`°∫˝y
(
°r
,"HódîDige°=CRC32C,N⁄e",
MAX_STRING_SIZE
);

185 
ISCSI_HEADER_DIGEST_CRC32C
:

186 
	`°∫˝y
(
°r
,"HódîDige°=CRC32C",
MAX_STRING_SIZE
);

189 
	`iscsi_£t_îr‹
(
iscsi
, "invalid header digest value");

193 i‡(
	`iscsi_pdu_add_d©a
(
iscsi
, 
pdu
, (*)
°r
, 
	`°æí
(str)+1)

195 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory:Öduádd data failed.");

200 
	}
}

203 
	$iscsi_logö_add_d©adige°
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_pdu
 *
pdu
)

205 
°r
[
MAX_STRING_SIZE
+1];

208 i‡(
iscsi
->
cuºít_pha£
 !
ISCSI_PDU_LOGIN_CSG_OPNEG
) {

212 
	`°∫˝y
(
°r
,"D©aDige°=N⁄e",
MAX_STRING_SIZE
);

213 i‡(
	`iscsi_pdu_add_d©a
(
iscsi
, 
pdu
, (*)
°r
, 
	`°æí
(str)+1)

215 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory:Öduádd data failed.");

220 
	}
}

223 
	$iscsi_logö_add_öôüÃ2t
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_pdu
 *
pdu
)

225 
°r
[
MAX_STRING_SIZE
+1];

228 i‡(
iscsi
->
cuºít_pha£
 !
ISCSI_PDU_LOGIN_CSG_OPNEG
) {

232 i‡(
	`¢¥ötf
(
°r
, 
MAX_STRING_SIZE
, "InôülR2T=%s", 
iscsi
->
w™t_öôül_r2t
 =
ISCSI_INITIAL_R2T_NO
 ?

234 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory:áprintf failed.");

238 i‡(
	`iscsi_pdu_add_d©a
(
iscsi
, 
pdu
, (*)
°r
, 
	`°æí
(str)+1)

240 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory:Öduádd data failed.");

245 
	}
}

248 
	$iscsi_logö_add_immedüãd©a
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_pdu
 *
pdu
)

250 
°r
[
MAX_STRING_SIZE
+1];

253 i‡(
iscsi
->
cuºít_pha£
 !
ISCSI_PDU_LOGIN_CSG_OPNEG
) {

257 i‡(
	`¢¥ötf
(
°r
, 
MAX_STRING_SIZE
, "ImmedüãD©a=%s", 
iscsi
->
w™t_immedüã_d©a
 =
ISCSI_IMMEDIATE_DATA_NO
 ?

259 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory:áprintf failed.");

263 i‡(
	`iscsi_pdu_add_d©a
(
iscsi
, 
pdu
, (*)
°r
, 
	`°æí
(str)+1)

265 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory:Öduádd data failed.");

270 
	}
}

273 
	$iscsi_logö_add_maxbur°Àngth
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_pdu
 *
pdu
)

275 
°r
[
MAX_STRING_SIZE
+1];

278 i‡(
iscsi
->
cuºít_pha£
 !
ISCSI_PDU_LOGIN_CSG_OPNEG
) {

282 i‡(
	`¢¥ötf
(
°r
, 
MAX_STRING_SIZE
, "MaxBur°Lígth=%d", 
iscsi
->
max_bur°_Àngth
) == -1) {

283 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory:áprintf failed.");

287 i‡(
	`iscsi_pdu_add_d©a
(
iscsi
, 
pdu
, (*)
°r
, 
	`°æí
(str)+1)

289 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory:Öduádd data failed.");

293 
	}
}

296 
	$iscsi_logö_add_fú°bur°Àngth
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_pdu
 *
pdu
)

298 
°r
[
MAX_STRING_SIZE
+1];

301 i‡(
iscsi
->
cuºít_pha£
 !
ISCSI_PDU_LOGIN_CSG_OPNEG
) {

305 i‡(
	`¢¥ötf
(
°r
, 
MAX_STRING_SIZE
, "Fú°Bur°Lígth=%d", 
iscsi
->
fú°_bur°_Àngth
) == -1) {

306 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory:áprintf failed.");

310 i‡(
	`iscsi_pdu_add_d©a
(
iscsi
, 
pdu
, (*)
°r
, 
	`°æí
(str)+1)

312 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory:Öduádd data failed.");

316 
	}
}

319 
	$iscsi_logö_add_maxªcvd©a£gmíéígth
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_pdu
 *
pdu
)

321 
°r
[
MAX_STRING_SIZE
+1];

324 i‡(
iscsi
->
cuºít_pha£
 !
ISCSI_PDU_LOGIN_CSG_OPNEG
) {

328 i‡(
	`¢¥ötf
(
°r
, 
MAX_STRING_SIZE
, "MaxRecvD©aSegmítLígth=%d", 
iscsi
->
öôüt‹_max_ªcv_d©a_£gmít_Àngth
) == -1) {

329 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory:áprintf failed.");

333 i‡(
	`iscsi_pdu_add_d©a
(
iscsi
, 
pdu
, (*)
°r
, 
	`°æí
(str)+1)

335 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory:Öduádd data failed.");

339 
	}
}

342 
	$iscsi_logö_add_d©≠duö‹dî
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_pdu
 *
pdu
)

344 
°r
[
MAX_STRING_SIZE
+1];

347 i‡(
iscsi
->
cuºít_pha£
 !
ISCSI_PDU_LOGIN_CSG_OPNEG
) {

351 
	`°∫˝y
(
°r
,"D©aPDUInOrdî=Yes",
MAX_STRING_SIZE
);

352 i‡(
	`iscsi_pdu_add_d©a
(
iscsi
, 
pdu
, (*)
°r
, 
	`°æí
(str)+1)

354 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory:Öduádd data failed.");

359 
	}
}

362 
	$iscsi_logö_add_deÁu…time2waô
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_pdu
 *
pdu
)

364 
°r
[
MAX_STRING_SIZE
+1];

367 i‡(
iscsi
->
cuºít_pha£
 !
ISCSI_PDU_LOGIN_CSG_OPNEG
) {

371 
	`°∫˝y
(
°r
,"DeÁu…Time2Waô=2",
MAX_STRING_SIZE
);

372 i‡(
	`iscsi_pdu_add_d©a
(
iscsi
, 
pdu
, (*)
°r
, 
	`°æí
(str)+1)

374 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory:Öduádd data failed.");

379 
	}
}

382 
	$iscsi_logö_add_deÁu…time2ªèö
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_pdu
 *
pdu
)

384 
°r
[
MAX_STRING_SIZE
+1];

387 i‡(
iscsi
->
cuºít_pha£
 !
ISCSI_PDU_LOGIN_CSG_OPNEG
) {

391 
	`°∫˝y
(
°r
,"DeÁu…Time2Rëaö=0",
MAX_STRING_SIZE
);

392 i‡(
	`iscsi_pdu_add_d©a
(
iscsi
, 
pdu
, (*)
°r
, 
	`°æí
(str)+1)

394 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory:Öduádd data failed.");

399 
	}
}

402 
	$iscsi_logö_add_ifm¨kî
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_pdu
 *
pdu
)

404 
°r
[
MAX_STRING_SIZE
+1];

407 i‡(
iscsi
->
cuºít_pha£
 !
ISCSI_PDU_LOGIN_CSG_OPNEG
) {

411 
	`°∫˝y
(
°r
,"IFM¨kî=No",
MAX_STRING_SIZE
);

412 i‡(
	`iscsi_pdu_add_d©a
(
iscsi
, 
pdu
, (*)
°r
, 
	`°æí
(str)+1)

414 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory:Öduádd data failed.");

419 
	}
}

422 
	$iscsi_logö_add_ofm¨kî
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_pdu
 *
pdu
)

424 
°r
[
MAX_STRING_SIZE
+1];

427 i‡(
iscsi
->
cuºít_pha£
 !
ISCSI_PDU_LOGIN_CSG_OPNEG
) {

431 
	`°∫˝y
(
°r
,"OFM¨kî=No",
MAX_STRING_SIZE
);

432 i‡(
	`iscsi_pdu_add_d©a
(
iscsi
, 
pdu
, (*)
°r
, 
	`°æí
(str)+1)

434 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory:Öduádd data failed.");

439 
	}
}

442 
	$iscsi_logö_add_maxc⁄√˘i⁄s
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_pdu
 *
pdu
)

444 
°r
[
MAX_STRING_SIZE
+1];

447 i‡(
iscsi
->
cuºít_pha£
 !
ISCSI_PDU_LOGIN_CSG_OPNEG
) {

451 
	`°∫˝y
(
°r
,"MaxC⁄√˘i⁄s=1",
MAX_STRING_SIZE
);

452 i‡(
	`iscsi_pdu_add_d©a
(
iscsi
, 
pdu
, (*)
°r
, 
	`°æí
(str)+1)

454 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory:Öduádd data failed.");

459 
	}
}

462 
	$iscsi_logö_add_maxout°™dögr2t
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_pdu
 *
pdu
)

464 
°r
[
MAX_STRING_SIZE
+1];

467 i‡(
iscsi
->
cuºít_pha£
 !
ISCSI_PDU_LOGIN_CSG_OPNEG
) {

471 
	`°∫˝y
(
°r
,"MaxOut°™dögR2T=1",
MAX_STRING_SIZE
);

472 i‡(
	`iscsi_pdu_add_d©a
(
iscsi
, 
pdu
, (*)
°r
, 
	`°æí
(str)+1)

474 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory:Öduádd data failed.");

479 
	}
}

482 
	$iscsi_logö_add_îr‹ªcovîyÀvñ
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_pdu
 *
pdu
)

484 
°r
[
MAX_STRING_SIZE
+1];

487 i‡(
iscsi
->
cuºít_pha£
 !
ISCSI_PDU_LOGIN_CSG_OPNEG
) {

491 
	`°∫˝y
(
°r
,"Eº‹RecovîyLevñ=0",
MAX_STRING_SIZE
);

492 i‡(
	`iscsi_pdu_add_d©a
(
iscsi
, 
pdu
, (*)
°r
, 
	`°æí
(str)+1)

494 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory:Öduádd data failed.");

499 
	}
}

502 
	$iscsi_logö_add_d©a£quí˚ö‹dî
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_pdu
 *
pdu
)

504 
°r
[
MAX_STRING_SIZE
+1];

507 i‡(
iscsi
->
cuºít_pha£
 !
ISCSI_PDU_LOGIN_CSG_OPNEG
) {

511 
	`°∫˝y
(
°r
,"D©aSequí˚InOrdî=Yes",
MAX_STRING_SIZE
);

512 i‡(
	`iscsi_pdu_add_d©a
(
iscsi
, 
pdu
, (*)
°r
, 
	`°æí
(str)+1)

514 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory:Öduádd data failed.");

519 
	}
}

522 
	$iscsi_logö_add_authmëhod
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_pdu
 *
pdu
)

524 
°r
[
MAX_STRING_SIZE
+1];

526 i‡(
iscsi
->
cuºít_pha£
 !
ISCSI_PDU_LOGIN_CSG_SECNEG


527 || 
iscsi
->
£˙eg_pha£
 !
ISCSI_LOGIN_SECNEG_PHASE_OFFER_CHAP
) {

531 
	`°∫˝y
(
°r
,"AuthMëhod=CHAP,N⁄e",
MAX_STRING_SIZE
);

532 i‡(
	`iscsi_pdu_add_d©a
(
iscsi
, 
pdu
, (*)
°r
, 
	`°æí
(str)+1)

534 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory:Öduádd data failed.");

539 
	}
}

542 
	$iscsi_logö_add_authÆg‹ôhm
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_pdu
 *
pdu
)

544 
°r
[
MAX_STRING_SIZE
+1];

546 i‡(
iscsi
->
cuºít_pha£
 !
ISCSI_PDU_LOGIN_CSG_SECNEG


547 || 
iscsi
->
£˙eg_pha£
 !
ISCSI_LOGIN_SECNEG_PHASE_SELECT_ALGORITHM
) {

551 
	`°∫˝y
(
°r
,"CHAP_A=5",
MAX_STRING_SIZE
);

552 i‡(
	`iscsi_pdu_add_d©a
(
iscsi
, 
pdu
, (*)
°r
, 
	`°æí
(str)+1)

554 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory:Öduádd data failed.");

559 
	}
}

562 
	$iscsi_logö_add_ch≠_u£∫ame
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_pdu
 *
pdu
)

564 
°r
[
MAX_STRING_SIZE
+1];

566 i‡(
iscsi
->
cuºít_pha£
 !
ISCSI_PDU_LOGIN_CSG_SECNEG


567 || 
iscsi
->
£˙eg_pha£
 !
ISCSI_LOGIN_SECNEG_PHASE_SEND_RESPONSE
) {

571 
	`°∫˝y
(
°r
,"CHAP_N=",
MAX_STRING_SIZE
);

572 i‡(
	`iscsi_pdu_add_d©a
(
iscsi
, 
pdu
, (*)
°r
, 
	`°æí
(str))

574 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory:Öduádd data failed.");

577 i‡(
	`iscsi_pdu_add_d©a
(
iscsi
, 
pdu
,

578 (*)
iscsi
->
u£r
,

579 
	`°æí
(
iscsi
->
u£r
) +1) != 0) {

580 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory:Öduádd data "

586 
	}
}

589 
	$h2i
(
h
)

591 i‡(
h
 >= 'a' && h <= 'f') {

592  
h
 - 'a' + 10;

594 i‡(
h
 >= 'A' && h <= 'F') {

595  
h
 - 'A' + 10;

597  
h
 - '0';

598 
	}
}

601 
	$i2h
(
i
)

603 i‡(
i
 >= 10) {

604  
i
 - 10 + 'A';

607  
i
 + '0';

608 
	}
}

610 #i‚de‡
HAVE_LIBGCRYPT


611 
MD5C⁄ãxt
 *
	tg¸y_md_hd_t
;

612 
	#g¸y_md_wrôe
 
MD5Upd©e


	)

613 
	#GCRY_MD_MD5
 1

	)

615 
	$g¸y_md_›í
(
g¸y_md_hd_t
 *
hd
, 
Ægo
, 
Êags
)

617 
	`as£π
(
Ægo
 =
GCRY_MD_MD5
 && 
Êags
 == 0);

618 *
hd
 = 
	`mÆloc
((
MD5C⁄ãxt
));

619 i‡(*
hd
) {

620 
	`MD5Inô
(*
hd
);

622 
	}
}

624 
	$g¸y_md_putc
(
g¸y_md_hd_t
 
h
, 
c
)

626 
	`MD5Upd©e
(
h
, &
c
, 1);

627 
	}
}

629 *
	$g¸y_md_ªad
(
g¸y_md_hd_t
 
h
, 
Ægo
)

631 
dige°
[16];

632 
	`as£π
(
Ægo
 =0 ||álgÿ=
GCRY_MD_MD5
);

634 
	`MD5FöÆ
(
dige°
, 
h
);

635  
	`mem˝y
(
h
->
buf
, 
dige°
, (digest));

636 
	}
}

638 
	$g¸y_md_˛o£
(
g¸y_md_hd_t
 
h
)

640 
	`mem£t
(
h
, 0, (*h));

641 
	`‰ì
(
h
);

642 
	}
}

646 
	#TARGET_CHAP_C_SIZE
 32

	)

649 
	$iscsi_logö_add_ch≠_ª•⁄£
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_pdu
 *
pdu
)

651 
°r
[
MAX_STRING_SIZE
+1];

652 * 
°Ω
;

653 
c
, 
cc
[2];

654 
dige°
[
CHAP_R_SIZE
];

655 
g¸y_md_hd_t
 
˘x
;

656 
i
;

658 i‡(
iscsi
->
cuºít_pha£
 !
ISCSI_PDU_LOGIN_CSG_SECNEG


659 || 
iscsi
->
£˙eg_pha£
 !
ISCSI_LOGIN_SECNEG_PHASE_SEND_RESPONSE
) {

663 i‡(!
iscsi
->
ch≠_c
[0]) {

664 
	`iscsi_£t_îr‹
(
iscsi
, "No CHAP challenge found");

668 
	`g¸y_md_›í
(&
˘x
, 
GCRY_MD_MD5
, 0);

669 i‡(
˘x
 =
NULL
) {

670 
	`iscsi_£t_îr‹
(
iscsi
, "Cannot create MD5álgorithm");

673 
	`g¸y_md_putc
(
˘x
, 
iscsi
->
ch≠_i
);

674 
	`g¸y_md_wrôe
(
˘x
, (*)
iscsi
->
∑sswd
, 
	`°æí
(iscsi->passwd));

676 
°Ω
 = 
iscsi
->
ch≠_c
;

677 *
°Ω
 != 0) {

678 
c
 = (
	`h2i
(
°Ω
[0]) << 4) | h2i(strp[1]);

679 
°Ω
 += 2;

680 
	`g¸y_md_putc
(
˘x
, 
c
);

682 
	`mem˝y
(
dige°
, 
	`g¸y_md_ªad
(
˘x
, 0), (digest));

683 
	`g¸y_md_˛o£
(
˘x
);

685 
	`°∫˝y
(
°r
,"CHAP_R=0x",
MAX_STRING_SIZE
);

686 i‡(
	`iscsi_pdu_add_d©a
(
iscsi
, 
pdu
, (*)
°r
, 
	`°æí
(str))

688 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory:Öduádd data failed.");

692 
i
 = 0; i < 
CHAP_R_SIZE
; i++) {

693 
c
 = 
dige°
[
i
];

694 
cc
[0] = 
	`i2h
((
c
 >> 4)&0x0f);

695 
cc
[1] = 
	`i2h
((
c
 )&0x0f);

696 i‡(
	`iscsi_pdu_add_d©a
(
iscsi
, 
pdu
, &
cc
[0], 2) != 0) {

697 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory:Öduádd data "

703 
c
 = 0;

704 i‡(
	`iscsi_pdu_add_d©a
(
iscsi
, 
pdu
, &
c
, 1) != 0) {

705 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory:Öduádd data "

711 i‡(
iscsi
->
èrgë_u£r
[0]) {

712 
èrgë_ch≠_c
[
TARGET_CHAP_C_SIZE
];

714 
iscsi
->
èrgë_ch≠_i
++;

715 
	`¢¥ötf
(
°r
, 
MAX_STRING_SIZE
, "CHAP_I=%d",

716 
iscsi
->
èrgë_ch≠_i
);

717 i‡(
	`iscsi_pdu_add_d©a
(
iscsi
, 
pdu
, (*)
°r
,

718 
	`°æí
(
°r
) + 1) != 0) {

719 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory:Öduádd "

724 
i
 = 0; i < 
TARGET_CHAP_C_SIZE
; i++) {

725 
èrgë_ch≠_c
[
i
] = 
	`ønd
()&0xff;

727 
	`°∫˝y
(
°r
, "CHAP_C=0x", 
MAX_STRING_SIZE
);

728 i‡(
	`iscsi_pdu_add_d©a
(
iscsi
, 
pdu
, (*)
°r
,

729 
	`°æí
(
°r
)) != 0) {

730 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory:Öduádd data "

734 
i
 = 0; i < 
TARGET_CHAP_C_SIZE
; i++) {

735 
c
 = 
èrgë_ch≠_c
[
i
];

736 
cc
[0] = 
	`i2h
((
c
 >> 4)&0x0f);

737 
cc
[1] = 
	`i2h
((
c
 )&0x0f);

738 i‡(
	`iscsi_pdu_add_d©a
(
iscsi
, 
pdu
, &
cc
[0], 2) != 0) {

739 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory:Öduádd "

744 
c
 = 0;

745 i‡(
	`iscsi_pdu_add_d©a
(
iscsi
, 
pdu
, &
c
, 1) != 0) {

746 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory:Öduádd data "

751 
	`g¸y_md_›í
(&
˘x
, 
GCRY_MD_MD5
, 0);

752 i‡(
˘x
 =
NULL
) {

753 
	`iscsi_£t_îr‹
(
iscsi
, "Cannot create MD5álgorithm");

756 
	`g¸y_md_putc
(
˘x
, 
iscsi
->
èrgë_ch≠_i
);

757 
	`g¸y_md_wrôe
(
˘x
, (*)
iscsi
->
èrgë_∑sswd
,

758 
	`°æí
(
iscsi
->
èrgë_∑sswd
));

759 
	`g¸y_md_wrôe
(
˘x
, (*)
èrgë_ch≠_c
,

760 
TARGET_CHAP_C_SIZE
);

762 
	`mem˝y
(
iscsi
->
èrgë_ch≠_r
, 
	`g¸y_md_ªad
(
˘x
, 0),

763 (
iscsi
->
èrgë_ch≠_r
));

764 
	`g¸y_md_˛o£
(
˘x
);

768 
	}
}

771 
	$iscsi_logö_async
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_comm™d_cb
 
cb
,

772 *
¥iv©e_d©a
)

774 
iscsi_pdu
 *
pdu
;

775 
å™sô
;

777 i‡(
iscsi
->
logö_©ãm±s
++ > 10) {

778 
	`iscsi_£t_îr‹
(
iscsi
, "loginÅookÅoo manyÅries."

783 i‡(
iscsi
->
is_loggedö
 != 0) {

784 
	`iscsi_£t_îr‹
(
iscsi
, "TryingÅoÜogin whileálreadyÜogged "

789 
iscsi
->
£ssi⁄_ty≥
) {

790 
ISCSI_SESSION_DISCOVERY
:

791 
ISCSI_SESSION_NORMAL
:

794 
	`iscsi_£t_îr‹
(
iscsi
, "tryingÅoÜogin without setting "

800 i‡(!
iscsi
->
cuºít_pha£
 && !iscsi->
£˙eg_pha£
) {

801 
iscsi
->
ôt
 = (
uöt32_t
Ë
	`ønd
();

802 
iscsi
->
cmd¢
 = (
uöt32_t
Ë
	`ønd
();

803 
iscsi
->
expcmd¢
 = iscsi->
maxcmd¢
 = iscsi->
mö_cmd¢_waôög
 = iscsi->
cmd¢
;

806 
pdu
 = 
	`iscsi_Æloˇã_pdu
(
iscsi
,

807 
ISCSI_PDU_LOGIN_REQUEST
,

808 
ISCSI_PDU_LOGIN_RESPONSE
,

809 
iscsi
->
ôt
,

810 
ISCSI_PDU_DROP_ON_RECONNECT
);

811 i‡(
pdu
 =
NULL
) {

812 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅoállocate "

818 
	`iscsi_pdu_£t_immedüã
(
pdu
);

821 
	`iscsi_pdu_£t_cmd¢
(
pdu
, 
iscsi
->
cmd¢
);

823 i‡(!
iscsi
->
u£r
[0]) {

824 
iscsi
->
cuºít_pha£
 = 
ISCSI_PDU_LOGIN_CSG_OPNEG
;

827 i‡(
iscsi
->
cuºít_pha£
 =
ISCSI_PDU_LOGIN_CSG_SECNEG
) {

828 
iscsi
->
√xt_pha£
 = 
ISCSI_PDU_LOGIN_NSG_OPNEG
;

830 i‡(
iscsi
->
cuºít_pha£
 =
ISCSI_PDU_LOGIN_CSG_OPNEG
) {

831 
iscsi
->
√xt_pha£
 = 
ISCSI_PDU_LOGIN_NSG_FF
;

834 
å™sô
 = 0;

835 i‡(
iscsi
->
cuºít_pha£
 =
ISCSI_PDU_LOGIN_CSG_OPNEG
) {

836 
å™sô
 = 
ISCSI_PDU_LOGIN_TRANSIT
;

838 i‡(
iscsi
->
cuºít_pha£
 =
ISCSI_PDU_LOGIN_CSG_SECNEG
) {

839 i‡(
iscsi
->
£˙eg_pha£
 =
ISCSI_LOGIN_SECNEG_PHASE_OFFER_CHAP
) {

840 
å™sô
 = 
ISCSI_PDU_LOGIN_TRANSIT
;

842 i‡(
iscsi
->
£˙eg_pha£
 =
ISCSI_LOGIN_SECNEG_PHASE_SEND_RESPONSE
) {

843 
å™sô
 = 
ISCSI_PDU_LOGIN_TRANSIT
;

848 
	`iscsi_pdu_£t_pduÊags
(
pdu
, 
å™sô


849 | 
iscsi
->
cuºít_pha£


850 | 
iscsi
->
√xt_pha£
);

854 i‡(
	`iscsi_logö_add_öôüt‹«me
(
iscsi
, 
pdu
) != 0) {

855 
iscsi
->
drv
->
	`‰ì_pdu
(iscsi, 
pdu
);

860 i‡(
iscsi
->
Æüs
[0]) {

861 i‡(
	`iscsi_logö_add_Æüs
(
iscsi
, 
pdu
) != 0) {

862 
iscsi
->
drv
->
	`‰ì_pdu
(iscsi, 
pdu
);

868 i‡(
iscsi
->
£ssi⁄_ty≥
 =
ISCSI_SESSION_NORMAL
) {

869 i‡(
	`iscsi_logö_add_èrgë«me
(
iscsi
, 
pdu
) != 0) {

870 
iscsi
->
drv
->
	`‰ì_pdu
(iscsi, 
pdu
);

876 i‡(
	`iscsi_logö_add_£ssi⁄ty≥
(
iscsi
, 
pdu
) != 0) {

877 
iscsi
->
drv
->
	`‰ì_pdu
(iscsi, 
pdu
);

882 i‡(
	`iscsi_logö_add_hódîdige°
(
iscsi
, 
pdu
) != 0) {

883 
iscsi
->
drv
->
	`‰ì_pdu
(iscsi, 
pdu
);

888 i‡(
	`iscsi_logö_add_authmëhod
(
iscsi
, 
pdu
) != 0) {

889 
iscsi
->
drv
->
	`‰ì_pdu
(iscsi, 
pdu
);

894 i‡(
	`iscsi_logö_add_authÆg‹ôhm
(
iscsi
, 
pdu
) != 0) {

895 
iscsi
->
drv
->
	`‰ì_pdu
(iscsi, 
pdu
);

900 i‡(
	`iscsi_logö_add_ch≠_u£∫ame
(
iscsi
, 
pdu
) != 0) {

901 
iscsi
->
drv
->
	`‰ì_pdu
(iscsi, 
pdu
);

906 i‡(
	`iscsi_logö_add_ch≠_ª•⁄£
(
iscsi
, 
pdu
) != 0) {

907 
iscsi
->
drv
->
	`‰ì_pdu
(iscsi, 
pdu
);

912 i‡(
	`iscsi_logö_add_d©adige°
(
iscsi
, 
pdu
) != 0) {

913 
iscsi
->
drv
->
	`‰ì_pdu
(iscsi, 
pdu
);

918 i‡(
	`iscsi_logö_add_öôüÃ2t
(
iscsi
, 
pdu
) != 0) {

919 
iscsi
->
drv
->
	`‰ì_pdu
(iscsi, 
pdu
);

924 i‡(
	`iscsi_logö_add_immedüãd©a
(
iscsi
, 
pdu
) != 0) {

925 
iscsi
->
drv
->
	`‰ì_pdu
(iscsi, 
pdu
);

930 i‡(
	`iscsi_logö_add_maxbur°Àngth
(
iscsi
, 
pdu
) != 0) {

931 
iscsi
->
drv
->
	`‰ì_pdu
(iscsi, 
pdu
);

936 i‡(
	`iscsi_logö_add_fú°bur°Àngth
(
iscsi
, 
pdu
) != 0) {

937 
iscsi
->
drv
->
	`‰ì_pdu
(iscsi, 
pdu
);

942 i‡(
	`iscsi_logö_add_deÁu…time2waô
(
iscsi
, 
pdu
) != 0) {

943 
iscsi
->
drv
->
	`‰ì_pdu
(iscsi, 
pdu
);

948 i‡(
	`iscsi_logö_add_deÁu…time2ªèö
(
iscsi
, 
pdu
) != 0) {

949 
iscsi
->
drv
->
	`‰ì_pdu
(iscsi, 
pdu
);

954 i‡(
	`iscsi_logö_add_maxout°™dögr2t
(
iscsi
, 
pdu
) != 0) {

955 
iscsi
->
drv
->
	`‰ì_pdu
(iscsi, 
pdu
);

960 i‡(
	`iscsi_logö_add_îr‹ªcovîyÀvñ
(
iscsi
, 
pdu
) != 0) {

961 
iscsi
->
drv
->
	`‰ì_pdu
(iscsi, 
pdu
);

966 i‡(
	`iscsi_logö_add_ifm¨kî
(
iscsi
, 
pdu
) != 0) {

967 
iscsi
->
drv
->
	`‰ì_pdu
(iscsi, 
pdu
);

972 i‡(
	`iscsi_logö_add_ofm¨kî
(
iscsi
, 
pdu
) != 0) {

973 
iscsi
->
drv
->
	`‰ì_pdu
(iscsi, 
pdu
);

978 i‡(
	`iscsi_logö_add_maxc⁄√˘i⁄s
(
iscsi
, 
pdu
) != 0) {

979 
iscsi
->
drv
->
	`‰ì_pdu
(iscsi, 
pdu
);

984 i‡(
	`iscsi_logö_add_maxªcvd©a£gmíéígth
(
iscsi
, 
pdu
) != 0) {

985 
iscsi
->
drv
->
	`‰ì_pdu
(iscsi, 
pdu
);

990 i‡(
	`iscsi_logö_add_d©≠duö‹dî
(
iscsi
, 
pdu
) != 0) {

991 
iscsi
->
drv
->
	`‰ì_pdu
(iscsi, 
pdu
);

996 i‡(
	`iscsi_logö_add_d©a£quí˚ö‹dî
(
iscsi
, 
pdu
) != 0) {

997 
iscsi
->
drv
->
	`‰ì_pdu
(iscsi, 
pdu
);

1002 
pdu
->
ˇŒback
 = 
cb
;

1003 
pdu
->
¥iv©e_d©a
 =Örivate_data;

1005 i‡(
	`iscsi_queue_pdu
(
iscsi
, 
pdu
) != 0) {

1006 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: failedÅo queue iscsi "

1008 
iscsi
->
drv
->
	`‰ì_pdu
(iscsi, 
pdu
);

1013 
	}
}

1015 c⁄° *
	$logö_îr‹_°r
(
°©us
)

1017 
°©us
) {

1038 
	}
}

1042 
	$iscsi_¥o˚ss_logö_ª∂y
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_pdu
 *
pdu
,

1043 
iscsi_ö_pdu
 *
ö
)

1045 
uöt32_t
 
°©us
;

1046 *
±r
 = (*)
ö
->
d©a
;

1047 
size
 = 
ö
->
d©a_pos
;

1048 
mu°_have_ch≠_n
 = 0;

1049 
mu°_have_ch≠_r
 = 0;

1051 
°©us
 = 
	`scsi_gë_uöt16
(&
ö
->
hdr
[36]);

1054 i‡(!(
°©us
 >> 8)) {

1055 i‡(!
iscsi
->
cuºít_pha£
 && !iscsi->
£˙eg_pha£
) {

1056 
iscsi
->
°©¢
 = 
	`scsi_gë_uöt32
(&
ö
->
hdr
[24]);

1063 i‡((
ö
->
hdr
[1] & 
ISCSI_PDU_LOGIN_TRANSIT
)

1064 && (
ö
->
hdr
[1] & 
ISCSI_PDU_LOGIN_CSG_FF
Ë=
ISCSI_PDU_LOGIN_CSG_SECNEG


1065 && 
iscsi
->
èrgë_u£r
[0]) {

1066 
mu°_have_ch≠_n
 = 1;

1067 
mu°_have_ch≠_r
 = 1;

1076 
size
 > 0) {

1077 *
íd
;

1078 
Àn
;

1080 
íd
 = 
	`memchr
(
±r
, 0, 
size
);

1081 i‡(
íd
 =
NULL
) {

1082 
	`iscsi_£t_îr‹
(
iscsi
, "NULÇot foundáfter offset %ld "

1084 ()((*)
±r
 - 
ö
->
d©a
));

1085 i‡(
pdu
->
ˇŒback
) {

1086 
pdu
->
	`ˇŒback
(
iscsi
, 
SCSI_STATUS_ERROR
, 
NULL
,

1087 
pdu
->
¥iv©e_d©a
);

1092 
Àn
 = 
íd
 - 
±r
;

1093 i‡(
Àn
 == 0) {

1098 i‡(!
	`°∫cmp
(
±r
, "TargetAddress=", 14)) {

1099 
	`°∫˝y
(
iscsi
->
èrgë_addªss
,
±r
+14,
MAX_STRING_SIZE
);

1102 i‡(!
	`°∫cmp
(
±r
, "HeaderDigest=", 13)) {

1103 i‡(!
	`°rcmp
(
±r
 + 13, "CRC32C")) {

1104 
iscsi
->
w™t_hódî_dige°


1105 
ISCSI_HEADER_DIGEST_CRC32C
;

1107 
iscsi
->
w™t_hódî_dige°


1108 
ISCSI_HEADER_DIGEST_NONE
;

1112 i‡(!
	`°∫cmp
(
±r
, "FirstBurstLength=", 17)) {

1113 
iscsi
->
fú°_bur°_Àngth
 = 
	`°πﬁ
(
±r
 + 17, 
NULL
, 10);

1116 i‡(!
	`°∫cmp
(
±r
, "InitialR2T=", 11)) {

1117 i‡(!
	`°rcmp
(
±r
 + 11, "No")) {

1118 
iscsi
->
u£_öôül_r2t
 = 
ISCSI_INITIAL_R2T_NO
;

1120 
iscsi
->
u£_öôül_r2t
 = 
ISCSI_INITIAL_R2T_YES
;

1124 i‡(!
	`°∫cmp
(
±r
, "ImmediateData=", 14)) {

1125 i‡(!
	`°rcmp
(
±r
 + 14, "No")) {

1126 
iscsi
->
u£_immedüã_d©a
 = 
ISCSI_IMMEDIATE_DATA_NO
;

1127 } i‡(
iscsi
->
w™t_immedüã_d©a
 =
ISCSI_IMMEDIATE_DATA_NO
) {

1131 
iscsi
->
u£_immedüã_d©a
 = 
ISCSI_IMMEDIATE_DATA_NO
;

1134 
iscsi
->
u£_immedüã_d©a
 = 
ISCSI_IMMEDIATE_DATA_YES
;

1138 i‡(!
	`°∫cmp
(
±r
, "MaxBurstLength=", 15)) {

1139 
iscsi
->
max_bur°_Àngth
 = 
	`°πﬁ
(
±r
 + 15, 
NULL
, 10);

1142 i‡(!
	`°∫cmp
(
±r
, "MaxRecvDataSegmentLength=", 25)) {

1143 
iscsi
->
èrgë_max_ªcv_d©a_£gmít_Àngth
 = 
	`°πﬁ
(
±r
 + 25, 
NULL
, 10);

1146 i‡(!
	`°∫cmp
(
±r
, "AuthMethod=", 11)) {

1147 i‡(!
	`°rcmp
(
±r
 + 11, "CHAP")) {

1148 
iscsi
->
£˙eg_pha£
 = 
ISCSI_LOGIN_SECNEG_PHASE_SELECT_ALGORITHM
;

1152 i‡(!
	`°∫cmp
(
±r
, "CHAP_A=", 7)) {

1153 
iscsi
->
ch≠_a
 = 
	`©oi
(
±r
+7);

1154 
iscsi
->
£˙eg_pha£
 = 
ISCSI_LOGIN_SECNEG_PHASE_SEND_RESPONSE
;

1157 i‡(!
	`°∫cmp
(
±r
, "CHAP_I=", 7)) {

1158 
iscsi
->
ch≠_i
 = 
	`©oi
(
±r
+7);

1159 
iscsi
->
£˙eg_pha£
 = 
ISCSI_LOGIN_SECNEG_PHASE_SEND_RESPONSE
;

1162 i‡(!
	`°∫cmp
(
±r
, "CHAP_C=0x", 9)) {

1163 i‡(
Àn
-9 > 
MAX_CHAP_C_LENGTH
) {

1164 
	`iscsi_£t_îr‹
(
iscsi
, "WrongÜength of CHAP_CÑeceived from"

1165 "Å¨gë (%d, max: %d)", 
Àn
-9, 
MAX_CHAP_C_LENGTH
);

1166 i‡(
pdu
->
ˇŒback
) {

1167 
pdu
->
	`ˇŒback
(
iscsi
, 
SCSI_STATUS_ERROR
, 
NULL
,

1168 
pdu
->
¥iv©e_d©a
);

1172 *
iscsi
->
ch≠_c
 = '\0';

1173 
	`°∫ˇt
(
iscsi
->
ch≠_c
,
±r
+9,
Àn
-9);

1174 
iscsi
->
£˙eg_pha£
 = 
ISCSI_LOGIN_SECNEG_PHASE_SEND_RESPONSE
;

1177 i‡(!
	`°∫cmp
(
±r
, "CHAP_N=", 7)) {

1178 i‡(
	`°rcmp
(
iscsi
->
èrgë_u£r
, 
±r
 + 7)) {

1179 
	`iscsi_£t_îr‹
(
iscsi
, "FailedÅoÜog inÅo"

1181 "Ñe˚ived: %s", 
±r
 + 7);

1182 i‡(
pdu
->
ˇŒback
) {

1183 
pdu
->
	`ˇŒback
(
iscsi
, 
SCSI_STATUS_ERROR
, 
NULL
,

1184 
pdu
->
¥iv©e_d©a
);

1188 
mu°_have_ch≠_n
 = 0;

1191 i‡(!
	`°∫cmp
(
±r
, "CHAP_R=0x", 9)) {

1192 
i
;

1194 i‡(
Àn
 !9 + 2 * 
CHAP_R_SIZE
) {

1195 
	`iscsi_£t_îr‹
(
iscsi
, "Wrong size of CHAP_R"

1197 i‡(
pdu
->
ˇŒback
) {

1198 
pdu
->
	`ˇŒback
(
iscsi
, 
SCSI_STATUS_ERROR
, 
NULL
,

1199 
pdu
->
¥iv©e_d©a
);

1203 
i
 = 0; i < 
CHAP_R_SIZE
; i++) {

1204 
c
;

1205 
c
 = ((
	`h2i
(
±r
[9 + 2 * 
i
]) << 4) | h2i(ptr[9 + 2 * i + 1]));

1206 i‡(
c
 !
iscsi
->
èrgë_ch≠_r
[
i
]) {

1207 
	`iscsi_£t_îr‹
(
iscsi
, "Authentication "

1210 i‡(
pdu
->
ˇŒback
) {

1211 
pdu
->
	`ˇŒback
(
iscsi
, 
SCSI_STATUS_ERROR
,

1212 
NULL
, 
pdu
->
¥iv©e_d©a
);

1217 
mu°_have_ch≠_r
 = 0;

1220 
	`ISCSI_LOG
(
iscsi
, 6, "T¨gëLogöRïly: %s", 
±r
);

1222 
±r
 +
Àn
 + 1;

1223 
size
 -
Àn
 + 1;

1226 i‡(
°©us
 =
SCSI_STATUS_REDIRECT
 && 
iscsi
->
èrgë_addªss
[0]) {

1227 
	`ISCSI_LOG
(
iscsi
, 2, "èrgëÑeque°†ªdúe˘Åÿ%s",iscsi->
èrgë_addªss
);

1228 i‡(
pdu
->
ˇŒback
) {

1229 
pdu
->
	`ˇŒback
(
iscsi
, 
SCSI_STATUS_REDIRECT
, 
NULL
,

1230 
pdu
->
¥iv©e_d©a
);

1235 i‡(
°©us
 != 0) {

1236 
	`iscsi_£t_îr‹
(
iscsi
, "FailedÅoÜog inÅoÅarget. Status: %s(%d)",

1237 
	`logö_îr‹_°r
(
°©us
), status);

1238 i‡(
pdu
->
ˇŒback
) {

1239 
pdu
->
	`ˇŒback
(
iscsi
, 
SCSI_STATUS_ERROR
, 
NULL
,

1240 
pdu
->
¥iv©e_d©a
);

1245 i‡(
mu°_have_ch≠_n
) {

1246 
	`iscsi_£t_îr‹
(
iscsi
, "FailedÅoÜog inÅoÅarget. "

1248 i‡(
pdu
->
ˇŒback
) {

1249 
pdu
->
	`ˇŒback
(
iscsi
, 
SCSI_STATUS_ERROR
, 
NULL
,

1250 
pdu
->
¥iv©e_d©a
);

1255 i‡(
mu°_have_ch≠_r
) {

1256 
	`iscsi_£t_îr‹
(
iscsi
, "FailedÅoÜog inÅoÅarget. "

1258 i‡(
pdu
->
ˇŒback
) {

1259 
pdu
->
	`ˇŒback
(
iscsi
, 
SCSI_STATUS_ERROR
, 
NULL
,

1260 
pdu
->
¥iv©e_d©a
);

1265 i‡(
ö
->
hdr
[1] & 
ISCSI_PDU_LOGIN_TRANSIT
) {

1266 
iscsi
->
cuºít_pha£
 = (
ö
->
hdr
[1] & 
ISCSI_PDU_LOGIN_NSG_FF
) << 2;

1269 i‡((
ö
->
hdr
[1] & 
ISCSI_PDU_LOGIN_TRANSIT
)

1270 && (
ö
->
hdr
[1] & 
ISCSI_PDU_LOGIN_NSG_FF
) == ISCSI_PDU_LOGIN_NSG_FF) {

1271 
iscsi
->
is_loggedö
 = 1;

1272 
	`iscsi_ôt_po°_ö¸emít
(
iscsi
);

1273 
iscsi
->
hódî_dige°
 = iscsi->
w™t_hódî_dige°
;

1274 
	`ISCSI_LOG
(
iscsi
, 2, "login successful");

1275 
pdu
->
	`ˇŒback
(
iscsi
, 
SCSI_STATUS_GOOD
, 
NULL
,Ödu->
¥iv©e_d©a
);

1277 i‡(
	`iscsi_logö_async
(
iscsi
, 
pdu
->
ˇŒback
,Ödu->
¥iv©e_d©a
) != 0) {

1278 
	`iscsi_£t_îr‹
(
iscsi
, "FailedÅo send continuationÜoginÖdu");

1279 i‡(
pdu
->
ˇŒback
) {

1280 
pdu
->
	`ˇŒback
(
iscsi
, 
SCSI_STATUS_ERROR
, 
NULL
,Ödu->
¥iv©e_d©a
);

1286 
	}
}

1289 
	$iscsi_logout_async
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_comm™d_cb
 
cb
,

1290 *
¥iv©e_d©a
)

1292 
iscsi_pdu
 *
pdu
;

1294 
iscsi
->
logö_©ãm±s
 = 0;

1296 i‡(
iscsi
->
is_loggedö
 == 0) {

1297 
	`iscsi_£t_îr‹
(
iscsi
, "TryingÅoÜogout whileÇotÜogged in.");

1301 
pdu
 = 
	`iscsi_Æloˇã_pdu
(
iscsi
,

1302 
ISCSI_PDU_LOGOUT_REQUEST
,

1303 
ISCSI_PDU_LOGOUT_RESPONSE
,

1304 
	`iscsi_ôt_po°_ö¸emít
(
iscsi
),

1305 
ISCSI_PDU_DROP_ON_RECONNECT
|
ISCSI_PDU_CORK_WHEN_SENT
);

1306 i‡(
pdu
 =
NULL
) {

1307 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: FailedÅoállocate "

1313 
	`iscsi_pdu_£t_immedüã
(
pdu
);

1316 
	`iscsi_pdu_£t_pduÊags
(
pdu
, 0x80);

1319 
	`iscsi_pdu_£t_cmd¢
(
pdu
, 
iscsi
->
cmd¢
);

1321 
pdu
->
ˇŒback
 = 
cb
;

1322 
pdu
->
¥iv©e_d©a
 =Örivate_data;

1324 i‡(
	`iscsi_queue_pdu
(
iscsi
, 
pdu
) != 0) {

1325 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: failedÅo queue iscsi "

1327 
iscsi
->
drv
->
	`‰ì_pdu
(iscsi, 
pdu
);

1332 
	}
}

1335 
	$iscsi_¥o˚ss_logout_ª∂y
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_pdu
 *
pdu
,

1336 
iscsi_ö_pdu
 *
ö
 
_U_
)

1338 
iscsi
->
is_loggedö
 = 0;

1339 
	`ISCSI_LOG
(
iscsi
, 2, "logout successful");

1340 i‡(
pdu
->
ˇŒback
) {

1341 
pdu
->
	`ˇŒback
(
iscsi
, 
SCSI_STATUS_GOOD
, 
NULL
,Ödu->
¥iv©e_d©a
);

1345 
	}
}

1348 
	$iscsi_£t_£ssi⁄_ty≥
(
iscsi_c⁄ãxt
 *
iscsi
,

1349 
iscsi_£ssi⁄_ty≥
 
£ssi⁄_ty≥
)

1351 i‡(
iscsi
->
is_loggedö
) {

1352 
	`iscsi_£t_îr‹
(
iscsi
, "tryingÅo set sessionÅype while "

1357 
iscsi
->
£ssi⁄_ty≥
 = session_type;

1360 
	}
}

	@lib/md5.c

23 #ifde‡
HAVE_CONFIG_H


24 
	~"c⁄fig.h
"

27 #ifde‡
HAVE_SYS_TYPES_H


28 
	~<sys/ty≥s.h
>

31 
	~"md5.h
"

33 #ifde‡
WORDS_BIGENDIAN


35 
	$byãSw≠
(
UWORD32
 *
buf
, 
w‹ds
)

37 
md5byã
 *
p
 = (md5byã *)
buf
;

40 *
buf
++ = (
UWORD32
)(()
p
[3] << 8 |Ö[2]) << 16 |

41 (()
p
[1] << 8 |Ö[0]);

42 
p
 += 4;

43 } --
w‹ds
);

44 
	}
}

46 
	#byãSw≠
(
buf
,
w‹ds
)

	)

54 
	$MD5Inô
(
MD5C⁄ãxt
 *
˘x
)

56 
˘x
->
buf
[0] = 0x67452301;

57 
˘x
->
buf
[1] = 0xefcdab89;

58 
˘x
->
buf
[2] = 0x98badcfe;

59 
˘x
->
buf
[3] = 0x10325476;

61 
˘x
->
byãs
[0] = 0;

62 
˘x
->
byãs
[1] = 0;

63 
	}
}

70 
	$MD5Upd©e
(
MD5C⁄ãxt
 *
˘x
, 
md5byã
 c⁄° *
buf
, 
Àn
)

72 
UWORD32
 
t
;

76 
t
 = 
˘x
->
byãs
[0];

77 i‡((
˘x
->
byãs
[0] = 
t
 + 
Àn
) <Å)

78 
˘x
->
byãs
[1]++;

80 
t
 = 64 - (t & 0x3f);

81 i‡(
t
 > 
Àn
) {

82 
	`mem˝y
((
md5byã
 *)
˘x
->
ö
 + 64 - 
t
, 
buf
, 
Àn
);

86 
	`mem˝y
((
md5byã
 *)
˘x
->
ö
 + 64 - 
t
, 
buf
,Å);

87 
	`byãSw≠
(
˘x
->
ö
, 16);

88 
	`MD5Tønsf‹m
(
˘x
->
buf
, ctx->
ö
);

89 
buf
 +
t
;

90 
Àn
 -
t
;

93 
Àn
 >= 64) {

94 
	`mem˝y
(
˘x
->
ö
, 
buf
, 64);

95 
	`byãSw≠
(
˘x
->
ö
, 16);

96 
	`MD5Tønsf‹m
(
˘x
->
buf
, ctx->
ö
);

97 
buf
 += 64;

98 
Àn
 -= 64;

102 
	`mem˝y
(
˘x
->
ö
, 
buf
, 
Àn
);

103 
	}
}

110 
	$MD5FöÆ
(
md5byã
 
dige°
[16], 
MD5C⁄ãxt
 *
˘x
)

112 
cou¡
 = 
˘x
->
byãs
[0] & 0x3f;

113 
md5byã
 *
p
 = (md5byã *)
˘x
->
ö
 + 
cou¡
;

116 *
p
++ = 0x80;

119 
cou¡
 = 56 - 1 - count;

121 i‡(
cou¡
 < 0) {

122 
	`mem£t
(
p
, 0, 
cou¡
 + 8);

123 
	`byãSw≠
(
˘x
->
ö
, 16);

124 
	`MD5Tønsf‹m
(
˘x
->
buf
, ctx->
ö
);

125 
p
 = (
md5byã
 *)
˘x
->
ö
;

126 
cou¡
 = 56;

128 
	`mem£t
(
p
, 0, 
cou¡
);

129 
	`byãSw≠
(
˘x
->
ö
, 14);

132 
˘x
->
ö
[14] = ctx->
byãs
[0] << 3;

133 
˘x
->
ö
[15] = ctx->
byãs
[1] << 3 | ctx->bytes[0] >> 29;

134 
	`MD5Tønsf‹m
(
˘x
->
buf
, ctx->
ö
);

136 
	`byãSw≠
(
˘x
->
buf
, 4);

137 
	`mem˝y
(
dige°
, 
˘x
->
buf
, 16);

138 
	`mem£t
(
˘x
, 0, (*ctx));

139 
	}
}

141 #i‚de‡
ASM_MD5


146 
	#F1
(
x
, 
y
, 
z
Ë(z ^ (x & (y ^ z)))

	)

147 
	#F2
(
x
, 
y
, 
z
Ë
	`F1
(z, x, y)

	)

148 
	#F3
(
x
, 
y
, 
z
Ë(x ^ y ^ z)

	)

149 
	#F4
(
x
, 
y
, 
z
Ë(y ^ (x | ~z))

	)

152 
	#MD5STEP
(
f
,
w
,
x
,
y
,
z
,
ö
,
s
) \

153 (
w
 +
	`f
(
x
,
y
,
z
Ë+ 
ö
, w = (w<<
s
 | w>>(32-s)Ë+ x)

	)

161 
	$MD5Tønsf‹m
(
UWORD32
 
buf
[4], UWORD32 c⁄° 
ö
[16])

163 
UWORD32
 
a
, 
b
, 
c
, 
d
;

165 
a
 = 
buf
[0];

166 
b
 = 
buf
[1];

167 
c
 = 
buf
[2];

168 
d
 = 
buf
[3];

170 
	`MD5STEP
(
F1
, 
a
, 
b
, 
c
, 
d
, 
ö
[0] + 0xd76aa478, 7);

171 
	`MD5STEP
(
F1
, 
d
, 
a
, 
b
, 
c
, 
ö
[1] + 0xe8c7b756, 12);

172 
	`MD5STEP
(
F1
, 
c
, 
d
, 
a
, 
b
, 
ö
[2] + 0x242070db, 17);

173 
	`MD5STEP
(
F1
, 
b
, 
c
, 
d
, 
a
, 
ö
[3] + 0xc1bdceee, 22);

174 
	`MD5STEP
(
F1
, 
a
, 
b
, 
c
, 
d
, 
ö
[4] + 0xf57c0faf, 7);

175 
	`MD5STEP
(
F1
, 
d
, 
a
, 
b
, 
c
, 
ö
[5] + 0x4787c62a, 12);

176 
	`MD5STEP
(
F1
, 
c
, 
d
, 
a
, 
b
, 
ö
[6] + 0xa8304613, 17);

177 
	`MD5STEP
(
F1
, 
b
, 
c
, 
d
, 
a
, 
ö
[7] + 0xfd469501, 22);

178 
	`MD5STEP
(
F1
, 
a
, 
b
, 
c
, 
d
, 
ö
[8] + 0x698098d8, 7);

179 
	`MD5STEP
(
F1
, 
d
, 
a
, 
b
, 
c
, 
ö
[9] + 0x8b44f7af, 12);

180 
	`MD5STEP
(
F1
, 
c
, 
d
, 
a
, 
b
, 
ö
[10] + 0xffff5bb1, 17);

181 
	`MD5STEP
(
F1
, 
b
, 
c
, 
d
, 
a
, 
ö
[11] + 0x895cd7be, 22);

182 
	`MD5STEP
(
F1
, 
a
, 
b
, 
c
, 
d
, 
ö
[12] + 0x6b901122, 7);

183 
	`MD5STEP
(
F1
, 
d
, 
a
, 
b
, 
c
, 
ö
[13] + 0xfd987193, 12);

184 
	`MD5STEP
(
F1
, 
c
, 
d
, 
a
, 
b
, 
ö
[14] + 0xa679438e, 17);

185 
	`MD5STEP
(
F1
, 
b
, 
c
, 
d
, 
a
, 
ö
[15] + 0x49b40821, 22);

187 
	`MD5STEP
(
F2
, 
a
, 
b
, 
c
, 
d
, 
ö
[1] + 0xf61e2562, 5);

188 
	`MD5STEP
(
F2
, 
d
, 
a
, 
b
, 
c
, 
ö
[6] + 0xc040b340, 9);

189 
	`MD5STEP
(
F2
, 
c
, 
d
, 
a
, 
b
, 
ö
[11] + 0x265e5a51, 14);

190 
	`MD5STEP
(
F2
, 
b
, 
c
, 
d
, 
a
, 
ö
[0] + 0xe9b6c7aa, 20);

191 
	`MD5STEP
(
F2
, 
a
, 
b
, 
c
, 
d
, 
ö
[5] + 0xd62f105d, 5);

192 
	`MD5STEP
(
F2
, 
d
, 
a
, 
b
, 
c
, 
ö
[10] + 0x02441453, 9);

193 
	`MD5STEP
(
F2
, 
c
, 
d
, 
a
, 
b
, 
ö
[15] + 0xd8a1e681, 14);

194 
	`MD5STEP
(
F2
, 
b
, 
c
, 
d
, 
a
, 
ö
[4] + 0xe7d3fbc8, 20);

195 
	`MD5STEP
(
F2
, 
a
, 
b
, 
c
, 
d
, 
ö
[9] + 0x21e1cde6, 5);

196 
	`MD5STEP
(
F2
, 
d
, 
a
, 
b
, 
c
, 
ö
[14] + 0xc33707d6, 9);

197 
	`MD5STEP
(
F2
, 
c
, 
d
, 
a
, 
b
, 
ö
[3] + 0xf4d50d87, 14);

198 
	`MD5STEP
(
F2
, 
b
, 
c
, 
d
, 
a
, 
ö
[8] + 0x455a14ed, 20);

199 
	`MD5STEP
(
F2
, 
a
, 
b
, 
c
, 
d
, 
ö
[13] + 0xa9e3e905, 5);

200 
	`MD5STEP
(
F2
, 
d
, 
a
, 
b
, 
c
, 
ö
[2] + 0xfcefa3f8, 9);

201 
	`MD5STEP
(
F2
, 
c
, 
d
, 
a
, 
b
, 
ö
[7] + 0x676f02d9, 14);

202 
	`MD5STEP
(
F2
, 
b
, 
c
, 
d
, 
a
, 
ö
[12] + 0x8d2a4c8a, 20);

204 
	`MD5STEP
(
F3
, 
a
, 
b
, 
c
, 
d
, 
ö
[5] + 0xfffa3942, 4);

205 
	`MD5STEP
(
F3
, 
d
, 
a
, 
b
, 
c
, 
ö
[8] + 0x8771f681, 11);

206 
	`MD5STEP
(
F3
, 
c
, 
d
, 
a
, 
b
, 
ö
[11] + 0x6d9d6122, 16);

207 
	`MD5STEP
(
F3
, 
b
, 
c
, 
d
, 
a
, 
ö
[14] + 0xfde5380c, 23);

208 
	`MD5STEP
(
F3
, 
a
, 
b
, 
c
, 
d
, 
ö
[1] + 0xa4beea44, 4);

209 
	`MD5STEP
(
F3
, 
d
, 
a
, 
b
, 
c
, 
ö
[4] + 0x4bdecfa9, 11);

210 
	`MD5STEP
(
F3
, 
c
, 
d
, 
a
, 
b
, 
ö
[7] + 0xf6bb4b60, 16);

211 
	`MD5STEP
(
F3
, 
b
, 
c
, 
d
, 
a
, 
ö
[10] + 0xbebfbc70, 23);

212 
	`MD5STEP
(
F3
, 
a
, 
b
, 
c
, 
d
, 
ö
[13] + 0x289b7ec6, 4);

213 
	`MD5STEP
(
F3
, 
d
, 
a
, 
b
, 
c
, 
ö
[0] + 0xeaa127fa, 11);

214 
	`MD5STEP
(
F3
, 
c
, 
d
, 
a
, 
b
, 
ö
[3] + 0xd4ef3085, 16);

215 
	`MD5STEP
(
F3
, 
b
, 
c
, 
d
, 
a
, 
ö
[6] + 0x04881d05, 23);

216 
	`MD5STEP
(
F3
, 
a
, 
b
, 
c
, 
d
, 
ö
[9] + 0xd9d4d039, 4);

217 
	`MD5STEP
(
F3
, 
d
, 
a
, 
b
, 
c
, 
ö
[12] + 0xe6db99e5, 11);

218 
	`MD5STEP
(
F3
, 
c
, 
d
, 
a
, 
b
, 
ö
[15] + 0x1fa27cf8, 16);

219 
	`MD5STEP
(
F3
, 
b
, 
c
, 
d
, 
a
, 
ö
[2] + 0xc4ac5665, 23);

221 
	`MD5STEP
(
F4
, 
a
, 
b
, 
c
, 
d
, 
ö
[0] + 0xf4292244, 6);

222 
	`MD5STEP
(
F4
, 
d
, 
a
, 
b
, 
c
, 
ö
[7] + 0x432aff97, 10);

223 
	`MD5STEP
(
F4
, 
c
, 
d
, 
a
, 
b
, 
ö
[14] + 0xab9423a7, 15);

224 
	`MD5STEP
(
F4
, 
b
, 
c
, 
d
, 
a
, 
ö
[5] + 0xfc93a039, 21);

225 
	`MD5STEP
(
F4
, 
a
, 
b
, 
c
, 
d
, 
ö
[12] + 0x655b59c3, 6);

226 
	`MD5STEP
(
F4
, 
d
, 
a
, 
b
, 
c
, 
ö
[3] + 0x8f0ccc92, 10);

227 
	`MD5STEP
(
F4
, 
c
, 
d
, 
a
, 
b
, 
ö
[10] + 0xffeff47d, 15);

228 
	`MD5STEP
(
F4
, 
b
, 
c
, 
d
, 
a
, 
ö
[1] + 0x85845dd1, 21);

229 
	`MD5STEP
(
F4
, 
a
, 
b
, 
c
, 
d
, 
ö
[8] + 0x6fa87e4f, 6);

230 
	`MD5STEP
(
F4
, 
d
, 
a
, 
b
, 
c
, 
ö
[15] + 0xfe2ce6e0, 10);

231 
	`MD5STEP
(
F4
, 
c
, 
d
, 
a
, 
b
, 
ö
[6] + 0xa3014314, 15);

232 
	`MD5STEP
(
F4
, 
b
, 
c
, 
d
, 
a
, 
ö
[13] + 0x4e0811a1, 21);

233 
	`MD5STEP
(
F4
, 
a
, 
b
, 
c
, 
d
, 
ö
[4] + 0xf7537e82, 6);

234 
	`MD5STEP
(
F4
, 
d
, 
a
, 
b
, 
c
, 
ö
[11] + 0xbd3af235, 10);

235 
	`MD5STEP
(
F4
, 
c
, 
d
, 
a
, 
b
, 
ö
[2] + 0x2ad7d2bb, 15);

236 
	`MD5STEP
(
F4
, 
b
, 
c
, 
d
, 
a
, 
ö
[9] + 0xeb86d391, 21);

238 
buf
[0] +
a
;

239 
buf
[1] +
b
;

240 
buf
[2] +
c
;

241 
buf
[3] +
d
;

242 
	}
}

	@lib/nop.c

19 #i‡
deföed
(
_WIN32
)

21 
	~<uni°d.h
>

24 
	~<°dio.h
>

25 
	~<°dlib.h
>

26 
	~"iscsi.h
"

27 
	~"iscsi-¥iv©e.h
"

30 
	$iscsi_n›_out_async
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_comm™d_cb
 
cb
,

31 *
d©a
, 
Àn
, *
¥iv©e_d©a
)

33 
iscsi_pdu
 *
pdu
;

35 i‡(
iscsi
->
ﬁd_iscsi
 || iscsi->
≥ndög_ªc⁄√˘
) {

36 
	`ISCSI_LOG
(
iscsi
, (iscsi->
n›s_ö_Êight
 > 1) ? 1 : 6,

38 
iscsi
->
n›s_ö_Êight
, iscsi->
maxcmd¢
, iscsi->
expcmd¢
);

42 i‡(
iscsi
->
is_loggedö
 == 0) {

43 
	`iscsi_£t_îr‹
(
iscsi
, "tryingÅo sendÇop-out whileÇot "

48 
pdu
 = 
	`iscsi_Æloˇã_pdu
(
iscsi
,

49 
ISCSI_PDU_NOP_OUT
,

50 
ISCSI_PDU_NOP_IN
,

51 
	`iscsi_ôt_po°_ö¸emít
(
iscsi
),

52 
ISCSI_PDU_DROP_ON_RECONNECT
);

53 i‡(
pdu
 =
NULL
) {

54 
	`iscsi_£t_îr‹
(
iscsi
, "FailedÅoállocateÇop-outÖdu");

59 
	`iscsi_pdu_£t_pduÊags
(
pdu
, 0x80);

62 
	`iscsi_pdu_£t_ât
(
pdu
, 0xffffffff);

65 
	`iscsi_pdu_£t_lun
(
pdu
, 0);

68 
	`iscsi_pdu_£t_cmd¢
(
pdu
, 
iscsi
->
cmd¢
++);

70 
pdu
->
ˇŒback
 = 
cb
;

71 
pdu
->
¥iv©e_d©a
 =Örivate_data;

73 i‡(
d©a
 !
NULL
 && 
Àn
 > 0) {

74 i‡(
	`iscsi_pdu_add_d©a
(
iscsi
, 
pdu
, 
d©a
, 
Àn
) != 0) {

75 
	`iscsi_£t_îr‹
(
iscsi
, "FailedÅoádd outdataÅoÇop-out");

76 
iscsi
->
drv
->
	`‰ì_pdu
(iscsi, 
pdu
);

81 i‡(
	`iscsi_queue_pdu
(
iscsi
, 
pdu
) != 0) {

82 
	`iscsi_£t_îr‹
(
iscsi
, "failedÅo queue iscsiÇop-outÖdu");

83 
iscsi
->
drv
->
	`‰ì_pdu
(iscsi, 
pdu
);

87 
iscsi
->
n›s_ö_Êight
++;

88 
	`ISCSI_LOG
(
iscsi
, (iscsi->
n›s_ö_Êight
 > 1) ? 1 : 6,

90 
iscsi
->
n›s_ö_Êight
, 
pdu
->
cmd¢
,Ödu->
ôt
, 0xffffffff, iscsi->
maxcmd¢
, iscsi->
expcmd¢
);

93 
	}
}

96 
	$iscsi_£nd_èrgë_n›_out
(
iscsi_c⁄ãxt
 *
iscsi
, 
uöt32_t
 
ât
, uöt32_à
lun
)

98 
iscsi_pdu
 *
pdu
;

100 
pdu
 = 
	`iscsi_Æloˇã_pdu
(
iscsi
,

101 
ISCSI_PDU_NOP_OUT
,

102 
ISCSI_PDU_NO_PDU
,

104 
ISCSI_PDU_DROP_ON_RECONNECT
|
ISCSI_PDU_DELETE_WHEN_SENT
);

105 i‡(
pdu
 =
NULL
) {

106 
	`iscsi_£t_îr‹
(
iscsi
, "FailedÅoállocateÇop-outÖdu");

111 
	`iscsi_pdu_£t_immedüã
(
pdu
);

114 
	`iscsi_pdu_£t_pduÊags
(
pdu
, 0x80);

117 
	`iscsi_pdu_£t_ât
(
pdu
, 
ât
);

120 
	`iscsi_pdu_£t_lun
(
pdu
, 
lun
);

123 
	`iscsi_pdu_£t_cmd¢
(
pdu
, 
iscsi
->
cmd¢
);

125 i‡(
	`iscsi_queue_pdu
(
iscsi
, 
pdu
) != 0) {

126 
	`iscsi_£t_îr‹
(
iscsi
, "failedÅo queue iscsiÇop-outÖdu");

127 
iscsi
->
drv
->
	`‰ì_pdu
(iscsi, 
pdu
);

131 
	`ISCSI_LOG
(
iscsi
, (iscsi->
n›s_ö_Êight
 > 1) ? 1 : 6,

133 
iscsi
->
n›s_ö_Êight
, 
pdu
->
cmd¢
, 0xffffffff, 
ât
, 
lun
, iscsi->
maxcmd¢
, iscsi->
expcmd¢
);

136 
	}
}

139 
	$iscsi_¥o˚ss_n›_out_ª∂y
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_pdu
 *
pdu
,

140 
iscsi_ö_pdu
 *
ö
)

142 
iscsi_d©a
 
d©a
;

144 
	`ISCSI_LOG
(
iscsi
, (iscsi->
n›s_ö_Êight
 > 1) ? 1 : 6,

146 
pdu
->
ôt
, 0xffffffff, 
iscsi
->
maxcmd¢
, iscsi->
expcmd¢
, iscsi->
°©¢
);

148 i‡(
iscsi
->
waôpdu
->
cmd¢
 =iscsi->
mö_cmd¢_waôög
) {

149 
	`ISCSI_LOG
(
iscsi
, 2, "OldestÉlement in waitqueue is unchanged sinceÜast NOP-In (iscsi->min_cmdsn_waiting %08x)",

150 
iscsi
->
mö_cmd¢_waôög
);

151 i‡(
	`gëív
("LIBISCSI_IGNORE_NOP_OUT_ON_STUCK_WAITPDU_QUEUE"Ë=
NULL
) {

152 
iscsi
->
n›s_ö_Êight
 = 0;

155 
iscsi
->
n›s_ö_Êight
 = 0;

157 
iscsi
->
mö_cmd¢_waôög
 = iscsi->
waôpdu
->
cmd¢
;

159 i‡(
pdu
->
ˇŒback
 =
NULL
) {

163 
d©a
.d©®
NULL
;

164 
d©a
.
size
 = 0;

166 i‡(
ö
->
d©a_pos
) {

167 
d©a
.d©®
ö
->data;

168 
d©a
.
size
 = 
ö
->
d©a_pos
;

171 
pdu
->
	`ˇŒback
(
iscsi
, 
SCSI_STATUS_GOOD
, &
d©a
,Ödu->
¥iv©e_d©a
);

174 
	}
}

176 
	$iscsi_gë_n›s_ö_Êight
(
iscsi_c⁄ãxt
 *
iscsi
)

178  
iscsi
->
n›s_ö_Êight
;

179 
	}
}

	@lib/pdu.c

18 #ifde‡
HAVE_CONFIG_H


19 
	~"c⁄fig.h
"

22 #ifde‡
HAVE_SYS_TYPES_H


23 
	~<sys/ty≥s.h
>

26 #ifde‡
HAVE_ARPA_INET_H


27 
	~<¨∑/öë.h
>

30 #ifde‡
HAVE_INTTYPES_H


31 
	~<öây≥s.h
>

33 
	#PRIu64
 "Œu"

	)

34 
	#PRIx32
 "x"

	)

37 #i‡
deföed
(
_WIN32
)

38 
	~<wösock2.h
>

39 
	~<ws2t˝ù.h
>

40 
	~"wö32/wö32_com∑t.h
"

42 
	~<°rögs.h
>

45 
	~<°dio.h
>

46 
	~<°dlib.h
>

47 
	~<°rög.h
>

48 
	~"iscsi.h
"

49 
	~"iscsi-¥iv©e.h
"

50 
	~"scsi-lowÀvñ.h
"

51 
	~"¶i°.h
"

61 
	$iscsi_£rül32_com∑ª
(
uöt32_t
 
s1
, uöt32_à
s2
) {

62 i‡(
s1
 =
s2
)  0;

63 i‡(
s1
 < 
s2
 && s2-s1 < (
uöt32_t
)1<<31)  -1;

64 i‡(
s1
 > 
s2
 && s1-s2 < (
uöt32_t
)1<<31)  1;

65 i‡(
s1
 > 
s2
 && s1-s2 > (
uöt32_t
)1<<31)  -1;

66 i‡(
s1
 < 
s2
 && s2-s1 > (
uöt32_t
)1<<31)  1;

69 
	}
}

71 
uöt32_t


72 
	$iscsi_ôt_po°_ö¸emít
(
iscsi_c⁄ãxt
 *
iscsi
) {

73 
uöt32_t
 
ﬁd_ôt
 = 
iscsi
->
ôt
;

74 
iscsi
->
ôt
++;

76 i‡(
iscsi
->
ôt
 == 0xffffffff) {

77 
iscsi
->
ôt
 = 0;

79  
ﬁd_ôt
;

80 
	}
}

82 
	$iscsi_dump_pdu_hódî
(
iscsi_c⁄ãxt
 *
iscsi
, *
d©a
) {

83 
dump
[
ISCSI_RAW_HEADER_SIZE
*3+1]={0};

84 
i
;

85 
i
=0;i<
ISCSI_RAW_HEADER_SIZE
;i++) {

86 
	`¢¥ötf
(&
dump
[
i
 * 3], 4, " %02x", 
d©a
[i]);

88 
	`ISCSI_LOG
(
iscsi
, 2, "PDU hódî:%s", 
dump
);

89 
	}
}

91 
iscsi_pdu
*

92 
	$iscsi_t˝_√w_pdu
(
iscsi_c⁄ãxt
 *
iscsi
, 
size_t
 
size
)

94 
iscsi_pdu
 *
pdu
;

96 
pdu
 = 
	`iscsi_szmÆloc
(
iscsi
, 
size
);

98  
pdu
;

99 
	}
}

101 
iscsi_pdu
 *

102 
	$iscsi_Æloˇã_pdu
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_›code
 
›code
,

103 
iscsi_›code
 
ª•⁄£_›code
, 
uöt32_t
 
ôt
,

104 
uöt32_t
 
Êags
)

106 
iscsi_pdu
 *
pdu
;

108 
pdu
 = 
iscsi
->
drv
->
	`√w_pdu
(iscsi, (
iscsi_pdu
));

109 i‡(
pdu
 =
NULL
) {

110 
	`iscsi_£t_îr‹
(
iscsi
, "failedÅoállocateÖdu");

111  
NULL
;

114 
pdu
->
outd©a
.
size
 = 
	`ISCSI_HEADER_SIZE
(
iscsi
->
hódî_dige°
);

115 
pdu
->
outd©a
.
d©a
 = 
	`iscsi_szmÆloc
(
iscsi
,Ödu->outd©a.
size
);

117 i‡(
pdu
->
outd©a
.
d©a
 =
NULL
) {

118 
	`iscsi_£t_îr‹
(
iscsi
, "failedÅoállocateÖdu header");

119 
	`iscsi_‰ì
(
iscsi
, 
pdu
);

120  
NULL
;

124 
pdu
->
outd©a
.
d©a
[0] = 
›code
;

125 
pdu
->
ª•⁄£_›code
 =Ñesponse_opcode;

128 i‡(
›code
 =
ISCSI_PDU_LOGIN_REQUEST
) {

129 
	`mem˝y
(&
pdu
->
outd©a
.
d©a
[8], &
iscsi
->
isid
[0], 6);

133 
	`iscsi_pdu_£t_ôt
(
pdu
, 
ôt
);

134 
pdu
->
ôt
 = itt;

137 
pdu
->
Êags
 = flags;

139  
pdu
;

140 
	}
}

143 
	$iscsi_t˝_‰ì_pdu
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_pdu
 *
pdu
)

145 i‡(
pdu
 =
NULL
) {

146 
	`iscsi_£t_îr‹
(
iscsi
, "tryingÅo free NULLÖdu");

150 i‡(
pdu
->
outd©a
.
size
 <
iscsi
->
smÆloc_size
) {

151 
	`iscsi_s‰ì
(
iscsi
, 
pdu
->
outd©a
.
d©a
);

153 
	`iscsi_‰ì
(
iscsi
, 
pdu
->
outd©a
.
d©a
);

155 
pdu
->
outd©a
.
d©a
 = 
NULL
;

157 i‡(
pdu
->
öd©a
.
size
 <
iscsi
->
smÆloc_size
) {

158 
	`iscsi_s‰ì
(
iscsi
, 
pdu
->
öd©a
.
d©a
);

160 
	`iscsi_‰ì
(
iscsi
, 
pdu
->
öd©a
.
d©a
);

162 
pdu
->
öd©a
.
d©a
 = 
NULL
;

164 i‡(
iscsi
->
outqueue_cuºít
 =
pdu
) {

165 
iscsi
->
outqueue_cuºít
 = 
NULL
;

168 
	`iscsi_s‰ì
(
iscsi
, 
pdu
);

169 
	}
}

172 
	$iscsi_add_d©a
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_d©a
 *
d©a
,

173 *
d±r
, 
dsize
, 
pduÆignmít
)

175 
size_t
 
Àn
, 
Æig√d
;

177 i‡(
dsize
 == 0) {

178 
	`iscsi_£t_îr‹
(
iscsi
, "TryingÅoáppend zero size dataÅo "

183 
Àn
 = 
d©a
->
size
 + 
dsize
;

185 
Æig√d
 = 
Àn
;

186 i‡(
pduÆignmít
) {

187 
Æig√d
 = (aligned+3)&0xfffffffc;

190 i‡(
d©a
->
size
 == 0) {

191 i‡(
Æig√d
 <
iscsi
->
smÆloc_size
) {

192 
d©a
->d©®
	`iscsi_szmÆloc
(
iscsi
, 
Æig√d
);

194 
d©a
->d©®
	`iscsi_mÆloc
(
iscsi
, 
Æig√d
);

197 i‡(
Æig√d
 > 
iscsi
->
smÆloc_size
) {

198 
d©a
->d©®
	`iscsi_ªÆloc
(
iscsi
, d©a->d©a, 
Æig√d
);

201 i‡(
d©a
->d©®=
NULL
) {

202 
	`iscsi_£t_îr‹
(
iscsi
, "failedÅoállocate buffer for %d "

203 "byãs", (Ë
Àn
);

207 
	`mem˝y
(
d©a
->d©®+ d©a->
size
, 
d±r
, 
dsize
);

208 
d©a
->
size
 +
dsize
;

210 i‡(
Àn
 !
Æig√d
) {

212 
	`mem£t
(
d©a
->d©®+ 
Àn
, 0, 
Æig√d
 -Üen);

216 
	}
}

219 
	$iscsi_pdu_add_d©a
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_pdu
 *
pdu
,

220 *
d±r
, 
dsize
)

222 i‡(
pdu
 =
NULL
) {

223 
	`iscsi_£t_îr‹
(
iscsi
, "tryingÅoádd dataÅo NULLÖdu");

226 i‡(
dsize
 == 0) {

227 
	`iscsi_£t_îr‹
(
iscsi
, "TryingÅoáppend zero size dataÅo "

232 i‡(
	`iscsi_add_d©a
(
iscsi
, &
pdu
->
outd©a
, 
d±r
, 
dsize
, 1) != 0) {

233 
	`iscsi_£t_îr‹
(
iscsi
, "failedÅoádd dataÅoÖdu buffer");

238 
	`scsi_£t_uöt32
(&
pdu
->
outd©a
.
d©a
[4],Ödu->outd©a.
size


239 - 
	`ISCSI_HEADER_SIZE
(
iscsi
->
hódî_dige°
));

242 
	}
}

245 
	$iscsi_gë_pdu_d©a_size
(c⁄° *
hdr
)

247 
size
;

249 
size
 = 
	`scsi_gë_uöt32
(&
hdr
[4]) & 0x00ffffff;

251  
size
;

252 
	}
}

255 
	$iscsi_gë_pdu_∑ddög_size
(c⁄° *
hdr
)

257 
d©a_size
, 
∑dded_size
;

259 
d©a_size
 = 
	`scsi_gë_uöt32
(&
hdr
[4]) & 0x00ffffff;

260 
∑dded_size
 = (
d©a_size
+3) & 0xfffffffc;

262  
∑dded_size
 - 
d©a_size
;

263 
	}
}

265 
	eiscsi_ªje˘_ªas⁄
 {

266 
	mISCSI_REJECT_RESERVED
 = 0x01,

267 
	mISCSI_REJECT_DATA_DIGEST_ERROR
 = 0x02,

268 
	mISCSI_REJECT_SNACK_REJECT
 = 0x03,

269 
	mISCSI_REJECT_PROTOCOL_ERROR
 = 0x04,

270 
	mISCSI_REJECT_COMMAND_NOT_SUPPORTED
 = 0x05,

271 
	mISCSI_REJECT_IMMEDIATE_COMMAND_REJECT
 = 0x06,

272 
	mISCSI_REJECT_TASK_IN_PROCESS
 = 0x07,

273 
	mISCSI_REJECT_INVALID_DATA_ACK
 = 0x08,

274 
	mISCSI_REJECT_INVALID_PDU_FIELD
 = 0x09,

275 
	mISCSI_REJECT_LONG_OPERATION_REJECT
 = 0x0a,

276 
	mISCSI_REJECT_NEGOTIATION_RESET
 = 0x0b,

277 
	mISCSI_REJECT_WAITING_FOR_LOGOUT
 = 0x0c

280 c⁄° *
	$iscsi_ªje˘_ªas⁄_°r
(
iscsi_ªje˘_ªas⁄
 
ªas⁄
)

282 
ªas⁄
) {

283 
ISCSI_REJECT_RESERVED
:

285 
ISCSI_REJECT_DATA_DIGEST_ERROR
:

287 
ISCSI_REJECT_SNACK_REJECT
:

289 
ISCSI_REJECT_PROTOCOL_ERROR
:

291 
ISCSI_REJECT_COMMAND_NOT_SUPPORTED
:

293 
ISCSI_REJECT_IMMEDIATE_COMMAND_REJECT
:

295 
ISCSI_REJECT_TASK_IN_PROCESS
:

297 
ISCSI_REJECT_INVALID_DATA_ACK
:

299 
ISCSI_REJECT_INVALID_PDU_FIELD
:

301 
ISCSI_REJECT_LONG_OPERATION_REJECT
:

303 
ISCSI_REJECT_NEGOTIATION_RESET
:

305 
ISCSI_REJECT_WAITING_FOR_LOGOUT
:

310 
	}
}

312 
	$iscsi_¥o˚ss_èrgë_n›_ö
(
iscsi_c⁄ãxt
 *
iscsi
,

313 
iscsi_ö_pdu
 *
ö
)

315 
uöt32_t
 
ât
 = 
	`scsi_gë_uöt32
(&
ö
->
hdr
[20]);

316 
uöt32_t
 
ôt
 = 
	`scsi_gë_uöt32
(&
ö
->
hdr
[16]);

317 
uöt32_t
 
lun
 = 
	`scsi_gë_uöt16
(&
ö
->
hdr
[8]);

319 
	`ISCSI_LOG
(
iscsi
, (iscsi->
n›s_ö_Êight
 > 1) ? 1 : 6,

321 
ôt
, 
ât
, 
lun
, 
iscsi
->
maxcmd¢
, iscsi->
expcmd¢
, iscsi->
°©¢
);

324 i‡(
ât
 == 0xffffffff) {

328 
	`iscsi_£nd_èrgë_n›_out
(
iscsi
, 
ât
, 
lun
);

331 
	}
}

333 
	$iscsi_ªc⁄√˘_a·î_logout
(
iscsi_c⁄ãxt
 *
iscsi
, 
°©us
,

334 *
comm™d_d©a
 
_U_
, *
›aque
 _U_)

336 i‡(
°©us
) {

337 
	`ISCSI_LOG
(
iscsi
, 1, "logouàÁûed: %s", 
	`iscsi_gë_îr‹
(iscsi));

339 
iscsi
->
≥ndög_ªc⁄√˘
 = 1;

340 
	}
}

342 
	$iscsi_¥o˚ss_ªje˘
(
iscsi_c⁄ãxt
 *
iscsi
,

343 
iscsi_ö_pdu
 *
ö
)

345 
size
 = 
ö
->
d©a_pos
;

346 
uöt32_t
 
ôt
;

347 
iscsi_pdu
 *
pdu
;

348 
uöt8_t
 
ªas⁄
 = 
ö
->
hdr
[2];

350 i‡(
size
 < 
ISCSI_RAW_HEADER_SIZE
) {

351 
	`iscsi_£t_îr‹
(
iscsi
, "size of REJECTÖayload isÅoo small."

353 
ISCSI_RAW_HEADER_SIZE
, ()
size
);

357 i‡(
ªas⁄
 =
ISCSI_REJECT_WAITING_FOR_LOGOUT
) {

358 
	`ISCSI_LOG
(
iscsi
, 1, "èrgëÑeje˘†ªque° wôhÑós⁄: %s", 
	`iscsi_ªje˘_ªas⁄_°r
(
ªas⁄
));

359 
	`iscsi_logout_async
(
iscsi
, 
iscsi_ªc⁄√˘_a·î_logout
, 
NULL
);

363 
	`iscsi_£t_îr‹
(
iscsi
, "Reque° wa†ªje˘ed wôhÑós⁄: 0x%02x (%s)", 
ªas⁄
, 
	`iscsi_ªje˘_ªas⁄_°r
(reason));

365 
ôt
 = 
	`scsi_gë_uöt32
(&
ö
->
d©a
[16]);

367 
	`iscsi_dump_pdu_hódî
(
iscsi
, 
ö
->
d©a
);

369 
pdu
 = 
iscsi
->
waôpdu
;Ödu;Ödu =Ödu->
√xt
) {

370 i‡(
pdu
->
ôt
 == itt) {

375 i‡(
pdu
 =
NULL
) {

376 
	`iscsi_£t_îr‹
(
iscsi
, "CanÇot match REJECT with"

378 
ôt
);

382 i‡(
pdu
->
ˇŒback
) {

383 
pdu
->
	`ˇŒback
(
iscsi
, 
SCSI_STATUS_ERROR
, 
NULL
,

384 
pdu
->
¥iv©e_d©a
);

387 
	`ISCSI_LIST_REMOVE
(&
iscsi
->
waôpdu
, 
pdu
);

388 
iscsi
->
drv
->
	`‰ì_pdu
(iscsi, 
pdu
);

390 
	}
}

392 
	$iscsi_¥o˚ss_pdu_£rüls
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_ö_pdu
 *
ö
)

394 
uöt32_t
 
ôt
 = 
	`scsi_gë_uöt32
(&
ö
->
hdr
[16]);

395 
uöt32_t
 
°©¢
 = 
	`scsi_gë_uöt32
(&
ö
->
hdr
[24]);

396 
uöt32_t
 
maxcmd¢
 = 
	`scsi_gë_uöt32
(&
ö
->
hdr
[32]);

397 
uöt32_t
 
expcmd¢
 = 
	`scsi_gë_uöt32
(&
ö
->
hdr
[28]);

398 
uöt16_t
 
°©us
 = 
	`scsi_gë_uöt16
(&
ö
->
hdr
[36]);

399 
uöt8_t
 
Êags
 = 
ö
->
hdr
[1];

400 
iscsi_›code
 
›code
 = 
ö
->
hdr
[0] & 0x3f;

403 i‡(
›code
 =
ISCSI_PDU_LOGIN_RESPONSE
 && (
°©us
 >> 8)) {

407 i‡(
	`iscsi_£rül32_com∑ª
(
maxcmd¢
, 
iscsi
->maxcmdsn) > 0) {

408 
iscsi
->
maxcmd¢
 = maxcmdsn;

410 i‡(
	`iscsi_£rül32_com∑ª
(
expcmd¢
, 
iscsi
->expcmdsn) > 0) {

411 
iscsi
->
expcmd¢
 =Éxpcmdsn;

415 i‡(
›code
 =
ISCSI_PDU_DATA_IN
 &&

416 !(
Êags
 & 
ISCSI_PDU_DATA_CONTAINS_STATUS
)) {

420 i‡(
ôt
 == 0xffffffff) {

422 
°©¢
--;

424 i‡(
	`iscsi_£rül32_com∑ª
(
°©¢
, 
iscsi
->statsn) > 0) {

425 
iscsi
->
°©¢
 = statsn;

427 
	}
}

430 
	$iscsi_¥o˚ss_pdu
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_ö_pdu
 *
ö
)

432 
uöt32_t
 
ôt
 = 
	`scsi_gë_uöt32
(&
ö
->
hdr
[16]);

433 
iscsi_›code
 
›code
 = 
ö
->
hdr
[0] & 0x3f;

434 
uöt8_t
 
ah¶í
 = 
ö
->
hdr
[4];

435 
iscsi_pdu
 *
pdu
;

438 i‡(
iscsi
->
hódî_dige°
 !
ISCSI_HEADER_DIGEST_NONE
) {

439 
uöt32_t
 
¸c
, 
¸c_rcvd
 = 0;

440 
¸c
 = 
	`¸c32c
(
ö
->
hdr
, 
ISCSI_RAW_HEADER_SIZE
);

441 
¸c_rcvd
 |
ö
->
hdr
[
ISCSI_RAW_HEADER_SIZE
+0];

442 
¸c_rcvd
 |
ö
->
hdr
[
ISCSI_RAW_HEADER_SIZE
+1] << 8;

443 
¸c_rcvd
 |
ö
->
hdr
[
ISCSI_RAW_HEADER_SIZE
+2] << 16;

444 
¸c_rcvd
 |
ö
->
hdr
[
ISCSI_RAW_HEADER_SIZE
+3] << 24;

445 i‡(
¸c
 !
¸c_rcvd
) {

446 
	`iscsi_£t_îr‹
(
iscsi
, "hódî checksum vîifiˇti⁄ faûed: cÆcuœãd 0x%" 
PRIx32
 "Ñe˚ived 0x%" PRIx32, 
¸c
, 
¸c_rcvd
);

451 i‡(
ah¶í
 != 0) {

452 
	`iscsi_£t_îr‹
(
iscsi
, "cant handleÉxpanded headers yet");

457 
	`iscsi_¥o˚ss_pdu_£rüls
(
iscsi
, 
ö
);

459 i‡(
›code
 =
ISCSI_PDU_ASYNC_MSG
) {

460 
uöt8_t
 
evít
 = 
ö
->
hdr
[36];

461 
uöt16_t
 
∑øm1
 = 
	`scsi_gë_uöt16
(&
ö
->
hdr
[38]);

462 
uöt16_t
 
∑øm2
 = 
	`scsi_gë_uöt16
(&
ö
->
hdr
[40]);

463 
uöt16_t
 
∑øm3
 = 
	`scsi_gë_uöt16
(&
ö
->
hdr
[42]);

464 
evít
) {

471 
	`ISCSI_LOG
(
iscsi
, 2, "IgnoringÑeceived iSCSI AsyncMsg/"

475 
	`ISCSI_LOG
(
iscsi
, 2, "èrgëÑeque°†logouàwôhö %u sec⁄ds", 
∑øm3
);

480 i‡(
	`gëív
("LIBISCSI_DROP_CONN_ON_ASYNC_EVENT1"Ë!
NULL
) {

481 
	`ISCSI_LOG
(
iscsi
, 2, "dropping connectionÅo fixÉrrors with broken DELL Equallogic firmware 7.x");

484 
	`iscsi_logout_async
(
iscsi
, 
iscsi_ªc⁄√˘_a·î_logout
, 
NULL
);

487 
	`ISCSI_LOG
(
iscsi
, 2, "èrgë wû»dr›Åhi†c⁄√˘i⁄. Time2Waô i†%u sec⁄ds", 
∑øm2
);

488 
iscsi
->
√xt_ªc⁄√˘
 = 
	`time
(
NULL
Ë+ 
∑øm2
;

491 
	`ISCSI_LOG
(
iscsi
, 2, "èrgë wû»dr›áŒ c⁄√˘i⁄†o‡thi†£ssi⁄. Time2Waô i†%u sec⁄ds", 
∑øm2
);

492 
iscsi
->
√xt_ªc⁄√˘
 = 
	`time
(
NULL
Ë+ 
∑øm2
;

495 
	`ISCSI_LOG
(
iscsi
, 2, "targetÑequestsÖarameterÑenogitiation.");

496 
	`iscsi_logout_async
(
iscsi
, 
iscsi_ªc⁄√˘_a·î_logout
, 
NULL
);

499 
	`ISCSI_LOG
(
iscsi
, 1, "unh™dÀdásyn¯evíà%u:Ö¨am1 %uÖ¨am2 %uÖ¨am3 %u", 
evít
, 
∑øm1
, 
∑øm2
, 
∑øm3
);

504 i‡(
›code
 =
ISCSI_PDU_REJECT
) {

505  
	`iscsi_¥o˚ss_ªje˘
(
iscsi
, 
ö
);

508 i‡(
›code
 =
ISCSI_PDU_NOP_IN
 && 
ôt
 == 0xffffffff) {

509 i‡(
	`iscsi_¥o˚ss_èrgë_n›_ö
(
iscsi
, 
ö
) != 0) {

515 
pdu
 = 
iscsi
->
waôpdu
;Ödu;Ödu =Ödu->
√xt
) {

516 
iscsi_›code
 
ex≥˘ed_ª•⁄£
 = 
pdu
->
ª•⁄£_›code
;

517 
is_föished
 = 1;

519 i‡(
pdu
->
ôt
 != itt) {

527 i‡(
›code
 =
ISCSI_PDU_DATA_IN


528 && 
ex≥˘ed_ª•⁄£
 =
ISCSI_PDU_SCSI_RESPONSE
) {

529 
ex≥˘ed_ª•⁄£
 = 
ISCSI_PDU_DATA_IN
;

536 i‡(
›code
 =
ISCSI_PDU_R2T
) {

537 
ex≥˘ed_ª•⁄£
 = 
ISCSI_PDU_R2T
;

540 i‡(
›code
 !
ex≥˘ed_ª•⁄£
) {

541 
	`iscsi_£t_îr‹
(
iscsi
, "Got wrong opcode back for "

543 
ôt
, 
›code
, 
pdu
->
ª•⁄£_›code
);

546 
›code
) {

547 
ISCSI_PDU_LOGIN_RESPONSE
:

548 i‡(
	`iscsi_¥o˚ss_logö_ª∂y
(
iscsi
, 
pdu
, 
ö
) != 0) {

549 
	`ISCSI_LIST_REMOVE
(&
iscsi
->
waôpdu
, 
pdu
);

550 
iscsi
->
drv
->
	`‰ì_pdu
(iscsi, 
pdu
);

551 
	`iscsi_£t_îr‹
(
iscsi
, "iscsiÜoginÑeply "

556 
ISCSI_PDU_TEXT_RESPONSE
:

557 i‡(
	`iscsi_¥o˚ss_ãxt_ª∂y
(
iscsi
, 
pdu
, 
ö
) != 0) {

558 
	`ISCSI_LIST_REMOVE
(&
iscsi
->
waôpdu
, 
pdu
);

559 
iscsi
->
drv
->
	`‰ì_pdu
(iscsi, 
pdu
);

560 
	`iscsi_£t_îr‹
(
iscsi
, "iscsiÅextÑeply "

565 
ISCSI_PDU_LOGOUT_RESPONSE
:

566 i‡(
	`iscsi_¥o˚ss_logout_ª∂y
(
iscsi
, 
pdu
, 
ö
) != 0) {

567 
	`ISCSI_LIST_REMOVE
(&
iscsi
->
waôpdu
, 
pdu
);

568 
iscsi
->
drv
->
	`‰ì_pdu
(iscsi, 
pdu
);

569 
	`iscsi_£t_îr‹
(
iscsi
, "iscsiÜogoutÑeply "

574 
ISCSI_PDU_SCSI_RESPONSE
:

575 i‡(
	`iscsi_¥o˚ss_scsi_ª∂y
(
iscsi
, 
pdu
, 
ö
) != 0) {

576 
	`ISCSI_LIST_REMOVE
(&
iscsi
->
waôpdu
, 
pdu
);

577 
iscsi
->
drv
->
	`‰ì_pdu
(iscsi, 
pdu
);

578 
	`iscsi_£t_îr‹
(
iscsi
, "iscsiÑesponseÑeply "

583 
ISCSI_PDU_DATA_IN
:

584 i‡(
	`iscsi_¥o˚ss_scsi_d©a_ö
(
iscsi
, 
pdu
, 
ö
,

585 &
is_föished
) != 0) {

586 
	`ISCSI_LIST_REMOVE
(&
iscsi
->
waôpdu
, 
pdu
);

587 
iscsi
->
drv
->
	`‰ì_pdu
(iscsi, 
pdu
);

588 
	`iscsi_£t_îr‹
(
iscsi
, "iscsi data in "

593 
ISCSI_PDU_NOP_IN
:

594 i‡(
	`iscsi_¥o˚ss_n›_out_ª∂y
(
iscsi
, 
pdu
, 
ö
) != 0) {

595 
	`ISCSI_LIST_REMOVE
(&
iscsi
->
waôpdu
, 
pdu
);

596 
iscsi
->
drv
->
	`‰ì_pdu
(iscsi, 
pdu
);

597 
	`iscsi_£t_îr‹
(
iscsi
, "iscsiÇop-in failed");

601 
ISCSI_PDU_SCSI_TASK_MANAGEMENT_RESPONSE
:

602 i‡(
	`iscsi_¥o˚ss_èsk_mgmt_ª∂y
(
iscsi
, 
pdu
,

603 
ö
) != 0) {

604 
	`ISCSI_LIST_REMOVE
(&
iscsi
->
waôpdu
, 
pdu
);

605 
iscsi
->
drv
->
	`‰ì_pdu
(iscsi, 
pdu
);

606 
	`iscsi_£t_îr‹
(
iscsi
, "iscsiÅask-mgmt failed");

610 
ISCSI_PDU_R2T
:

611 i‡(
	`iscsi_¥o˚ss_r2t
(
iscsi
, 
pdu
, 
ö
) != 0) {

612 
	`ISCSI_LIST_REMOVE
(&
iscsi
->
waôpdu
, 
pdu
);

613 
iscsi
->
drv
->
	`‰ì_pdu
(iscsi, 
pdu
);

614 
	`iscsi_£t_îr‹
(
iscsi
, "iscsiÑ2t "

618 
is_föished
 = 0;

621 
	`iscsi_£t_îr‹
(
iscsi
, "Don't know howÅo handle "

622 "›codê0x%02x", 
›code
);

626 i‡(
is_föished
) {

627 
	`ISCSI_LIST_REMOVE
(&
iscsi
->
waôpdu
, 
pdu
);

628 
iscsi
->
drv
->
	`‰ì_pdu
(iscsi, 
pdu
);

634 
	}
}

637 
	$iscsi_pdu_£t_ôt
(
iscsi_pdu
 *
pdu
, 
uöt32_t
 
ôt
)

639 
	`scsi_£t_uöt32
(&
pdu
->
outd©a
.
d©a
[16], 
ôt
);

640 
	}
}

643 
	$iscsi_pdu_£t_rôt
(
iscsi_pdu
 *
pdu
, 
uöt32_t
 
rôt
)

645 
	`scsi_£t_uöt32
(&
pdu
->
outd©a
.
d©a
[20], 
rôt
);

646 
	}
}

649 
	$iscsi_pdu_£t_pduÊags
(
iscsi_pdu
 *
pdu
, 
Êags
)

651 
pdu
->
outd©a
.
d©a
[1] = 
Êags
;

652 
	}
}

655 
	$iscsi_pdu_£t_immedüã
(
iscsi_pdu
 *
pdu
)

657 
pdu
->
outd©a
.
d©a
[0] |
ISCSI_PDU_IMMEDIATE
;

658 
	}
}

661 
	$iscsi_pdu_£t_ât
(
iscsi_pdu
 *
pdu
, 
uöt32_t
 
ât
)

663 
	`scsi_£t_uöt32
(&
pdu
->
outd©a
.
d©a
[20], 
ât
);

664 
	}
}

667 
	$iscsi_pdu_£t_cmd¢
(
iscsi_pdu
 *
pdu
, 
uöt32_t
 
cmd¢
)

669 
	`scsi_£t_uöt32
(&
pdu
->
outd©a
.
d©a
[24], 
cmd¢
);

670 
pdu
->
cmd¢
 = cmdsn;

671 
	}
}

674 
	$iscsi_pdu_£t_rcmd¢
(
iscsi_pdu
 *
pdu
, 
uöt32_t
 
rcmd¢
)

676 
	`scsi_£t_uöt32
(&
pdu
->
outd©a
.
d©a
[32], 
rcmd¢
);

677 
	}
}

680 
	$iscsi_pdu_£t_d©a¢
(
iscsi_pdu
 *
pdu
, 
uöt32_t
 
d©a¢
)

682 
	`scsi_£t_uöt32
(&
pdu
->
outd©a
.
d©a
[36], 
d©a¢
);

683 
	}
}

686 
	$iscsi_pdu_£t_exp°©¢
(
iscsi_pdu
 *
pdu
, 
uöt32_t
 
exp°©¢¢
)

688 
	`scsi_£t_uöt32
(&
pdu
->
outd©a
.
d©a
[28], 
exp°©¢¢
);

689 
	}
}

692 
	$iscsi_pdu_£t_buf„roff£t
(
iscsi_pdu
 *
pdu
, 
uöt32_t
 
buf„roff£t
)

694 
	`scsi_£t_uöt32
(&
pdu
->
outd©a
.
d©a
[40], 
buf„roff£t
);

695 
	}
}

698 
	$iscsi_pdu_£t_cdb
(
iscsi_pdu
 *
pdu
, 
scsi_èsk
 *
èsk
)

700 
	`mem£t
(&
pdu
->
outd©a
.
d©a
[32], 0, 16);

701 
	`mem˝y
(&
pdu
->
outd©a
.
d©a
[32], 
èsk
->
cdb
,Åask->
cdb_size
);

702 
	}
}

705 
	$iscsi_pdu_£t_lun
(
iscsi_pdu
 *
pdu
, 
uöt32_t
 
lun
)

707 
	`scsi_£t_uöt16
(&
pdu
->
outd©a
.
d©a
[8], 
lun
);

708 
	}
}

711 
	$iscsi_pdu_£t_expx„æí
(
iscsi_pdu
 *
pdu
, 
uöt32_t
 
expx„æí
)

713 
pdu
->
expx„æí
 =Éxpxferlen;

714 
	`scsi_£t_uöt32
(&
pdu
->
outd©a
.
d©a
[20], 
expx„æí
);

715 
	}
}

718 
	$iscsi_timeout_sˇn
(
iscsi_c⁄ãxt
 *
iscsi
)

720 
iscsi_pdu
 *
pdu
;

721 
iscsi_pdu
 *
√xt_pdu
;

722 
time_t
 
t
 = 
	`time
(
NULL
);

724 
pdu
 = 
iscsi
->
outqueue
;Ödu;Ödu = 
√xt_pdu
) {

725 
√xt_pdu
 = 
pdu
->
√xt
;

727 i‡(
pdu
->
scsi_timeout
 == 0) {

731 i‡(
t
 < 
pdu
->
scsi_timeout
) {

735 
	`ISCSI_LIST_REMOVE
(&
iscsi
->
outqueue
, 
pdu
);

736 
	`iscsi_£t_îr‹
(
iscsi
, "commandÅimed out");

737 
	`iscsi_dump_pdu_hódî
(
iscsi
, 
pdu
->
outd©a
.
d©a
);

738 i‡(
pdu
->
ˇŒback
) {

739 
pdu
->
	`ˇŒback
(
iscsi
, 
SCSI_STATUS_TIMEOUT
,

740 
NULL
, 
pdu
->
¥iv©e_d©a
);

742 
iscsi
->
drv
->
	`‰ì_pdu
(iscsi, 
pdu
);

744 
pdu
 = 
iscsi
->
waôpdu
;Ödu;Ödu = 
√xt_pdu
) {

745 
√xt_pdu
 = 
pdu
->
√xt
;

747 i‡(
pdu
->
scsi_timeout
 == 0) {

751 i‡(
t
 < 
pdu
->
scsi_timeout
) {

755 
	`ISCSI_LIST_REMOVE
(&
iscsi
->
waôpdu
, 
pdu
);

756 
	`iscsi_£t_îr‹
(
iscsi
, "commandÅimed out");

757 
	`iscsi_dump_pdu_hódî
(
iscsi
, 
pdu
->
outd©a
.
d©a
);

758 i‡(
pdu
->
ˇŒback
) {

759 
pdu
->
	`ˇŒback
(
iscsi
, 
SCSI_STATUS_TIMEOUT
,

760 
NULL
, 
pdu
->
¥iv©e_d©a
);

762 
iscsi
->
drv
->
	`‰ì_pdu
(iscsi, 
pdu
);

764 
	}
}

767 
	$iscsi_queue_pdu
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_pdu
 *
pdu
)

769  
iscsi
->
drv
->
	`queue_pdu
(iscsi, 
pdu
);

770 
	}
}

773 
	$iscsi_ˇn˚l_pdus
(
iscsi_c⁄ãxt
 *
iscsi
)

775 
iscsi_pdu
 *
pdu
;

777 (
pdu
 = 
iscsi
->
outqueue
)) {

778 
	`ISCSI_LIST_REMOVE
(&
iscsi
->
outqueue
, 
pdu
);

779 i‡(
iscsi
->
is_loggedö
 && 
pdu
->
ˇŒback
) {

783 
pdu
->
	`ˇŒback
(
iscsi
, 
SCSI_STATUS_CANCELLED
,

784 
NULL
, 
pdu
->
¥iv©e_d©a
);

786 
iscsi
->
drv
->
	`‰ì_pdu
(iscsi, 
pdu
);

788 (
pdu
 = 
iscsi
->
waôpdu
)) {

789 
	`ISCSI_LIST_REMOVE
(&
iscsi
->
waôpdu
, 
pdu
);

790 i‡(
iscsi
->
is_loggedö
 && 
pdu
->
ˇŒback
) {

794 
pdu
->
	`ˇŒback
(
iscsi
, 
SCSI_STATUS_CANCELLED
,

795 
NULL
, 
pdu
->
¥iv©e_d©a
);

797 
iscsi
->
drv
->
	`‰ì_pdu
(iscsi, 
pdu
);

799 
	}
}

	@lib/scsi-lowlevel.c

25 #ifde‡
HAVE_CONFIG_H


26 
	~"c⁄fig.h
"

29 #ifde‡
HAVE_SYS_TYPES_H


30 
	~<sys/ty≥s.h
>

33 #ifde‡
HAVE_ARPA_INET_H


34 
	~<¨∑/öë.h
>

37 #ifde‡
AROS


38 
	~"¨os/¨os_com∑t.h
"

41 #i‡
deföed
(
_WIN32
)

42 
	~<wösock2.h
>

43 
	~"wö32/wö32_com∑t.h
"

45 
	~<°rögs.h
>

48 #ifde‡
HAVE_SYS_SOCKET_H


49 
	~<sys/sockë.h
>

52 
	~<°dio.h
>

53 
	~<°dlib.h
>

54 
	~<°ddef.h
>

55 
	~<°rög.h
>

56 
	~<°döt.h
>

57 
	~<î∫o.h
>

58 
	~"¶i°.h
"

59 
	~"scsi-lowÀvñ.h
"

61 
scsi_èsk_£t_iov_out
(
scsi_èsk
 *
èsk
, 
scsi_iovec
 *
iov
, 
niov
);

63 
	sscsi_Æloˇãd_mem‹y
 {

64 
scsi_Æloˇãd_mem‹y
 *
	m√xt
;

65 
	mbuf
[0];

69 
	$scsi_‰ì_scsi_èsk
(
scsi_èsk
 *
èsk
)

71 
scsi_Æloˇãd_mem‹y
 *
mem
;

73 i‡(!
èsk
)

76 (
mem
 = 
èsk
->mem)) {

77 
	`ISCSI_LIST_REMOVE
(&
èsk
->
mem
, mem);

78 
	`‰ì
(
mem
);

81 
	`‰ì
(
èsk
->
d©aö
.
d©a
);

82 
	`‰ì
(
èsk
);

83 
	}
}

85 
scsi_èsk
 *

86 
	$scsi_¸óã_èsk
(
cdb_size
, *
cdb
, 
x„r_dú
, 
expx„æí
)

88 
scsi_èsk
 *
èsk
;

90 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

91 i‡(
èsk
 =
NULL
) {

92  
NULL
;

95 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

97 
	`mem˝y
(&
èsk
->
cdb
[0], cdb, 
cdb_size
);

98 
èsk
->
cdb_size
 = cdb_size;

99 
èsk
->
x„r_dú
 = xfer_dir;

100 
èsk
->
expx„æí
 =Éxpxferlen;

102  
èsk
;

103 
	}
}

107 
	$scsi_mÆloc
(
scsi_èsk
 *
èsk
, 
size_t
 
size
)

109 
scsi_Æloˇãd_mem‹y
 *
mem
;

111 
mem
 = 
	`mÆloc
((
scsi_Æloˇãd_mem‹y
Ë+ 
size
);

112 i‡(
mem
 =
NULL
) {

113  
NULL
;

115 
	`mem£t
(
mem
, 0, (
scsi_Æloˇãd_mem‹y
Ë+ 
size
);

116 
	`ISCSI_LIST_ADD
(&
èsk
->
mem
, mem);

117  &
mem
->
buf
[0];

118 
	}
}

120 
	svÆue_°rög
 {

121 
	mvÆue
;

122 c⁄° *
	m°rög
;

126 
	$vÆue_°rög_föd
(
vÆue_°rög
 *
vÆues
, 
vÆue
)

128 ; 
vÆues
->
°rög
; values++) {

129 i‡(
vÆue
 =
vÆues
->value) {

130  
vÆues
->
°rög
;

133  
NULL
;

134 
	}
}

137 
	$scsi_£n£_key_°r
(
key
)

139 
vÆue_°rög
 
keys
[] = {

140 {
SCSI_SENSE_NO_SENSE
,

142 {
SCSI_SENSE_RECOVERED_ERROR
,

144 {
SCSI_SENSE_NOT_READY
,

146 {
SCSI_SENSE_HARDWARE_ERROR
,

148 {
SCSI_SENSE_ILLEGAL_REQUEST
,

150 {
SCSI_SENSE_UNIT_ATTENTION
,

152 {
SCSI_SENSE_DATA_PROTECTION
,

154 {
SCSI_SENSE_BLANK_CHECK
,

156 {
SCSI_SENSE_VENDOR_SPECIFIC
,

158 {
SCSI_SENSE_COPY_ABORTED
,

160 {
SCSI_SENSE_COMMAND_ABORTED
,

162 {
SCSI_SENSE_OBSOLETE_ERROR_CODE
,

164 {
SCSI_SENSE_OVERFLOW_COMMAND
,

166 {
SCSI_SENSE_MISCOMPARE
,

168 {0, 
NULL
}

171  
	`vÆue_°rög_föd
(
keys
, 
key
);

172 
	}
}

175 
	$scsi_£n£_ascq_°r
(
ascq
)

177 
vÆue_°rög
 
ascqs
[] = {

178 {
SCSI_SENSE_ASCQ_SANITIZE_IN_PROGRESS
,

180 {
SCSI_SENSE_ASCQ_WRITE_AFTER_SANITIZE_REQUIRED
,

182 {
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
,

184 {
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
,

186 {
SCSI_SENSE_ASCQ_INVALID_FIELD_IN_CDB
,

188 {
SCSI_SENSE_ASCQ_LOGICAL_UNIT_NOT_SUPPORTED
,

190 {
SCSI_SENSE_ASCQ_PARAMETER_LIST_LENGTH_ERROR
,

192 {
SCSI_SENSE_ASCQ_INVALID_FIELD_IN_PARAMETER_LIST
,

194 {
SCSI_SENSE_ASCQ_WRITE_PROTECTED
,

196 {
SCSI_SENSE_ASCQ_WRITE_PROTECTED
,

198 {
SCSI_SENSE_ASCQ_HARDWARE_WRITE_PROTECTED
,

200 {
SCSI_SENSE_ASCQ_SOFTWARE_WRITE_PROTECTED
,

202 {
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT
,

204 {
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_CLOSED
,

206 {
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_OPEN
,

208 {
SCSI_SENSE_ASCQ_BUS_RESET
,

210 {
SCSI_SENSE_ASCQ_POWER_ON_OCCURED
,

212 {
SCSI_SENSE_ASCQ_SCSI_BUS_RESET_OCCURED
,

214 {
SCSI_SENSE_ASCQ_BUS_DEVICE_RESET_FUNCTION_OCCURED
,

216 {
SCSI_SENSE_ASCQ_DEVICE_INTERNAL_RESET
,

218 {
SCSI_SENSE_ASCQ_TRANSCEIVER_MODE_CHANGED_TO_SINGLE_ENDED
,

220 {
SCSI_SENSE_ASCQ_TRANSCEIVER_MODE_CHANGED_TO_LVD
,

222 {
SCSI_SENSE_ASCQ_MODE_PARAMETERS_CHANGED
,

224 {
SCSI_SENSE_ASCQ_CAPACITY_DATA_HAS_CHANGED
,

226 {
SCSI_SENSE_ASCQ_THIN_PROVISION_SOFT_THRES_REACHED
,

228 {
SCSI_SENSE_ASCQ_INQUIRY_DATA_HAS_CHANGED
,

230 {
SCSI_SENSE_ASCQ_INTERNAL_TARGET_FAILURE
,

232 {
SCSI_SENSE_ASCQ_MISCOMPARE_DURING_VERIFY
,

234 {
SCSI_SENSE_ASCQ_MISCOMPARE_VERIFY_OF_UNMAPPED_LBA
,

236 { 
SCSI_SENSE_ASCQ_MEDIUM_LOAD_OR_EJECT_FAILED
,

238 {
SCSI_SENSE_ASCQ_MEDIUM_REMOVAL_PREVENTED
,

240 {0, 
NULL
}

243  
	`vÆue_°rög_föd
(
ascqs
, 
ascq
);

244 
	}
}

247 
	$scsi_¥_ty≥_°r
(
scsi_≥rsi°ít_out_ty≥
 
¥_ty≥
)

249 
vÆue_°rög
 
¥_ty≥_°rögs
[] = {

250 {
SCSI_PERSISTENT_RESERVE_TYPE_WRITE_EXCLUSIVE
,

252 {
SCSI_PERSISTENT_RESERVE_TYPE_EXCLUSIVE_ACCESS
,

254 {
SCSI_PERSISTENT_RESERVE_TYPE_WRITE_EXCLUSIVE_REGISTRANTS_ONLY
,

256 {
SCSI_PERSISTENT_RESERVE_TYPE_EXCLUSIVE_ACCESS_REGISTRANTS_ONLY
,

258 {
SCSI_PERSISTENT_RESERVE_TYPE_WRITE_EXCLUSIVE_ALL_REGISTRANTS
,

260 {
SCSI_PERSISTENT_RESERVE_TYPE_EXCLUSIVE_ACCESS_ALL_REGISTRANTS
,

262 {0, 
NULL
}

265  
	`vÆue_°rög_föd
(
¥_ty≥_°rögs
, 
¥_ty≥
);

266 
	}
}

268 
uöt64_t


269 
	$scsi_gë_uöt64
(c⁄° *
c
)

271 
uöt64_t
 
vÆ
;

273 
vÆ
 = 
	`scsi_gë_uöt32
(
c
);

274 
vÆ
 <<= 32;

275 
c
 += 4;

276 
vÆ
 |
	`scsi_gë_uöt32
(
c
);

278  
vÆ
;

279 
	}
}

281 
uöt32_t


282 
	$scsi_gë_uöt32
(c⁄° *
c
)

284 
uöt32_t
 
vÆ
;

285 
vÆ
 = 
c
[0];

286 
vÆ
 = (vÆ << 8Ë| 
c
[1];

287 
vÆ
 = (vÆ << 8Ë| 
c
[2];

288 
vÆ
 = (vÆ << 8Ë| 
c
[3];

289  
vÆ
;

290 
	}
}

292 
uöt16_t


293 
	$scsi_gë_uöt16
(c⁄° *
c
)

295 
uöt16_t
 
vÆ
;

296 
vÆ
 = 
c
[0];

297 
vÆ
 = (vÆ << 8Ë| 
c
[1];

298  
vÆ
;

299 
	}
}

301 
ölöe
 
uöt64_t


302 
	$èsk_gë_uöt64
(
scsi_èsk
 *
èsk
, 
off£t
)

304 i‡(
off£t
 <
èsk
->
d©aö
.
size
 - 8) {

305 c⁄° *
c
 = &
èsk
->
d©aö
.
d©a
[
off£t
];

307  
	`scsi_gë_uöt64
(
c
);

311 
	}
}

313 
ölöe
 
uöt32_t


314 
	$èsk_gë_uöt32
(
scsi_èsk
 *
èsk
, 
off£t
)

316 i‡(
off£t
 <
èsk
->
d©aö
.
size
 - 4) {

317 c⁄° *
c
 = &
èsk
->
d©aö
.
d©a
[
off£t
];

319  
	`scsi_gë_uöt32
(
c
);

323 
	}
}

325 
ölöe
 
uöt16_t


326 
	$èsk_gë_uöt16
(
scsi_èsk
 *
èsk
, 
off£t
)

328 i‡(
off£t
 <
èsk
->
d©aö
.
size
 - 2) {

329 c⁄° *
c
 = &
èsk
->
d©aö
.
d©a
[
off£t
];

331  
	`scsi_gë_uöt16
(
c
);

335 
	}
}

337 
ölöe
 
uöt8_t


338 
	$èsk_gë_uöt8
(
scsi_èsk
 *
èsk
, 
off£t
)

340 i‡(
off£t
 <
èsk
->
d©aö
.
size
 - 1) {

341  
èsk
->
d©aö
.
d©a
[
off£t
];

345 
	}
}

348 
	$scsi_£t_uöt64
(*
c
, 
uöt64_t
 
v
)

350 
uöt32_t
 
vÆ
;

352 
vÆ
 = (
v
 >> 32) & 0xffffffff;

353 
	`scsi_£t_uöt32
(
c
, 
vÆ
);

355 
c
 += 4;

356 
vÆ
 = 
v
 & 0xffffffff;

357 
	`scsi_£t_uöt32
(
c
, 
vÆ
);

358 
	}
}

361 
	$scsi_£t_uöt32
(*
c
, 
uöt32_t
 
vÆ
)

363 
c
[0] = 
vÆ
 >> 24;

364 
c
[1] = 
vÆ
 >> 16;

365 
c
[2] = 
vÆ
 >> 8;

366 
c
[3] = 
vÆ
;

367 
	}
}

370 
	$scsi_£t_uöt16
(*
c
, 
uöt16_t
 
vÆ
)

372 
c
[0] = 
vÆ
 >> 8;

373 
c
[1] = 
vÆ
;

374 
	}
}

379 
scsi_èsk
 *

380 
	$scsi_cdb_ã°unôªady
()

382 
scsi_èsk
 *
èsk
;

384 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

385 i‡(
èsk
 =
NULL
) {

386  
NULL
;

389 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

390 
èsk
->
cdb
[0] = 
SCSI_OPCODE_TESTUNITREADY
;

392 
èsk
->
cdb_size
 = 6;

393 
èsk
->
x„r_dú
 = 
SCSI_XFER_NONE
;

394 
èsk
->
expx„æí
 = 0;

396  
èsk
;

397 
	}
}

402 
scsi_èsk
 *

403 
	$scsi_cdb_ßnôize
(
immed
, 
au£
, 
ß
, 
∑øm_Àn
)

405 
scsi_èsk
 *
èsk
;

407 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

408 i‡(
èsk
 =
NULL
) {

409  
NULL
;

412 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

413 
èsk
->
cdb
[0] = 
SCSI_OPCODE_SANITIZE
;

415 
èsk
->
cdb
[1] = 
ß
 & 0x1f;

416 i‡(
immed
) {

417 
èsk
->
cdb
[1] |= 0x80;

419 i‡(
au£
) {

420 
èsk
->
cdb
[1] |= 0x20;

423 
	`scsi_£t_uöt16
(&
èsk
->
cdb
[7], 
∑øm_Àn
);

425 
èsk
->
cdb_size
 = 10;

426 i‡(
∑øm_Àn
 != 0) {

427 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

429 
èsk
->
x„r_dú
 = 
SCSI_XFER_NONE
;

431 
èsk
->
expx„æí
 = (
∑øm_Àn
 + 3) & 0xfffc;

433  
èsk
;

434 
	}
}

439 
scsi_èsk
 *

440 
	$scsi_ªp‹éuns_cdb
(
ªp‹t_ty≥
, 
Æloc_Àn
)

442 
scsi_èsk
 *
èsk
;

444 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

445 i‡(
èsk
 =
NULL
) {

446  
NULL
;

449 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

450 
èsk
->
cdb
[0] = 
SCSI_OPCODE_REPORTLUNS
;

451 
èsk
->
cdb
[2] = 
ªp‹t_ty≥
;

452 
	`scsi_£t_uöt32
(&
èsk
->
cdb
[6], 
Æloc_Àn
);

454 
èsk
->
cdb_size
 = 12;

455 i‡(
Æloc_Àn
 != 0) {

456 
èsk
->
x„r_dú
 = 
SCSI_XFER_READ
;

458 
èsk
->
x„r_dú
 = 
SCSI_XFER_NONE
;

460 
èsk
->
expx„æí
 = 
Æloc_Àn
;

462  
èsk
;

463 
	}
}

470 
	$scsi_ªp‹éuns_d©aö_gëfuŒsize
(
scsi_èsk
 *
èsk
)

472 
uöt32_t
 
li°_size
;

474 
li°_size
 = 
	`èsk_gë_uöt32
(
èsk
, 0) + 8;

476  
li°_size
;

477 
	}
}

482 
scsi_ªp‹éuns_li°
 *

483 
	$scsi_ªp‹éuns_d©aö_unm¨shÆl
(
scsi_èsk
 *
èsk
)

485 
scsi_ªp‹éuns_li°
 *
li°
;

486 
li°_size
;

487 
i
, 
num_luns
;

489 i‡(
èsk
->
d©aö
.
size
 < 4) {

490  
NULL
;

493 
li°_size
 = 
	`èsk_gë_uöt32
(
èsk
, 0) + 8;

494 i‡(
li°_size
 < 
èsk
->
d©aö
.
size
) {

495  
NULL
;

498 
num_luns
 = 
li°_size
 / 8 - 1;

499 
li°
 = 
	`scsi_mÆloc
(
èsk
, 
	`off£tof
(
scsi_ªp‹éuns_li°
, 
luns
)

500 + (
uöt16_t
Ë* 
num_luns
);

501 i‡(
li°
 =
NULL
) {

502  
NULL
;

505 
li°
->
num
 = 
num_luns
;

506 
i
 = 0; i < 
num_luns
; i++) {

507 
li°
->
luns
[
i
] = 
	`èsk_gë_uöt16
(
èsk
, i * 8 + 8);

510  
li°
;

511 
	}
}

516 
scsi_èsk
 *

517 
	$scsi_cdb_ªadˇ∑côy10
(
lba
, 
pmi
)

519 
scsi_èsk
 *
èsk
;

521 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

522 i‡(
èsk
 =
NULL
) {

523  
NULL
;

526 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

527 
èsk
->
cdb
[0] = 
SCSI_OPCODE_READCAPACITY10
;

529 
	`scsi_£t_uöt32
(&
èsk
->
cdb
[2], 
lba
);

531 i‡(
pmi
) {

532 
èsk
->
cdb
[8] |= 0x01;

535 
èsk
->
cdb_size
 = 10;

536 
èsk
->
x„r_dú
 = 
SCSI_XFER_READ
;

537 
èsk
->
expx„æí
 = 8;

539  
èsk
;

540 
	}
}

545 
scsi_èsk
 *

546 
	$scsi_cdb_ªadde„˘d©a10
(
ªq_∂i°
, 
ªq_gli°
, 
de„˘_li°_f‹m©
,

547 
uöt16_t
 
Æloc_Àn
)

549 
scsi_èsk
 *
èsk
;

551 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

552 i‡(
èsk
 =
NULL
) {

553  
NULL
;

556 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

557 
èsk
->
cdb
[0] = 
SCSI_OPCODE_READ_DEFECT_DATA10
;

559 i‡(
ªq_∂i°
) {

560 
èsk
->
cdb
[2] |= 0x10;

562 i‡(
ªq_gli°
) {

563 
èsk
->
cdb
[2] |= 0x08;

565 
èsk
->
cdb
[2] |(
de„˘_li°_f‹m©
 & 0x07);

567 
	`scsi_£t_uöt16
(&
èsk
->
cdb
[7], 
Æloc_Àn
);

569 
èsk
->
cdb_size
 = 10;

570 
èsk
->
x„r_dú
 = 
SCSI_XFER_READ
;

571 
èsk
->
expx„æí
 = 
Æloc_Àn
;

573  
èsk
;

574 
	}
}

579 
scsi_èsk
 *

580 
	$scsi_cdb_ªadde„˘d©a12
(
ªq_∂i°
, 
ªq_gli°
, 
de„˘_li°_f‹m©
,

581 
uöt32_t
 
addªss_des¸ùt‹_ödex
, uöt32_à
Æloc_Àn
)

583 
scsi_èsk
 *
èsk
;

585 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

586 i‡(
èsk
 =
NULL
) {

587  
NULL
;

590 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

591 
èsk
->
cdb
[0] = 
SCSI_OPCODE_READ_DEFECT_DATA12
;

593 i‡(
ªq_∂i°
) {

594 
èsk
->
cdb
[2] |= 0x10;

596 i‡(
ªq_gli°
) {

597 
èsk
->
cdb
[2] |= 0x08;

599 
èsk
->
cdb
[2] |(
de„˘_li°_f‹m©
 & 0x07);

601 
	`scsi_£t_uöt32
(&
èsk
->
cdb
[2], 
addªss_des¸ùt‹_ödex
);

602 
	`scsi_£t_uöt32
(&
èsk
->
cdb
[6], 
Æloc_Àn
);

604 
èsk
->
cdb_size
 = 12;

605 
èsk
->
x„r_dú
 = 
SCSI_XFER_READ
;

606 
èsk
->
expx„æí
 = 
Æloc_Àn
;

608  
èsk
;

609 
	}
}

614 
scsi_èsk
 *

615 
	$scsi_cdb_ªadtoc
(
msf
, 
f‹m©
, 
åack_£ssi⁄
, 
uöt16_t
 
Æloc_Àn
)

617 
scsi_èsk
 *
èsk
;

619 i‡(
f‹m©
 !
SCSI_READ_TOC
 && f‹m© !
SCSI_READ_SESSION_INFO


620 && 
f‹m©
 !
SCSI_READ_FULL_TOC
){

621 
	`Ârötf
(
°dîr
, "Ród TOC f‹m© %dÇŸ fuŒy suµ‹ãd yë\n", 
f‹m©
);

622  
NULL
;

625 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

626 i‡(
èsk
 =
NULL
) {

627  
NULL
;

630 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

631 
èsk
->
cdb
[0] = 
SCSI_OPCODE_READTOC
;

633 i‡(
msf
) {

634 
èsk
->
cdb
[1] |= 0x02;

637 
èsk
->
cdb
[2] = 
f‹m©
 & 0xf;

640 i‡(
f‹m©
 =
SCSI_READ_TOC
 || f‹m© =
SCSI_READ_FULL_TOC
) {

641 
èsk
->
cdb
[6] = 0xf‡& 
åack_£ssi⁄
;

644 
	`scsi_£t_uöt16
(&
èsk
->
cdb
[7], 
Æloc_Àn
);

646 
èsk
->
cdb_size
 = 10;

647 i‡(
Æloc_Àn
 != 0) {

648 
èsk
->
x„r_dú
 = 
SCSI_XFER_READ
;

650 
èsk
->
x„r_dú
 = 
SCSI_XFER_NONE
;

652 
èsk
->
expx„æí
 = 
Æloc_Àn
;

654  
èsk
;

655 
	}
}

662 
	$scsi_ªadtoc_d©aö_gëfuŒsize
(
scsi_èsk
 *
èsk
)

664 
uöt16_t
 
toc_d©a_Àn
;

666 
toc_d©a_Àn
 = 
	`èsk_gë_uöt16
(
èsk
, 0) + 2;

668  
toc_d©a_Àn
;

669 
	}
}

671 
ölöe
 
scsi_ªadtoc_fmt


672 
	$scsi_ªadtoc_f‹m©
(c⁄° 
scsi_èsk
 *
èsk
)

674  
èsk
->
cdb
[2] & 0xf;

675 
	}
}

678 
	$scsi_ªadtoc_desc_unm¨shÆl
(
scsi_èsk
 *
èsk
, 
scsi_ªadtoc_li°
 *
li°
, 
i
)

680 
	`scsi_ªadtoc_f‹m©
(
èsk
)) {

681 
SCSI_READ_TOC
:

682 
li°
->
desc
[
i
].desc.
toc
.
adr


683 
	`èsk_gë_uöt8
(
èsk
, 4 + 8 * 
i
 + 1) & 0xf0;

684 
li°
->
desc
[
i
].desc.
toc
.
c⁄åﬁ


685 
	`èsk_gë_uöt8
(
èsk
, 4 + 8 * 
i
 + 1) & 0x0f;

686 
li°
->
desc
[
i
].desc.
toc
.
åack


687 
	`èsk_gë_uöt8
(
èsk
, 4 + 8 * 
i
 + 2);

688 
li°
->
desc
[
i
].desc.
toc
.
lba


689 
	`èsk_gë_uöt32
(
èsk
, 4 + 8 * 
i
 + 4);

691 
SCSI_READ_SESSION_INFO
:

692 
li°
->
desc
[
i
].desc.
£s
.
adr


693 
	`èsk_gë_uöt8
(
èsk
, 4 + 8 * 
i
 + 1) & 0xf0;

694 
li°
->
desc
[
i
].desc.
£s
.
c⁄åﬁ


695 
	`èsk_gë_uöt8
(
èsk
, 4 + 8 * 
i
 + 1) & 0x0f;

696 
li°
->
desc
[
i
].desc.
£s
.
fú°_ö_œ°


697 
	`èsk_gë_uöt8
(
èsk
, 4 + 8 * 
i
 + 2);

698 
li°
->
desc
[
i
].desc.
£s
.
lba


699 
	`èsk_gë_uöt32
(
èsk
, 4 + 8 * 
i
 + 4);

701 
SCSI_READ_FULL_TOC
:

702 
li°
->
desc
[
i
].desc.
fuŒ
.
£ssi⁄


703 
	`èsk_gë_uöt8
(
èsk
, 4 + 11 * 
i
 + 0) & 0xf0;

704 
li°
->
desc
[
i
].desc.
fuŒ
.
adr


705 
	`èsk_gë_uöt8
(
èsk
, 4 + 11 * 
i
 + 1) & 0xf0;

706 
li°
->
desc
[
i
].desc.
fuŒ
.
c⁄åﬁ


707 
	`èsk_gë_uöt8
(
èsk
, 4 + 11 * 
i
 + 1) & 0x0f;

708 
li°
->
desc
[
i
].desc.
fuŒ
.
äo


709 
	`èsk_gë_uöt8
(
èsk
, 4 + 11 * 
i
 + 2);

710 
li°
->
desc
[
i
].desc.
fuŒ
.
poöt


711 
	`èsk_gë_uöt8
(
èsk
, 4 + 11 * 
i
 + 3);

712 
li°
->
desc
[
i
].desc.
fuŒ
.
mö


713 
	`èsk_gë_uöt8
(
èsk
, 4 + 11 * 
i
 + 4);

714 
li°
->
desc
[
i
].desc.
fuŒ
.
£c


715 
	`èsk_gë_uöt8
(
èsk
, 4 + 11 * 
i
 + 5);

716 
li°
->
desc
[
i
].desc.
fuŒ
.
‰ame


717 
	`èsk_gë_uöt8
(
èsk
, 4 + 11 * 
i
 + 6);

718 
li°
->
desc
[
i
].desc.
fuŒ
.
zîo


719 
	`èsk_gë_uöt8
(
èsk
, 4 + 11 * 
i
 + 7);

720 
li°
->
desc
[
i
].desc.
fuŒ
.
pmö


721 
	`èsk_gë_uöt8
(
èsk
, 4 + 11 * 
i
 + 8);

722 
li°
->
desc
[
i
].desc.
fuŒ
.
p£c


723 
	`èsk_gë_uöt8
(
èsk
, 4 + 11 * 
i
 + 9);

724 
li°
->
desc
[
i
].desc.
fuŒ
.
p‰ame


725 
	`èsk_gë_uöt8
(
èsk
, 4 + 11 * 
i
 + 10);

730 
	}
}

735 
scsi_ªadtoc_li°
 *

736 
	$scsi_ªadtoc_d©aö_unm¨shÆl
(
scsi_èsk
 *
èsk
)

738 
scsi_ªadtoc_li°
 *
li°
;

739 
d©a_Àn
;

740 
i
, 
num_desc
;

742 i‡(
èsk
->
d©aö
.
size
 < 4) {

743  
NULL
;

747 
d©a_Àn
 = 
	`scsi_ªadtoc_d©aö_gëfuŒsize
(
èsk
) - 2;

748 if(
èsk
->
d©aö
.
size
 < 
d©a_Àn
) {

749  
NULL
;

753 
num_desc
 = (
d©a_Àn
 - 4) / 8;

755 
li°
 = 
	`scsi_mÆloc
(
èsk
, 
	`off£tof
(
scsi_ªadtoc_li°
, 
desc
)

756 + (
scsi_ªadtoc_desc
Ë* 
num_desc
);

757 i‡(
li°
 =
NULL
) {

758  
NULL
;

761 
li°
->
num
 = 
num_desc
;

762 
li°
->
fú°
 = 
	`èsk_gë_uöt8
(
èsk
, 2);

763 
li°
->
œ°
 = 
	`èsk_gë_uöt8
(
èsk
, 3);

765 
i
 = 0; i < 
num_desc
; i++) {

766 
	`scsi_ªadtoc_desc_unm¨shÆl
(
èsk
, 
li°
, 
i
);

769  
li°
;

770 
	}
}

775 
scsi_èsk
 *

776 
	$scsi_cdb_ª£rve6
()

778 
scsi_èsk
 *
èsk
;

780 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

781 i‡(
èsk
 =
NULL
) {

782  
NULL
;

785 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

786 
èsk
->
cdb
[0] = 
SCSI_OPCODE_RESERVE6
;

788 
èsk
->
cdb_size
 = 6;

789 
èsk
->
x„r_dú
 = 
SCSI_XFER_NONE
;

791  
èsk
;

792 
	}
}

796 
scsi_èsk
 *

797 
	$scsi_cdb_ªÀa£6
()

799 
scsi_èsk
 *
èsk
;

801 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

802 i‡(
èsk
 =
NULL
) {

803  
NULL
;

806 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

807 
èsk
->
cdb
[0] = 
SCSI_OPCODE_RELEASE6
;

809 
èsk
->
cdb_size
 = 6;

810 
èsk
->
x„r_dú
 = 
SCSI_XFER_NONE
;

812  
èsk
;

813 
	}
}

815 
ölöe
 
uöt8_t


816 
	$scsi_£rvi˚a˘i⁄ö_ß
(c⁄° 
scsi_èsk
 *
èsk
)

818  
èsk
->
cdb
[1];

819 
	}
}

825 
	$scsi_£rvi˚a˘i⁄ö_d©aö_unm¨shÆl
(
scsi_èsk
 *
èsk
)

827 
	`scsi_£rvi˚a˘i⁄ö_ß
(
èsk
)) {

828 
SCSI_READCAPACITY16
: {

829 
scsi_ªadˇ∑côy16
 *
rc16
 = 
	`scsi_mÆloc
(
èsk
,

830 (*
rc16
));

831 i‡(
rc16
 =
NULL
) {

832  
NULL
;

834 
rc16
->
ªtu∫ed_lba
 = 
	`èsk_gë_uöt32
(
èsk
, 0);

835 
rc16
->
ªtu∫ed_lba
 = (rc16->ªtu∫ed_lb®<< 32Ë| 
	`èsk_gë_uöt32
(
èsk
, 4);

836 
rc16
->
block_Àngth
 = 
	`èsk_gë_uöt32
(
èsk
, 8);

837 
rc16
->
p_ty≥
 = (
	`èsk_gë_uöt8
(
èsk
, 12) >> 1) & 0x07;

838 
rc16
->
¥Ÿ_í
 = 
	`èsk_gë_uöt8
(
èsk
, 12) & 0x01;

839 
rc16
->
p_i_exp
 = (
	`èsk_gë_uöt8
(
èsk
, 13) >> 4) & 0x0f;

840 
rc16
->
lbµbe
 = 
	`èsk_gë_uöt8
(
èsk
, 13) & 0x0f;

841 
rc16
->
lbpme
 = !!(
	`èsk_gë_uöt8
(
èsk
, 14) & 0x80);

842 
rc16
->
lb¥z
 = !!(
	`èsk_gë_uöt8
(
èsk
, 14) & 0x40);

843 
rc16
->
œlba
 = 
	`èsk_gë_uöt16
(
èsk
, 14) & 0x3fff;

844  
rc16
;

846 
SCSI_GET_LBA_STATUS
: {

847 
scsi_gë_lba_°©us
 *
gls
 = 
	`scsi_mÆloc
(
èsk
,

848 (*
gls
));

849 
öt32_t
 
Àn
 = 
	`èsk_gë_uöt32
(
èsk
, 0);

850 
i
;

852 i‡(
gls
 =
NULL
) {

853  
NULL
;

856 i‡(
Àn
 > 
èsk
->
d©aö
.
size
 - 4) {

857 
Àn
 = 
èsk
->
d©aö
.
size
 - 4;

859 
Àn
 =Üen / 16;

861 
gls
->
num_des¸ùt‹s
 = 
Àn
;

862 
gls
->
des¸ùt‹s
 = 
	`scsi_mÆloc
(
èsk
,

863 (*
gls
->
des¸ùt‹s
Ë* 
Àn
);

864 i‡(
gls
->
des¸ùt‹s
 =
NULL
) {

865  
NULL
;

868 
i
 = 0; i < ()
gls
->
num_des¸ùt‹s
; i++) {

869 
gls
->
des¸ùt‹s
[
i
].
lba
 = 
	`èsk_gë_uöt32
(
èsk
, 8 + i * (
scsi_lba_°©us_des¸ùt‹
) + 0);

870 
gls
->
des¸ùt‹s
[
i
].
lba
 <<= 32;

871 
gls
->
des¸ùt‹s
[
i
].
lba
 |
	`èsk_gë_uöt32
(
èsk
, 8 + i * (
scsi_lba_°©us_des¸ùt‹
) + 4);

873 
gls
->
des¸ùt‹s
[
i
].
num_blocks
 = 
	`èsk_gë_uöt32
(
èsk
, 8 + i * (
scsi_lba_°©us_des¸ùt‹
) + 8);

875 
gls
->
des¸ùt‹s
[
i
].
¥ovisi⁄ög
 = 
	`èsk_gë_uöt8
(
èsk
, 8 + i * (
scsi_lba_°©us_des¸ùt‹
) + 12) & 0x0f;

878  
gls
;

881  
NULL
;

883 
	}
}

888 
ölöe
 
uöt8_t


889 
	$scsi_≥rsi°íåe£rveö_ß
(c⁄° 
scsi_èsk
 *
èsk
)

891  
èsk
->
cdb
[1] & 0x1f;

892 
	}
}

895 
	$scsi_≥rsi°íåe£rveö_d©aö_gëfuŒsize
(
scsi_èsk
 *
èsk
)

897 
	`scsi_≥rsi°íåe£rveö_ß
(
èsk
)) {

898 
SCSI_PERSISTENT_RESERVE_READ_KEYS
:

899  
	`èsk_gë_uöt32
(
èsk
, 4) + 8;

900 
SCSI_PERSISTENT_RESERVE_READ_RESERVATION
:

902 
SCSI_PERSISTENT_RESERVE_REPORT_CAPABILITIES
:

907 
	}
}

910 
	$scsi_ª˚ivec›yªsu…s_d©aö_unm¨shÆl
(
scsi_èsk
 *
èsk
)

912 
ß
 = 
èsk
->
cdb
[1] & 0x1f;

913 
Àn
, 
i
;

914 
scsi_c›y_ªsu…s_c›y_°©us
 *
cs
;

915 
scsi_c›y_ªsu…s_›_∑øms
 *
›
;

917 
ß
) {

918 
SCSI_COPY_RESULTS_COPY_STATUS
:

919 
Àn
 = 
	`èsk_gë_uöt32
(
èsk
, 0);

920 i‡(
Àn
 < 8)

921  
NULL
;

922 
cs
 = 
	`scsi_mÆloc
(
èsk
, (*cs));

923 i‡(
cs
 =
NULL
) {

924  
NULL
;

926 
cs
->
avaûabÀ_d©a
 = 
Àn
;

927 
cs
->
c›y_m™agî_°©us
 = 
	`èsk_gë_uöt8
(
èsk
, 4) & 0x7F;

928 
cs
->
hdd
 = (
	`èsk_gë_uöt8
(
èsk
, 4) & 0x80) >> 7;

929 
cs
->
£gmíts_¥o˚s£d
 = 
	`èsk_gë_uöt16
(
èsk
, 5);

930 
cs
->
å™s„r_cou¡_unôs
 = 
	`èsk_gë_uöt8
(
èsk
, 7);

931 
cs
->
å™s„r_cou¡
 = 
	`èsk_gë_uöt32
(
èsk
, 8);

932  
cs
;

934 
SCSI_COPY_RESULTS_OP_PARAMS
:

935 
Àn
 = 
	`èsk_gë_uöt32
(
èsk
, 0);

936 i‡(
Àn
 < 40)

937  
NULL
;

938 
›
 = 
	`scsi_mÆloc
(
èsk
, (*›Ë+ 
	`èsk_gë_uöt8
(task, 43));

939 i‡(
›
 =
NULL
) {

940  
NULL
;

942 
›
->
avaûabÀ_d©a
 = 
Àn
;

943 
›
->
max_èrgë_desc_cou¡
 = 
	`èsk_gë_uöt16
(
èsk
, 8);

944 
›
->
max_£gmít_desc_cou¡
 = 
	`èsk_gë_uöt16
(
èsk
, 10);

945 
›
->
max_desc_li°_Àngth
 = 
	`èsk_gë_uöt32
(
èsk
, 12);

946 
›
->
max_£gmít_Àngth
 = 
	`èsk_gë_uöt32
(
èsk
, 16);

947 
›
->
max_ölöe_d©a_Àngth
 = 
	`èsk_gë_uöt32
(
èsk
, 20);

948 
›
->
hñd_d©a_limô
 = 
	`èsk_gë_uöt32
(
èsk
, 24);

949 
›
->
max_°ªam_devi˚_å™s„r_size
 = 
	`èsk_gë_uöt32
(
èsk
, 28);

950 
›
->
tŸÆ_c⁄cuºít_c›õs
 = 
	`èsk_gë_uöt16
(
èsk
, 34);

951 
›
->
max_c⁄cuºít_c›õs
 = 
	`èsk_gë_uöt8
(
èsk
, 36);

952 
›
->
d©a_£gmít_gønuœrôy
 = 
	`èsk_gë_uöt8
(
èsk
, 37);

953 
›
->
ölöe_d©a_gønuœrôy
 = 
	`èsk_gë_uöt8
(
èsk
, 38);

954 
›
->
hñd_d©a_gønuœrôy
 = 
	`èsk_gë_uöt8
(
èsk
, 39);

955 
›
->
im∂_desc_li°_Àngth
 = 
	`èsk_gë_uöt8
(
èsk
, 43);

956 
i
 = 0; i < ()
›
->
im∂_desc_li°_Àngth
; i++) {

957 
›
->
imp_desc_ty≥_codes
[
i
] = 
	`èsk_gë_uöt8
(
èsk
, 44+i);

959  
›
;

961  
NULL
;

963 
	}
}

965 #i‚de‡
MIN


966 
	#MIN
(
a
, 
b
Ë((◊Ë< (b)Ë? (aË: (b))

	)

969 
	$scsi_≥rsi°íåe£rveö_d©aö_unm¨shÆl
(
scsi_èsk
 *
èsk
)

971 
scsi_≥rsi°ít_ª£rve_ö_ªad_keys
 *
rk
;

972 
scsi_≥rsi°ít_ª£rve_ö_ªad_ª£rv©i⁄
 *
º
;

973 
scsi_≥rsi°ít_ª£rve_ö_ªp‹t_ˇ∑bûôõs
 *
rc
;

974 
i
;

976 
	`scsi_≥rsi°íåe£rveö_ß
(
èsk
)) {

977 
SCSI_PERSISTENT_RESERVE_READ_KEYS
: {

978 
uöt32_t
 
cdb_keys_Àn
;

979 
uöt32_t
 
d©a_keys_Àn
;

980 
uöt32_t
 
keys_Àn
;

982 i‡(
èsk
->
d©aö
.
size
 < 8) {

983  
NULL
;

992 
cdb_keys_Àn
 = 
	`èsk_gë_uöt32
(
èsk
, 4);

993 
d©a_keys_Àn
 = 
èsk
->
d©aö
.
size
 - 8;

998 
keys_Àn
 = 
	`MIN
(
cdb_keys_Àn
, 
d©a_keys_Àn
);

1000 
rk
 = 
	`scsi_mÆloc
(
èsk
,

1001 
	`off£tof
(
scsi_≥rsi°ít_ª£rve_ö_ªad_keys
,

1002 
keys
Ë+ 
keys_Àn
);

1003 i‡(
rk
 =
NULL
) {

1004  
NULL
;

1006 
rk
->
¥gíî©i⁄
 = 
	`èsk_gë_uöt32
(
èsk
, 0);

1007 
rk
->
addôi⁄Æ_Àngth
 = 
cdb_keys_Àn
;

1009 
rk
->
num_keys
 = 
keys_Àn
 / 8;

1010 
i
 = 0; i < ()
rk
->
num_keys
; i++) {

1011 
rk
->
keys
[
i
] = 
	`èsk_gë_uöt64
(
èsk
, 8 + i * 8);

1013  
rk
;

1015 
SCSI_PERSISTENT_RESERVE_READ_RESERVATION
: {

1016 
size_t
 
Æloc_sz
;

1018 
i
 = 
	`èsk_gë_uöt32
(
èsk
, 4);

1019 
Æloc_sz
 = (
scsi_≥rsi°ít_ª£rve_ö_ªad_ª£rv©i⁄
);

1021 
º
 = 
	`scsi_mÆloc
(
èsk
, 
Æloc_sz
);

1022 i‡(
º
 =
NULL
) {

1023  
NULL
;

1025 
	`mem£t
(
º
, 0, 
Æloc_sz
);

1026 
º
->
¥gíî©i⁄
 = 
	`èsk_gë_uöt32
(
èsk
, 0);

1028 i‡(
i
 > 0) {

1029 
º
->
ª£rved
 = 1;

1030 
º
->
ª£rv©i⁄_key
 =

1031 
	`èsk_gë_uöt64
(
èsk
, 8);

1032 
º
->
¥_sc›e
 = 
	`èsk_gë_uöt8
(
èsk
, 21) >> 4;

1033 
º
->
¥_ty≥
 = 
	`èsk_gë_uöt8
(
èsk
, 21) & 0xf;

1036  
º
;

1038 
SCSI_PERSISTENT_RESERVE_REPORT_CAPABILITIES
:

1039 
rc
 = 
	`scsi_mÆloc
(
èsk
, (
scsi_≥rsi°ít_ª£rve_ö_ªp‹t_ˇ∑bûôõs
));

1040 i‡(
rc
 =
NULL
) {

1041  
NULL
;

1043 
rc
->
Àngth
 = 
	`èsk_gë_uöt16
(
èsk
, 0);

1044 
rc
->
¸h
 = !!(
	`èsk_gë_uöt8
(
èsk
, 2) & 0x10);

1045 
rc
->
sù_c
 = !!(
	`èsk_gë_uöt8
(
èsk
, 2) & 0x08);

1046 
rc
->
©p_c
 = !!(
	`èsk_gë_uöt8
(
èsk
, 2) & 0x04);

1047 
rc
->
±∂_c
 = !!(
	`èsk_gë_uöt8
(
èsk
, 2) & 0x01);

1048 
rc
->
tmv
 = !!(
	`èsk_gë_uöt8
(
èsk
, 3) & 0x80);

1049 
rc
->
Ælow_comm™ds
 = (
	`èsk_gë_uöt8
(
èsk
, 3) & 0x70) >> 4;

1050 
rc
->
≥rsi°ít_ª£rv©i⁄_ty≥_mask
 = 
	`èsk_gë_uöt16
(
èsk
, 4);

1052  
rc
;

1054  
NULL
;

1056 
	}
}

1058 
ölöe
 
uöt8_t


1059 
	$scsi_maöã«n˚ö_ß
(c⁄° 
scsi_èsk
 *
èsk
)

1061  
èsk
->
cdb
[1];

1062 
	}
}

1064 
ölöe
 
uöt8_t


1065 
	$scsi_ªp‹t_suµ‹ãd_›codes_›ti⁄s
(c⁄° 
scsi_èsk
 *
èsk
)

1067  
èsk
->
cdb
[2] & 0x07;

1068 
	}
}

1075 
	$scsi_maöã«n˚ö_d©aö_gëfuŒsize
(
scsi_èsk
 *
èsk
)

1078 
	`scsi_maöã«n˚ö_ß
(
èsk
)) {

1079 
SCSI_REPORT_SUPPORTED_OP_CODES
:

1080 
	`scsi_ªp‹t_suµ‹ãd_›codes_›ti⁄s
(
èsk
)) {

1081 
SCSI_REPORT_SUPPORTING_OPS_ALL
:

1082  
	`èsk_gë_uöt32
(
èsk
, 0) + 4;

1083 
SCSI_REPORT_SUPPORTING_OPCODE
:

1084 
SCSI_REPORT_SUPPORTING_SERVICEACTION
:

1086 (
	`èsk_gë_uöt8
(
èsk
, 1) & 0x80) ? 12 : 0 +

1087 
	`èsk_gë_uöt16
(
èsk
, 2);

1093 
	}
}

1099 
	$scsi_maöã«n˚ö_d©aö_unm¨shÆl
(
scsi_èsk
 *
èsk
)

1101 
scsi_ªp‹t_suµ‹ãd_›_codes
 *
rsoc
;

1102 
scsi_ªp‹t_suµ‹ãd_›_codes_⁄e_comm™d
 *
rsoc_⁄e
;

1103 
Àn
, 
i
;

1105 
	`scsi_maöã«n˚ö_ß
(
èsk
)) {

1106 
SCSI_REPORT_SUPPORTED_OP_CODES
:

1107 
	`scsi_ªp‹t_suµ‹ãd_›codes_›ti⁄s
(
èsk
)) {

1108 
SCSI_REPORT_SUPPORTING_OPS_ALL
:

1109 i‡(
èsk
->
d©aö
.
size
 < 4) {

1110  
NULL
;

1113 
Àn
 = 
	`èsk_gë_uöt32
(
èsk
, 0);

1121 
rsoc
 = 
	`scsi_mÆloc
(
èsk
,

1122 
	`off£tof
(
scsi_ªp‹t_suµ‹ãd_›_codes
,

1123 
des¸ùt‹s
) +

1124 
Àn
 / 8 * (
scsi_comm™d_des¸ùt‹
));

1125 i‡(
rsoc
 =
NULL
) {

1126  
NULL
;

1129 
rsoc
->
num_des¸ùt‹s
 = 0;

1130 
i
 = 4;

1131 
Àn
 >= 8) {

1132 
scsi_comm™d_des¸ùt‹
 *
desc
;

1134 
desc
 = &
rsoc
->
des¸ùt‹s
[rsoc->
num_des¸ùt‹s
++];

1135 
desc
->
›code
 =

1136 
	`èsk_gë_uöt8
(
èsk
, 
i
);

1137 
desc
->
ß
 =

1138 
	`èsk_gë_uöt16
(
èsk
, 
i
 + 2);

1139 
desc
->
˘dp
 =

1140 !!(
	`èsk_gë_uöt8
(
èsk
, 
i
 + 5) & 0x02);

1141 
desc
->
£rva˘v
 =

1142 !!(
	`èsk_gë_uöt8
(
èsk
, 
i
 + 5) & 0x01);

1143 
desc
->
cdb_Àn
 =

1144 
	`èsk_gë_uöt16
(
èsk
, 
i
 + 6);

1146 
Àn
 -= 8;

1147 
i
 += 8;

1150 i‡(!
desc
->
˘dp
) {

1154 
desc
->
to
.
des¸ùt‹_Àngth
 =

1155 
	`èsk_gë_uöt16
(
èsk
, 
i
);

1156 
desc
->
to
.
comm™d_•ecific
 =

1157 
	`èsk_gë_uöt8
(
èsk
, 
i
 + 3);

1158 
desc
->
to
.
nomöÆ_¥o˚ssög_timeout
 =

1159 
	`èsk_gë_uöt32
(
èsk
, 
i
 + 4);

1160 
desc
->
to
.
ªcommíded_timeout
 =

1161 
	`èsk_gë_uöt32
(
èsk
, 
i
 + 8);

1163 
Àn
 -
desc
->
to
.
des¸ùt‹_Àngth
 + 2;

1164 
i
 +
desc
->
to
.
des¸ùt‹_Àngth
 + 2;

1166  
rsoc
;

1167 
SCSI_REPORT_SUPPORTING_OPCODE
:

1168 
SCSI_REPORT_SUPPORTING_SERVICEACTION
:

1169 
rsoc_⁄e
 = 
	`scsi_mÆloc
(
èsk
, (
scsi_ªp‹t_suµ‹ãd_›_codes_⁄e_comm™d
));

1170 i‡(
rsoc_⁄e
 =
NULL
) {

1171  
NULL
;

1174 
rsoc_⁄e
->
˘dp
 =

1175 !!(
	`èsk_gë_uöt8
(
èsk
, 1) & 0x80);

1176 
rsoc_⁄e
->
suµ‹t
 =

1177 
	`èsk_gë_uöt8
(
èsk
, 1) & 0x07;

1178 
rsoc_⁄e
->
cdb_Àngth
 =

1179 
	`èsk_gë_uöt16
(
èsk
, 2);

1180 i‡(
rsoc_⁄e
->
cdb_Àngth
 <=

1181 (
rsoc_⁄e
->
cdb_ußge_d©a
)) {

1182 
	`mem˝y
(
rsoc_⁄e
->
cdb_ußge_d©a
,

1183 &
èsk
->
d©aö
.
d©a
[4],

1184 
rsoc_⁄e
->
cdb_Àngth
);

1187 i‡(
rsoc_⁄e
->
˘dp
) {

1188 
i
 = 4 + 
rsoc_⁄e
->
cdb_Àngth
;

1190 
rsoc_⁄e
->
to
.
des¸ùt‹_Àngth
 =

1191 
	`èsk_gë_uöt16
(
èsk
, 
i
);

1192 
rsoc_⁄e
->
to
.
comm™d_•ecific
 =

1193 
	`èsk_gë_uöt8
(
èsk
, 
i
 + 3);

1194 
rsoc_⁄e
->
to
.
nomöÆ_¥o˚ssög_timeout
 =

1195 
	`èsk_gë_uöt32
(
èsk
, 
i
 + 4);

1196 
rsoc_⁄e
->
to
.
ªcommíded_timeout
 =

1197 
	`èsk_gë_uöt32
(
èsk
, 
i
 + 8);

1199  
rsoc_⁄e
;

1203  
NULL
;

1204 
	}
}

1209 
scsi_èsk
 *

1210 
	$scsi_cdb_ªp‹t_suµ‹ãd_›codes
(
r˘d
, 
›ti⁄s
, 
scsi_›code
 
›code
, 
ß
, 
uöt32_t
 
Æloc_Àn
)

1212 
scsi_èsk
 *
èsk
;

1214 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

1215 i‡(
èsk
 =
NULL
) {

1216  
NULL
;

1219 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

1220 
èsk
->
cdb
[0] = 
SCSI_OPCODE_MAINTENANCE_IN
;

1221 
èsk
->
cdb
[1] = 
SCSI_REPORT_SUPPORTED_OP_CODES
;

1222 
èsk
->
cdb
[2] = 
›ti⁄s
 & 0x07;

1224 i‡(
r˘d
) {

1225 
èsk
->
cdb
[2] |= 0x80;

1228 
èsk
->
cdb
[3] = 
›code
;

1230 
	`scsi_£t_uöt16
(&
èsk
->
cdb
[4], 
ß
);

1232 
	`scsi_£t_uöt32
(&
èsk
->
cdb
[6], 
Æloc_Àn
);

1234 
èsk
->
cdb_size
 = 12;

1235 i‡(
Æloc_Àn
 != 0) {

1236 
èsk
->
x„r_dú
 = 
SCSI_XFER_READ
;

1238 
èsk
->
x„r_dú
 = 
SCSI_XFER_NONE
;

1240 
èsk
->
expx„æí
 = 
Æloc_Àn
;

1242  
èsk
;

1243 
	}
}

1250 
	$scsi_ªadˇ∑côy10_d©aö_gëfuŒsize
(
scsi_èsk
 *
èsk
 
_U_
)

1253 
	}
}

1258 
scsi_ªadˇ∑côy10
 *

1259 
	$scsi_ªadˇ∑côy10_d©aö_unm¨shÆl
(
scsi_èsk
 *
èsk
)

1261 
scsi_ªadˇ∑côy10
 *
rc10
;

1263 i‡(
èsk
->
d©aö
.
size
 < 8) {

1264  
NULL
;

1266 
rc10
 = 
	`scsi_mÆloc
(
èsk
, (
scsi_ªadˇ∑côy10
));

1267 i‡(
rc10
 =
NULL
) {

1268  
NULL
;

1271 
rc10
->
lba
 = 
	`èsk_gë_uöt32
(
èsk
, 0);

1272 
rc10
->
block_size
 = 
	`èsk_gë_uöt32
(
èsk
, 4);

1274  
rc10
;

1275 
	}
}

1280 
scsi_èsk
 *

1281 
	$scsi_cdb_öquúy
(
evpd
, 
∑ge_code
, 
Æloc_Àn
)

1283 
scsi_èsk
 *
èsk
;

1285 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

1286 i‡(
èsk
 =
NULL
) {

1287  
NULL
;

1290 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

1291 
èsk
->
cdb
[0] = 
SCSI_OPCODE_INQUIRY
;

1293 i‡(
evpd
) {

1294 
èsk
->
cdb
[1] |= 0x01;

1297 
èsk
->
cdb
[2] = 
∑ge_code
;

1299 
	`scsi_£t_uöt16
(&
èsk
->
cdb
[3], 
Æloc_Àn
);

1301 
èsk
->
cdb_size
 = 6;

1302 i‡(
Æloc_Àn
 != 0) {

1303 
èsk
->
x„r_dú
 = 
SCSI_XFER_READ
;

1305 
èsk
->
x„r_dú
 = 
SCSI_XFER_NONE
;

1307 
èsk
->
expx„æí
 = 
Æloc_Àn
;

1309  
èsk
;

1310 
	}
}

1312 
ölöe
 

1313 
	$scsi_öquúy_evpd_£t
(c⁄° 
scsi_èsk
 *
èsk
)

1315  
èsk
->
cdb
[1] & 0x1;

1316 
	}
}

1318 
ölöe
 
uöt8_t


1319 
	$scsi_öquúy_∑ge_code
(c⁄° 
scsi_èsk
 *
èsk
)

1321  
èsk
->
cdb
[2];

1322 
	}
}

1329 
	$scsi_öquúy_d©aö_gëfuŒsize
(
scsi_èsk
 *
èsk
)

1331 i‡(
	`scsi_öquúy_evpd_£t
(
èsk
) == 0) {

1332  
	`èsk_gë_uöt8
(
èsk
, 4) + 5;

1335 
	`scsi_öquúy_∑ge_code
(
èsk
)) {

1336 
SCSI_INQUIRY_PAGECODE_SUPPORTED_VPD_PAGES
:

1337 
SCSI_INQUIRY_PAGECODE_BLOCK_DEVICE_CHARACTERISTICS
:

1338 
SCSI_INQUIRY_PAGECODE_UNIT_SERIAL_NUMBER
:

1339  
	`èsk_gë_uöt8
(
èsk
, 3) + 4;

1340 
SCSI_INQUIRY_PAGECODE_DEVICE_IDENTIFICATION
:

1341 
SCSI_INQUIRY_PAGECODE_BLOCK_LIMITS
:

1342 
SCSI_INQUIRY_PAGECODE_LOGICAL_BLOCK_PROVISIONING
:

1343  
	`èsk_gë_uöt16
(
èsk
, 2) + 4;

1347 
	}
}

1349 
scsi_öquúy_°™d¨d
 *

1350 
	$scsi_öquúy_unm¨shÆl_°™d¨d
(
scsi_èsk
 *
èsk
)

1352 
i
;

1354 
scsi_öquúy_°™d¨d
 *
öq
 = 
	`scsi_mÆloc
(
èsk
, (*inq));

1355 i‡(
öq
 =
NULL
) {

1356  
NULL
;

1359 
öq
->
quÆifõr
 = (
	`èsk_gë_uöt8
(
èsk
, 0) >> 5) & 0x07;

1360 
öq
->
devi˚_ty≥
 = 
	`èsk_gë_uöt8
(
èsk
, 0) & 0x1f;

1361 
öq
->
rmb
 = !!(
	`èsk_gë_uöt8
(
èsk
, 1) & 0x80);

1362 
öq
->
vîsi⁄
 = 
	`èsk_gë_uöt8
(
èsk
, 2);

1363 
öq
->
n‹maˇ
 = !!(
	`èsk_gë_uöt8
(
èsk
, 3) & 0x20);

1364 
öq
->
hisup
 = !!(
	`èsk_gë_uöt8
(
èsk
, 3) & 0x10);

1365 
öq
->
ª•⁄£_d©a_f‹m©
 = 
	`èsk_gë_uöt8
(
èsk
, 3) & 0x0f;

1367 
öq
->
addôi⁄Æ_Àngth
 = 
	`èsk_gë_uöt8
(
èsk
, 4);

1369 
öq
->
sccs
 = !!(
	`èsk_gë_uöt8
(
èsk
, 5) & 0x80);

1370 
öq
->
acc
 = !!(
	`èsk_gë_uöt8
(
èsk
, 5) & 0x40);

1371 
öq
->
çgs
 = (
	`èsk_gë_uöt8
(
èsk
, 5) >> 4) & 0x03;

1372 
öq
->
thªïc
 = !!(
	`èsk_gë_uöt8
(
èsk
, 5) & 0x08);

1373 
öq
->
¥Ÿe˘
 = !!(
	`èsk_gë_uöt8
(
èsk
, 5) & 0x01);

1375 
öq
->
íc£rv
 = !!(
	`èsk_gë_uöt8
(
èsk
, 6) & 0x40);

1376 
öq
->
mu…ù
 = !!(
	`èsk_gë_uöt8
(
èsk
, 6) & 0x10);

1377 
öq
->
addr16
 = !!(
	`èsk_gë_uöt8
(
èsk
, 6) & 0x01);

1378 
öq
->
wbus16
 = !!(
	`èsk_gë_uöt8
(
èsk
, 7) & 0x20);

1379 
öq
->
sync
 = !!(
	`èsk_gë_uöt8
(
èsk
, 7) & 0x10);

1380 
öq
->
cmdque
 = !!(
	`èsk_gë_uöt8
(
èsk
, 7) & 0x02);

1382 
	`mem˝y
(&
öq
->
víd‹_idítifiˇti⁄
[0],

1383 &
èsk
->
d©aö
.
d©a
[8], 8);

1384 
	`mem˝y
(&
öq
->
¥odu˘_idítifiˇti⁄
[0],

1385 &
èsk
->
d©aö
.
d©a
[16], 16);

1386 
	`mem˝y
(&
öq
->
¥odu˘_ªvisi⁄_Àvñ
[0],

1387 &
èsk
->
d©aö
.
d©a
[32], 4);

1389 
öq
->
˛ockög
 = (
	`èsk_gë_uöt8
(
èsk
, 56) >> 2) & 0x03;

1390 
öq
->
qas
 = !!(
	`èsk_gë_uöt8
(
èsk
, 56) & 0x02);

1391 
öq
->
ius
 = !!(
	`èsk_gë_uöt8
(
èsk
, 56) & 0x01);

1393 
i
 = 0; i < 8; i++) {

1394 
öq
->
vîsi⁄_des¸ùt‹
[
i
] = 
	`èsk_gë_uöt16
(
èsk
, 58 + i * 2);

1397  
öq
;

1398 
	}
}

1400 
scsi_öquúy_suµ‹ãd_∑ges
 *

1401 
	$scsi_öquúy_unm¨shÆl_suµ‹ãd_∑ges
(
scsi_èsk
 *
èsk
)

1403 
scsi_öquúy_suµ‹ãd_∑ges
 *
öq
 = 
	`scsi_mÆloc
(
èsk
,

1404 (*
öq
));

1405 i‡(
öq
 =
NULL
) {

1406  
NULL
;

1408 
öq
->
quÆifõr
 = (
	`èsk_gë_uöt8
(
èsk
, 0) >> 5) & 0x07;

1409 
öq
->
devi˚_ty≥
 = 
	`èsk_gë_uöt8
(
èsk
, 0) & 0x1f;

1410 
öq
->
∑gecode
 = 
	`èsk_gë_uöt8
(
èsk
, 1);

1412 
öq
->
num_∑ges
 = 
	`èsk_gë_uöt8
(
èsk
, 3);

1413 
öq
->
∑ges
 = 
	`scsi_mÆloc
(
èsk
, inq->
num_∑ges
);

1414 i‡(
öq
->
∑ges
 =
NULL
) {

1415  
NULL
;

1417 
	`mem˝y
(
öq
->
∑ges
, &
èsk
->
d©aö
.
d©a
[4], inq->
num_∑ges
);

1418  
öq
;

1419 
	}
}

1421 
scsi_öquúy_unô_£rül_numbî
 *

1422 
	$scsi_öquúy_unm¨shÆl_unô_£rül_numbî
(
scsi_èsk
* 
èsk
)

1424 
scsi_öquúy_unô_£rül_numbî
 *
öq
 = 
	`scsi_mÆloc
(
èsk
,

1425 (*
öq
));

1426 i‡(
öq
 =
NULL
) {

1427  
NULL
;

1429 
öq
->
quÆifõr
 = (
	`èsk_gë_uöt8
(
èsk
, 0) >> 5) & 0x07;

1430 
öq
->
devi˚_ty≥
 = 
	`èsk_gë_uöt8
(
èsk
, 0) & 0x1f;

1431 
öq
->
∑gecode
 = 
	`èsk_gë_uöt8
(
èsk
, 1);

1433 
öq
->
u¢
 = 
	`scsi_mÆloc
(
èsk
, 
	`èsk_gë_uöt8
(task, 3) + 1);

1434 i‡(
öq
->
u¢
 =
NULL
) {

1435  
NULL
;

1437 
	`mem˝y
(
öq
->
u¢
, &
èsk
->
d©aö
.
d©a
[4], 
	`èsk_gë_uöt8
(task, 3));

1438 
öq
->
u¢
[
	`èsk_gë_uöt8
(
èsk
, 3)] = 0;

1439  
öq
;

1440 
	}
}

1442 
scsi_öquúy_devi˚_idítifiˇti⁄
 *

1443 
	$scsi_öquúy_unm¨shÆl_devi˚_idítifiˇti⁄
(
scsi_èsk
 *
èsk
)

1445 
scsi_öquúy_devi˚_idítifiˇti⁄
 *
öq
 = 
	`scsi_mÆloc
(
èsk
,

1446 (*
öq
));

1447 
ªmaöög
 = 
	`èsk_gë_uöt16
(
èsk
, 2);

1448 *
d±r
;

1450 i‡(
öq
 =
NULL
) {

1451  
NULL
;

1453 
öq
->
quÆifõr
 = (
	`èsk_gë_uöt8
(
èsk
, 0) >> 5) & 0x07;

1454 
öq
->
devi˚_ty≥
 = 
	`èsk_gë_uöt8
(
èsk
, 0) & 0x1f;

1455 
öq
->
∑gecode
 = 
	`èsk_gë_uöt8
(
èsk
, 1);

1457 
d±r
 = &
èsk
->
d©aö
.
d©a
[4];

1458 
ªmaöög
 > 0) {

1459 
scsi_öquúy_devi˚_desig«t‹
 *
dev
 =

1460 
	`scsi_mÆloc
(
èsk
, (*
dev
));

1461 i‡(
dev
 =
NULL
) {

1462 
îr
;

1465 
dev
->
√xt
 = 
öq
->
desig«t‹s
;

1466 
öq
->
desig«t‹s
 = 
dev
;

1468 
dev
->
¥Ÿocﬁ_idítifõr
 = (
d±r
[0]>>4) & 0x0f;

1469 
dev
->
code_£t
 = 
d±r
[0] & 0x0f;

1470 
dev
->
piv
 = !!(
d±r
[1]&0x80);

1471 
dev
->
assocüti⁄
 = (
d±r
[1]>>4)&0x03;

1472 
dev
->
desig«t‹_ty≥
 = 
d±r
[1]&0x0f;

1474 
dev
->
desig«t‹_Àngth
 = 
d±r
[3];

1475 
dev
->
desig«t‹
 = 
	`scsi_mÆloc
(
èsk
, dev->
desig«t‹_Àngth
 + 1);

1476 i‡(
dev
->
desig«t‹
 =
NULL
) {

1477 
îr
;

1479 
dev
->
desig«t‹
[dev->
desig«t‹_Àngth
] = 0;

1480 
	`mem˝y
(
dev
->
desig«t‹
, &
d±r
[4],

1481 
dev
->
desig«t‹_Àngth
);

1483 
ªmaöög
 -= 4;

1484 
ªmaöög
 -
dev
->
desig«t‹_Àngth
;

1486 
d±r
 +
dev
->
desig«t‹_Àngth
 + 4;

1488  
öq
;

1490 
îr
:

1491 
öq
->
desig«t‹s
) {

1492 
scsi_öquúy_devi˚_desig«t‹
 *
dev
 = 
öq
->
desig«t‹s
;

1493 
öq
->
desig«t‹s
 = 
dev
->
√xt
;

1496  
NULL
;

1497 
	}
}

1499 
scsi_öquúy_block_limôs
 *

1500 
	$scsi_öquúy_unm¨shÆl_block_limôs
(
scsi_èsk
 *
èsk
)

1502 
scsi_öquúy_block_limôs
 *
öq
 = 
	`scsi_mÆloc
(
èsk
,

1503 (*
öq
));

1504 i‡(
öq
 =
NULL
) {

1505  
NULL
;

1507 
öq
->
quÆifõr
 = (
	`èsk_gë_uöt8
(
èsk
, 0) >> 5) & 0x07;

1508 
öq
->
devi˚_ty≥
 = 
	`èsk_gë_uöt8
(
èsk
, 0) & 0x1f;

1509 
öq
->
∑gecode
 = 
	`èsk_gë_uöt8
(
èsk
, 1);

1511 
öq
->
w¢z
 = 
	`èsk_gë_uöt8
(
èsk
, 4) & 0x01;

1512 
öq
->
max_cmp
 = 
	`èsk_gë_uöt8
(
èsk
, 5);

1513 
öq
->
›t_gøn
 = 
	`èsk_gë_uöt16
(
èsk
, 6);

1514 
öq
->
max_x„r_Àn
 = 
	`èsk_gë_uöt32
(
èsk
, 8);

1515 
öq
->
›t_x„r_Àn
 = 
	`èsk_gë_uöt32
(
èsk
, 12);

1516 
öq
->
max_¥e„tch
 = 
	`èsk_gë_uöt32
(
èsk
, 16);

1517 
öq
->
max_unm≠
 = 
	`èsk_gë_uöt32
(
èsk
, 20);

1518 
öq
->
max_unm≠_bdc
 = 
	`èsk_gë_uöt32
(
èsk
, 24);

1519 
öq
->
›t_unm≠_gøn
 = 
	`èsk_gë_uöt32
(
èsk
, 28);

1520 
öq
->
ugavÆid
 = !!(
	`èsk_gë_uöt8
(
èsk
, 32)&0x80);

1521 
öq
->
unm≠_gøn_Æign
 = 
	`èsk_gë_uöt32
(
èsk
, 32) & 0x7fffffff;

1522 
öq
->
max_ws_Àn
 = 
	`èsk_gë_uöt32
(
èsk
, 36);

1523 
öq
->
max_ws_Àn
 = (inq->max_ws_len << 32)

1524 | 
	`èsk_gë_uöt32
(
èsk
, 40);

1526 
öq
->
max_©omic_x„r_Àn
 = 
	`èsk_gë_uöt32
(
èsk
, 44);

1527 
öq
->
©omic_Æign
 = 
	`èsk_gë_uöt32
(
èsk
, 48);

1528 
öq
->
©omic_gøn
 = 
	`èsk_gë_uöt32
(
èsk
, 52);

1529 
öq
->
max_©omic_é_wôh_©omic_bound¨y
 =

1530 
	`èsk_gë_uöt32
(
èsk
, 56);

1531 
öq
->
max_©omic_bound¨y_size
 =

1532 
	`èsk_gë_uöt32
(
èsk
, 60);

1534  
öq
;

1535 
	}
}

1537 
scsi_öquúy_block_devi˚_ch¨a˘îi°ics
 *

1538 
	$scsi_öquúy_unm¨shÆl_block_devi˚_ch¨a˘îi°ics
(
scsi_èsk
 *
èsk
)

1540 
scsi_öquúy_block_devi˚_ch¨a˘îi°ics
 *
öq
 =

1541 
	`scsi_mÆloc
(
èsk
, (*
öq
));

1542 i‡(
öq
 =
NULL
) {

1543  
NULL
;

1545 
öq
->
quÆifõr
 = (
	`èsk_gë_uöt8
(
èsk
, 0) >> 5) & 0x07;

1546 
öq
->
devi˚_ty≥
 = 
	`èsk_gë_uöt8
(
èsk
, 0) & 0x1f;

1547 
öq
->
∑gecode
 = 
	`èsk_gë_uöt8
(
èsk
, 1);

1549 
öq
->
medium_rŸ©i⁄_øã
 = 
	`èsk_gë_uöt16
(
èsk
, 4);

1550 
öq
->
¥odu˘_ty≥
 = 
	`èsk_gë_uöt8
(
èsk
, 6);

1551 
öq
->
wabîeq
 = (
	`èsk_gë_uöt8
(
èsk
, 7) >> 6) & 0x03;

1552 
öq
->
wa˚ªq
 = (
	`èsk_gë_uöt8
(
èsk
, 7) >> 4) & 0x03;

1553 
öq
->
nomöÆ_f‹m_Á˘‹
 = 
	`èsk_gë_uöt8
(
èsk
, 7) & 0x0f;

1554 
öq
->
fuab
 = !!(
	`èsk_gë_uöt8
(
èsk
, 8) & 0x02);

1555 
öq
->
vbuls
 = !!(
	`èsk_gë_uöt8
(
èsk
, 8) & 0x01);

1556  
öq
;

1557 
	}
}

1559 
scsi_öquúy_logiˇl_block_¥ovisi⁄ög
 *

1560 
	$scsi_öquúy_unm¨shÆl_logiˇl_block_¥ovisi⁄ög
(
scsi_èsk
 *
èsk
)

1562 
scsi_öquúy_logiˇl_block_¥ovisi⁄ög
 *
öq
 =

1563 
	`scsi_mÆloc
(
èsk
, (*
öq
));

1564 i‡(
öq
 =
NULL
) {

1565  
NULL
;

1567 
öq
->
quÆifõr
 = (
	`èsk_gë_uöt8
(
èsk
, 0) >> 5) & 0x07;

1568 
öq
->
devi˚_ty≥
 = 
	`èsk_gë_uöt8
(
èsk
, 0) & 0x1f;

1569 
öq
->
∑gecode
 = 
	`èsk_gë_uöt8
(
èsk
, 1);

1571 
öq
->
thªshﬁd_exp⁄ít
 = 
	`èsk_gë_uöt8
(
èsk
, 4);

1572 
öq
->
lbpu
 = !!(
	`èsk_gë_uöt8
(
èsk
, 5) & 0x80);

1573 
öq
->
lbpws
 = !!(
	`èsk_gë_uöt8
(
èsk
, 5) & 0x40);

1574 
öq
->
lbpws10
 = !!(
	`èsk_gë_uöt8
(
èsk
, 5) & 0x20);

1575 
öq
->
lb¥z
 = !!(
	`èsk_gë_uöt8
(
èsk
, 5) & 0x04);

1576 
öq
->
™c_sup
 = !!(
	`èsk_gë_uöt8
(
èsk
, 5) & 0x02);

1577 
öq
->
dp
 = !!(
	`èsk_gë_uöt8
(
èsk
, 5) & 0x01);

1578 
öq
->
¥ovisi⁄ög_ty≥
 = 
	`èsk_gë_uöt8
(
èsk
, 6) & 0x07;

1580  
öq
;

1581 
	}
}

1587 
	$scsi_öquúy_d©aö_unm¨shÆl
(
scsi_èsk
 *
èsk
)

1589 i‡(
	`scsi_öquúy_evpd_£t
(
èsk
) == 0) {

1590  
	`scsi_öquúy_unm¨shÆl_°™d¨d
(
èsk
);

1593 
	`scsi_öquúy_∑ge_code
(
èsk
))

1595 
SCSI_INQUIRY_PAGECODE_SUPPORTED_VPD_PAGES
:

1596  
	`scsi_öquúy_unm¨shÆl_suµ‹ãd_∑ges
(
èsk
);

1597 
SCSI_INQUIRY_PAGECODE_UNIT_SERIAL_NUMBER
:

1598  
	`scsi_öquúy_unm¨shÆl_unô_£rül_numbî
(
èsk
);

1599 
SCSI_INQUIRY_PAGECODE_DEVICE_IDENTIFICATION
:

1600  
	`scsi_öquúy_unm¨shÆl_devi˚_idítifiˇti⁄
(
èsk
);

1601 
SCSI_INQUIRY_PAGECODE_BLOCK_LIMITS
:

1602  
	`scsi_öquúy_unm¨shÆl_block_limôs
(
èsk
);

1603 
SCSI_INQUIRY_PAGECODE_BLOCK_DEVICE_CHARACTERISTICS
:

1604  
	`scsi_öquúy_unm¨shÆl_block_devi˚_ch¨a˘îi°ics
(
èsk
);

1605 
SCSI_INQUIRY_PAGECODE_LOGICAL_BLOCK_PROVISIONING
:

1606  
	`scsi_öquúy_unm¨shÆl_logiˇl_block_¥ovisi⁄ög
(
èsk
);

1608  
NULL
;

1610 
	}
}

1615 
scsi_èsk
 *

1616 
	$scsi_cdb_ªad6
(
uöt32_t
 
lba
, uöt32_à
x„æí
, 
blocksize
)

1618 
scsi_èsk
 *
èsk
;

1619 
num_blocks
;

1621 
num_blocks
 = 
x„æí
/
blocksize
;

1622 i‡(
num_blocks
 > 256) {

1623  
NULL
;

1626 i‡(
lba
 > 0x1fffff) {

1627  
NULL
;

1630 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

1631 i‡(
èsk
 =
NULL
) {

1632  
NULL
;

1635 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

1636 
èsk
->
cdb
[0] = 
SCSI_OPCODE_READ6
;

1637 
èsk
->
cdb_size
 = 6;

1639 
èsk
->
cdb
[1] = (
lba
>>16)&0x1f;

1640 
èsk
->
cdb
[2] = (
lba
>> 8)&0xff;

1641 
èsk
->
cdb
[3] = (
lba
 )&0xff;

1643 i‡(
num_blocks
 < 256) {

1644 
èsk
->
cdb
[4] = 
num_blocks
 & 0xff;

1647 i‡(
x„æí
 != 0) {

1648 
èsk
->
x„r_dú
 = 
SCSI_XFER_READ
;

1650 
èsk
->
x„r_dú
 = 
SCSI_XFER_NONE
;

1652 
èsk
->
expx„æí
 = 
x„æí
;

1654  
èsk
;

1655 
	}
}

1660 
scsi_èsk
 *

1661 
	$scsi_cdb_ªad10
(
uöt32_t
 
lba
, uöt32_à
x„æí
, 
blocksize
, 
rd¥Ÿe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
)

1663 
scsi_èsk
 *
èsk
;

1665 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

1666 i‡(
èsk
 =
NULL
) {

1667  
NULL
;

1670 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

1671 
èsk
->
cdb
[0] = 
SCSI_OPCODE_READ10
;

1673 
èsk
->
cdb
[1] |((
rd¥Ÿe˘
 & 0x07) << 5);

1674 i‡(
dpo
) {

1675 
èsk
->
cdb
[1] |= 0x10;

1677 i‡(
fua
) {

1678 
èsk
->
cdb
[1] |= 0x08;

1680 i‡(
fua_nv
) {

1681 
èsk
->
cdb
[1] |= 0x02;

1684 
	`scsi_£t_uöt32
(&
èsk
->
cdb
[2], 
lba
);

1685 
	`scsi_£t_uöt16
(&
èsk
->
cdb
[7], 
x„æí
/
blocksize
);

1687 
èsk
->
cdb
[6] |(
group_numbî
 & 0x1f);

1689 
èsk
->
cdb_size
 = 10;

1690 i‡(
x„æí
 != 0) {

1691 
èsk
->
x„r_dú
 = 
SCSI_XFER_READ
;

1693 
èsk
->
x„r_dú
 = 
SCSI_XFER_NONE
;

1695 
èsk
->
expx„æí
 = 
x„æí
;

1697  
èsk
;

1698 
	}
}

1703 
scsi_èsk
 *

1704 
	$scsi_cdb_ªad12
(
uöt32_t
 
lba
, uöt32_à
x„æí
, 
blocksize
, 
rd¥Ÿe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
)

1706 
scsi_èsk
 *
èsk
;

1708 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

1709 i‡(
èsk
 =
NULL
) {

1710  
NULL
;

1713 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

1714 
èsk
->
cdb
[0] = 
SCSI_OPCODE_READ12
;

1716 
èsk
->
cdb
[1] |((
rd¥Ÿe˘
 & 0x07) << 5);

1717 i‡(
dpo
) {

1718 
èsk
->
cdb
[1] |= 0x10;

1720 i‡(
fua
) {

1721 
èsk
->
cdb
[1] |= 0x08;

1723 i‡(
fua_nv
) {

1724 
èsk
->
cdb
[1] |= 0x02;

1727 
	`scsi_£t_uöt32
(&
èsk
->
cdb
[2], 
lba
);

1728 
	`scsi_£t_uöt32
(&
èsk
->
cdb
[6], 
x„æí
/
blocksize
);

1730 
èsk
->
cdb
[10] |(
group_numbî
 & 0x1f);

1732 
èsk
->
cdb_size
 = 12;

1733 i‡(
x„æí
 != 0) {

1734 
èsk
->
x„r_dú
 = 
SCSI_XFER_READ
;

1736 
èsk
->
x„r_dú
 = 
SCSI_XFER_NONE
;

1738 
èsk
->
expx„æí
 = 
x„æí
;

1740  
èsk
;

1741 
	}
}

1746 
scsi_èsk
 *

1747 
	$scsi_cdb_ªad16
(
uöt64_t
 
lba
, 
uöt32_t
 
x„æí
, 
blocksize
, 
rd¥Ÿe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
)

1749 
scsi_èsk
 *
èsk
;

1751 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

1752 i‡(
èsk
 =
NULL
) {

1753  
NULL
;

1756 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

1757 
èsk
->
cdb
[0] = 
SCSI_OPCODE_READ16
;

1759 
èsk
->
cdb
[1] |((
rd¥Ÿe˘
 & 0x07) << 5);

1760 i‡(
dpo
) {

1761 
èsk
->
cdb
[1] |= 0x10;

1763 i‡(
fua
) {

1764 
èsk
->
cdb
[1] |= 0x08;

1766 i‡(
fua_nv
) {

1767 
èsk
->
cdb
[1] |= 0x02;

1770 
	`scsi_£t_uöt32
(&
èsk
->
cdb
[2], 
lba
 >> 32);

1771 
	`scsi_£t_uöt32
(&
èsk
->
cdb
[6], 
lba
 & 0xffffffff);

1772 
	`scsi_£t_uöt32
(&
èsk
->
cdb
[10], 
x„æí
/
blocksize
);

1774 
èsk
->
cdb
[14] |(
group_numbî
 & 0x1f);

1776 
èsk
->
cdb_size
 = 16;

1777 i‡(
x„æí
 != 0) {

1778 
èsk
->
x„r_dú
 = 
SCSI_XFER_READ
;

1780 
èsk
->
x„r_dú
 = 
SCSI_XFER_NONE
;

1782 
èsk
->
expx„æí
 = 
x„æí
;

1784  
èsk
;

1785 
	}
}

1790 
scsi_èsk
 *

1791 
	$scsi_cdb_wrôe10
(
uöt32_t
 
lba
, uöt32_à
x„æí
, 
blocksize
, 
wΩrŸe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
)

1793 
scsi_èsk
 *
èsk
;

1795 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

1796 i‡(
èsk
 =
NULL
) {

1797  
NULL
;

1800 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

1801 
èsk
->
cdb
[0] = 
SCSI_OPCODE_WRITE10
;

1803 
èsk
->
cdb
[1] |((
wΩrŸe˘
 & 0x07) << 5);

1804 i‡(
dpo
) {

1805 
èsk
->
cdb
[1] |= 0x10;

1807 i‡(
fua
) {

1808 
èsk
->
cdb
[1] |= 0x08;

1810 i‡(
fua_nv
) {

1811 
èsk
->
cdb
[1] |= 0x02;

1814 
	`scsi_£t_uöt32
(&
èsk
->
cdb
[2], 
lba
);

1815 
	`scsi_£t_uöt16
(&
èsk
->
cdb
[7], 
x„æí
/
blocksize
);

1817 
èsk
->
cdb
[6] |(
group_numbî
 & 0x1f);

1819 
èsk
->
cdb_size
 = 10;

1820 i‡(
x„æí
 != 0) {

1821 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

1823 
èsk
->
x„r_dú
 = 
SCSI_XFER_NONE
;

1825 
èsk
->
expx„æí
 = 
x„æí
;

1827  
èsk
;

1828 
	}
}

1833 
scsi_èsk
 *

1834 
	$scsi_cdb_wrôe12
(
uöt32_t
 
lba
, uöt32_à
x„æí
, 
blocksize
, 
wΩrŸe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
)

1836 
scsi_èsk
 *
èsk
;

1838 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

1839 i‡(
èsk
 =
NULL
) {

1840  
NULL
;

1843 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

1844 
èsk
->
cdb
[0] = 
SCSI_OPCODE_WRITE12
;

1846 
èsk
->
cdb
[1] |((
wΩrŸe˘
 & 0x07) << 5);

1847 i‡(
dpo
) {

1848 
èsk
->
cdb
[1] |= 0x10;

1850 i‡(
fua
) {

1851 
èsk
->
cdb
[1] |= 0x08;

1853 i‡(
fua_nv
) {

1854 
èsk
->
cdb
[1] |= 0x02;

1857 
	`scsi_£t_uöt32
(&
èsk
->
cdb
[2], 
lba
);

1858 
	`scsi_£t_uöt32
(&
èsk
->
cdb
[6], 
x„æí
/
blocksize
);

1860 
èsk
->
cdb
[10] |(
group_numbî
 & 0x1f);

1862 
èsk
->
cdb_size
 = 12;

1863 i‡(
x„æí
 != 0) {

1864 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

1866 
èsk
->
x„r_dú
 = 
SCSI_XFER_NONE
;

1868 
èsk
->
expx„æí
 = 
x„æí
;

1870  
èsk
;

1871 
	}
}

1876 
scsi_èsk
 *

1877 
	$scsi_cdb_wrôe16
(
uöt64_t
 
lba
, 
uöt32_t
 
x„æí
, 
blocksize
, 
wΩrŸe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
)

1879 
scsi_èsk
 *
èsk
;

1881 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

1882 i‡(
èsk
 =
NULL
) {

1883  
NULL
;

1886 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

1887 
èsk
->
cdb
[0] = 
SCSI_OPCODE_WRITE16
;

1889 
èsk
->
cdb
[1] |((
wΩrŸe˘
 & 0x07) << 5);

1890 i‡(
dpo
) {

1891 
èsk
->
cdb
[1] |= 0x10;

1893 i‡(
fua
) {

1894 
èsk
->
cdb
[1] |= 0x08;

1896 i‡(
fua_nv
) {

1897 
èsk
->
cdb
[1] |= 0x02;

1900 
	`scsi_£t_uöt32
(&
èsk
->
cdb
[2], 
lba
 >> 32);

1901 
	`scsi_£t_uöt32
(&
èsk
->
cdb
[6], 
lba
 & 0xffffffff);

1902 
	`scsi_£t_uöt32
(&
èsk
->
cdb
[10], 
x„æí
 / 
blocksize
);

1904 
èsk
->
cdb
[14] |(
group_numbî
 & 0x1f);

1906 
èsk
->
cdb_size
 = 16;

1907 i‡(
x„æí
 != 0) {

1908 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

1910 
èsk
->
x„r_dú
 = 
SCSI_XFER_NONE
;

1912 
èsk
->
expx„æí
 = 
x„æí
;

1914  
èsk
;

1915 
	}
}

1920 
scsi_èsk
 *

1921 
	$scsi_cdb_wrôótomic16
(
uöt64_t
 
lba
, 
uöt32_t
 
x„æí
, 
blocksize
, 
wΩrŸe˘
, 
dpo
, 
fua
, 
group_numbî
)

1923 
scsi_èsk
 *
èsk
;

1925 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

1926 i‡(
èsk
 =
NULL
) {

1927  
NULL
;

1930 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

1931 
èsk
->
cdb
[0] = 
SCSI_OPCODE_WRITE_ATOMIC16
;

1933 
èsk
->
cdb
[1] |((
wΩrŸe˘
 & 0x07) << 5);

1934 i‡(
dpo
) {

1935 
èsk
->
cdb
[1] |= 0x10;

1937 i‡(
fua
) {

1938 
èsk
->
cdb
[1] |= 0x08;

1941 
	`scsi_£t_uöt32
(&
èsk
->
cdb
[2], 
lba
 >> 32);

1942 
	`scsi_£t_uöt32
(&
èsk
->
cdb
[6], 
lba
 & 0xffffffff);

1943 
	`scsi_£t_uöt16
(&
èsk
->
cdb
[12], 
x„æí
 / 
blocksize
);

1945 
èsk
->
cdb
[14] |(
group_numbî
 & 0x1f);

1947 
èsk
->
cdb_size
 = 16;

1948 i‡(
x„æí
 != 0) {

1949 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

1951 
èsk
->
x„r_dú
 = 
SCSI_XFER_NONE
;

1953 
èsk
->
expx„æí
 = 
x„æí
;

1955  
èsk
;

1956 
	}
}

1961 
scsi_èsk
 *

1962 
	$scsi_cdb_‹wrôe
(
uöt64_t
 
lba
, 
uöt32_t
 
x„æí
, 
blocksize
, 
wΩrŸe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
)

1964 
scsi_èsk
 *
èsk
;

1966 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

1967 i‡(
èsk
 =
NULL
) {

1968  
NULL
;

1971 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

1972 
èsk
->
cdb
[0] = 
SCSI_OPCODE_ORWRITE
;

1974 
èsk
->
cdb
[1] |((
wΩrŸe˘
 & 0x07) << 5);

1975 i‡(
dpo
) {

1976 
èsk
->
cdb
[1] |= 0x10;

1978 i‡(
fua
) {

1979 
èsk
->
cdb
[1] |= 0x08;

1981 i‡(
fua_nv
) {

1982 
èsk
->
cdb
[1] |= 0x02;

1985 
	`scsi_£t_uöt32
(&
èsk
->
cdb
[2], 
lba
 >> 32);

1986 
	`scsi_£t_uöt32
(&
èsk
->
cdb
[6], 
lba
 & 0xffffffff);

1987 
	`scsi_£t_uöt32
(&
èsk
->
cdb
[10], 
x„æí
/
blocksize
);

1989 
èsk
->
cdb
[14] |(
group_numbî
 & 0x1f);

1991 
èsk
->
cdb_size
 = 16;

1992 i‡(
x„æí
 != 0) {

1993 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

1995 
èsk
->
x„r_dú
 = 
SCSI_XFER_NONE
;

1997 
èsk
->
expx„æí
 = 
x„æí
;

1999  
èsk
;

2000 
	}
}

2005 
scsi_èsk
 *

2006 
	$scsi_cdb_com∑ª™dwrôe
(
uöt64_t
 
lba
, 
uöt32_t
 
x„æí
, 
blocksize
, 
wΩrŸe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
)

2008 
scsi_èsk
 *
èsk
;

2010 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

2011 i‡(
èsk
 =
NULL
) {

2012  
NULL
;

2015 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

2016 
èsk
->
cdb
[0] = 
SCSI_OPCODE_COMPARE_AND_WRITE
;

2018 
èsk
->
cdb
[1] |((
wΩrŸe˘
 & 0x07) << 5);

2019 i‡(
dpo
) {

2020 
èsk
->
cdb
[1] |= 0x10;

2022 i‡(
fua
) {

2023 
èsk
->
cdb
[1] |= 0x08;

2025 i‡(
fua_nv
) {

2026 
èsk
->
cdb
[1] |= 0x02;

2029 
	`scsi_£t_uöt32
(&
èsk
->
cdb
[2], 
lba
 >> 32);

2030 
	`scsi_£t_uöt32
(&
èsk
->
cdb
[6], 
lba
 & 0xffffffff);

2031 
èsk
->
cdb
[13] = 
x„æí
 / 
blocksize
 / 2;

2033 
èsk
->
cdb
[14] |(
group_numbî
 & 0x1f);

2034 
èsk
->
cdb_size
 = 16;

2035 i‡(
x„æí
 != 0) {

2036 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

2038 
èsk
->
x„r_dú
 = 
SCSI_XFER_NONE
;

2040 
èsk
->
expx„æí
 = 
x„æí
;

2042  
èsk
;

2043 
	}
}

2048 
scsi_èsk
 *

2049 
	$scsi_cdb_vîify10
(
uöt32_t
 
lba
, uöt32_à
x„æí
, 
v¥Ÿe˘
, 
dpo
, 
bytchk
, 
blocksize
)

2051 
scsi_èsk
 *
èsk
;

2053 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

2054 i‡(
èsk
 =
NULL
) {

2055  
NULL
;

2058 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

2059 
èsk
->
cdb
[0] = 
SCSI_OPCODE_VERIFY10
;

2061 i‡(
v¥Ÿe˘
) {

2062 
èsk
->
cdb
[1] |((
v¥Ÿe˘
 << 5) & 0xe0);

2064 i‡(
dpo
) {

2065 
èsk
->
cdb
[1] |= 0x10;

2067 i‡(
bytchk
) {

2068 
èsk
->
cdb
[1] |= 0x02;

2071 
	`scsi_£t_uöt32
(&
èsk
->
cdb
[2], 
lba
);

2072 
	`scsi_£t_uöt16
(&
èsk
->
cdb
[7], 
x„æí
/
blocksize
);

2074 
èsk
->
cdb_size
 = 10;

2075 i‡(
x„æí
 !0 && 
bytchk
) {

2076 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

2077 
èsk
->
expx„æí
 = 
x„æí
;

2079 
èsk
->
x„r_dú
 = 
SCSI_XFER_NONE
;

2080 
èsk
->
expx„æí
 = 0;

2083  
èsk
;

2084 
	}
}

2089 
scsi_èsk
 *

2090 
	$scsi_cdb_vîify12
(
uöt32_t
 
lba
, uöt32_à
x„æí
, 
v¥Ÿe˘
, 
dpo
, 
bytchk
, 
blocksize
)

2092 
scsi_èsk
 *
èsk
;

2094 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

2095 i‡(
èsk
 =
NULL
) {

2096  
NULL
;

2099 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

2100 
èsk
->
cdb
[0] = 
SCSI_OPCODE_VERIFY12
;

2102 i‡(
v¥Ÿe˘
) {

2103 
èsk
->
cdb
[1] |((
v¥Ÿe˘
 << 5) & 0xe0);

2105 i‡(
dpo
) {

2106 
èsk
->
cdb
[1] |= 0x10;

2108 i‡(
bytchk
) {

2109 
èsk
->
cdb
[1] |= 0x02;

2112 
	`scsi_£t_uöt32
(&
èsk
->
cdb
[2], 
lba
);

2113 
	`scsi_£t_uöt32
(&
èsk
->
cdb
[6], 
x„æí
/
blocksize
);

2115 
èsk
->
cdb_size
 = 12;

2116 i‡(
x„æí
 !0 && 
bytchk
) {

2117 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

2118 
èsk
->
expx„æí
 = 
x„æí
;

2120 
èsk
->
x„r_dú
 = 
SCSI_XFER_NONE
;

2121 
èsk
->
expx„æí
 = 0;

2124  
èsk
;

2125 
	}
}

2130 
scsi_èsk
 *

2131 
	$scsi_cdb_vîify16
(
uöt64_t
 
lba
, 
uöt32_t
 
x„æí
, 
v¥Ÿe˘
, 
dpo
, 
bytchk
, 
blocksize
)

2133 
scsi_èsk
 *
èsk
;

2135 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

2136 i‡(
èsk
 =
NULL
) {

2137  
NULL
;

2140 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

2141 
èsk
->
cdb
[0] = 
SCSI_OPCODE_VERIFY16
;

2143 i‡(
v¥Ÿe˘
) {

2144 
èsk
->
cdb
[1] |((
v¥Ÿe˘
 << 5) & 0xe0);

2146 i‡(
dpo
) {

2147 
èsk
->
cdb
[1] |= 0x10;

2149 i‡(
bytchk
) {

2150 
èsk
->
cdb
[1] |= 0x02;

2153 
	`scsi_£t_uöt32
(&
èsk
->
cdb
[2], 
lba
 >> 32);

2154 
	`scsi_£t_uöt32
(&
èsk
->
cdb
[6], 
lba
 & 0xffffffff);

2155 
	`scsi_£t_uöt32
(&
èsk
->
cdb
[10], 
x„æí
/
blocksize
);

2157 
èsk
->
cdb_size
 = 16;

2158 i‡(
x„æí
 !0 && 
bytchk
) {

2159 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

2160 
èsk
->
expx„æí
 = 
x„æí
;

2162 
èsk
->
x„r_dú
 = 
SCSI_XFER_NONE
;

2163 
èsk
->
expx„æí
 = 0;

2166  
èsk
;

2167 
	}
}

2172 
scsi_èsk
 *

2173 
	$scsi_cdb_unm≠
(
™ch‹
, 
group
, 
uöt16_t
 
x„æí
)

2175 
scsi_èsk
 *
èsk
;

2177 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

2178 i‡(
èsk
 =
NULL
) {

2179  
NULL
;

2182 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

2183 
èsk
->
cdb
[0] = 
SCSI_OPCODE_UNMAP
;

2185 i‡(
™ch‹
) {

2186 
èsk
->
cdb
[1] |= 0x01;

2188 
èsk
->
cdb
[6] |
group
 & 0x1f;

2190 
	`scsi_£t_uöt16
(&
èsk
->
cdb
[7], 
x„æí
);

2192 
èsk
->
cdb_size
 = 10;

2193 i‡(
x„æí
 != 0) {

2194 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

2196 
èsk
->
x„r_dú
 = 
SCSI_XFER_NONE
;

2198 
èsk
->
expx„æí
 = 
x„æí
;

2200  
èsk
;

2201 
	}
}

2206 
scsi_èsk
 *

2207 
	$scsi_cdb_≥rsi°ít_ª£rve_ö
(
scsi_≥rsi°ít_ö_ß
 
ß
, 
uöt16_t
 
x„æí
)

2209 
scsi_èsk
 *
èsk
;

2211 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

2212 i‡(
èsk
 =
NULL
) {

2213  
NULL
;

2216 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

2217 
èsk
->
cdb
[0] = 
SCSI_OPCODE_PERSISTENT_RESERVE_IN
;

2219 
èsk
->
cdb
[1] |
ß
 & 0x1f;

2221 
	`scsi_£t_uöt16
(&
èsk
->
cdb
[7], 
x„æí
);

2223 
èsk
->
cdb_size
 = 10;

2224 i‡(
x„æí
 != 0) {

2225 
èsk
->
x„r_dú
 = 
SCSI_XFER_READ
;

2227 
èsk
->
x„r_dú
 = 
SCSI_XFER_NONE
;

2229 
èsk
->
expx„æí
 = 
x„æí
;

2231  
èsk
;

2232 
	}
}

2237 
scsi_èsk
 *

2238 
	$scsi_cdb_≥rsi°ít_ª£rve_out
(
scsi_≥rsi°ít_out_ß
 
ß
, 
scsi_≥rsi°ít_out_sc›e
 
sc›e
, 
scsi_≥rsi°ít_out_ty≥
 
ty≥
, *
∑øm
)

2240 
scsi_èsk
 *
èsk
;

2241 
scsi_≥rsi°ít_ª£rve_out_basic
 *
basic
;

2242 
scsi_iovec
 *
iov
;

2243 *
buf
;

2244 
x„æí
;

2246 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

2247 i‡(
èsk
 =
NULL
)

2248 
îr
;

2250 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

2252 
iov
 = 
	`scsi_mÆloc
(
èsk
, (
scsi_iovec
));

2253 i‡(
iov
 =
NULL
)

2254 
îr
;

2256 
ß
) {

2257 
SCSI_PERSISTENT_RESERVE_REGISTER
:

2258 
SCSI_PERSISTENT_RESERVE_RESERVE
:

2259 
SCSI_PERSISTENT_RESERVE_RELEASE
:

2260 
SCSI_PERSISTENT_RESERVE_CLEAR
:

2261 
SCSI_PERSISTENT_RESERVE_PREEMPT
:

2262 
SCSI_PERSISTENT_RESERVE_PREEMPT_AND_ABORT
:

2263 
SCSI_PERSISTENT_RESERVE_REGISTER_AND_IGNORE_EXISTING_KEY
:

2264 
basic
 = 
∑øm
;

2266 
x„æí
 = 24;

2267 
buf
 = 
	`scsi_mÆloc
(
èsk
, 
x„æí
);

2268 i‡(
buf
 =
NULL
)

2269 
îr
;

2271 
	`mem£t
(
buf
, 0, 
x„æí
);

2272 
	`scsi_£t_uöt64
(&
buf
[0], 
basic
->
ª£rv©i⁄_key
);

2273 
	`scsi_£t_uöt64
(&
buf
[8], 
basic
->
£rvi˚_a˘i⁄_ª£rv©i⁄_key
);

2274 i‡(
basic
->
•ec_i_±
) {

2275 
buf
[20] |= 0x08;

2277 i‡(
basic
->
Æl_tg_±
) {

2278 
buf
[20] |= 0x04;

2280 i‡(
basic
->
≠çl
) {

2281 
buf
[20] |= 0x01;

2284 
SCSI_PERSISTENT_RESERVE_REGISTER_AND_MOVE
:

2286 
îr
;

2288 
îr
;

2291 
èsk
->
cdb
[0] = 
SCSI_OPCODE_PERSISTENT_RESERVE_OUT
;

2292 
èsk
->
cdb
[1] |
ß
 & 0x1f;

2293 
èsk
->
cdb
[2] = ((
sc›e
 << 4Ë& 0xf0Ë| (
ty≥
 & 0x0f);

2295 
	`scsi_£t_uöt32
(&
èsk
->
cdb
[5], 
x„æí
);

2297 
èsk
->
cdb_size
 = 10;

2298 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

2299 
èsk
->
expx„æí
 = 
x„æí
;

2301 
iov
->
iov_ba£
 = 
buf
;

2302 
iov
->
iov_Àn
 = 
x„æí
;

2303 
	`scsi_èsk_£t_iov_out
(
èsk
, 
iov
, 1);

2305  
èsk
;

2307 
îr
:

2308 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2309  
NULL
;

2310 
	}
}

2315 
scsi_èsk
 *

2316 
	$scsi_cdb_wrôeßme10
(
wΩrŸe˘
, 
™ch‹
, 
unm≠
, 
uöt32_t
 
lba
, 
group
, 
uöt16_t
 
num_blocks
, uöt32_à
d©Æí
)

2318 
scsi_èsk
 *
èsk
;

2320 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

2321 i‡(
èsk
 =
NULL
) {

2322  
NULL
;

2325 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

2326 
èsk
->
cdb
[0] = 
SCSI_OPCODE_WRITE_SAME10
;

2328 i‡(
wΩrŸe˘
) {

2329 
èsk
->
cdb
[1] |((
wΩrŸe˘
 & 0x7) << 5);

2331 i‡(
™ch‹
) {

2332 
èsk
->
cdb
[1] |= 0x10;

2334 i‡(
unm≠
) {

2335 
èsk
->
cdb
[1] |= 0x08;

2337 
	`scsi_£t_uöt32
(&
èsk
->
cdb
[2], 
lba
);

2338 i‡(
group
) {

2339 
èsk
->
cdb
[6] |(
group
 & 0x1f);

2341 
	`scsi_£t_uöt16
(&
èsk
->
cdb
[7], 
num_blocks
);

2343 
èsk
->
cdb_size
 = 10;

2344 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

2345 
èsk
->
expx„æí
 = 
d©Æí
;

2347  
èsk
;

2348 
	}
}

2353 
scsi_èsk
 *

2354 
	$scsi_cdb_wrôeßme16
(
wΩrŸe˘
, 
™ch‹
, 
unm≠
, 
uöt64_t
 
lba
, 
group
, 
uöt32_t
 
num_blocks
, uöt32_à
d©Æí
)

2356 
scsi_èsk
 *
èsk
;

2358 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

2359 i‡(
èsk
 =
NULL
) {

2360  
NULL
;

2363 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

2364 
èsk
->
cdb
[0] = 
SCSI_OPCODE_WRITE_SAME16
;

2366 i‡(
wΩrŸe˘
) {

2367 
èsk
->
cdb
[1] |((
wΩrŸe˘
 & 0x7) << 5);

2369 i‡(
™ch‹
) {

2370 
èsk
->
cdb
[1] |= 0x10;

2372 i‡(
unm≠
) {

2373 
èsk
->
cdb
[1] |= 0x08;

2375 i‡(
d©Æí
 == 0) {

2376 
èsk
->
cdb
[1] |= 0x01;

2378 
	`scsi_£t_uöt32
(&
èsk
->
cdb
[2], 
lba
 >> 32);

2379 
	`scsi_£t_uöt32
(&
èsk
->
cdb
[6], 
lba
 & 0xffffffff);

2380 
	`scsi_£t_uöt32
(&
èsk
->
cdb
[10], 
num_blocks
);

2381 i‡(
group
) {

2382 
èsk
->
cdb
[14] |(
group
 & 0x1f);

2385 
èsk
->
cdb_size
 = 16;

2386 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

2387 
èsk
->
expx„æí
 = 
d©Æí
;

2389  
èsk
;

2390 
	}
}

2395 
scsi_èsk
 *

2396 
	$scsi_cdb_mode£n£6
(
dbd
, 
scsi_mode£n£_∑ge_c⁄åﬁ
 
pc
,

2397 
scsi_mode£n£_∑ge_code
 
∑ge_code
,

2398 
sub_∑ge_code
, 
Æloc_Àn
)

2400 
scsi_èsk
 *
èsk
;

2402 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

2403 i‡(
èsk
 =
NULL
) {

2404  
NULL
;

2407 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

2408 
èsk
->
cdb
[0] = 
SCSI_OPCODE_MODESENSE6
;

2410 i‡(
dbd
) {

2411 
èsk
->
cdb
[1] |= 0x08;

2413 
èsk
->
cdb
[2] = 
pc
<<6 | 
∑ge_code
;

2414 
èsk
->
cdb
[3] = 
sub_∑ge_code
;

2415 
èsk
->
cdb
[4] = 
Æloc_Àn
;

2417 
èsk
->
cdb_size
 = 6;

2418 i‡(
Æloc_Àn
 != 0) {

2419 
èsk
->
x„r_dú
 = 
SCSI_XFER_READ
;

2421 
èsk
->
x„r_dú
 = 
SCSI_XFER_NONE
;

2423 
èsk
->
expx„æí
 = 
Æloc_Àn
;

2425  
èsk
;

2426 
	}
}

2431 
scsi_èsk
 *

2432 
	$scsi_cdb_mode£n£10
(
ŒbØ
, 
dbd
, 
scsi_mode£n£_∑ge_c⁄åﬁ
 
pc
,

2433 
scsi_mode£n£_∑ge_code
 
∑ge_code
,

2434 
sub_∑ge_code
, 
Æloc_Àn
)

2436 
scsi_èsk
 *
èsk
;

2438 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

2439 i‡(
èsk
 =
NULL
) {

2440  
NULL
;

2443 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

2444 
èsk
->
cdb
[0] = 
SCSI_OPCODE_MODESENSE10
;

2446 i‡(
ŒbØ
) {

2447 
èsk
->
cdb
[1] |= 0x10;

2449 i‡(
dbd
) {

2450 
èsk
->
cdb
[1] |= 0x08;

2452 
èsk
->
cdb
[2] = 
pc
<<6 | 
∑ge_code
;

2453 
èsk
->
cdb
[3] = 
sub_∑ge_code
;

2455 
	`scsi_£t_uöt16
(&
èsk
->
cdb
[7], 
Æloc_Àn
);

2457 
èsk
->
cdb_size
 = 10;

2458 i‡(
Æloc_Àn
 != 0) {

2459 
èsk
->
x„r_dú
 = 
SCSI_XFER_READ
;

2461 
èsk
->
x„r_dú
 = 
SCSI_XFER_NONE
;

2463 
èsk
->
expx„æí
 = 
Æloc_Àn
;

2465  
èsk
;

2466 
	}
}

2471 
scsi_èsk
 *

2472 
	$scsi_cdb_mode£À˘6
(
pf
, 
•
, 
∑øm_Àn
)

2474 
scsi_èsk
 *
èsk
;

2476 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

2477 i‡(
èsk
 =
NULL
) {

2478  
NULL
;

2481 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

2482 
èsk
->
cdb
[0] = 
SCSI_OPCODE_MODESELECT6
;

2484 i‡(
pf
) {

2485 
èsk
->
cdb
[1] |= 0x10;

2487 i‡(
•
) {

2488 
èsk
->
cdb
[1] |= 0x01;

2490 
èsk
->
cdb
[4] = 
∑øm_Àn
;

2492 
èsk
->
cdb_size
 = 6;

2493 i‡(
∑øm_Àn
 != 0) {

2494 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

2496 
èsk
->
x„r_dú
 = 
SCSI_XFER_NONE
;

2498 
èsk
->
expx„æí
 = 
∑øm_Àn
;

2500  
èsk
;

2501 
	}
}

2506 
scsi_èsk
 *

2507 
	$scsi_cdb_mode£À˘10
(
pf
, 
•
, 
∑øm_Àn
)

2509 
scsi_èsk
 *
èsk
;

2511 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

2512 i‡(
èsk
 =
NULL
) {

2513  
NULL
;

2516 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

2517 
èsk
->
cdb
[0] = 
SCSI_OPCODE_MODESELECT10
;

2519 i‡(
pf
) {

2520 
èsk
->
cdb
[1] |= 0x10;

2522 i‡(
•
) {

2523 
èsk
->
cdb
[1] |= 0x01;

2526 
	`scsi_£t_uöt16
(&
èsk
->
cdb
[7], 
∑øm_Àn
);

2528 
èsk
->
cdb_size
 = 10;

2529 i‡(
∑øm_Àn
 != 0) {

2530 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

2532 
èsk
->
x„r_dú
 = 
SCSI_XFER_NONE
;

2534 
èsk
->
expx„æí
 = 
∑øm_Àn
;

2536  
èsk
;

2537 
	}
}

2539 
scsi_mode_∑ge
 *

2540 
	$scsi_mode£n£_gë_∑ge
(
scsi_mode_£n£
 *
ms
,

2541 
scsi_mode£n£_∑ge_code
 
∑ge_code
,

2542 
sub∑ge_code
)

2544 
scsi_mode_∑ge
 *
mp
;

2546 
mp
 = 
ms
->
∑ges
; mp; m∞mp->
√xt
) {

2547 i‡(
mp
->
∑ge_code
 ==Öage_code

2548 && 
mp
->
sub∑ge_code
 == subpage_code) {

2549  
mp
;

2552  
NULL
;

2553 
	}
}

2561 
	$scsi_mode£n£_d©aö_gëfuŒsize
(
scsi_èsk
 *
èsk
, 
is_mode£n£6
)

2563 
Àn
;

2565 i‡(
is_mode£n£6
) {

2566 
Àn
 = 
	`èsk_gë_uöt8
(
èsk
, 0) + 1;

2568 
Àn
 = 
	`èsk_gë_uöt16
(
èsk
, 0) + 2;

2571  
Àn
;

2572 
	}
}

2575 
	$scsi_∑r£_mode_ˇchög
(
scsi_èsk
 *
èsk
, 
pos
, 
scsi_mode_∑ge
 *
mp
)

2577 
mp
->
ˇchög
.
ic
 = !!(
	`èsk_gë_uöt8
(
èsk
, 
pos
) & 0x80);

2578 
mp
->
ˇchög
.
abpf
 = !!(
	`èsk_gë_uöt8
(
èsk
, 
pos
) & 0x40);

2579 
mp
->
ˇchög
.
ˇp
 = !!(
	`èsk_gë_uöt8
(
èsk
, 
pos
) & 0x20);

2580 
mp
->
ˇchög
.
disc
 = !!(
	`èsk_gë_uöt8
(
èsk
, 
pos
) & 0x10);

2581 
mp
->
ˇchög
.
size
 = !!(
	`èsk_gë_uöt8
(
èsk
, 
pos
) & 0x08);

2582 
mp
->
ˇchög
.
w˚
 = !!(
	`èsk_gë_uöt8
(
èsk
, 
pos
) & 0x04);

2583 
mp
->
ˇchög
.
mf
 = !!(
	`èsk_gë_uöt8
(
èsk
, 
pos
) & 0x02);

2584 
mp
->
ˇchög
.
rcd
 = !!(
	`èsk_gë_uöt8
(
èsk
, 
pos
) & 0x01);

2586 
mp
->
ˇchög
.
dem™d_ªad_ªã¡i⁄_¥i‹ôy
 =

2587 (
	`èsk_gë_uöt8
(
èsk
, 
pos
 + 1) >> 4) & 0x0f;

2588 
mp
->
ˇchög
.
wrôe_ªã¡i⁄_¥i‹ôy
 =

2589 
	`èsk_gë_uöt8
(
èsk
, 
pos
 + 1) & 0x0f;

2591 
mp
->
ˇchög
.
dißbÀ_¥e„tch_å™s„r_Àngth
 =

2592 
	`èsk_gë_uöt16
(
èsk
, 
pos
 + 2);

2593 
mp
->
ˇchög
.
möimum_¥e„tch
 = 
	`èsk_gë_uöt16
(
èsk
, 
pos
 + 4);

2594 
mp
->
ˇchög
.
maximum_¥e„tch
 = 
	`èsk_gë_uöt16
(
èsk
, 
pos
 + 6);

2595 
mp
->
ˇchög
.
maximum_¥e„tch_˚ûög
 = 
	`èsk_gë_uöt16
(
èsk
, 
pos
 + 8);

2597 
mp
->
ˇchög
.
fsw
 = !!(
	`èsk_gë_uöt8
(
èsk
, 
pos
 + 10) & 0x80);

2598 
mp
->
ˇchög
.
lbcss
 = !!(
	`èsk_gë_uöt8
(
èsk
, 
pos
 + 10) & 0x40);

2599 
mp
->
ˇchög
.
dø
 = !!(
	`èsk_gë_uöt8
(
èsk
, 
pos
 + 10) & 0x20);

2600 
mp
->
ˇchög
.
nv_dis
 = !!(
	`èsk_gë_uöt8
(
èsk
, 
pos
 + 10) & 0x01);

2602 
mp
->
ˇchög
.
numbî_of_ˇche_£gmíts
 = 
	`èsk_gë_uöt8
(
èsk
, 
pos
 + 11);

2603 
mp
->
ˇchög
.
ˇche_£gmít_size
 = 
	`èsk_gë_uöt16
(
èsk
, 
pos
 + 12);

2604 
	}
}

2607 
	$scsi_∑r£_mode_c⁄åﬁ
(
scsi_èsk
 *
èsk
, 
pos
, 
scsi_mode_∑ge
 *
mp
)

2609 
mp
->
c⁄åﬁ
.
t°
 = (
	`èsk_gë_uöt8
(
èsk
, 
pos
) >> 5) & 0x07;

2610 
mp
->
c⁄åﬁ
.
tmf_⁄ly
 = !!(
	`èsk_gë_uöt8
(
èsk
, 
pos
) & 0x10);

2611 
mp
->
c⁄åﬁ
.
dpicz
 = !!(
	`èsk_gë_uöt8
(
èsk
, 
pos
) & 0x08);

2612 
mp
->
c⁄åﬁ
.
d_£n£
 = !!(
	`èsk_gë_uöt8
(
èsk
, 
pos
) & 0x04);

2613 
mp
->
c⁄åﬁ
.
g…sd
 = !!(
	`èsk_gë_uöt8
(
èsk
, 
pos
) & 0x02);

2614 
mp
->
c⁄åﬁ
.
æec
 = !!(
	`èsk_gë_uöt8
(
èsk
, 
pos
) & 0x01);

2616 
mp
->
c⁄åﬁ
.
queue_Æg‹ôhm_modifõr
 =

2617 (
	`èsk_gë_uöt8
(
èsk
, 
pos
 + 1) >> 4) & 0x0f;

2618 
mp
->
c⁄åﬁ
.
nu¨
 = 
	`èsk_gë_uöt8
(
èsk
, 
pos
 + 1) & 0x08;

2619 
mp
->
c⁄åﬁ
.
qîr
 = (
	`èsk_gë_uöt8
(
èsk
, 
pos
 + 1) >> 1) & 0x03;

2621 
mp
->
c⁄åﬁ
.
vs
 = !!(
	`èsk_gë_uöt8
(
èsk
, 
pos
 + 2) & 0x80);

2622 
mp
->
c⁄åﬁ
.
øc
 = !!(
	`èsk_gë_uöt8
(
èsk
, 
pos
 + 2) & 0x40);

2623 
mp
->
c⁄åﬁ
.
ua_öéck_˘æ
 =

2624 (
	`èsk_gë_uöt8
(
èsk
, 
pos
 + 2) >> 4) & 0x0f;

2625 
mp
->
c⁄åﬁ
.
swp
 = !!(
	`èsk_gë_uöt8
(
èsk
, 
pos
 + 2) & 0x08);

2627 
mp
->
c⁄åﬁ
.
©o
 = !!(
	`èsk_gë_uöt8
(
èsk
, 
pos
 + 3) & 0x80);

2628 
mp
->
c⁄åﬁ
.
ès
 = !!(
	`èsk_gë_uöt8
(
èsk
, 
pos
 + 3) & 0x40);

2629 
mp
->
c⁄åﬁ
.
©m≥
 = !!(
	`èsk_gë_uöt8
(
èsk
, 
pos
 + 3) & 0x20);

2630 
mp
->
c⁄åﬁ
.
rwwp
 = !!(
	`èsk_gë_uöt8
(
èsk
, 
pos
 + 3) & 0x10);

2631 
mp
->
c⁄åﬁ
.
autﬁﬂd_mode
 = !!(
	`èsk_gë_uöt8
(
èsk
, 
pos
 + 3) & 0x07);

2633 
mp
->
c⁄åﬁ
.
busy_timeout_≥riod
 =

2634 
	`èsk_gë_uöt16
(
èsk
, 
pos
 + 6);

2635 
mp
->
c⁄åﬁ
.
exãnded_£l·e°_com∂ëi⁄_time
 =

2636 
	`èsk_gë_uöt16
(
èsk
, 
pos
 + 8);

2637 
	}
}

2640 
	$scsi_∑r£_mode_powî_c⁄dôi⁄
(
scsi_èsk
 *
èsk
, 
pos
, 
scsi_mode_∑ge
 *
mp
)

2642 
mp
->
powî_c⁄dôi⁄
.
pm_bg_¥e˚dí˚
 =

2643 (
	`èsk_gë_uöt8
(
èsk
, 
pos
) >> 6) & 0x03;

2644 
mp
->
powî_c⁄dôi⁄
.
°™dby_y
 =

2645 !!(
	`èsk_gë_uöt8
(
èsk
, 
pos
) & 0x01);

2647 
mp
->
powî_c⁄dôi⁄
.
idÀ_c
 =

2648 !!(
	`èsk_gë_uöt8
(
èsk
, 
pos
 + 1) & 0x08);

2649 
mp
->
powî_c⁄dôi⁄
.
idÀ_b
 =

2650 !!(
	`èsk_gë_uöt8
(
èsk
, 
pos
 + 1) & 0x04);

2651 
mp
->
powî_c⁄dôi⁄
.
idÀ_a
 =

2652 !!(
	`èsk_gë_uöt8
(
èsk
, 
pos
 + 1) & 0x02);

2653 
mp
->
powî_c⁄dôi⁄
.
°™dby_z
 =

2654 !!(
	`èsk_gë_uöt8
(
èsk
, 
pos
 + 1) & 0x01);

2656 
mp
->
powî_c⁄dôi⁄
.
idÀ_a_c⁄dôi⁄_timî
 =

2657 
	`èsk_gë_uöt32
(
èsk
, 
pos
 + 2);

2658 
mp
->
powî_c⁄dôi⁄
.
°™dby_z_c⁄dôi⁄_timî
 =

2659 
	`èsk_gë_uöt32
(
èsk
, 
pos
 + 6);

2660 
mp
->
powî_c⁄dôi⁄
.
idÀ_b_c⁄dôi⁄_timî
 =

2661 
	`èsk_gë_uöt32
(
èsk
, 
pos
 + 10);

2662 
mp
->
powî_c⁄dôi⁄
.
idÀ_c_c⁄dôi⁄_timî
 =

2663 
	`èsk_gë_uöt32
(
èsk
, 
pos
 + 14);

2664 
mp
->
powî_c⁄dôi⁄
.
°™dby_y_c⁄dôi⁄_timî
 =

2665 
	`èsk_gë_uöt32
(
èsk
, 
pos
 + 18);

2667 
mp
->
powî_c⁄dôi⁄
.
ccf_idÀ
 =

2668 (
	`èsk_gë_uöt8
(
èsk
, 
pos
 + 37) >> 6) & 0x03;

2669 
mp
->
powî_c⁄dôi⁄
.
ccf_°™dby
 =

2670 (
	`èsk_gë_uöt8
(
èsk
, 
pos
 + 37) >> 4) & 0x03;

2671 
mp
->
powî_c⁄dôi⁄
.
ccf_°›≥d
 =

2672 (
	`èsk_gë_uöt8
(
èsk
, 
pos
 + 37) >> 2) & 0x03;

2673 
	}
}

2676 
	$scsi_∑r£_mode_disc⁄√˘_ªc⁄√˘
(
scsi_èsk
 *
èsk
, 
pos
, 
scsi_mode_∑ge
 *
mp
)

2678 
mp
->
disc⁄√˘_ªc⁄√˘
.
buf„r_fuŒ_øtio
 =

2679 
	`èsk_gë_uöt8
(
èsk
, 
pos
);

2680 
mp
->
disc⁄√˘_ªc⁄√˘
.
buf„r_em±y_øtio
 =

2681 
	`èsk_gë_uöt8
(
èsk
, 
pos
 + 1);

2682 
mp
->
disc⁄√˘_ªc⁄√˘
.
bus_öa˘ivôy_limô
 =

2683 
	`èsk_gë_uöt16
(
èsk
, 
pos
 + 2);

2684 
mp
->
disc⁄√˘_ªc⁄√˘
.
disc⁄√˘_time_limô
 =

2685 
	`èsk_gë_uöt16
(
èsk
, 
pos
 + 4);

2686 
mp
->
disc⁄√˘_ªc⁄√˘
.
c⁄√˘_time_limô
 =

2687 
	`èsk_gë_uöt16
(
èsk
, 
pos
 + 6);

2688 
mp
->
disc⁄√˘_ªc⁄√˘
.
maximum_bur°_size
 =

2689 
	`èsk_gë_uöt16
(
èsk
, 
pos
 + 8);

2690 
mp
->
disc⁄√˘_ªc⁄√˘
.
emdp
 =

2691 !!(
	`èsk_gë_uöt8
(
èsk
, 
pos
 + 10) & 0x80);

2692 
mp
->
disc⁄√˘_ªc⁄√˘
.
Áú_¨bôøti⁄
 =

2693 (
	`èsk_gë_uöt8
(
èsk
, 
pos
 + 10) >> 4) & 0x0f;

2694 
mp
->
disc⁄√˘_ªc⁄√˘
.
dimm
 =

2695 !!(
	`èsk_gë_uöt8
(
èsk
, 
pos
 + 10) & 0x08);

2696 
mp
->
disc⁄√˘_ªc⁄√˘
.
dtdc
 =

2697 
	`èsk_gë_uöt8
(
èsk
, 
pos
 + 10) & 0x07;

2698 
mp
->
disc⁄√˘_ªc⁄√˘
.
fú°_bur°_size
 =

2699 
	`èsk_gë_uöt16
(
èsk
, 
pos
 + 12);

2700 
	}
}

2703 
	$scsi_∑r£_mode_öf‹m©i⁄Æ_ex˚±i⁄s_c⁄åﬁ
(
scsi_èsk
 *
èsk
, 
pos
, 
scsi_mode_∑ge
 *
mp
)

2705 
mp
->
õc
.
≥rf
 = !!(
	`èsk_gë_uöt8
(
èsk
, 
pos
) & 0x80);

2706 
mp
->
õc
.
ebf
 = !!(
	`èsk_gë_uöt8
(
èsk
, 
pos
) & 0x20);

2707 
mp
->
õc
.
ewasc
 = !!(
	`èsk_gë_uöt8
(
èsk
, 
pos
) & 0x10);

2708 
mp
->
õc
.
dex˝t
 = !!(
	`èsk_gë_uöt8
(
èsk
, 
pos
) & 0x08);

2709 
mp
->
õc
.
ã°
 = !!(
	`èsk_gë_uöt8
(
èsk
, 
pos
) & 0x04);

2710 
mp
->
õc
.
ebackîr
 = !!(
	`èsk_gë_uöt8
(
èsk
, 
pos
) & 0x02);

2711 
mp
->
õc
.
logîr
 = !!(
	`èsk_gë_uöt8
(
èsk
, 
pos
) & 0x01);

2712 
mp
->
õc
.
mrõ
 = 
	`èsk_gë_uöt8
(
èsk
, 
pos
 + 1) & 0x0f;

2713 
mp
->
õc
.
öãrvÆ_timî
 = 
	`èsk_gë_uöt32
(
èsk
, 
pos
 + 2);

2714 
mp
->
õc
.
ªp‹t_cou¡
 = 
	`èsk_gë_uöt32
(
èsk
, 
pos
 + 6);

2715 
	}
}

2721 
scsi_mode_£n£
 *

2722 
	$scsi_mode£n£_d©aö_unm¨shÆl
(
scsi_èsk
 *
èsk
, 
is_mode£n£6
)

2724 
scsi_mode_£n£
 *
ms
;

2725 
hdr_Àn
;

2726 
pos
;

2728 i‡(
is_mode£n£6
) {

2729 
hdr_Àn
 = 4;

2731 
hdr_Àn
 = 8;

2734 i‡(
èsk
->
d©aö
.
size
 < 
hdr_Àn
) {

2735  
NULL
;

2738 
ms
 = 
	`scsi_mÆloc
(
èsk
, (
scsi_mode_£n£
));

2739 i‡(
ms
 =
NULL
) {

2740  
NULL
;

2743 i‡(
is_mode£n£6
) {

2744 
ms
->
mode_d©a_Àngth
 = 
	`èsk_gë_uöt8
(
èsk
, 0);

2745 
ms
->
medium_ty≥
 = 
	`èsk_gë_uöt8
(
èsk
, 1);

2746 
ms
->
devi˚_•ecific_∑ømëî
 = 
	`èsk_gë_uöt8
(
èsk
, 2);

2747 
ms
->
block_des¸ùt‹_Àngth
 = 
	`èsk_gë_uöt8
(
èsk
, 3);

2748 
ms
->
∑ges
 = 
NULL
;

2750 
ms
->
mode_d©a_Àngth
 = 
	`èsk_gë_uöt16
(
èsk
, 0);

2751 
ms
->
medium_ty≥
 = 
	`èsk_gë_uöt8
(
èsk
, 2);

2752 
ms
->
devi˚_•ecific_∑ømëî
 = 
	`èsk_gë_uöt8
(
èsk
, 3);

2753 
ms
->
l⁄glba
 = 
	`èsk_gë_uöt8
(
èsk
, 4) & 0x01;

2754 
ms
->
block_des¸ùt‹_Àngth
 = 
	`èsk_gë_uöt16
(
èsk
, 6);

2755 
ms
->
∑ges
 = 
NULL
;

2758 i‡(
ms
->
mode_d©a_Àngth
 + 1 > 
èsk
->
d©aö
.
size
) {

2759  
NULL
;

2762 
pos
 = 
hdr_Àn
 + 
ms
->
block_des¸ùt‹_Àngth
;

2763 
pos
 < 
èsk
->
d©aö
.
size
) {

2764 
scsi_mode_∑ge
 *
mp
;

2766 
mp
 = 
	`scsi_mÆloc
(
èsk
, (
scsi_mode_∑ge
));

2767 i‡(
mp
 =
NULL
) {

2768  
ms
;

2770 
mp
->
ps
 = 
	`èsk_gë_uöt8
(
èsk
, 
pos
) & 0x80;

2771 
mp
->
•f
 = 
	`èsk_gë_uöt8
(
èsk
, 
pos
) & 0x40;

2772 
mp
->
∑ge_code
 = 
	`èsk_gë_uöt8
(
èsk
, 
pos
) & 0x3f;

2773 
pos
++;

2775 i‡(
mp
->
•f
) {

2776 
mp
->
sub∑ge_code
 = 
	`èsk_gë_uöt8
(
èsk
, 
pos
);

2777 
mp
->
Àn
 = 
	`èsk_gë_uöt16
(
èsk
, 
pos
 + 1);

2778 
pos
 += 3;

2780 
mp
->
sub∑ge_code
 = 0;

2781 
mp
->
Àn
 = 
	`èsk_gë_uöt8
(
èsk
, 
pos
);

2782 
pos
++;

2785 
mp
->
∑ge_code
) {

2786 
SCSI_MODEPAGE_CACHING
:

2787 
	`scsi_∑r£_mode_ˇchög
(
èsk
, 
pos
, 
mp
);

2789 
SCSI_MODEPAGE_CONTROL
:

2790 
	`scsi_∑r£_mode_c⁄åﬁ
(
èsk
, 
pos
, 
mp
);

2792 
SCSI_MODEPAGE_DISCONNECT_RECONNECT
:

2793 
	`scsi_∑r£_mode_disc⁄√˘_ªc⁄√˘
(
èsk
, 
pos
, 
mp
);

2795 
SCSI_MODEPAGE_INFORMATIONAL_EXCEPTIONS_CONTROL
:

2796 
	`scsi_∑r£_mode_öf‹m©i⁄Æ_ex˚±i⁄s_c⁄åﬁ
(
èsk
, 
pos
, 
mp
);

2798 
SCSI_MODEPAGE_POWER_CONDITION
:

2799 
	`scsi_∑r£_mode_powî_c⁄dôi⁄
(
èsk
, 
pos
, 
mp
);

2807 
mp
->
√xt
 = 
ms
->
∑ges
;

2808 
ms
->
∑ges
 = 
mp
;

2810 
pos
 +
mp
->
Àn
;

2813  
ms
;

2814 
	}
}

2816 
scsi_d©a
 *

2817 
	$scsi_mode£n£_m¨shÆl_ˇchög
(
scsi_èsk
 *
èsk
,

2818 
scsi_mode_∑ge
 *
mp
,

2819 
hdr_size
)

2821 
scsi_d©a
 *
d©a
;

2823 
d©a
 = 
	`scsi_mÆloc
(
èsk
, (
scsi_d©a
));

2825 
d©a
->
size
 = 20 + 
hdr_size
;

2826 
d©a
->d©®
	`scsi_mÆloc
(
èsk
, d©a->
size
);

2828 i‡(
mp
->
ˇchög
.
ic
Ë
d©a
->d©a[
hdr_size
 + 2] |= 0x80;

2829 i‡(
mp
->
ˇchög
.
abpf
Ë
d©a
->d©a[
hdr_size
 + 2] |= 0x40;

2830 i‡(
mp
->
ˇchög
.
ˇp
Ë
d©a
->d©a[
hdr_size
 + 2] |= 0x20;

2831 i‡(
mp
->
ˇchög
.
disc
Ë
d©a
->d©a[
hdr_size
 + 2] |= 0x10;

2832 i‡(
mp
->
ˇchög
.
size
Ë
d©a
->d©a[
hdr_size
 + 2] |= 0x08;

2833 i‡(
mp
->
ˇchög
.
w˚
Ë
d©a
->d©a[
hdr_size
 + 2] |= 0x04;

2834 i‡(
mp
->
ˇchög
.
mf
Ë
d©a
->d©a[
hdr_size
 + 2] |= 0x02;

2835 i‡(
mp
->
ˇchög
.
rcd
Ë
d©a
->d©a[
hdr_size
 + 2] |= 0x01;

2837 
d©a
->d©a[
hdr_size
 + 3] |(
mp
->
ˇchög
.
dem™d_ªad_ªã¡i⁄_¥i‹ôy
 << 4) & 0xf0;

2838 
d©a
->d©a[
hdr_size
 + 3] |
mp
->
ˇchög
.
wrôe_ªã¡i⁄_¥i‹ôy
 & 0x0f;

2840 
	`scsi_£t_uöt16
(&
d©a
->d©a[
hdr_size
 + 4], 
mp
->
ˇchög
.
dißbÀ_¥e„tch_å™s„r_Àngth
);

2841 
	`scsi_£t_uöt16
(&
d©a
->d©a[
hdr_size
 + 6], 
mp
->
ˇchög
.
möimum_¥e„tch
);

2842 
	`scsi_£t_uöt16
(&
d©a
->d©a[
hdr_size
 + 8], 
mp
->
ˇchög
.
maximum_¥e„tch
);

2843 
	`scsi_£t_uöt16
(&
d©a
->d©a[
hdr_size
 + 10], 
mp
->
ˇchög
.
maximum_¥e„tch_˚ûög
);

2845 i‡(
mp
->
ˇchög
.
fsw
Ë
d©a
->d©a[
hdr_size
 + 12] |= 0x80;

2846 i‡(
mp
->
ˇchög
.
lbcss
Ë
d©a
->d©a[
hdr_size
 + 12] |= 0x40;

2847 i‡(
mp
->
ˇchög
.
dø
Ë
d©a
->d©a[
hdr_size
 + 12] |= 0x20;

2848 i‡(
mp
->
ˇchög
.
nv_dis
Ë
d©a
->d©a[
hdr_size
 + 12] |= 0x01;

2850 
d©a
->d©a[
hdr_size
 + 13] = 
mp
->
ˇchög
.
numbî_of_ˇche_£gmíts
;

2852 
	`scsi_£t_uöt16
(&
d©a
->d©a[
hdr_size
 + 14], 
mp
->
ˇchög
.
ˇche_£gmít_size
);

2854  
d©a
;

2855 
	}
}

2857 
scsi_d©a
 *

2858 
	$scsi_mode£n£_m¨shÆl_c⁄åﬁ
(
scsi_èsk
 *
èsk
,

2859 
scsi_mode_∑ge
 *
mp
,

2860 
hdr_size
)

2862 
scsi_d©a
 *
d©a
;

2864 
d©a
 = 
	`scsi_mÆloc
(
èsk
, (
scsi_d©a
));

2866 
d©a
->
size
 = 12 + 
hdr_size
;

2867 
d©a
->d©®
	`scsi_mÆloc
(
èsk
, d©a->
size
);

2869 
d©a
->d©a[
hdr_size
 + 2] |(
mp
->
c⁄åﬁ
.
t°
 << 5) & 0xe0;

2870 i‡(
mp
->
c⁄åﬁ
.
tmf_⁄ly
Ë
d©a
->d©a[
hdr_size
 + 2] |= 0x10;

2871 i‡(
mp
->
c⁄åﬁ
.
dpicz
Ë
d©a
->d©a[
hdr_size
 + 2] |= 0x08;

2872 i‡(
mp
->
c⁄åﬁ
.
d_£n£
Ë
d©a
->d©a[
hdr_size
 + 2] |= 0x04;

2873 i‡(
mp
->
c⁄åﬁ
.
g…sd
Ë
d©a
->d©a[
hdr_size
 + 2] |= 0x02;

2874 i‡(
mp
->
c⁄åﬁ
.
æec
Ë
d©a
->d©a[
hdr_size
 + 2] |= 0x01;

2876 
d©a
->d©a[
hdr_size
 + 3] |(
mp
->
c⁄åﬁ
.
queue_Æg‹ôhm_modifõr
 << 4) & 0xf0;

2877 i‡(
mp
->
c⁄åﬁ
.
nu¨
Ë
d©a
->d©a[
hdr_size
 + 3] |= 0x08;

2878 
d©a
->d©a[
hdr_size
 + 3] |(
mp
->
c⁄åﬁ
.
qîr
 << 1) & 0x06;

2880 i‡(
mp
->
c⁄åﬁ
.
vs
Ë
d©a
->d©a[
hdr_size
 + 4] |= 0x80;

2881 i‡(
mp
->
c⁄åﬁ
.
øc
Ë
d©a
->d©a[
hdr_size
 + 4] |= 0x40;

2882 
d©a
->d©a[
hdr_size
 + 4] |(
mp
->
c⁄åﬁ
.
ua_öéck_˘æ
 << 4) & 0x30;

2883 i‡(
mp
->
c⁄åﬁ
.
swp
Ë
d©a
->d©a[
hdr_size
 + 4] |= 0x08;

2885 i‡(
mp
->
c⁄åﬁ
.
©o
Ë
d©a
->d©a[
hdr_size
 + 5] |= 0x80;

2886 i‡(
mp
->
c⁄åﬁ
.
ès
Ë
d©a
->d©a[
hdr_size
 + 5] |= 0x40;

2887 i‡(
mp
->
c⁄åﬁ
.
©m≥
Ë
d©a
->d©a[
hdr_size
 + 5] |= 0x20;

2888 i‡(
mp
->
c⁄åﬁ
.
rwwp
Ë
d©a
->d©a[
hdr_size
 + 5] |= 0x10;

2889 
d©a
->d©a[
hdr_size
 + 5] |
mp
->
c⁄åﬁ
.
autﬁﬂd_mode
 & 0x07;

2891 
	`scsi_£t_uöt16
(&
d©a
->d©a[
hdr_size
 + 8], 
mp
->
c⁄åﬁ
.
busy_timeout_≥riod
);

2892 
	`scsi_£t_uöt16
(&
d©a
->d©a[
hdr_size
 + 10], 
mp
->
c⁄åﬁ
.
exãnded_£l·e°_com∂ëi⁄_time
);

2894  
d©a
;

2895 
	}
}

2897 
scsi_d©a
 *

2898 
	$scsi_mode£n£_m¨shÆl_powî_c⁄dôi⁄
(
scsi_èsk
 *
èsk
,

2899 
scsi_mode_∑ge
 *
mp
,

2900 
hdr_size
)

2902 
scsi_d©a
 *
d©a
;

2904 
d©a
 = 
	`scsi_mÆloc
(
èsk
, (
scsi_d©a
));

2906 
d©a
->
size
 = 40 + 
hdr_size
;

2907 
d©a
->d©®
	`scsi_mÆloc
(
èsk
, d©a->
size
);

2909 
d©a
->d©a[
hdr_size
 + 2] |=

2910 (
mp
->
powî_c⁄dôi⁄
.
pm_bg_¥e˚dí˚
 << 6) & 0xc0;

2911 i‡(
mp
->
powî_c⁄dôi⁄
.
°™dby_y
Ë
d©a
->d©a[
hdr_size
 + 2] |= 0x01;

2913 i‡(
mp
->
powî_c⁄dôi⁄
.
idÀ_c
Ë
d©a
->d©a[
hdr_size
 + 3] |= 0x08;

2914 i‡(
mp
->
powî_c⁄dôi⁄
.
idÀ_b
Ë
d©a
->d©a[
hdr_size
 + 3] |= 0x04;

2915 i‡(
mp
->
powî_c⁄dôi⁄
.
idÀ_a
Ë
d©a
->d©a[
hdr_size
 + 3] |= 0x02;

2916 i‡(
mp
->
powî_c⁄dôi⁄
.
°™dby_z
Ë
d©a
->d©a[
hdr_size
 + 3] |= 0x01;

2918 
	`scsi_£t_uöt32
(&
d©a
->d©a[
hdr_size
 + 4],

2919 
mp
->
powî_c⁄dôi⁄
.
idÀ_a_c⁄dôi⁄_timî
);

2920 
	`scsi_£t_uöt32
(&
d©a
->d©a[
hdr_size
 + 8],

2921 
mp
->
powî_c⁄dôi⁄
.
°™dby_z_c⁄dôi⁄_timî
);

2922 
	`scsi_£t_uöt32
(&
d©a
->d©a[
hdr_size
 + 12],

2923 
mp
->
powî_c⁄dôi⁄
.
idÀ_b_c⁄dôi⁄_timî
);

2924 
	`scsi_£t_uöt32
(&
d©a
->d©a[
hdr_size
 + 16],

2925 
mp
->
powî_c⁄dôi⁄
.
idÀ_c_c⁄dôi⁄_timî
);

2926 
	`scsi_£t_uöt32
(&
d©a
->d©a[
hdr_size
 + 20],

2927 
mp
->
powî_c⁄dôi⁄
.
°™dby_y_c⁄dôi⁄_timî
);

2929 
d©a
->d©a[
hdr_size
 + 39] |=

2930 (
mp
->
powî_c⁄dôi⁄
.
ccf_idÀ
 << 6) & 0xc0;

2931 
d©a
->d©a[
hdr_size
 + 39] |=

2932 (
mp
->
powî_c⁄dôi⁄
.
ccf_°™dby
 << 4) & 0x30;

2933 
d©a
->d©a[
hdr_size
 + 39] |=

2934 (
mp
->
powî_c⁄dôi⁄
.
ccf_°›≥d
 << 2) & 0x0c;

2936  
d©a
;

2937 
	}
}

2939 
scsi_d©a
 *

2940 
	$scsi_mode£n£_m¨shÆl_disc⁄√˘_ªc⁄√˘
(
scsi_èsk
 *
èsk
,

2941 
scsi_mode_∑ge
 *
mp
,

2942 
hdr_size
)

2944 
scsi_d©a
 *
d©a
;

2946 
d©a
 = 
	`scsi_mÆloc
(
èsk
, (
scsi_d©a
));

2948 
d©a
->
size
 = 16 + 
hdr_size
;

2949 
d©a
->d©®
	`scsi_mÆloc
(
èsk
, d©a->
size
);

2951 
d©a
->d©a[
hdr_size
 + 2] = 
mp
->
disc⁄√˘_ªc⁄√˘
.
buf„r_fuŒ_øtio
;

2952 
d©a
->d©a[
hdr_size
 + 3] = 
mp
->
disc⁄√˘_ªc⁄√˘
.
buf„r_em±y_øtio
;

2953 
	`scsi_£t_uöt16
(&
d©a
->d©a[
hdr_size
 + 4], 
mp
->
disc⁄√˘_ªc⁄√˘
.
bus_öa˘ivôy_limô
);

2954 
	`scsi_£t_uöt16
(&
d©a
->d©a[
hdr_size
 + 6], 
mp
->
disc⁄√˘_ªc⁄√˘
.
disc⁄√˘_time_limô
);

2955 
	`scsi_£t_uöt16
(&
d©a
->d©a[
hdr_size
 + 8], 
mp
->
disc⁄√˘_ªc⁄√˘
.
c⁄√˘_time_limô
);

2956 
	`scsi_£t_uöt16
(&
d©a
->d©a[
hdr_size
 + 10], 
mp
->
disc⁄√˘_ªc⁄√˘
.
maximum_bur°_size
);

2958 i‡(
mp
->
disc⁄√˘_ªc⁄√˘
.
emdp
Ë
d©a
->d©a[
hdr_size
 + 12] |= 0x80;

2959 
d©a
->d©a[
hdr_size
 + 12] |(
mp
->
disc⁄√˘_ªc⁄√˘
.
Áú_¨bôøti⁄
 << 4) & 0x70;

2960 i‡(
mp
->
disc⁄√˘_ªc⁄√˘
.
dimm
Ë
d©a
->d©a[
hdr_size
 + 12] |= 0x08;

2961 
d©a
->d©a[
hdr_size
 + 12] |
mp
->
disc⁄√˘_ªc⁄√˘
.
dtdc
 & 0x07;

2963 
	`scsi_£t_uöt16
(&
d©a
->d©a[
hdr_size
 + 14], 
mp
->
disc⁄√˘_ªc⁄√˘
.
fú°_bur°_size
);

2965  
d©a
;

2966 
	}
}

2968 
scsi_d©a
 *

2969 
	$scsi_mode£n£_m¨shÆl_öf‹m©i⁄Æ_ex˚±i⁄s_c⁄åﬁ
(
scsi_èsk
 *
èsk
,

2970 
scsi_mode_∑ge
 *
mp
,

2971 
hdr_size
)

2973 
scsi_d©a
 *
d©a
;

2975 
d©a
 = 
	`scsi_mÆloc
(
èsk
, (
scsi_d©a
));

2977 
d©a
->
size
 = 12 + 
hdr_size
;

2978 
d©a
->d©®
	`scsi_mÆloc
(
èsk
, d©a->
size
);

2980 i‡(
mp
->
õc
.
≥rf
Ë
d©a
->d©a[
hdr_size
 + 2] |= 0x80;

2981 i‡(
mp
->
õc
.
ebf
Ë
d©a
->d©a[
hdr_size
 + 2] |= 0x20;

2982 i‡(
mp
->
õc
.
ewasc
Ë
d©a
->d©a[
hdr_size
 + 2] |= 0x10;

2983 i‡(
mp
->
õc
.
dex˝t
Ë
d©a
->d©a[
hdr_size
 + 2] |= 0x08;

2984 i‡(
mp
->
õc
.
ã°
Ë
d©a
->d©a[
hdr_size
 + 2] |= 0x04;

2985 i‡(
mp
->
õc
.
ebackîr
Ë
d©a
->d©a[
hdr_size
 + 2] |= 0x02;

2986 i‡(
mp
->
õc
.
logîr
Ë
d©a
->d©a[
hdr_size
 + 2] |= 0x01;

2988 
d©a
->d©a[
hdr_size
 + 3] |
mp
->
õc
.
mrõ
 & 0x0f;

2990 
	`scsi_£t_uöt32
(&
d©a
->d©a[
hdr_size
 + 4], 
mp
->
õc
.
öãrvÆ_timî
);

2991 
	`scsi_£t_uöt32
(&
d©a
->d©a[
hdr_size
 + 8], 
mp
->
õc
.
ªp‹t_cou¡
);

2993  
d©a
;

2994 
	}
}

2999 
scsi_d©a
 *

3000 
	$scsi_mode£n£_d©aout_m¨shÆl
(
scsi_èsk
 *
èsk
,

3001 
scsi_mode_∑ge
 *
mp
,

3002 
is_mode£À˘6
)

3004 
scsi_d©a
 *
d©a
;

3005 
hdr_size
 = 
is_mode£À˘6
 ? 4 : 8;

3007 
mp
->
∑ge_code
) {

3008 
SCSI_MODEPAGE_CACHING
:

3009 
d©a
 = 
	`scsi_mode£n£_m¨shÆl_ˇchög
(
èsk
, 
mp
, 
hdr_size
);

3011 
SCSI_MODEPAGE_CONTROL
:

3012 
d©a
 = 
	`scsi_mode£n£_m¨shÆl_c⁄åﬁ
(
èsk
, 
mp
, 
hdr_size
);

3014 
SCSI_MODEPAGE_DISCONNECT_RECONNECT
:

3015 
d©a
 = 
	`scsi_mode£n£_m¨shÆl_disc⁄√˘_ªc⁄√˘
(
èsk
, 
mp
, 
hdr_size
);

3017 
SCSI_MODEPAGE_INFORMATIONAL_EXCEPTIONS_CONTROL
:

3018 
d©a
 = 
	`scsi_mode£n£_m¨shÆl_öf‹m©i⁄Æ_ex˚±i⁄s_c⁄åﬁ
(
èsk
, 
mp
, 
hdr_size
);

3020 
SCSI_MODEPAGE_POWER_CONDITION
:

3021 
d©a
 = 
	`scsi_mode£n£_m¨shÆl_powî_c⁄dôi⁄
(
èsk
, 
mp
, 
hdr_size
);

3025  
NULL
;

3028 i‡(
d©a
 =
NULL
) {

3029  
NULL
;

3032 
d©a
->d©a[
hdr_size
 + 0] = 
mp
->
∑ge_code
 & 0x3f;

3033 i‡(
mp
->
ps
) {

3034 
d©a
->d©a[
hdr_size
 + 0] |= 0x80;

3036 i‡(
mp
->
•f
) {

3037 
d©a
->d©a[
hdr_size
 + 0] |= 0x40;

3038 
d©a
->d©a[
hdr_size
 + 1] = 
mp
->
sub∑ge_code
;

3039 
	`scsi_£t_uöt16
(&
d©a
->d©a[
hdr_size
 + 2], d©a->
size
 -hdr_size - 4);

3041 
d©a
->d©a[
hdr_size
 + 1] = (d©a->
size
 - hdr_size - 2) & 0xff;

3044  
d©a
;

3045 
	}
}

3051 
scsi_èsk
 *

3052 
	$scsi_cdb_°¨t°›unô
(
immed
, 
pcm
, 
pc
, 
no_Êush
, 
l€j
, 
°¨t
)

3054 
scsi_èsk
 *
èsk
;

3056 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

3057 i‡(
èsk
 =
NULL
) {

3058  
NULL
;

3061 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

3062 
èsk
->
cdb
[0] = 
SCSI_OPCODE_STARTSTOPUNIT
;

3064 i‡(
immed
) {

3065 
èsk
->
cdb
[1] |= 0x01;

3067 
èsk
->
cdb
[3] |
pcm
 & 0x0f;

3068 
èsk
->
cdb
[4] |(
pc
 << 4) & 0xf0;

3069 i‡(
no_Êush
) {

3070 
èsk
->
cdb
[4] |= 0x04;

3072 i‡(
l€j
) {

3073 
èsk
->
cdb
[4] |= 0x02;

3075 i‡(
°¨t
) {

3076 
èsk
->
cdb
[4] |= 0x01;

3080 
èsk
->
cdb_size
 = 6;

3081 
èsk
->
x„r_dú
 = 
SCSI_XFER_NONE
;

3082 
èsk
->
expx„æí
 = 0;

3084  
èsk
;

3085 
	}
}

3090 
scsi_èsk
 *

3091 
	$scsi_cdb_¥evíèŒow
(
¥evít
)

3093 
scsi_èsk
 *
èsk
;

3095 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

3096 i‡(
èsk
 =
NULL
) {

3097  
NULL
;

3100 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

3101 
èsk
->
cdb
[0] = 
SCSI_OPCODE_PREVENTALLOW
;

3103 
èsk
->
cdb
[4] = 
¥evít
 & 0x03;

3105 
èsk
->
cdb_size
 = 6;

3106 
èsk
->
x„r_dú
 = 
SCSI_XFER_NONE
;

3107 
èsk
->
expx„æí
 = 0;

3109  
èsk
;

3110 
	}
}

3115 
scsi_èsk
 *

3116 
	$scsi_cdb_synchr⁄izeˇche10
(
lba
, 
num_blocks
, 
syn˙v
, 
immed
)

3118 
scsi_èsk
 *
èsk
;

3120 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

3121 i‡(
èsk
 =
NULL
) {

3122  
NULL
;

3125 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

3126 
èsk
->
cdb
[0] = 
SCSI_OPCODE_SYNCHRONIZECACHE10
;

3128 i‡(
syn˙v
) {

3129 
èsk
->
cdb
[1] |= 0x04;

3131 i‡(
immed
) {

3132 
èsk
->
cdb
[1] |= 0x02;

3134 
	`scsi_£t_uöt32
(&
èsk
->
cdb
[2], 
lba
);

3135 
	`scsi_£t_uöt16
(&
èsk
->
cdb
[7], 
num_blocks
);

3137 
èsk
->
cdb_size
 = 10;

3138 
èsk
->
x„r_dú
 = 
SCSI_XFER_NONE
;

3139 
èsk
->
expx„æí
 = 0;

3141  
èsk
;

3142 
	}
}

3147 
scsi_èsk
 *

3148 
	$scsi_cdb_synchr⁄izeˇche16
(
uöt64_t
 
lba
, 
uöt32_t
 
num_blocks
, 
syn˙v
, 
immed
)

3150 
scsi_èsk
 *
èsk
;

3152 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

3153 i‡(
èsk
 =
NULL
) {

3154  
NULL
;

3157 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

3158 
èsk
->
cdb
[0] = 
SCSI_OPCODE_SYNCHRONIZECACHE16
;

3160 i‡(
syn˙v
) {

3161 
èsk
->
cdb
[1] |= 0x04;

3163 i‡(
immed
) {

3164 
èsk
->
cdb
[1] |= 0x02;

3166 
	`scsi_£t_uöt32
(&
èsk
->
cdb
[2], 
lba
 >> 32);

3167 
	`scsi_£t_uöt32
(&
èsk
->
cdb
[6], 
lba
 & 0xffffffff);

3168 
	`scsi_£t_uöt32
(&
èsk
->
cdb
[10], 
num_blocks
);

3170 
èsk
->
cdb_size
 = 16;

3171 
èsk
->
x„r_dú
 = 
SCSI_XFER_NONE
;

3172 
èsk
->
expx„æí
 = 0;

3174  
èsk
;

3175 
	}
}

3180 
scsi_èsk
 *

3181 
	$scsi_cdb_¥e„tch10
(
uöt32_t
 
lba
, 
num_blocks
, 
immed
, 
group
)

3183 
scsi_èsk
 *
èsk
;

3185 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

3186 i‡(
èsk
 =
NULL
) {

3187  
NULL
;

3190 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

3191 
èsk
->
cdb
[0] = 
SCSI_OPCODE_PREFETCH10
;

3193 i‡(
immed
) {

3194 
èsk
->
cdb
[1] |= 0x02;

3196 
	`scsi_£t_uöt32
(&
èsk
->
cdb
[2], 
lba
);

3197 
èsk
->
cdb
[6] |
group
 & 0x1f;

3198 
	`scsi_£t_uöt16
(&
èsk
->
cdb
[7], 
num_blocks
);

3200 
èsk
->
cdb_size
 = 10;

3201 
èsk
->
x„r_dú
 = 
SCSI_XFER_NONE
;

3202 
èsk
->
expx„æí
 = 0;

3204  
èsk
;

3205 
	}
}

3210 
scsi_èsk
 *

3211 
	$scsi_cdb_¥e„tch16
(
uöt64_t
 
lba
, 
num_blocks
, 
immed
, 
group
)

3213 
scsi_èsk
 *
èsk
;

3215 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

3216 i‡(
èsk
 =
NULL
) {

3217  
NULL
;

3220 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

3221 
èsk
->
cdb
[0] = 
SCSI_OPCODE_PREFETCH16
;

3223 i‡(
immed
) {

3224 
èsk
->
cdb
[1] |= 0x02;

3226 
	`scsi_£t_uöt32
(&
èsk
->
cdb
[2], 
lba
 >> 32);

3227 
	`scsi_£t_uöt32
(&
èsk
->
cdb
[6], 
lba
 & 0xffffffff);

3228 
	`scsi_£t_uöt32
(&
èsk
->
cdb
[10], 
num_blocks
);

3230 
èsk
->
cdb
[14] |
group
 & 0x1f;

3232 
èsk
->
cdb_size
 = 16;

3233 
èsk
->
x„r_dú
 = 
SCSI_XFER_NONE
;

3234 
èsk
->
expx„æí
 = 0;

3236  
èsk
;

3237 
	}
}

3242 
scsi_èsk
 *

3243 
	$scsi_cdb_£rvi˚a˘i⁄ö16
(
scsi_£rvi˚_a˘i⁄_ö
 
ß
, 
uöt32_t
 
x„æí
)

3245 
scsi_èsk
 *
èsk
;

3247 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

3248 i‡(
èsk
 =
NULL
) {

3249  
NULL
;

3252 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

3253 
èsk
->
cdb
[0] = 
SCSI_OPCODE_SERVICE_ACTION_IN
;

3255 
èsk
->
cdb
[1] = 
ß
;

3257 
	`scsi_£t_uöt32
(&
èsk
->
cdb
[10], 
x„æí
);

3259 
èsk
->
cdb_size
 = 16;

3260 i‡(
x„æí
 != 0) {

3261 
èsk
->
x„r_dú
 = 
SCSI_XFER_READ
;

3263 
èsk
->
x„r_dú
 = 
SCSI_XFER_NONE
;

3265 
èsk
->
expx„æí
 = 
x„æí
;

3267  
èsk
;

3268 
	}
}

3273 
scsi_èsk
 *

3274 
	$scsi_cdb_ªadˇ∑côy16
()

3276  
	`scsi_cdb_£rvi˚a˘i⁄ö16
(
SCSI_READCAPACITY16
, 32);

3277 
	}
}

3282 
scsi_èsk
 *

3283 
	$scsi_cdb_gë_lba_°©us
(
uöt64_t
 
°¨tög_lba
, 
uöt32_t
 
Æloc_Àn
)

3285 
scsi_èsk
 *
èsk
;

3287 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

3288 i‡(
èsk
 =
NULL
) {

3289  
NULL
;

3292 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

3293 
èsk
->
cdb
[0] = 
SCSI_OPCODE_SERVICE_ACTION_IN
;

3295 
èsk
->
cdb
[1] = 
SCSI_GET_LBA_STATUS
;

3297 
	`scsi_£t_uöt32
(&
èsk
->
cdb
[2], 
°¨tög_lba
 >> 32);

3298 
	`scsi_£t_uöt32
(&
èsk
->
cdb
[6], 
°¨tög_lba
 & 0xffffffff);

3299 
	`scsi_£t_uöt32
(&
èsk
->
cdb
[10], 
Æloc_Àn
);

3301 
èsk
->
cdb_size
 = 16;

3302 i‡(
Æloc_Àn
 != 0) {

3303 
èsk
->
x„r_dú
 = 
SCSI_XFER_READ
;

3305 
èsk
->
x„r_dú
 = 
SCSI_XFER_NONE
;

3307 
èsk
->
expx„æí
 = 
Æloc_Àn
;

3309  
èsk
;

3310 
	}
}

3315 
scsi_èsk
 *

3316 
	$scsi_cdb_wrôevîify10
(
uöt32_t
 
lba
, uöt32_à
x„æí
, 
blocksize
, 
wΩrŸe˘
, 
dpo
, 
bytchk
, 
group_numbî
)

3318 
scsi_èsk
 *
èsk
;

3320 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

3321 i‡(
èsk
 =
NULL
) {

3322  
NULL
;

3325 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

3326 
èsk
->
cdb
[0] = 
SCSI_OPCODE_WRITE_VERIFY10
;

3328 
èsk
->
cdb
[1] |((
wΩrŸe˘
 & 0x07) << 5);

3329 i‡(
dpo
) {

3330 
èsk
->
cdb
[1] |= 0x10;

3332 i‡(
bytchk
) {

3333 
èsk
->
cdb
[1] |= 0x02;

3336 
	`scsi_£t_uöt32
(&
èsk
->
cdb
[2], 
lba
);

3337 
	`scsi_£t_uöt16
(&
èsk
->
cdb
[7], 
x„æí
/
blocksize
);

3339 
èsk
->
cdb
[6] |(
group_numbî
 & 0x1f);

3341 
èsk
->
cdb_size
 = 10;

3342 i‡(
x„æí
 != 0) {

3343 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

3345 
èsk
->
x„r_dú
 = 
SCSI_XFER_NONE
;

3347 
èsk
->
expx„æí
 = 
x„æí
;

3349  
èsk
;

3350 
	}
}

3355 
scsi_èsk
 *

3356 
	$scsi_cdb_wrôevîify12
(
uöt32_t
 
lba
, uöt32_à
x„æí
, 
blocksize
, 
wΩrŸe˘
, 
dpo
, 
bytchk
, 
group_numbî
)

3358 
scsi_èsk
 *
èsk
;

3360 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

3361 i‡(
èsk
 =
NULL
) {

3362  
NULL
;

3365 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

3366 
èsk
->
cdb
[0] = 
SCSI_OPCODE_WRITE_VERIFY12
;

3368 
èsk
->
cdb
[1] |((
wΩrŸe˘
 & 0x07) << 5);

3369 i‡(
dpo
) {

3370 
èsk
->
cdb
[1] |= 0x10;

3372 i‡(
bytchk
) {

3373 
èsk
->
cdb
[1] |= 0x02;

3376 
	`scsi_£t_uöt32
(&
èsk
->
cdb
[2], 
lba
);

3377 
	`scsi_£t_uöt32
(&
èsk
->
cdb
[6], 
x„æí
/
blocksize
);

3379 
èsk
->
cdb
[10] |(
group_numbî
 & 0x1f);

3381 
èsk
->
cdb_size
 = 12;

3382 i‡(
x„æí
 != 0) {

3383 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

3385 
èsk
->
x„r_dú
 = 
SCSI_XFER_NONE
;

3387 
èsk
->
expx„æí
 = 
x„æí
;

3389  
èsk
;

3390 
	}
}

3395 
scsi_èsk
 *

3396 
	$scsi_cdb_wrôevîify16
(
uöt64_t
 
lba
, 
uöt32_t
 
x„æí
, 
blocksize
, 
wΩrŸe˘
, 
dpo
, 
bytchk
, 
group_numbî
)

3398 
scsi_èsk
 *
èsk
;

3400 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

3401 i‡(
èsk
 =
NULL
) {

3402  
NULL
;

3405 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

3406 
èsk
->
cdb
[0] = 
SCSI_OPCODE_WRITE_VERIFY16
;

3408 
èsk
->
cdb
[1] |((
wΩrŸe˘
 & 0x07) << 5);

3409 i‡(
dpo
) {

3410 
èsk
->
cdb
[1] |= 0x10;

3412 i‡(
bytchk
) {

3413 
èsk
->
cdb
[1] |= 0x02;

3416 
	`scsi_£t_uöt32
(&
èsk
->
cdb
[2], 
lba
 >> 32);

3417 
	`scsi_£t_uöt32
(&
èsk
->
cdb
[6], 
lba
 & 0xffffffff);

3418 
	`scsi_£t_uöt32
(&
èsk
->
cdb
[10], 
x„æí
/
blocksize
);

3420 
èsk
->
cdb
[14] |(
group_numbî
 & 0x1f);

3422 
èsk
->
cdb_size
 = 16;

3423 i‡(
x„æí
 != 0) {

3424 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

3426 
èsk
->
x„r_dú
 = 
SCSI_XFER_NONE
;

3428 
èsk
->
expx„æí
 = 
x„æí
;

3430  
èsk
;

3431 
	}
}

3436 
scsi_èsk
 *

3437 
	$scsi_cdb_exãnded_c›y
(
∑øm_Àn
)

3439 
scsi_èsk
 *
èsk
;

3441 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

3442 i‡(
èsk
 =
NULL
)

3443  
NULL
;

3445 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

3446 
èsk
->
cdb
[0] = 
SCSI_OPCODE_EXTENDED_COPY
;

3447 
èsk
->
cdb
[10] = (
∑øm_Àn
 >> 24) & 0xFF;

3448 
èsk
->
cdb
[11] = (
∑øm_Àn
 >> 16) & 0xFF;

3449 
èsk
->
cdb
[12] = (
∑øm_Àn
 >> 8) & 0xFF;

3450 
èsk
->
cdb
[13] = 
∑øm_Àn
 & 0xFF;

3452 
èsk
->
cdb_size
 = 16;

3453 i‡(
∑øm_Àn
) {

3454 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

3456 
èsk
->
expx„æí
 = 
∑øm_Àn
;

3458  
èsk
;

3459 
	}
}

3464 
scsi_èsk
 *

3465 
	$scsi_cdb_ª˚ive_c›y_ªsu…s
(
scsi_c›y_ªsu…s_ß
 
ß
, 
li°_id
, 
x„æí
)

3467 
scsi_èsk
 *
èsk
;

3469 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

3470 i‡(
èsk
 =
NULL
) {

3471  
NULL
;

3474 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

3475 
èsk
->
cdb
[0] = 
SCSI_OPCODE_RECEIVE_COPY_RESULTS
;

3476 
èsk
->
cdb
[1] |
ß
 & 0x1f;

3477 
èsk
->
cdb
[2] = 
li°_id
 & 0xFF;

3479 
	`scsi_£t_uöt32
(&
èsk
->
cdb
[10], 
x„æí
);

3481 
èsk
->
cdb_size
 = 16;

3482 i‡(
x„æí
 != 0) {

3483 
èsk
->
x„r_dú
 = 
SCSI_XFER_READ
;

3485 
èsk
->
x„r_dú
 = 
SCSI_XFER_NONE
;

3487 
èsk
->
expx„æí
 = 
x„æí
;

3489  
èsk
;

3490 
	}
}

3493 
	$scsi_d©aö_gëfuŒsize
(
scsi_èsk
 *
èsk
)

3495 
èsk
->
cdb
[0]) {

3496 
SCSI_OPCODE_TESTUNITREADY
:

3498 
SCSI_OPCODE_INQUIRY
:

3499  
	`scsi_öquúy_d©aö_gëfuŒsize
(
èsk
);

3500 
SCSI_OPCODE_MODESENSE6
:

3501  
	`scsi_mode£n£_d©aö_gëfuŒsize
(
èsk
, 1);

3502 
SCSI_OPCODE_READCAPACITY10
:

3503  
	`scsi_ªadˇ∑côy10_d©aö_gëfuŒsize
(
èsk
);

3504 
SCSI_OPCODE_SYNCHRONIZECACHE10
:

3506 
SCSI_OPCODE_READTOC
:

3507  
	`scsi_ªadtoc_d©aö_gëfuŒsize
(
èsk
);

3508 
SCSI_OPCODE_REPORTLUNS
:

3509  
	`scsi_ªp‹éuns_d©aö_gëfuŒsize
(
èsk
);

3510 
SCSI_OPCODE_PERSISTENT_RESERVE_IN
:

3511  
	`scsi_≥rsi°íåe£rveö_d©aö_gëfuŒsize
(
èsk
);

3512 
SCSI_OPCODE_MAINTENANCE_IN
:

3513  
	`scsi_maöã«n˚ö_d©aö_gëfuŒsize
(
èsk
);

3516 
	}
}

3519 
	$scsi_d©aö_unm¨shÆl
(
scsi_èsk
 *
èsk
)

3521 i‡(!
èsk
 || !èsk->
d©aö
.
size
)

3522  
NULL
;

3524 
èsk
->
cdb
[0]) {

3525 
SCSI_OPCODE_INQUIRY
:

3526  
	`scsi_öquúy_d©aö_unm¨shÆl
(
èsk
);

3527 
SCSI_OPCODE_MODESENSE6
:

3528  
	`scsi_mode£n£_d©aö_unm¨shÆl
(
èsk
, 1);

3529 
SCSI_OPCODE_MODESENSE10
:

3530  
	`scsi_mode£n£_d©aö_unm¨shÆl
(
èsk
, 0);

3531 
SCSI_OPCODE_READCAPACITY10
:

3532  
	`scsi_ªadˇ∑côy10_d©aö_unm¨shÆl
(
èsk
);

3533 
SCSI_OPCODE_READTOC
:

3534  
	`scsi_ªadtoc_d©aö_unm¨shÆl
(
èsk
);

3535 
SCSI_OPCODE_REPORTLUNS
:

3536  
	`scsi_ªp‹éuns_d©aö_unm¨shÆl
(
èsk
);

3537 
SCSI_OPCODE_SERVICE_ACTION_IN
:

3538  
	`scsi_£rvi˚a˘i⁄ö_d©aö_unm¨shÆl
(
èsk
);

3539 
SCSI_OPCODE_PERSISTENT_RESERVE_IN
:

3540  
	`scsi_≥rsi°íåe£rveö_d©aö_unm¨shÆl
(
èsk
);

3541 
SCSI_OPCODE_MAINTENANCE_IN
:

3542  
	`scsi_maöã«n˚ö_d©aö_unm¨shÆl
(
èsk
);

3543 
SCSI_OPCODE_RECEIVE_COPY_RESULTS
:

3544  
	`scsi_ª˚ivec›yªsu…s_d©aö_unm¨shÆl
(
èsk
);

3546  
NULL
;

3547 
	}
}

3550 
scsi_ªad6_cdb
 *

3551 
	$scsi_ªad6_cdb_unm¨shÆl
(
scsi_èsk
 *
èsk
)

3553 
scsi_ªad6_cdb
 *
ªad6
;

3555 
ªad6
 = 
	`scsi_mÆloc
(
èsk
, (
scsi_ªad6_cdb
));

3556 i‡(
ªad6
 =
NULL
) {

3557  
NULL
;

3560 
ªad6
->
›code
 = 
SCSI_OPCODE_READ6
;

3561 
ªad6
->
lba
 = 
	`scsi_gë_uöt32
(&
èsk
->
cdb
[0]) & 0x001fffff;

3562 
ªad6
->
å™s„r_Àngth
 = 
èsk
->
cdb
[4];

3563 
ªad6
->
c⁄åﬁ
 = 
èsk
->
cdb
[5];

3565  
ªad6
;

3566 
	}
}

3568 
scsi_ªad10_cdb
 *

3569 
	$scsi_ªad10_cdb_unm¨shÆl
(
scsi_èsk
 *
èsk
)

3571 
scsi_ªad10_cdb
 *
ªad10
;

3573 
ªad10
 = 
	`scsi_mÆloc
(
èsk
, (
scsi_ªad10_cdb
));

3574 i‡(
ªad10
 =
NULL
) {

3575  
NULL
;

3578 
ªad10
->
›code
 = 
SCSI_OPCODE_READ10
;

3579 
ªad10
->
rd¥Ÿe˘
 = (
èsk
->
cdb
[1] >> 5) & 0x7;

3580 
ªad10
->
dpo
 = !!(
èsk
->
cdb
[1] & 0x10);

3581 
ªad10
->
fua
 = !!(
èsk
->
cdb
[1] & 0x08);

3582 
ªad10
->
fua_nv
 = !!(
èsk
->
cdb
[1] & 0x02);

3583 
ªad10
->
lba
 = 
	`scsi_gë_uöt32
(&
èsk
->
cdb
[2]);

3584 
ªad10
->
group
 = 
èsk
->
cdb
[6] & 0x1f;

3585 
ªad10
->
å™s„r_Àngth
 = 
	`scsi_gë_uöt16
(&
èsk
->
cdb
[7]);

3586 
ªad10
->
c⁄åﬁ
 = 
èsk
->
cdb
[9];

3588  
ªad10
;

3589 
	}
}

3591 
scsi_ªad12_cdb
 *

3592 
	$scsi_ªad12_cdb_unm¨shÆl
(
scsi_èsk
 *
èsk
)

3594 
scsi_ªad12_cdb
 *
ªad12
;

3596 
ªad12
 = 
	`scsi_mÆloc
(
èsk
, (
scsi_ªad12_cdb
));

3597 i‡(
ªad12
 =
NULL
) {

3598  
NULL
;

3601 
ªad12
->
›code
 = 
SCSI_OPCODE_READ12
;

3602 
ªad12
->
rd¥Ÿe˘
 = (
èsk
->
cdb
[1] >> 5) & 0x7;

3603 
ªad12
->
dpo
 = !!(
èsk
->
cdb
[1] & 0x10);

3604 
ªad12
->
fua
 = !!(
èsk
->
cdb
[1] & 0x08);

3605 
ªad12
->
ørc
 = !!(
èsk
->
cdb
[1] & 0x04);

3606 
ªad12
->
fua_nv
 = !!(
èsk
->
cdb
[1] & 0x02);

3607 
ªad12
->
lba
 = 
	`scsi_gë_uöt32
(&
èsk
->
cdb
[2]);

3608 
ªad12
->
å™s„r_Àngth
 = 
	`scsi_gë_uöt32
(&
èsk
->
cdb
[6]);

3609 
ªad12
->
group
 = 
èsk
->
cdb
[10] & 0x1f;

3610 
ªad12
->
c⁄åﬁ
 = 
èsk
->
cdb
[11];

3612  
ªad12
;

3613 
	}
}

3615 
scsi_ªad16_cdb
 *

3616 
	$scsi_ªad16_cdb_unm¨shÆl
(
scsi_èsk
 *
èsk
)

3618 
scsi_ªad16_cdb
 *
ªad16
;

3620 
ªad16
 = 
	`scsi_mÆloc
(
èsk
, (
scsi_ªad16_cdb
));

3621 i‡(
ªad16
 =
NULL
) {

3622  
NULL
;

3625 
ªad16
->
›code
 = 
SCSI_OPCODE_READ16
;

3626 
ªad16
->
rd¥Ÿe˘
 = (
èsk
->
cdb
[1] >> 5) & 0x7;

3627 
ªad16
->
dpo
 = !!(
èsk
->
cdb
[1] & 0x10);

3628 
ªad16
->
fua
 = !!(
èsk
->
cdb
[1] & 0x08);

3629 
ªad16
->
ørc
 = !!(
èsk
->
cdb
[1] & 0x04);

3630 
ªad16
->
fua_nv
 = !!(
èsk
->
cdb
[1] & 0x02);

3631 
ªad16
->
lba
 = 
	`scsi_gë_uöt64
(&
èsk
->
cdb
[2]);

3632 
ªad16
->
å™s„r_Àngth
 = 
	`scsi_gë_uöt32
(&
èsk
->
cdb
[10]);

3633 
ªad16
->
group
 = 
èsk
->
cdb
[14] & 0x1f;

3634 
ªad16
->
c⁄åﬁ
 = 
èsk
->
cdb
[15];

3636  
ªad16
;

3637 
	}
}

3639 
scsi_vîify10_cdb
 *

3640 
	$scsi_vîify10_cdb_unm¨shÆl
(
scsi_èsk
 *
èsk
)

3642 
scsi_vîify10_cdb
 *
vîify10
;

3644 
vîify10
 = 
	`scsi_mÆloc
(
èsk
, (
scsi_vîify10_cdb
));

3645 i‡(
vîify10
 =
NULL
) {

3646  
NULL
;

3649 
vîify10
->
›code
 = 
SCSI_OPCODE_VERIFY10
;

3650 
vîify10
->
vΩrŸe˘
 = (
èsk
->
cdb
[1] >> 5) & 0x7;

3651 
vîify10
->
dpo
 = !!(
èsk
->
cdb
[1] & 0x10);

3652 
vîify10
->
bytchk
 = !!(
èsk
->
cdb
[1] & 0x02);

3653 
vîify10
->
lba
 = 
	`scsi_gë_uöt32
(&
èsk
->
cdb
[2]);

3654 
vîify10
->
group
 = 
èsk
->
cdb
[6] & 0x1f;

3655 
vîify10
->
vîifiˇti⁄_Àngth
 = 
	`scsi_gë_uöt16
(&
èsk
->
cdb
[7]);

3656 
vîify10
->
c⁄åﬁ
 = 
èsk
->
cdb
[9];

3658  
vîify10
;

3659 
	}
}

3661 
scsi_vîify12_cdb
 *

3662 
	$scsi_vîify12_cdb_unm¨shÆl
(
scsi_èsk
 *
èsk
)

3664 
scsi_vîify12_cdb
 *
vîify12
;

3666 
vîify12
 = 
	`scsi_mÆloc
(
èsk
, (
scsi_vîify12_cdb
));

3667 i‡(
vîify12
 =
NULL
) {

3668  
NULL
;

3671 
vîify12
->
›code
 = 
SCSI_OPCODE_VERIFY12
;

3672 
vîify12
->
vΩrŸe˘
 = (
èsk
->
cdb
[1] >> 5) & 0x7;

3673 
vîify12
->
dpo
 = !!(
èsk
->
cdb
[1] & 0x10);

3674 
vîify12
->
bytchk
 = !!(
èsk
->
cdb
[1] & 0x02);

3675 
vîify12
->
lba
 = 
	`scsi_gë_uöt32
(&
èsk
->
cdb
[2]);

3676 
vîify12
->
vîifiˇti⁄_Àngth
 = 
	`scsi_gë_uöt32
(&
èsk
->
cdb
[6]);

3677 
vîify12
->
group
 = 
èsk
->
cdb
[10] & 0x1f;

3678 
vîify12
->
c⁄åﬁ
 = 
èsk
->
cdb
[11];

3680  
vîify12
;

3681 
	}
}

3683 
scsi_vîify16_cdb
 *

3684 
	$scsi_vîify16_cdb_unm¨shÆl
(
scsi_èsk
 *
èsk
)

3686 
scsi_vîify16_cdb
 *
vîify16
;

3688 
vîify16
 = 
	`scsi_mÆloc
(
èsk
, (
scsi_vîify16_cdb
));

3689 i‡(
vîify16
 =
NULL
) {

3690  
NULL
;

3693 
vîify16
->
›code
 = 
SCSI_OPCODE_VERIFY16
;

3694 
vîify16
->
vΩrŸe˘
 = (
èsk
->
cdb
[1] >> 5) & 0x7;

3695 
vîify16
->
dpo
 = !!(
èsk
->
cdb
[1] & 0x10);

3696 
vîify16
->
bytchk
 = !!(
èsk
->
cdb
[1] & 0x02);

3697 
vîify16
->
lba
 = 
	`scsi_gë_uöt64
(&
èsk
->
cdb
[2]);

3698 
vîify16
->
vîifiˇti⁄_Àngth
 = 
	`scsi_gë_uöt32
(&
èsk
->
cdb
[10]);

3699 
vîify16
->
group
 = 
èsk
->
cdb
[14] & 0x1f;

3700 
vîify16
->
c⁄åﬁ
 = 
èsk
->
cdb
[15];

3702  
vîify16
;

3703 
	}
}

3705 
scsi_wrôe10_cdb
 *

3706 
	$scsi_wrôe10_cdb_unm¨shÆl
(
scsi_èsk
 *
èsk
)

3708 
scsi_wrôe10_cdb
 *
wrôe10
;

3710 
wrôe10
 = 
	`scsi_mÆloc
(
èsk
, (
scsi_wrôe10_cdb
));

3711 i‡(
wrôe10
 =
NULL
) {

3712  
NULL
;

3715 
wrôe10
->
›code
 = 
SCSI_OPCODE_WRITE10
;

3716 
wrôe10
->
wΩrŸe˘
 = (
èsk
->
cdb
[1] >> 5) & 0x7;

3717 
wrôe10
->
dpo
 = !!(
èsk
->
cdb
[1] & 0x10);

3718 
wrôe10
->
fua
 = !!(
èsk
->
cdb
[1] & 0x08);

3719 
wrôe10
->
fua_nv
 = !!(
èsk
->
cdb
[1] & 0x02);

3720 
wrôe10
->
lba
 = 
	`scsi_gë_uöt32
(&
èsk
->
cdb
[2]);

3721 
wrôe10
->
group
 = 
èsk
->
cdb
[6] & 0x1f;

3722 
wrôe10
->
å™s„r_Àngth
 = 
	`scsi_gë_uöt16
(&
èsk
->
cdb
[7]);

3723 
wrôe10
->
c⁄åﬁ
 = 
èsk
->
cdb
[9];

3725  
wrôe10
;

3726 
	}
}

3728 
scsi_wrôe12_cdb
 *

3729 
	$scsi_wrôe12_cdb_unm¨shÆl
(
scsi_èsk
 *
èsk
)

3731 
scsi_wrôe12_cdb
 *
wrôe12
;

3733 
wrôe12
 = 
	`scsi_mÆloc
(
èsk
, (
scsi_wrôe12_cdb
));

3734 i‡(
wrôe12
 =
NULL
) {

3735  
NULL
;

3738 
wrôe12
->
›code
 = 
SCSI_OPCODE_WRITE12
;

3739 
wrôe12
->
wΩrŸe˘
 = (
èsk
->
cdb
[1] >> 5) & 0x7;

3740 
wrôe12
->
dpo
 = !!(
èsk
->
cdb
[1] & 0x10);

3741 
wrôe12
->
fua
 = !!(
èsk
->
cdb
[1] & 0x08);

3742 
wrôe12
->
fua_nv
 = !!(
èsk
->
cdb
[1] & 0x02);

3743 
wrôe12
->
lba
 = 
	`scsi_gë_uöt32
(&
èsk
->
cdb
[2]);

3744 
wrôe12
->
å™s„r_Àngth
 = 
	`scsi_gë_uöt32
(&
èsk
->
cdb
[6]);

3745 
wrôe12
->
group
 = 
èsk
->
cdb
[10] & 0x1f;

3746 
wrôe12
->
c⁄åﬁ
 = 
èsk
->
cdb
[11];

3748  
wrôe12
;

3749 
	}
}

3751 
scsi_wrôe16_cdb
 *

3752 
	$scsi_wrôe16_cdb_unm¨shÆl
(
scsi_èsk
 *
èsk
)

3754 
scsi_wrôe16_cdb
 *
wrôe16
;

3756 
wrôe16
 = 
	`scsi_mÆloc
(
èsk
, (
scsi_wrôe16_cdb
));

3757 i‡(
wrôe16
 =
NULL
) {

3758  
NULL
;

3761 
wrôe16
->
›code
 = 
SCSI_OPCODE_WRITE16
;

3762 
wrôe16
->
wΩrŸe˘
 = (
èsk
->
cdb
[1] >> 5) & 0x7;

3763 
wrôe16
->
dpo
 = !!(
èsk
->
cdb
[1] & 0x10);

3764 
wrôe16
->
fua
 = !!(
èsk
->
cdb
[1] & 0x08);

3765 
wrôe16
->
fua_nv
 = !!(
èsk
->
cdb
[1] & 0x02);

3766 
wrôe16
->
lba
 = 
	`scsi_gë_uöt64
(&
èsk
->
cdb
[2]);

3767 
wrôe16
->
å™s„r_Àngth
 = 
	`scsi_gë_uöt32
(&
èsk
->
cdb
[10]);

3768 
wrôe16
->
group
 = 
èsk
->
cdb
[14] & 0x1f;

3769 
wrôe16
->
c⁄åﬁ
 = 
èsk
->
cdb
[15];

3771  
wrôe16
;

3772 
	}
}

3774 
scsi_wrôótomic16_cdb
 *

3775 
	$scsi_wrôótomic16_cdb_unm¨shÆl
(
scsi_èsk
 *
èsk
)

3777 
scsi_wrôótomic16_cdb
 *
wrôótomic16
;

3779 
wrôótomic16
 = 
	`scsi_mÆloc
(
èsk
, (
scsi_wrôótomic16_cdb
));

3780 i‡(
wrôótomic16
 =
NULL
) {

3781  
NULL
;

3784 
wrôótomic16
->
›code
 = 
SCSI_OPCODE_WRITE_ATOMIC16
;

3785 
wrôótomic16
->
wΩrŸe˘
 = (
èsk
->
cdb
[1] >> 5) & 0x7;

3786 
wrôótomic16
->
dpo
 = !!(
èsk
->
cdb
[1] & 0x10);

3787 
wrôótomic16
->
fua
 = !!(
èsk
->
cdb
[1] & 0x08);

3788 
wrôótomic16
->
lba
 = 
	`scsi_gë_uöt64
(&
èsk
->
cdb
[2]);

3789 
wrôótomic16
->
å™s„r_Àngth
 = 
	`scsi_gë_uöt16
(&
èsk
->
cdb
[12]);

3790 
wrôótomic16
->
group
 = 
èsk
->
cdb
[14] & 0x1f;

3791 
wrôótomic16
->
c⁄åﬁ
 = 
èsk
->
cdb
[15];

3793  
wrôótomic16
;

3794 
	}
}

3797 
	$scsi_cdb_unm¨shÆl
(
scsi_èsk
 *
èsk
, 
scsi_›code
 
›code
)

3799 i‡(
èsk
->
cdb
[0] !
›code
) {

3800  
NULL
;

3803 
èsk
->
cdb
[0]) {

3804 
SCSI_OPCODE_READ6
:

3805  
	`scsi_ªad6_cdb_unm¨shÆl
(
èsk
);

3806 
SCSI_OPCODE_READ10
:

3807  
	`scsi_ªad10_cdb_unm¨shÆl
(
èsk
);

3808 
SCSI_OPCODE_READ12
:

3809  
	`scsi_ªad12_cdb_unm¨shÆl
(
èsk
);

3810 
SCSI_OPCODE_READ16
:

3811  
	`scsi_ªad16_cdb_unm¨shÆl
(
èsk
);

3812 
SCSI_OPCODE_VERIFY10
:

3813  
	`scsi_vîify10_cdb_unm¨shÆl
(
èsk
);

3814 
SCSI_OPCODE_VERIFY12
:

3815  
	`scsi_vîify12_cdb_unm¨shÆl
(
èsk
);

3816 
SCSI_OPCODE_VERIFY16
:

3817  
	`scsi_vîify16_cdb_unm¨shÆl
(
èsk
);

3818 
SCSI_OPCODE_WRITE10
:

3819  
	`scsi_wrôe10_cdb_unm¨shÆl
(
èsk
);

3820 
SCSI_OPCODE_WRITE12
:

3821  
	`scsi_wrôe12_cdb_unm¨shÆl
(
èsk
);

3822 
SCSI_OPCODE_WRITE16
:

3823  
	`scsi_wrôe16_cdb_unm¨shÆl
(
èsk
);

3824 
SCSI_OPCODE_WRITE_ATOMIC16
:

3825  
	`scsi_wrôótomic16_cdb_unm¨shÆl
(
èsk
);

3827  
NULL
;

3828 
	}
}

3831 
	$scsi_devty≥_to_°r
(
scsi_öquúy_≥rùhîÆ_devi˚_ty≥
 
ty≥
)

3833 
ty≥
) {

3834 
SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_DIRECT_ACCESS
:

3836 
SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_SEQUENTIAL_ACCESS
:

3838 
SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_PRINTER
:

3840 
SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_PROCESSOR
:

3842 
SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_WRITE_ONCE
:

3844 
SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_MMC
:

3846 
SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_SCANNER
:

3848 
SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_OPTICAL_MEMORY
:

3850 
SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_MEDIA_CHANGER
:

3852 
SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_COMMUNICATIONS
:

3854 
SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_STORAGE_ARRAY_CONTROLLER
:

3856 
SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_ENCLOSURE_SERVICES
:

3858 
SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_SIMPLIFIED_DIRECT_ACCESS
:

3860 
SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_OPTICAL_CARD_READER
:

3862 
SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_BRIDGE_CONTROLLER
:

3864 
SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_OSD
:

3866 
SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_AUTOMATION
:

3868 
SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_SEQURITY_MANAGER
:

3870 
SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_WELL_KNOWN_LUN
:

3872 
SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_UNKNOWN
:

3876 
	}
}

3879 
	$scsi_devquÆifõr_to_°r
(
scsi_öquúy_≥rùhîÆ_quÆifõr
 
quÆifõr
)

3881 
quÆifõr
) {

3882 
SCSI_INQUIRY_PERIPHERAL_QUALIFIER_CONNECTED
:

3884 
SCSI_INQUIRY_PERIPHERAL_QUALIFIER_DISCONNECTED
:

3886 
SCSI_INQUIRY_PERIPHERAL_QUALIFIER_NOT_SUPPORTED
:

3890 
	}
}

3893 
	$scsi_vîsi⁄_to_°r
(
scsi_vîsi⁄
 
vîsi⁄
)

3895 
vîsi⁄
) {

3896 
SCSI_VERSION_SPC
:

3898 
SCSI_VERSION_SPC2
:

3900 
SCSI_VERSION_SPC3
:

3904 
	}
}

3907 
	$scsi_vîsi⁄_des¸ùt‹_to_°r
(
scsi_vîsi⁄_des¸ùt‹
 
vîsi⁄_des¸ùt‹
)

3909 
vîsi⁄_des¸ùt‹
) {

3910 
SCSI_VERSION_DESCRIPTOR_ISCSI
:

3912 
SCSI_VERSION_DESCRIPTOR_SBC
:

3914 
SCSI_VERSION_DESCRIPTOR_SBC_ANSI_INCITS_306_1998
:

3916 
SCSI_VERSION_DESCRIPTOR_SBC_T10_0996_D_R08C
:

3918 
SCSI_VERSION_DESCRIPTOR_SBC_2
:

3920 
SCSI_VERSION_DESCRIPTOR_SBC_2_ISO_IEC_14776_322
:

3922 
SCSI_VERSION_DESCRIPTOR_SBC_2_ANSI_INCITS_405_2005
:

3924 
SCSI_VERSION_DESCRIPTOR_SBC_2_T10_1417_D_R16
:

3926 
SCSI_VERSION_DESCRIPTOR_SBC_2_T10_1417_D_R5A
:

3928 
SCSI_VERSION_DESCRIPTOR_SBC_2_T10_1417_D_R15
:

3930 
SCSI_VERSION_DESCRIPTOR_SBC_3
:

3932 
SCSI_VERSION_DESCRIPTOR_SPC
:

3934 
SCSI_VERSION_DESCRIPTOR_SPC_ANSI_INCITS_301_1997
:

3936 
SCSI_VERSION_DESCRIPTOR_SPC_T10_0995_D_R11A
:

3938 
SCSI_VERSION_DESCRIPTOR_SPC_2
:

3940 
SCSI_VERSION_DESCRIPTOR_SPC_2_ISO_IEC_14776_452
:

3942 
SCSI_VERSION_DESCRIPTOR_SPC_2_ANSI_INCITS_351_2001
:

3944 
SCSI_VERSION_DESCRIPTOR_SPC_2_T10_1236_D_R20
:

3946 
SCSI_VERSION_DESCRIPTOR_SPC_2_T10_1236_D_R12
:

3948 
SCSI_VERSION_DESCRIPTOR_SPC_2_T10_1236_D_R18
:

3950 
SCSI_VERSION_DESCRIPTOR_SPC_2_T10_1236_D_R19
:

3952 
SCSI_VERSION_DESCRIPTOR_SPC_3
:

3954 
SCSI_VERSION_DESCRIPTOR_SPC_3_ISO_IEC_14776_453
:

3956 
SCSI_VERSION_DESCRIPTOR_SPC_3_ANSI_INCITS_408_2005
:

3958 
SCSI_VERSION_DESCRIPTOR_SPC_3_T10_1416_D_R7
:

3960 
SCSI_VERSION_DESCRIPTOR_SPC_3_T10_1416_D_R21
:

3962 
SCSI_VERSION_DESCRIPTOR_SPC_3_T10_1416_D_R22
:

3964 
SCSI_VERSION_DESCRIPTOR_SPC_3_T10_1416_D_R23
:

3966 
SCSI_VERSION_DESCRIPTOR_SPC_4
:

3968 
SCSI_VERSION_DESCRIPTOR_SPC_4_T10_1731_D_R16
:

3970 
SCSI_VERSION_DESCRIPTOR_SPC_4_T10_1731_D_R18
:

3972 
SCSI_VERSION_DESCRIPTOR_SPC_4_T10_1731_D_R23
:

3974 
SCSI_VERSION_DESCRIPTOR_SSC
:

3976 
SCSI_VERSION_DESCRIPTOR_UAS_T10_2095D_R04
:

3980 
	}
}

3983 
	$scsi_öquúy_∑gecode_to_°r
(
∑gecode
)

3985 
∑gecode
) {

3986 
SCSI_INQUIRY_PAGECODE_SUPPORTED_VPD_PAGES
:

3988 
SCSI_INQUIRY_PAGECODE_UNIT_SERIAL_NUMBER
:

3990 
SCSI_INQUIRY_PAGECODE_DEVICE_IDENTIFICATION
:

3992 
SCSI_INQUIRY_PAGECODE_BLOCK_LIMITS
:

3994 
SCSI_INQUIRY_PAGECODE_BLOCK_DEVICE_CHARACTERISTICS
:

3996 
SCSI_INQUIRY_PAGECODE_LOGICAL_BLOCK_PROVISIONING
:

4000 
	}
}

4004 
	$scsi_¥Ÿocﬁ_idítifõr_to_°r
(
idítifõr
)

4006 
idítifõr
) {

4007 
SCSI_PROTOCOL_IDENTIFIER_FIBRE_CHANNEL
:

4009 
SCSI_PROTOCOL_IDENTIFIER_PARALLEL_SCSI
:

4011 
SCSI_PROTOCOL_IDENTIFIER_SSA
:

4013 
SCSI_PROTOCOL_IDENTIFIER_IEEE_1394
:

4015 
SCSI_PROTOCOL_IDENTIFIER_RDMA
:

4017 
SCSI_PROTOCOL_IDENTIFIER_ISCSI
:

4019 
SCSI_PROTOCOL_IDENTIFIER_SAS
:

4021 
SCSI_PROTOCOL_IDENTIFIER_ADT
:

4023 
SCSI_PROTOCOL_IDENTIFIER_ATA
:

4027 
	}
}

4030 
	$scsi_code£t_to_°r
(
code£t
)

4032 
code£t
) {

4033 
SCSI_CODESET_BINARY
:

4035 
SCSI_CODESET_ASCII
:

4037 
SCSI_CODESET_UTF8
:

4041 
	}
}

4044 
	$scsi_assocüti⁄_to_°r
(
assocüti⁄
)

4046 
assocüti⁄
) {

4047 
SCSI_ASSOCIATION_LOGICAL_UNIT
:

4049 
SCSI_ASSOCIATION_TARGET_PORT
:

4051 
SCSI_ASSOCIATION_TARGET_DEVICE
:

4055 
	}
}

4058 
	$scsi_desig«t‹_ty≥_to_°r
(
ty≥
)

4060 
ty≥
) {

4061 
SCSI_DESIGNATOR_TYPE_VENDOR_SPECIFIC
:

4063 
SCSI_DESIGNATOR_TYPE_T10_VENDORT_ID
:

4065 
SCSI_DESIGNATOR_TYPE_EUI_64
:

4067 
SCSI_DESIGNATOR_TYPE_NAA
:

4069 
SCSI_DESIGNATOR_TYPE_RELATIVE_TARGET_PORT
:

4071 
SCSI_DESIGNATOR_TYPE_TARGET_PORT_GROUP
:

4073 
SCSI_DESIGNATOR_TYPE_LOGICAL_UNIT_GROUP
:

4075 
SCSI_DESIGNATOR_TYPE_MD5_LOGICAL_UNIT_IDENTIFIER
:

4077 
SCSI_DESIGNATOR_TYPE_SCSI_NAME_STRING
:

4081 
	}
}

4084 
	$scsi_£t_èsk_¥iv©e_±r
(
scsi_èsk
 *
èsk
, *
±r
)

4086 
èsk
->
±r
 =Ötr;

4087 
	}
}

4090 
	$scsi_gë_èsk_¥iv©e_±r
(
scsi_èsk
 *
èsk
)

4092  
èsk
->
±r
;

4093 
	}
}

4096 
	$scsi_èsk_£t_iov_out
(
scsi_èsk
 *
èsk
, 
scsi_iovec
 *
iov
, 
niov
)

4098 
èsk
->
iove˘‹_out
.
iov
 = iov;

4099 
èsk
->
iove˘‹_out
.
niov
 =Çiov;

4100 
	}
}

4103 
	$scsi_èsk_£t_iov_ö
(
scsi_èsk
 *
èsk
, 
scsi_iovec
 *
iov
, 
niov
)

4105 
èsk
->
iove˘‹_ö
.
iov
 = iov;

4106 
èsk
->
iove˘‹_ö
.
niov
 =Çiov;

4107 
	}
}

4110 
	$scsi_èsk_ª£t_iov
(
scsi_iove˘‹
 *
iove˘‹
)

4112 
iove˘‹
->
off£t
 = 0;

4113 
iove˘‹
->
c⁄sumed
 = 0;

4114 
	}
}

4116 
	#IOVECTOR_INITAL_ALLOC
 (16)

	)

4119 
	$scsi_iove˘‹_add
(
scsi_èsk
 *
èsk
, 
scsi_iove˘‹
 *
iove˘‹
, 
Àn
, *
buf
)

4121 i‡(
Àn
 < 0) {

4125 i‡(
iove˘‹
->
iov
 =
NULL
) {

4126 
iove˘‹
->
iov
 = 
	`scsi_mÆloc
(
èsk
, 
IOVECTOR_INITAL_ALLOC
*(
iovec
));

4127 i‡(
iove˘‹
->
iov
 =
NULL
) {

4130 
iove˘‹
->
«Œoc
 = 
IOVECTOR_INITAL_ALLOC
;

4134 i‡(
iove˘‹
->
«Œoc
 < iove˘‹->
niov
 + 1) {

4135 
scsi_iovec
 *
ﬁd_iov
 = 
iove˘‹
->
iov
;

4136 
iove˘‹
->
iov
 = 
	`scsi_mÆloc
(
èsk
, 2 * iove˘‹->
«Œoc
 * (
iovec
));

4137 i‡(
iove˘‹
->
iov
 =
NULL
) {

4140 
	`mem˝y
(
iove˘‹
->
iov
, 
ﬁd_iov
, iove˘‹->
niov
 * (
iovec
));

4141 
iove˘‹
->
«Œoc
 <<= 1;

4144 
iove˘‹
->
iov
[iove˘‹->
niov
].
iov_Àn
 = 
Àn
;

4145 
iove˘‹
->
iov
[iove˘‹->
niov
].
iov_ba£
 = 
buf
;

4146 
iove˘‹
->
niov
++;

4149 
	}
}

4152 
	$scsi_èsk_add_d©a_ö_buf„r
(
scsi_èsk
 *
èsk
, 
Àn
, *
buf
)

4154  
	`scsi_iove˘‹_add
(
èsk
, &èsk->
iove˘‹_ö
, 
Àn
, 
buf
);

4155 
	}
}

4158 
	$scsi_èsk_add_d©a_out_buf„r
(
scsi_èsk
 *
èsk
, 
Àn
, *
buf
)

4160  
	`scsi_iove˘‹_add
(
èsk
, &èsk->
iove˘‹_out
, 
Àn
, 
buf
);

4161 
	}
}

4164 
	$scsi_èsk_gë_°©us
(
scsi_èsk
 *
èsk
, 
scsi_£n£
 *
£n£
)

4166 i‡(
£n£
) {

4167 
	`mem˝y
(
£n£
, &
èsk
->£n£, (
scsi_£n£
));

4169  
èsk
->
°©us
;

4170 
	}
}

	@lib/socket.c

18 #ifde‡
HAVE_CONFIG_H


19 
	~"c⁄fig.h
"

22 #ifde‡
HAVE_SYS_TYPES_H


23 
	~<sys/ty≥s.h
>

26 #ifde‡
HAVE_ARPA_INET_H


27 
	~<¨∑/öë.h
>

30 #ifde‡
HAVE_UNISTD_H


31 
	~<uni°d.h
>

34 #ifde‡
HAVE_POLL_H


35 
	~<pﬁl.h
>

38 #ifde‡
AROS


39 
	~"¨os/¨os_com∑t.h
"

42 #ifde‡
HAVE_SYS_SOCKET_H


43 
	~<sys/sockë.h
>

46 #i‡
deföed
(
_WIN32
)

47 
	~<wösock2.h
>

48 
	~<ws2t˝ù.h
>

49 
	~"wö32/wö32_com∑t.h
"

51 
	~<°rögs.h
>

52 
	~<√tdb.h
>

53 
	~<√töë/ö.h
>

54 
	~<√töë/t˝.h
>

55 
	~<sys/io˘l.h
>

58 #ifde‡
NEED_SYS_FILIO_H


59 
	~<sys/fûio.h
>

62 #ifde‡
HAVE_SYS_UIO_H


63 
	~<sys/uio.h
>

66 
	~<°döt.h
>

67 
	~<°dio.h
>

68 
	~<°dlib.h
>

69 
	~<°rög.h
>

70 
	~<î∫o.h
>

71 
	~<f˙é.h
>

72 
	~<time.h
>

73 
	~"scsi-lowÀvñ.h
"

74 
	~"iscsi.h
"

75 
	~"iscsi-¥iv©e.h
"

76 
	~"¶i°.h
"

78 
uöt32_t
 
	giÁ˚_º
 = 0;

79 
	giscsi_å™•‹t
;

82 
	usockë_addªss
 {

83 
sockaddr_ö
 
	msö
;

84 
sockaddr_ö6
 
	msö6
;

85 
sockaddr
 
	mß
;

89 
	$iscsi_add_to_outqueue
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_pdu
 *
pdu
)

91 
iscsi_pdu
 *
cuºít
 = 
iscsi
->
outqueue
;

92 
iscsi_pdu
 *
œ°
 = 
NULL
;

94 i‡(
iscsi
->
scsi_timeout
 > 0) {

95 
pdu
->
scsi_timeout
 = 
	`time
(
NULL
Ë+ 
iscsi
->scsi_timeout;

97 
pdu
->
scsi_timeout
 = 0;

100 i‡(
iscsi
->
outqueue
 =
NULL
) {

101 
iscsi
->
outqueue
 = 
pdu
;

102 
pdu
->
√xt
 = 
NULL
;

112 i‡(
pdu
->
outd©a
.
d©a
[0] & 
ISCSI_PDU_IMMEDIATE
) {

113 
	`iscsi_pdu_£t_cmd¢
(
pdu
, 
cuºít
->
cmd¢
);

117 i‡(
	`iscsi_£rül32_com∑ª
(
pdu
->
cmd¢
, 
cuºít
->cmdsn) < 0 ||

118 (
pdu
->
outd©a
.
d©a
[0] & 
ISCSI_PDU_IMMEDIATE
 && !(
cuºít
->outdata.data[0] & ISCSI_PDU_IMMEDIATE))) {

120 i‡(
œ°
 !
NULL
) {

121 
œ°
->
√xt
=
pdu
;

123 
iscsi
->
outqueue
=
pdu
;

125 
pdu
->
√xt
 = 
cuºít
;

128 
œ°
=
cuºít
;

129 
cuºít
=cuºít->
√xt
;

130 } 
cuºít
 !
NULL
);

132 
œ°
->
√xt
 = 
pdu
;

133 
pdu
->
√xt
 = 
NULL
;

134 
	}
}

136 
	$iscsi_de¸emít_iÁ˚_º
() {

137 
iÁ˚_º
--;

138 
	}
}

140 
	$£t_n⁄blockög
(
fd
)

142 #i‡
	`deföed
(
_WIN32
)

143 
›t
 = 1;

144  
	`io˘lsockë
(
fd
, 
FIONBIO
, &
›t
);

146 
v
;

147 
v
 = 
	`f˙é
(
fd
, 
F_GETFL
, 0);

148  
	`f˙é
(
fd
, 
F_SETFL
, 
v
 | 
O_NONBLOCK
);

150 
	}
}

152 
	$£t_t˝_sock›t
(
sockfd
, 
›äame
, 
vÆue
)

154 
Àvñ
;

156 #i‚de‡
SOL_TCP


157 
¥Ÿ€¡
 *
buf
;

159 i‡((
buf
 = 
	`gë¥Ÿoby«me
("t˝")Ë!
NULL
)

160 
Àvñ
 = 
buf
->
p_¥Ÿo
;

164 
Àvñ
 = 
SOL_TCP
;

167  
	`£tsock›t
(
sockfd
, 
Àvñ
, 
›äame
, (*)&
vÆue
, (value));

168 
	}
}

170 #i‚de‡
TCP_USER_TIMEOUT


171 
	#TCP_USER_TIMEOUT
 18

	)

174 
	$£t_t˝_u£r_timeout
(
iscsi_c⁄ãxt
 *
iscsi
)

176 i‡(
	`£t_t˝_sock›t
(
iscsi
->
fd
, 
TCP_USER_TIMEOUT
, iscsi->
t˝_u£r_timeout
) != 0) {

177 
	`iscsi_£t_îr‹
(
iscsi
, "TCP: FaûedÅÿ£àt˝ u£∏timeout. Eº‹ %s(%d)", 
	`°ªº‹
(
î∫o
),Érrno);

180 
	`ISCSI_LOG
(
iscsi
, 3, "TCP_USER_TIMEOUT sëÅÿ%d",iscsi->
t˝_u£r_timeout
);

182 
	}
}

184 #i‚de‡
TCP_SYNCNT


185 
	#TCP_SYNCNT
 7

	)

188 
	$£t_t˝_syn˙t
(
iscsi_c⁄ãxt
 *
iscsi
)

190 i‡(
	`£t_t˝_sock›t
(
iscsi
->
fd
, 
TCP_SYNCNT
, iscsi->
t˝_syn˙t
) != 0) {

191 
	`iscsi_£t_îr‹
(
iscsi
, "TCP: FaûedÅÿ£àt˝ sy¿ªåõs. Eº‹ %s(%d)", 
	`°ªº‹
(
î∫o
),Érrno);

194 
	`ISCSI_LOG
(
iscsi
, 3, "TCP_SYNCNT sëÅÿ%d",iscsi->
t˝_syn˙t
);

196 
	}
}

198 
	$iscsi_t˝_c⁄√˘
(
iscsi_c⁄ãxt
 *
iscsi
, 
sockë_addªss
 *
ß
, 
ai_Ámûy
) {

200 
socksize
;

202 
ai_Ámûy
) {

203 
AF_INET
:

204 
socksize
 = (
sockaddr_ö
);

206 
AF_INET6
:

207 
socksize
 = (
sockaddr_ö6
);

210 
	`iscsi_£t_îr‹
(
iscsi
, "Unknownáddress family :%d. "

212 
ai_Ámûy
);

216 
iscsi
->
fd
 = 
	`sockë
(
ai_Ámûy
, 
SOCK_STREAM
, 0);

217 i‡(
iscsi
->
fd
 == -1) {

218 
	`iscsi_£t_îr‹
(
iscsi
, "FailedÅo open iscsi socket. "

219 "Eºno:%s(%d).", 
	`°ªº‹
(
î∫o
),Érrno);

223 i‡(
iscsi
->
ﬁd_iscsi
 && iscsi->
fd
 != iscsi->old_iscsi->fd) {

224 i‡(
	`dup2
(
iscsi
->
fd
, iscsi->
ﬁd_iscsi
->fd) == -1) {

227 
	`˛o£
(
iscsi
->
fd
);

228 
iscsi
->
fd
 = iscsi->
ﬁd_iscsi
->fd;

231 
iscsi
->
t˝_n⁄blockög
 = !
	`£t_n⁄blockög
(iscsi->
fd
);

233 
	`iscsi_£t_t˝_kì∑live
(
iscsi
, iscsi->
t˝_kìpidÀ
, iscsi->
t˝_kìp˙t
, iscsi->
t˝_kìpötvl
);

235 i‡(
iscsi
->
t˝_u£r_timeout
 > 0) {

236 
	`£t_t˝_u£r_timeout
(
iscsi
);

239 i‡(
iscsi
->
t˝_syn˙t
 > 0) {

240 
	`£t_t˝_syn˙t
(
iscsi
);

243 #i‡
__löux


244 i‡(
iscsi
->
böd_öãrÁ˚s
[0]) {

245 *
pchr
 = 
iscsi
->
böd_öãrÁ˚s
, *
pchr2
;

246 
iÁ˚_n
 = 
iÁ˚_º
++%
iscsi
->
böd_öãrÁ˚s_˙t
;

247 
iÁ˚_c
 = 0;

249 
pchr2
 = 
	`°rchr
(
pchr
,',');

250 i‡(
iÁ˚_c
 =
iÁ˚_n
) {

251 i‡(
pchr2
)Öchr2[0]=0x00;

254 i‡(
pchr2
Ë{
pchr
=pchr2+1;}

255 
iÁ˚_c
++;

256 } 
pchr2
);

258 
ªs
 = 
	`£tsock›t
(
iscsi
->
fd
, 
SOL_SOCKET
, 
SO_BINDTODEVICE
, 
pchr
, 
	`°æí
(pchr));

259 i‡(
ªs
 < 0) {

260 
	`ISCSI_LOG
(
iscsi
,1,"ÁûedÅÿbödÅÿöãrÁ˚ '%s': %s",
pchr
,
	`°ªº‹
(
î∫o
));

262 
	`ISCSI_LOG
(
iscsi
,3,"suc˚ssfuŒy boundÅÿöãrÁ˚ '%s'",
pchr
);

264 i‡(
pchr2
)Öchr2[0]=',';

268 i‡(
	`£t_t˝_sock›t
(
iscsi
->
fd
, 
TCP_NODELAY
, 1) != 0) {

269 
	`ISCSI_LOG
(
iscsi
,1,"ÁûedÅÿ£àTCP_NODELAY sock›t: %s",
	`°ªº‹
(
î∫o
));

271 
	`ISCSI_LOG
(
iscsi
,3,"TCP_NODELAY setÅo 1");

273 
	`¥ötf
("##### Connecting");

274 i‡(
	`c⁄√˘
(
iscsi
->
fd
, &
ß
->ß, 
socksize
) != 0

275 #i‡
	`deföed
(
_WIN32
)

276 && 
	`WSAGëLa°Eº‹
(Ë!
WSAEWOULDBLOCK


278 && 
î∫o
 !
EINPROGRESS
) {

279 
	`iscsi_£t_îr‹
(
iscsi
, "Connect failed withÉrrno : "

280 "%s(%d)", 
	`°ªº‹
(
î∫o
),Érrno);

281 
	`˛o£
(
iscsi
->
fd
);

282 
iscsi
->
fd
 = -1;

287 
	}
}

292 
	$iscsi_c⁄√˘_async
(
iscsi_c⁄ãxt
 *
iscsi
, c⁄° *
p‹èl
,

293 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

295 
p‹t
 = 3260;

296 *
°r
;

297 *
addr
, *
ho°
;

298 
addröfo
 *
ai
 = 
NULL
;

299 
sockë_addªss
 
ß
;

300 
socksize
;

302 
	`ISCSI_LOG
(
iscsi
, 2, "c⁄√˘ögÅÿp‹è»%s",
p‹èl
);

304 i‡(
iscsi
->
fd
 != -1) {

305 
	`iscsi_£t_îr‹
(
iscsi
,

310 
addr
 = 
	`iscsi_°rdup
(
iscsi
, 
p‹èl
);

311 i‡(
addr
 =
NULL
) {

312 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: "

316 
ho°
 = 
addr
;

319 
°r
 = 
	`°ºchr
(
ho°
, ',');

320 i‡(
°r
 !
NULL
) {

321 
°r
[0] = 0;

324 
°r
 = 
	`°ºchr
(
ho°
, ':');

325 i‡(
°r
 !
NULL
) {

326 i‡(
	`°rchr
(
°r
, ']'Ë=
NULL
) {

327 i‡(
°r
 !
NULL
) {

328 
p‹t
 = 
	`©oi
(
°r
+1);

329 
°r
[0] = 0;

335 i‡(
ho°
[0] == '[') {

336 
ho°
 ++;

337 
°r
 = 
	`°rchr
(
ho°
, ']');

338 i‡(
°r
 =
NULL
) {

339 
	`iscsi_‰ì
(
iscsi
, 
addr
);

340 
	`iscsi_£t_îr‹
(
iscsi
, "InvalidÅarget:%s "

341 "Missög ']' i¿IPv6áddªss", 
p‹èl
);

344 *
°r
 = 0;

348 i‡(
	`gëaddröfo
(
ho°
, 
NULL
, NULL, &
ai
) != 0) {

349 
	`iscsi_‰ì
(
iscsi
, 
addr
);

350 
	`iscsi_£t_îr‹
(
iscsi
, "InvalidÅarget:%s "

351 "C™ÇŸÑesﬁv i¡ÿIPv4/v6.", 
p‹èl
);

354 
	`iscsi_‰ì
(
iscsi
, 
addr
);

356 
	`mem£t
(&
ß
, 0, (sa));

357 
ai
->
ai_Ámûy
) {

358 
AF_INET
:

359 
socksize
 = (
sockaddr_ö
);

360 
	`mem˝y
(&
ß
.
sö
, 
ai
->
ai_addr
, 
socksize
);

361 
ß
.
sö
.
sö_Ámûy
 = 
AF_INET
;

362 
ß
.
sö
.
sö_p‹t
 = 
	`ht⁄s
(
p‹t
);

363 #ifde‡
HAVE_SOCK_SIN_LEN


364 
ß
.
sö
.
sö_Àn
 = 
socksize
;

367 #ifde‡
HAVE_SOCKADDR_IN6


368 
AF_INET6
:

369 
socksize
 = (
sockaddr_ö6
);

370 
	`mem˝y
(&
ß
.
sö6
, 
ai
->
ai_addr
, 
socksize
);

371 
ß
.
sö6
.
sö6_Ámûy
 = 
AF_INET6
;

372 
ß
.
sö6
.
sö6_p‹t
 = 
	`ht⁄s
(
p‹t
);

373 #ifde‡
HAVE_SOCK_SIN_LEN


374 
ß
.
sö6
.
sö6_Àn
 = 
socksize
;

379 
	`iscsi_£t_îr‹
(
iscsi
, "Unknownáddress family :%d. "

381 
ai
->
ai_Ámûy
);

382 
	`‰ìaddröfo
(
ai
);

387 
iscsi
->
sockë_°©us_cb
 = 
cb
;

388 
iscsi
->
c⁄√˘_d©a
 = 
¥iv©e_d©a
;

390 i‡(
iscsi
->
drv
->
	`c⁄√˘
(iscsi, &
ß
, 
ai
->
ai_Ámûy
) < 0) {

391 
	`iscsi_£t_îr‹
(
iscsi
, "Couldn't connectÅransport: %s",

392 
	`iscsi_gë_îr‹
(
iscsi
));

393 
	`‰ìaddröfo
(
ai
);

397 
	`‰ìaddröfo
(
ai
);

398 
	`°∫˝y
(
iscsi
->
c⁄√˘ed_p‹èl
, 
p‹èl
, 
MAX_STRING_SIZE
);

400 
	}
}

403 
	$iscsi_t˝_disc⁄√˘
(
iscsi_c⁄ãxt
 *
iscsi
)

405 i‡(
iscsi
->
fd
 == -1) {

406 
	`iscsi_£t_îr‹
(
iscsi
, "TryingÅo disconnect "

411 
	`˛o£
(
iscsi
->
fd
);

413 i‡(!(
iscsi
->
≥ndög_ªc⁄√˘
 && iscsi->
ﬁd_iscsi
) &&

414 
iscsi
->
c⁄√˘ed_p‹èl
[0]) {

415 
	`ISCSI_LOG
(
iscsi
, 2, "disc⁄√˘ed fromÖ‹è»%s",iscsi->
c⁄√˘ed_p‹èl
);

418 
iscsi
->
fd
 = -1;

419 
iscsi
->
is_c⁄√˘ed
 = 0;

420 
iscsi
->
is_c‹ked
 = 0;

423 
	}
}

427 
	$iscsi_disc⁄√˘
(
iscsi_c⁄ãxt
 *
iscsi
)

429  
iscsi
->
drv
->
	`disc⁄√˘
(iscsi);

430 
	}
}

433 
	$iscsi_t˝_gë_fd
(
iscsi_c⁄ãxt
 *
iscsi
)

435 i‡(
iscsi
->
ﬁd_iscsi
) {

436  
iscsi
->
ﬁd_iscsi
->
fd
;

438  
iscsi
->
fd
;

439 
	}
}

442 
	$iscsi_gë_fd
(
iscsi_c⁄ãxt
 *
iscsi
)

444  
iscsi
->
drv
->
	`gë_fd
(iscsi);

445 
	}
}

448 
	$iscsi_t˝_which_evíts
(
iscsi_c⁄ãxt
 *
iscsi
)

450 
evíts
 = 
iscsi
->
is_c⁄√˘ed
 ? 
POLLIN
 : 
POLLOUT
;

452 i‡(
iscsi
->
≥ndög_ªc⁄√˘
 && iscsi->
ﬁd_iscsi
 &&

453 
	`time
(
NULL
Ë< 
iscsi
->
√xt_ªc⁄√˘
) {

457 i‡(
iscsi
->
outqueue_cuºít
 !
NULL
 ||

458 (
iscsi
->
outqueue
 !
NULL
 && !iscsi->
is_c‹ked
 &&

459 (
	`iscsi_£rül32_com∑ª
(
iscsi
->
outqueue
->
cmd¢
, iscsi->
maxcmd¢
) <= 0 ||

460 
iscsi
->
outqueue
->
outd©a
.
d©a
[0] & 
ISCSI_PDU_IMMEDIATE
)

463 
evíts
 |
POLLOUT
;

465  
evíts
;

466 
	}
}

469 
	$iscsi_which_evíts
(
iscsi_c⁄ãxt
 *
iscsi
)

471  
iscsi
->
drv
->
	`which_evíts
(iscsi);

472 
	}
}

475 
	$iscsi_queue_Àngth
(
iscsi_c⁄ãxt
 *
iscsi
)

477 
i
 = 0;

478 
iscsi_pdu
 *
pdu
;

480 
pdu
 = 
iscsi
->
outqueue
;Ödu;Ödu =Ödu->
√xt
) {

481 
i
++;

483 
pdu
 = 
iscsi
->
waôpdu
;Ödu;Ödu =Ödu->
√xt
) {

484 
i
++;

486 i‡(
iscsi
->
is_c⁄√˘ed
 == 0) {

487 
i
++;

490  
i
;

491 
	}
}

494 
	$iscsi_out_queue_Àngth
(
iscsi_c⁄ãxt
 *
iscsi
)

496 
i
 = 0;

497 
iscsi_pdu
 *
pdu
;

499 
pdu
 = 
iscsi
->
outqueue
;Ödu;Ödu =Ödu->
√xt
) {

500 
i
++;

503  
i
;

504 
	}
}

506 
ssize_t


507 
	$iscsi_iove˘‹_ªadv_wrôev
(
iscsi_c⁄ãxt
 *
iscsi
, 
scsi_iove˘‹
 *
iove˘‹
, 
uöt32_t
 
pos
, 
ssize_t
 
cou¡
, 
do_wrôe
)

509 
scsi_iovec
 *
iov
, *
iov2
;

510 
niov
;

511 
uöt32_t
 
Àn2
;

512 
size_t
 
_Àn2
;

513 
ssize_t
 
n
;

515 i‡(
iove˘‹
->
iov
 =
NULL
) {

516 
î∫o
 = 
EINVAL
;

520 i‡(
pos
 < 
iove˘‹
->
off£t
) {

521 
	`iscsi_£t_îr‹
(
iscsi
, "iovectorÑeset.Öos is smallerÅhan"

523 
î∫o
 = 
EINVAL
;

527 i‡(
iove˘‹
->
niov
 <iove˘‹->
c⁄sumed
) {

531 
î∫o
 = 
EINVAL
;

536 
iov
 = &
iove˘‹
->iov[iove˘‹->
c⁄sumed
];

537 
pos
 -
iove˘‹
->
off£t
;

540 
pos
 >
iov
->
iov_Àn
) {

541 
iove˘‹
->
off£t
 +
iov
->
iov_Àn
;

542 
iove˘‹
->
c⁄sumed
++;

543 
pos
 -
iov
->
iov_Àn
;

544 i‡(
iove˘‹
->
niov
 <iove˘‹->
c⁄sumed
) {

545 
î∫o
 = 
EINVAL
;

548 
iov
 = &
iove˘‹
->iov[iove˘‹->
c⁄sumed
];

551 
iov2
 = 
iov
;

552 
niov
 = 1;

553 
Àn2
 = 
pos
 + 
cou¡
;

557 
Àn2
 > 
iov2
->
iov_Àn
) {

558 
niov
++;

559 i‡(
iove˘‹
->
niov
 < iove˘‹->
c⁄sumed
 +Çiov) {

560 
î∫o
 = 
EINVAL
;

563 
Àn2
 -
iov2
->
iov_Àn
;

564 
iov2
 = &
iove˘‹
->
iov
[iove˘‹->
c⁄sumed
 + 
niov
 - 1];

569 
_Àn2
 = 
iov2
->
iov_Àn
;

572 
iov2
->
iov_Àn
 = 
Àn2
;

573 
iov
->
iov_ba£
 = (*Ë((
uöçå_t
)iov->iov_ba£ + 
pos
);

574 
iov
->
iov_Àn
 -
pos
;

576 i‡(
do_wrôe
) {

577 
n
 = 
	`wrôev
(
iscsi
->
fd
, (
iovec
*Ë
iov
, 
niov
);

579 
n
 = 
	`ªadv
(
iscsi
->
fd
, (
iovec
*Ë
iov
, 
niov
);

583 
iov
->
iov_ba£
 = (*Ë((
uöçå_t
)iov->iov_ba£ - 
pos
);

584 
iov
->
iov_Àn
 +
pos
;

585 
iov2
->
iov_Àn
 = 
_Àn2
;

587 i‡(
n
 > 
cou¡
) {

589 
î∫o
 = 
EINVAL
;

592  
n
;

593 
	}
}

596 
	$iscsi_ªad_‰om_sockë
(
iscsi_c⁄ãxt
 *
iscsi
)

598 
iscsi_ö_pdu
 *
ö
;

599 
ssize_t
 
hdr_size
, 
d©a_size
, 
cou¡
, 
∑ddög_size
;

602 
hdr_size
 = 
	`ISCSI_HEADER_SIZE
(
iscsi
->
hódî_dige°
);

603 i‡(
iscsi
->
öcomög
 =
NULL
) {

604 
iscsi
->
öcomög
 = 
	`iscsi_szmÆloc
(iscsi, (
iscsi_ö_pdu
));

605 i‡(
iscsi
->
öcomög
 =
NULL
) {

606 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory: failedÅo malloc iscsi_in_pdu");

609 
iscsi
->
öcomög
->
hdr
 = 
	`iscsi_smÆloc
(iscsi, 
hdr_size
);

610 i‡(
iscsi
->
öcomög
->
hdr
 =
NULL
) {

611 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-memory");

615 
ö
 = 
iscsi
->
öcomög
;

618 i‡(
ö
->
hdr_pos
 < 
hdr_size
) {

622 
cou¡
 = 
hdr_size
 - 
ö
->
hdr_pos
;

623 
cou¡
 = 
	`ªcv
(
iscsi
->
fd
, &
ö
->
hdr
[ö->
hdr_pos
], count, 0);

624 i‡(
cou¡
 == 0) {

628 i‡(
cou¡
 < 0) {

629 i‡(
î∫o
 =
EINTR
 ||Éºnÿ=
EAGAIN
) {

632 
	`iscsi_£t_îr‹
(
iscsi
, "read from socket failed, "

633 "î∫o:%d", 
î∫o
);

636 
ö
->
hdr_pos
 +
cou¡
;

639 i‡(
ö
->
hdr_pos
 < 
hdr_size
) {

644 
∑ddög_size
 = 
	`iscsi_gë_pdu_∑ddög_size
(&
ö
->
hdr
[0]);

645 
d©a_size
 = 
	`iscsi_gë_pdu_d©a_size
(&
ö
->
hdr
[0]Ë+ 
∑ddög_size
;

647 i‡(
d©a_size
 < 0 || d©a_sizê> (
ssize_t
)
iscsi
->
öôüt‹_max_ªcv_d©a_£gmít_Àngth
) {

648 
	`iscsi_£t_îr‹
(
iscsi
, "InvÆid d©®sizêª˚ived fromÅ¨gë (%d)", ()
d©a_size
);

651 i‡(
d©a_size
 != 0) {

652 
∑ddög_buf
[3];

653 *
buf
 = 
∑ddög_buf
;

654 
scsi_iove˘‹
 * 
iove˘‹_ö
;

656 
cou¡
 = 
d©a_size
 - 
ö
->
d©a_pos
;

659 
iove˘‹_ö
 = 
	`iscsi_gë_scsi_èsk_iove˘‹_ö
(
iscsi
, 
ö
);

660 i‡(
iove˘‹_ö
 !
NULL
 && 
cou¡
 > 
∑ddög_size
) {

661 
uöt32_t
 
off£t
 = 
	`scsi_gë_uöt32
(&
ö
->
hdr
[40]);

662 
cou¡
 = 
	`iscsi_iove˘‹_ªadv_wrôev
(
iscsi
, 
iove˘‹_ö
, 
ö
->
d©a_pos
 + 
off£t
, cou¡ - 
∑ddög_size
, 0);

664 i‡(
iove˘‹_ö
 =
NULL
) {

665 i‡(
ö
->
d©a
 =
NULL
) {

666 
ö
->
d©a
 = 
	`iscsi_mÆloc
(
iscsi
, 
d©a_size
);

667 i‡(
ö
->
d©a
 =
NULL
) {

668 
	`iscsi_£t_îr‹
(
iscsi
, "Out-of-mem‹y: faûedÅÿmÆlo¯iscsi_ö_pdu->d©a(%d)", ()
d©a_size
);

672 
buf
 = &
ö
->
d©a
[ö->
d©a_pos
];

674 
cou¡
 = 
	`ªcv
(
iscsi
->
fd
, 
buf
, count, 0);

676 i‡(
cou¡
 == 0) {

680 i‡(
cou¡
 < 0) {

681 i‡(
î∫o
 =
EINTR
 ||Éºnÿ=
EAGAIN
) {

684 
	`iscsi_£t_îr‹
(
iscsi
, "read from socket failed, "

685 "î∫o:%d %s", 
î∫o
,

686 
	`iscsi_gë_îr‹
(
iscsi
));

689 
ö
->
d©a_pos
 +
cou¡
;

692 i‡(
ö
->
d©a_pos
 < 
d©a_size
) {

696 
iscsi
->
öcomög
 = 
NULL
;

697 i‡(
	`iscsi_¥o˚ss_pdu
(
iscsi
, 
ö
) != 0) {

698 
	`iscsi_‰ì_iscsi_ö_pdu
(
iscsi
, 
ö
);

701 
	`iscsi_‰ì_iscsi_ö_pdu
(
iscsi
, 
ö
);

702 } 
iscsi
->
t˝_n⁄blockög
 && iscsi->
waôpdu
 && iscsi->
is_loggedö
);

705 
	}
}

707 
	$iscsi_pdu_upd©e_hódîdige°
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_pdu
 *
pdu
)

709 
uöt32_t
 
¸c
;

711 i‡(
pdu
->
outd©a
.
size
 < 
ISCSI_RAW_HEADER_SIZE
 + 
ISCSI_DIGEST_SIZE
) {

712 
	`iscsi_£t_îr‹
(
iscsi
, "PDUÅoo small (%u)Åo contain header digest",

713 (Ë
pdu
->
outd©a
.
size
);

717 
¸c
 = 
	`¸c32c
(
pdu
->
outd©a
.
d©a
, 
ISCSI_RAW_HEADER_SIZE
);

719 
pdu
->
outd©a
.
d©a
[
ISCSI_RAW_HEADER_SIZE
+3] = (
¸c
 >> 24);

720 
pdu
->
outd©a
.
d©a
[
ISCSI_RAW_HEADER_SIZE
+2] = (
¸c
 >> 16);

721 
pdu
->
outd©a
.
d©a
[
ISCSI_RAW_HEADER_SIZE
+1] = (
¸c
 >> 8);

722 
pdu
->
outd©a
.
d©a
[
ISCSI_RAW_HEADER_SIZE
+0] = (
¸c
);

724 
	}
}

727 
	$iscsi_wrôe_to_sockë
(
iscsi_c⁄ãxt
 *
iscsi
)

729 
ssize_t
 
cou¡
;

730 
size_t
 
tŸÆ
;

731 
iscsi_pdu
 *
pdu
;

732 
∑ddög_buf
[3];

733 
sockë_Êags
 = 0;

735 #ifde‡
MSG_NOSIGNAL


736 
sockë_Êags
 |
MSG_NOSIGNAL
;

737 #ñi‡
SO_NOSIGPIPE


738 
sockë_Êags
 |
SO_NOSIGPIPE
;

741 i‡(
iscsi
->
fd
 == -1) {

742 
	`iscsi_£t_îr‹
(
iscsi
, "tryingÅo write butÇot connected");

746 
iscsi
->
outqueue
 !
NULL
 || iscsi->
outqueue_cuºít
 != NULL) {

747 i‡(
iscsi
->
outqueue_cuºít
 =
NULL
) {

748 i‡(
iscsi
->
is_c‹ked
) {

751 
	`ISCSI_LOG
(
iscsi
, 6, "iscsi_write_to_socket: socket is corked");

755 i‡(
	`iscsi_£rül32_com∑ª
(
iscsi
->
outqueue
->
cmd¢
, iscsi->
maxcmd¢
) > 0

756 && !(
iscsi
->
outqueue
->
outd©a
.
d©a
[0] & 
ISCSI_PDU_IMMEDIATE
)) {

758 
	`ISCSI_LOG
(
iscsi
, 6,

760 
iscsi
->
outqueue
->
cmd¢
, iscsi->
maxcmd¢
);

765 i‡(
	`iscsi_£rül32_com∑ª
(
iscsi
->
outqueue
->
cmd¢
, iscsi->
expcmd¢
) < 0 &&

766 (
iscsi
->
outqueue
->
outd©a
.
d©a
[0] & 0x3fË!
ISCSI_PDU_DATA_OUT
) {

767 
	`iscsi_£t_îr‹
(
iscsi
, "iscsi_write_to_socket: outqueue[0]->cmdsn <Éxpcmdsn (%08x < %08x) opcode %02x",

768 
iscsi
->
outqueue
->
cmd¢
, iscsi->
expcmd¢
, iscsi->outqueue->
outd©a
.
d©a
[0] & 0x3f);

771 
iscsi
->
outqueue_cuºít
 = iscsi->
outqueue
;

774 
	`iscsi_pdu_£t_exp°©¢
(
iscsi
->
outqueue_cuºít
, iscsi->
°©¢
 + 1);

777 i‡(
iscsi
->
hódî_dige°
 !
ISCSI_HEADER_DIGEST_NONE
 &&

778 
	`iscsi_pdu_upd©e_hódîdige°
(
iscsi
, iscsi->
outqueue_cuºít
) != 0) {

782 
	`ISCSI_LIST_REMOVE
(&
iscsi
->
outqueue
, iscsi->
outqueue_cuºít
);

783 i‡(!(
iscsi
->
outqueue_cuºít
->
Êags
 & 
ISCSI_PDU_DELETE_WHEN_SENT
)) {

788 
	`ISCSI_LIST_ADD_END
(&
iscsi
->
waôpdu
, iscsi->
outqueue_cuºít
);

792 
pdu
 = 
iscsi
->
outqueue_cuºít
;

793 
pdu
->
outd©a
.
size
 = (pdu->outdata.size + 3) & 0xfffffffc;

796 i‡(
pdu
->
outd©a_wrôãn
 <Ödu->
outd©a
.
size
) {

797 
cou¡
 = 
	`£nd
(
iscsi
->
fd
,

798 
pdu
->
outd©a
.
d©a
 +Ödu->
outd©a_wrôãn
,

799 
pdu
->
outd©a
.
size
 -Ödu->
outd©a_wrôãn
,

800 
sockë_Êags
);

801 i‡(
cou¡
 == -1) {

802 i‡(
î∫o
 =
EAGAIN
 ||Éºnÿ=
EWOULDBLOCK
) {

805 
	`iscsi_£t_îr‹
(
iscsi
, "Error when writingÅo "

806 "sockë :%d", 
î∫o
);

809 
pdu
->
outd©a_wrôãn
 +
cou¡
;

812 i‡(
pdu
->
outd©a_wrôãn
 !pdu->
outd©a
.
size
) {

817 
pdu
->
∑ylﬂd_wrôãn
 <Ödu->
∑ylﬂd_Àn
) {

818 
scsi_iove˘‹
* 
iove˘‹_out
;

820 
iove˘‹_out
 = 
	`iscsi_gë_scsi_èsk_iove˘‹_out
(
iscsi
, 
pdu
);

822 i‡(
iove˘‹_out
 =
NULL
) {

823 
	`iscsi_£t_îr‹
(
iscsi
, "Can't find iovector data for DATA-OUT");

827 
cou¡
 = 
	`iscsi_iove˘‹_ªadv_wrôev
(
iscsi
,

828 
iove˘‹_out
,

829 
pdu
->
∑ylﬂd_off£t
 +Ödu->
∑ylﬂd_wrôãn
,

830 
pdu
->
∑ylﬂd_Àn
 -Ödu->
∑ylﬂd_wrôãn
, 1);

831 i‡(
cou¡
 == -1) {

832 i‡(
î∫o
 =
EAGAIN
 ||Éºnÿ=
EWOULDBLOCK
) {

835 
	`iscsi_£t_îr‹
(
iscsi
, "Error when writingÅo "

836 "sockë :%d %s", 
î∫o
,

837 
	`iscsi_gë_îr‹
(
iscsi
));

841 
pdu
->
∑ylﬂd_wrôãn
 +
cou¡
;

844 
tŸÆ
 = 
pdu
->
∑ylﬂd_Àn
;

845 
tŸÆ
 = (total + 3) & 0xfffffffc;

848 i‡(
pdu
->
∑ylﬂd_wrôãn
 < 
tŸÆ
) {

849 
cou¡
 = 
	`£nd
(
iscsi
->
fd
, 
∑ddög_buf
, 
tŸÆ
 - 
pdu
->
∑ylﬂd_wrôãn
, 
sockë_Êags
);

850 i‡(
cou¡
 == -1) {

851 i‡(
î∫o
 =
EAGAIN
 ||Éºnÿ=
EWOULDBLOCK
) {

854 
	`iscsi_£t_îr‹
(
iscsi
, "Error when writingÅo "

855 "sockë :%d", 
î∫o
);

858 
pdu
->
∑ylﬂd_wrôãn
 +
cou¡
;

861 i‡(
pdu
->
∑ylﬂd_wrôãn
 !
tŸÆ
) {

864 i‡(
pdu
->
Êags
 & 
ISCSI_PDU_CORK_WHEN_SENT
) {

865 
iscsi
->
is_c‹ked
 = 1;

867 i‡(
pdu
->
Êags
 & 
ISCSI_PDU_DELETE_WHEN_SENT
) {

868 
iscsi
->
drv
->
	`‰ì_pdu
(iscsi, 
pdu
);

870 
iscsi
->
outqueue_cuºít
 = 
NULL
;

873 
	}
}

876 
	$iscsi_£rvi˚_ªc⁄√˘_if_loggedö
(
iscsi_c⁄ãxt
 *
iscsi
)

878 i‡(
iscsi
->
is_loggedö
) {

879 i‡(
	`iscsi_ªc⁄√˘
(
iscsi
) == 0) {

883 i‡(
iscsi
->
ﬁd_iscsi
) {

884 i‡(!
iscsi
->
≥ndög_ªc⁄√˘
) {

885 
	`iscsi_ªc⁄√˘_cb
(
iscsi
, 
SCSI_STATUS_ERROR
, 
NULL
, NULL);

889 
	`iscsi_£t_îr‹
(
iscsi
, "iscsi_service_reconnect_if_loggedin. CanÇot "

892 
	}
}

895 
	$iscsi_t˝_£rvi˚
(
iscsi_c⁄ãxt
 *
iscsi
, 
ªvíts
)

897 i‡(
iscsi
->
fd
 < 0) {

901 i‡(
iscsi
->
≥ndög_ªc⁄√˘
) {

902 i‡(
	`time
(
NULL
Ë>
iscsi
->
√xt_ªc⁄√˘
) {

903  
	`iscsi_ªc⁄√˘
(
iscsi
);

905 i‡(
iscsi
->
ﬁd_iscsi
) {

911 i‡(
ªvíts
 & 
POLLERR
) {

912 
îr
 = 0;

913 
sockÀn_t
 
îr_size
 = (
îr
);

915 i‡(
	`gësock›t
(
iscsi
->
fd
, 
SOL_SOCKET
, 
SO_ERROR
,

916 (*)&
îr
, &
îr_size
) != 0 ||Érr != 0) {

917 i‡(
îr
 == 0) {

918 
îr
 = 
î∫o
;

920 
	`iscsi_£t_îr‹
(
iscsi
, "iscsi_service: socketÉrror "

922 
	`°ªº‹
(
îr
),Érr);

924 
	`iscsi_£t_îr‹
(
iscsi
, "iscsi_service: POLLERR, "

927 i‡(
iscsi
->
sockë_°©us_cb
) {

928 
iscsi
->
	`sockë_°©us_cb
(iscsi, 
SCSI_STATUS_ERROR
, 
NULL
,

929 
iscsi
->
c⁄√˘_d©a
);

930 
iscsi
->
sockë_°©us_cb
 = 
NULL
;

932  
	`iscsi_£rvi˚_ªc⁄√˘_if_loggedö
(
iscsi
);

934 i‡(
ªvíts
 & 
POLLHUP
) {

935 
	`iscsi_£t_îr‹
(
iscsi
, "iscsi_service: POLLHUP, "

937 i‡(
iscsi
->
sockë_°©us_cb
) {

938 
iscsi
->
	`sockë_°©us_cb
(iscsi, 
SCSI_STATUS_ERROR
, 
NULL
,

939 
iscsi
->
c⁄√˘_d©a
);

940 
iscsi
->
sockë_°©us_cb
 = 
NULL
;

942  
	`iscsi_£rvi˚_ªc⁄√˘_if_loggedö
(
iscsi
);

945 i‡(
iscsi
->
is_c⁄√˘ed
 =0 && 
ªvíts
&
POLLOUT
) {

946 
îr
 = 0;

947 
sockÀn_t
 
îr_size
 = (
îr
);

948 
sockaddr_ö
 
loˇl
;

949 
sockÀn_t
 
loˇl_l
 = (
loˇl
);

951 i‡(
	`gësock›t
(
iscsi
->
fd
, 
SOL_SOCKET
, 
SO_ERROR
,

952 (*)&
îr
, &
îr_size
) != 0 ||Érr != 0) {

953 i‡(
îr
 == 0) {

954 
îr
 = 
î∫o
;

956 
	`iscsi_£t_îr‹
(
iscsi
, "iscsi_service: socketÉrror "

958 
	`°ªº‹
(
îr
),Érr);

959 i‡(
iscsi
->
sockë_°©us_cb
) {

960 
iscsi
->
	`sockë_°©us_cb
(iscsi, 
SCSI_STATUS_ERROR
,

961 
NULL
, 
iscsi
->
c⁄√˘_d©a
);

962 
iscsi
->
sockë_°©us_cb
 = 
NULL
;

965  
	`iscsi_£rvi˚_ªc⁄√˘_if_loggedö
(
iscsi
);

968 i‡(
	`gësock«me
(
iscsi
->
fd
, (
sockaddr
 *Ë&
loˇl
, &
loˇl_l
) == 0) {

969 
	`ISCSI_LOG
(
iscsi
, 2, "c⁄√˘i⁄É°ablished (%s:%u -> %s)", 
	`öë_¡ﬂ
(
loˇl
.
sö_addr
),

970 ()
	`¡ohs
(
loˇl
.
sö_p‹t
),
iscsi
->
c⁄√˘ed_p‹èl
);

973 
iscsi
->
is_c⁄√˘ed
 = 1;

974 i‡(
iscsi
->
sockë_°©us_cb
) {

975 
iscsi
->
	`sockë_°©us_cb
(iscsi, 
SCSI_STATUS_GOOD
, 
NULL
,

976 
iscsi
->
c⁄√˘_d©a
);

977 
iscsi
->
sockë_°©us_cb
 = 
NULL
;

982 i‡(
ªvíts
 & 
POLLIN
) {

983 i‡(
	`iscsi_ªad_‰om_sockë
(
iscsi
) != 0) {

984  
	`iscsi_£rvi˚_ªc⁄√˘_if_loggedö
(
iscsi
);

987 i‡(
ªvíts
 & 
POLLOUT
) {

988 i‡(
	`iscsi_wrôe_to_sockë
(
iscsi
) != 0) {

989  
	`iscsi_£rvi˚_ªc⁄√˘_if_loggedö
(
iscsi
);

992 
	`iscsi_timeout_sˇn
(
iscsi
);

995 
	}
}

998 
	$iscsi_£rvi˚
(
iscsi_c⁄ãxt
 *
iscsi
, 
ªvíts
)

1000  
iscsi
->
drv
->
	`£rvi˚
(iscsi, 
ªvíts
);

1001 
	}
}

1003 
	$iscsi_t˝_queue_pdu
(
iscsi_c⁄ãxt
 *
iscsi
,

1004 
iscsi_pdu
 *
pdu
)

1006 i‡(
pdu
 =
NULL
) {

1007 
	`iscsi_£t_îr‹
(
iscsi
, "tryingÅo queue NULLÖdu");

1011 
	`iscsi_add_to_outqueue
(
iscsi
, 
pdu
);

1014 
	}
}

1017 
	$iscsi_‰ì_iscsi_ö_pdu
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_ö_pdu
 *
ö
)

1019 
	`iscsi_s‰ì
(
iscsi
, 
ö
->
hdr
);

1020 
	`iscsi_‰ì
(
iscsi
, 
ö
->
d©a
);

1021 
ö
->
d©a
=
NULL
;

1022 
	`iscsi_s‰ì
(
iscsi
, 
ö
);

1023 
ö
=
NULL
;

1024 
	}
}

1026 
	$iscsi_£t_t˝_syn˙t
(
iscsi_c⁄ãxt
 *
iscsi
, 
vÆue
)

1028 
iscsi
->
t˝_syn˙t
=
vÆue
;

1029 
	`ISCSI_LOG
(
iscsi
, 2, "TCP_SYNCNT wû»bê£àtÿ%d o¿√xàsockë cª©i⁄",
vÆue
);

1030 
	}
}

1032 
	$iscsi_£t_t˝_u£r_timeout
(
iscsi_c⁄ãxt
 *
iscsi
, 
vÆue
)

1034 
iscsi
->
t˝_u£r_timeout
=
vÆue
;

1035 
	`ISCSI_LOG
(
iscsi
, 2, "TCP_USER_TIMEOUT wû»bê£àtÿ%dm†⁄Çexàsockë cª©i⁄",
vÆue
);

1036 
	}
}

1038 
	$iscsi_£t_t˝_kìpidÀ
(
iscsi_c⁄ãxt
 *
iscsi
, 
vÆue
)

1040 
iscsi
->
t˝_kìpidÀ
=
vÆue
;

1041 
	`ISCSI_LOG
(
iscsi
, 2, "TCP_KEEPIDLE wû»bê£àtÿ%d o¿√xàsockë cª©i⁄",
vÆue
);

1042 
	}
}

1044 
	$iscsi_£t_t˝_kìp˙t
(
iscsi_c⁄ãxt
 *
iscsi
, 
vÆue
)

1046 
iscsi
->
t˝_kìp˙t
=
vÆue
;

1047 
	`ISCSI_LOG
(
iscsi
, 2, "TCP_KEEPCNT wû»bê£àtÿ%d o¿√xàsockë cª©i⁄",
vÆue
);

1048 
	}
}

1050 
	$iscsi_£t_t˝_kìpötvl
(
iscsi_c⁄ãxt
 *
iscsi
, 
vÆue
)

1052 
iscsi
->
t˝_kìpötvl
=
vÆue
;

1053 
	`ISCSI_LOG
(
iscsi
, 2, "TCP_KEEPINTVL wû»bê£àtÿ%d o¿√xàsockë cª©i⁄",
vÆue
);

1054 
	}
}

1056 
	$iscsi_£t_t˝_kì∑live
(
iscsi_c⁄ãxt
 *
iscsi
, 
idÀ
 
_U_
, 
cou¡
 _U_, 
öãrvÆ
 _U_)

1058 #ifde‡
SO_KEEPALIVE


1059 
vÆue
 = 1;

1060 i‡(
	`£tsock›t
(
iscsi
->
fd
, 
SOL_SOCKET
, 
SO_KEEPALIVE
, (*)&
vÆue
, (value)) != 0) {

1061 
	`iscsi_£t_îr‹
(
iscsi
, "TCP: FaûedÅÿ£àsockë o±i⁄ SO_KEEPALIVE. Eº‹ %s(%d)", 
	`°ªº‹
(
î∫o
),Érrno);

1064 
	`ISCSI_LOG
(
iscsi
, 3, "SO_KEEPALIVE sëÅÿ%d",
vÆue
);

1065 #ifde‡
TCP_KEEPCNT


1066 i‡(
	`£t_t˝_sock›t
(
iscsi
->
fd
, 
TCP_KEEPCNT
, 
cou¡
) != 0) {

1067 
	`iscsi_£t_îr‹
(
iscsi
, "TCP: FaûedÅÿ£àt˝ kì∑livêcou¡. Eº‹ %s(%d)", 
	`°ªº‹
(
î∫o
),Érrno);

1070 
	`ISCSI_LOG
(
iscsi
, 3, "TCP_KEEPCNT sëÅÿ%d",
cou¡
);

1072 #ifde‡
TCP_KEEPINTVL


1073 i‡(
	`£t_t˝_sock›t
(
iscsi
->
fd
, 
TCP_KEEPINTVL
, 
öãrvÆ
) != 0) {

1074 
	`iscsi_£t_îr‹
(
iscsi
, "TCP: FaûedÅÿ£àt˝ kì∑livêöãrvÆ. Eº‹ %s(%d)", 
	`°ªº‹
(
î∫o
),Érrno);

1077 
	`ISCSI_LOG
(
iscsi
, 3, "TCP_KEEPINTVL sëÅÿ%d",
öãrvÆ
);

1079 #ifde‡
TCP_KEEPIDLE


1080 i‡(
	`£t_t˝_sock›t
(
iscsi
->
fd
, 
TCP_KEEPIDLE
, 
idÀ
) != 0) {

1081 
	`iscsi_£t_îr‹
(
iscsi
, "TCP: FaûedÅÿ£àt˝ kì∑livêidÀ. Eº‹ %s(%d)", 
	`°ªº‹
(
î∫o
),Érrno);

1084 
	`ISCSI_LOG
(
iscsi
, 3, "TCP_KEEPIDLE sëÅÿ%d",
idÀ
);

1089 
	}
}

1091 
	$iscsi_£t_böd_öãrÁ˚s
(
iscsi_c⁄ãxt
 *
iscsi
, * 
öãrÁ˚s
 
_U_
)

1093 #i‡
__löux


1094 
	`°∫˝y
(
iscsi
->
böd_öãrÁ˚s
,
öãrÁ˚s
,
MAX_STRING_SIZE
);

1095 
iscsi
->
böd_öãrÁ˚s_˙t
=0;

1096 * 
pchr
 = 
öãrÁ˚s
;

1097 * 
pchr2
 = 
NULL
;

1099 
pchr2
 = 
	`°rchr
(
pchr
,',');

1100 i‡(
pchr2
Ë{
pchr
=pchr2+1;}

1101 
iscsi
->
böd_öãrÁ˚s_˙t
++;

1102 } 
pchr2
);

1103 
	`ISCSI_LOG
(
iscsi
,2,"wû»bödÅÿ⁄êo‡thêfﬁlowög %d i¡îÁ˚(sË⁄Çexàsockë cª©i⁄: %s",iscsi->
böd_öãrÁ˚s_˙t
,
öãrÁ˚s
);

1104 i‡(!
iÁ˚_º
ËiÁ˚_º=
	`ønd
()%
iscsi
->
böd_öãrÁ˚s_˙t
+1;

1106 
	`ISCSI_LOG
(
iscsi
,1,"bindingÅoán interface isÇot supported on your OS");

1108 
	}
}

1110 #i‡
deföed
(
_MSC_VER
) && _MSC_VER < 1900

1111 
iscsi_å™•‹t
 
	giscsi_å™•‹t_t˝
 = {

1112 
iscsi_t˝_c⁄√˘
,

1113 
iscsi_t˝_queue_pdu
,

1114 
iscsi_t˝_√w_pdu
,

1115 
iscsi_t˝_disc⁄√˘
,

1116 
iscsi_t˝_‰ì_pdu
,

1117 
iscsi_t˝_£rvi˚
,

1118 
iscsi_t˝_gë_fd
,

1119 
iscsi_t˝_which_evíts
,

1122 
iscsi_å™•‹t
 
	giscsi_å™•‹t_t˝
 = {

1123 .
c⁄√˘
 = 
iscsi_t˝_c⁄√˘
,

1124 .
	gqueue_pdu
 = 
iscsi_t˝_queue_pdu
,

1125 .
	g√w_pdu
 = 
iscsi_t˝_√w_pdu
,

1126 .
	gdisc⁄√˘
 = 
iscsi_t˝_disc⁄√˘
,

1127 .
	g‰ì_pdu
 = 
iscsi_t˝_‰ì_pdu
,

1128 .
	g£rvi˚
 = 
iscsi_t˝_£rvi˚
,

1129 .
	ggë_fd
 = 
iscsi_t˝_gë_fd
,

1130 .
	gwhich_evíts
 = 
iscsi_t˝_which_evíts
,

1134 
	$iscsi_öô_t˝_å™•‹t
(
iscsi_c⁄ãxt
 *
iscsi
)

1136 
iscsi
->
drv
 = &
iscsi_å™•‹t_t˝
;

1137 
iscsi
->
å™•‹t
 = 
TCP_TRANSPORT
;

1138 
	}
}

	@lib/sync.c

18 #ifde‡
HAVE_CONFIG_H


19 
	~"c⁄fig.h
"

22 #ifde‡
HAVE_POLL_H


23 
	~<pﬁl.h
>

26 #ifde‡
AROS


27 
	~"¨os/¨os_com∑t.h
"

30 #i‡
deföed
(
_WIN32
)

31 
	~<wösock2.h
>

32 
	~"wö32/wö32_com∑t.h
"

35 #ifde‡
HAVE_UNISTD_H


36 
	~<uni°d.h
>

39 
	~<°dio.h
>

40 
	~<°dlib.h
>

41 
	~<°rög.h
>

42 
	~<time.h
>

43 
	~"iscsi.h
"

44 
	~"iscsi-¥iv©e.h
"

45 
	~"scsi-lowÀvñ.h
"

47 
	siscsi_sync_°©e
 {

48 
	mföished
;

49 
	m°©us
;

50 *
	m±r
;

51 
scsi_èsk
 *
	mèsk
;

55 
	$evít_lo›
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_sync_°©e
 *
°©e
)

57 
pﬁlfd
 
pfd
;

58 
ªt
;

60 
°©e
->
föished
 == 0) {

61 
ªvíts
;

63 
pfd
.
fd
 = 
	`iscsi_gë_fd
(
iscsi
);

64 
pfd
.
evíts
 = 
	`iscsi_which_evíts
(
iscsi
);

66 i‡((
ªt
 = 
	`pﬁl
(&
pfd
, 1, 1000)) < 0) {

67 
	`iscsi_£t_îr‹
(
iscsi
, "Poll failed");

68 
°©e
->
°©us
 = -1;

71 
ªvíts
 = (
ªt
 =0Ë? 0 : 
pfd
.revents;

72 i‡(
	`iscsi_£rvi˚
(
iscsi
, 
ªvíts
) < 0) {

73 
	`iscsi_£t_îr‹
(
iscsi
,

75 
	`iscsi_gë_îr‹
(
iscsi
));

76 
°©e
->
°©us
 = -1;

80 
	}
}

86 
	$iscsi_sync_cb
(
iscsi_c⁄ãxt
 *
iscsi
 
_U_
, 
°©us
,

87 *
comm™d_d©a
 
_U_
, *
¥iv©e_d©a
)

89 
iscsi_sync_°©e
 *
°©e
 = 
¥iv©e_d©a
;

91 
°©e
->
°©us
 = status;

92 
°©e
->
föished
 = 1;

93 
	}
}

96 
	$iscsi_c⁄√˘_sync
(
iscsi_c⁄ãxt
 *
iscsi
, c⁄° *
p‹èl
)

98 
iscsi_sync_°©e
 
°©e
;

100 
	`mem£t
(&
°©e
, 0, (state));

102 i‡(
	`iscsi_c⁄√˘_async
(
iscsi
, 
p‹èl
,

103 
iscsi_sync_cb
, &
°©e
) != 0) {

104 
	`iscsi_£t_îr‹
(
iscsi
,

106 
	`iscsi_gë_îr‹
(
iscsi
));

110 
	`evít_lo›
(
iscsi
, &
°©e
);

113 
iscsi
->
c⁄√˘_d©a
 = 
NULL
;

116 i‡(
°©e
.
°©us
 !
SCSI_STATUS_GOOD
) {

117 
	`iscsi_ˇn˚l_pdus
(
iscsi
);

120  (
°©e
.
°©us
 =
SCSI_STATUS_GOOD
) ? 0 : -1;

121 
	}
}

124 
	$iscsi_fuŒ_c⁄√˘_sync
(
iscsi_c⁄ãxt
 *
iscsi
,

125 c⁄° *
p‹èl
, 
lun
)

127 
iscsi_sync_°©e
 
°©e
;

129 
	`mem£t
(&
°©e
, 0, (state));

131 i‡(
	`iscsi_fuŒ_c⁄√˘_async
(
iscsi
, 
p‹èl
, 
lun
,

132 
iscsi_sync_cb
, &
°©e
) != 0) {

133 
	`iscsi_£t_îr‹
(
iscsi
,

135 
	`iscsi_gë_îr‹
(
iscsi
));

139 
	`evít_lo›
(
iscsi
, &
°©e
);

142 i‡(
°©e
.
°©us
 !
SCSI_STATUS_GOOD
) {

143 
	`iscsi_ˇn˚l_pdus
(
iscsi
);

146  (
°©e
.
°©us
 =
SCSI_STATUS_GOOD
) ? 0 : -1;

147 
	}
}

149 
	$iscsi_logö_sync
(
iscsi_c⁄ãxt
 *
iscsi
)

151 
iscsi_sync_°©e
 
°©e
;

153 
	`mem£t
(&
°©e
, 0, (state));

155 i‡(
	`iscsi_logö_async
(
iscsi
, 
iscsi_sync_cb
, &
°©e
) != 0) {

156 
	`iscsi_£t_îr‹
(
iscsi
, "FailedÅoÜogin. %s",

157 
	`iscsi_gë_îr‹
(
iscsi
));

161 
	`evít_lo›
(
iscsi
, &
°©e
);

163  (
°©e
.
°©us
 =
SCSI_STATUS_GOOD
) ? 0 : -1;

164 
	}
}

166 
	$iscsi_logout_sync
(
iscsi_c⁄ãxt
 *
iscsi
)

168 
iscsi_sync_°©e
 
°©e
;

170 
	`mem£t
(&
°©e
, 0, (state));

172 i‡(
	`iscsi_logout_async
(
iscsi
, 
iscsi_sync_cb
, &
°©e
) != 0) {

173 
	`iscsi_£t_îr‹
(
iscsi
, "FailedÅo startÜogout() %s",

174 
	`iscsi_gë_îr‹
(
iscsi
));

178 
	`evít_lo›
(
iscsi
, &
°©e
);

180  (
°©e
.
°©us
 =
SCSI_STATUS_GOOD
) ? 0 : -1;

181 
	}
}

184 
	$ªc⁄√˘_evít_lo›
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_sync_°©e
 *
°©e
)

186 
pﬁlfd
 
pfd
;

187 
ªt
;

188 
iscsi
->
ﬁd_iscsi
) {

189 
pfd
.
fd
 = 
	`iscsi_gë_fd
(
iscsi
);

190 
pfd
.
evíts
 = 
	`iscsi_which_evíts
(
iscsi
);

192 i‡(!
pfd
.
evíts
) {

193 
	`¶ìp
(1);

197 i‡((
ªt
 = 
	`pﬁl
(&
pfd
, 1, 1000)) < 0) {

198 
	`iscsi_£t_îr‹
(
iscsi
, "Poll failed");

199 
°©e
->
°©us
 = -1;

203 i‡(
	`iscsi_£rvi˚
(
iscsi
, 
pfd
.
ªvíts
) < 0) {

204 
	`iscsi_£t_îr‹
(
iscsi
,

206 
	`iscsi_gë_îr‹
(
iscsi
));

207 
°©e
->
°©us
 = -1;

211 
°©e
->
°©us
 = 0;

212 
	}
}

214 
	$iscsi_ªc⁄√˘_sync
(
iscsi_c⁄ãxt
 *
iscsi
)

216 
iscsi_sync_°©e
 
°©e
;

218 
	`mem£t
(&
°©e
, 0, (state));

220 i‡(
	`iscsi_ªc⁄√˘
(
iscsi
) != 0) {

221 
	`iscsi_£t_îr‹
(
iscsi
, "FaûedÅÿªc⁄√˘. %s", 
	`iscsi_gë_îr‹
(iscsi));

225 
	`ªc⁄√˘_evít_lo›
(
iscsi
, &
°©e
);

227  (
°©e
.
°©us
 =
SCSI_STATUS_GOOD
) ? 0 : -1;

228 
	}
}

231 
	$iscsi_èsk_mgmt_sync_cb
(
iscsi_c⁄ãxt
 *
iscsi
, 
°©us
,

232 *
comm™d_d©a
, *
¥iv©e_d©a
)

234 
iscsi_sync_°©e
 *
°©e
 = 
¥iv©e_d©a
;

236 
°©e
->
°©us
 = status;

237 
°©e
->
föished
 = 1;

243 i‡(
comm™d_d©a
 && *(
uöt32_t
 *)command_data) {

244 *(
uöt32_t
 *)
comm™d_d©a
) {

245 1: 
	`iscsi_£t_îr‹
(
iscsi
, "TASK MGMTÑesponded Task Does Not Exist");

247 2: 
	`iscsi_£t_îr‹
(
iscsi
, "TASK MGMTÑesponded LUN Does Not Exist");

249 3: 
	`iscsi_£t_îr‹
(
iscsi
, "TASK MGMTÑesponded Task Still Allegiant");

251 4: 
	`iscsi_£t_îr‹
(
iscsi
, "TASK MGMTÑesponded Task Allegiance Reassignment Not Supported");

253 5: 
	`iscsi_£t_îr‹
(
iscsi
, "TASK MGMTÑesponded Task Mgmt Function Not Supported");

255 6: 
	`iscsi_£t_îr‹
(
iscsi
, "TASK MGMTÑesponded Function Authorization Failed");

257 255: 
	`iscsi_£t_îr‹
(
iscsi
, "TASK MGMTÑesponded Function Rejected");

261 
°©e
->
°©us
 = 
SCSI_STATUS_ERROR
;

263 
	}
}

266 
	$iscsi_èsk_mgmt_sync
(
iscsi_c⁄ãxt
 *
iscsi
,

267 
lun
, 
iscsi_èsk_mgmt_funcs
 
fun˘i⁄
,

268 
uöt32_t
 
rôt
, uöt32_à
rcmd¢
)

270 
iscsi_sync_°©e
 
°©e
;

272 
	`mem£t
(&
°©e
, 0, (state));

274 i‡(
	`iscsi_èsk_mgmt_async
(
iscsi
, 
lun
, 
fun˘i⁄
,

275 
rôt
, 
rcmd¢
,

276 
iscsi_èsk_mgmt_sync_cb
, &
°©e
) != 0) {

277 
	`iscsi_£t_îr‹
(
iscsi
, "FailedÅo send TASK MGMT function: %s",

278 
	`iscsi_gë_îr‹
(
iscsi
));

282 
	`evít_lo›
(
iscsi
, &
°©e
);

284  (
°©e
.
°©us
 =
SCSI_STATUS_GOOD
) ? 0 : -1;

285 
	}
}

288 
	$iscsi_èsk_mgmt_ab‹t_èsk_sync
(
iscsi_c⁄ãxt
 *
iscsi
,

289 
scsi_èsk
 *
èsk
)

291  
	`iscsi_èsk_mgmt_sync
(
iscsi
, 
èsk
->
lun
,

292 
ISCSI_TM_ABORT_TASK
,

293 
èsk
->
ôt
,Åask->
cmd¢
);

294 
	}
}

297 
	$iscsi_èsk_mgmt_ab‹t_èsk_£t_sync
(
iscsi_c⁄ãxt
 *
iscsi
,

298 
uöt32_t
 
lun
)

300 
	`iscsi_scsi_ˇn˚l_Æl_èsks
(
iscsi
);

302  
	`iscsi_èsk_mgmt_sync
(
iscsi
, 
lun
,

303 
ISCSI_TM_ABORT_TASK_SET
,

305 
	}
}

308 
	$iscsi_èsk_mgmt_lun_ª£t_sync
(
iscsi_c⁄ãxt
 *
iscsi
,

309 
uöt32_t
 
lun
)

311 
	`iscsi_scsi_ˇn˚l_Æl_èsks
(
iscsi
);

313  
	`iscsi_èsk_mgmt_sync
(
iscsi
, 
lun
,

314 
ISCSI_TM_LUN_RESET
,

316 
	}
}

319 
	$iscsi_èsk_mgmt_èrgë_w¨m_ª£t_sync
(
iscsi_c⁄ãxt
 *
iscsi
)

321 
	`iscsi_scsi_ˇn˚l_Æl_èsks
(
iscsi
);

323  
	`iscsi_èsk_mgmt_sync
(
iscsi
, 0,

324 
ISCSI_TM_TARGET_WARM_RESET
,

326 
	}
}

330 
	$iscsi_èsk_mgmt_èrgë_cﬁd_ª£t_sync
(
iscsi_c⁄ãxt
 *
iscsi
)

332 
	`iscsi_scsi_ˇn˚l_Æl_èsks
(
iscsi
);

334  
	`iscsi_èsk_mgmt_sync
(
iscsi
, 0,

335 
ISCSI_TM_TARGET_COLD_RESET
,

337 
	}
}

344 
	$scsi_sync_cb
(
iscsi_c⁄ãxt
 *
iscsi
 
_U_
, 
°©us
, *
comm™d_d©a
,

345 *
¥iv©e_d©a
)

347 
scsi_èsk
 *
èsk
 = 
comm™d_d©a
;

348 
iscsi_sync_°©e
 *
°©e
 = 
¥iv©e_d©a
;

350 
èsk
->
°©us
 = status;

352 
°©e
->
°©us
 = status;

353 
°©e
->
föished
 = 1;

354 
°©e
->
èsk
 =Åask;

355 
	}
}

357 
scsi_èsk
 *

358 
	$iscsi_ªp‹éuns_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
ªp‹t_ty≥
,

359 
Æloc_Àn
)

361 
iscsi_sync_°©e
 
°©e
;

363 
	`mem£t
(&
°©e
, 0, (state));

365 i‡(
	`iscsi_ªp‹éuns_èsk
(
iscsi
, 
ªp‹t_ty≥
, 
Æloc_Àn
,

366 
scsi_sync_cb
, &
°©e
Ë=
NULL
) {

367 
	`iscsi_£t_îr‹
(
iscsi
, "FailedÅo send ReportLuns command");

368  
NULL
;

371 
	`evít_lo›
(
iscsi
, &
°©e
);

373  
°©e
.
èsk
;

374 
	}
}

377 
scsi_èsk
 *

378 
	$iscsi_ã°unôªady_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
)

380 
iscsi_sync_°©e
 
°©e
;

382 
	`mem£t
(&
°©e
, 0, (state));

384 i‡(
	`iscsi_ã°unôªady_èsk
(
iscsi
, 
lun
,

385 
scsi_sync_cb
, &
°©e
Ë=
NULL
) {

386 
	`iscsi_£t_îr‹
(
iscsi
,

388  
NULL
;

391 
	`evít_lo›
(
iscsi
, &
°©e
);

393  
°©e
.
èsk
;

394 
	}
}

396 
scsi_èsk
 *

397 
	$iscsi_öquúy_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
evpd
,

398 
∑ge_code
, 
maxsize
)

400 
iscsi_sync_°©e
 
°©e
;

402 
	`mem£t
(&
°©e
, 0, (state));

404 i‡(
	`iscsi_öquúy_èsk
(
iscsi
, 
lun
, 
evpd
, 
∑ge_code
, 
maxsize
,

405 
scsi_sync_cb
, &
°©e
Ë=
NULL
) {

406 
	`iscsi_£t_îr‹
(
iscsi
, "FailedÅo send Inquiry command");

407  
NULL
;

410 
	`evít_lo›
(
iscsi
, &
°©e
);

412  
°©e
.
èsk
;

413 
	}
}

415 
scsi_èsk
 *

416 
	$iscsi_ªad6_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

417 
uöt32_t
 
d©Æí
, 
blocksize
)

419 
iscsi_sync_°©e
 
°©e
;

421 
	`mem£t
(&
°©e
, 0, (state));

423 i‡(
	`iscsi_ªad6_èsk
(
iscsi
, 
lun
, 
lba
, 
d©Æí
, 
blocksize
,

424 
scsi_sync_cb
, &
°©e
Ë=
NULL
) {

425 
	`iscsi_£t_îr‹
(
iscsi
,

427  
NULL
;

430 
	`evít_lo›
(
iscsi
, &
°©e
);

432  
°©e
.
èsk
;

433 
	}
}

435 
scsi_èsk
 *

436 
	$iscsi_ªad6_iov_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

437 
uöt32_t
 
d©Æí
, 
blocksize
, 
scsi_iovec
 *
iov
, 
niov
)

439 
iscsi_sync_°©e
 
°©e
;

441 
	`mem£t
(&
°©e
, 0, (state));

443 i‡(
	`iscsi_ªad6_iov_èsk
(
iscsi
, 
lun
, 
lba
, 
d©Æí
, 
blocksize
,

444 
scsi_sync_cb
, &
°©e
, 
iov
, 
niov
Ë=
NULL
) {

445 
	`iscsi_£t_îr‹
(
iscsi
,

447  
NULL
;

450 
	`evít_lo›
(
iscsi
, &
°©e
);

452  
°©e
.
èsk
;

453 
	}
}

455 
scsi_èsk
 *

456 
	$iscsi_ªad10_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

457 
uöt32_t
 
d©Æí
, 
blocksize
,

458 
rd¥Ÿe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
)

460 
iscsi_sync_°©e
 
°©e
;

462 
	`mem£t
(&
°©e
, 0, (state));

464 i‡(
	`iscsi_ªad10_èsk
(
iscsi
, 
lun
, 
lba
, 
d©Æí
, 
blocksize
, 
rd¥Ÿe˘
,

465 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
,

466 
scsi_sync_cb
, &
°©e
Ë=
NULL
) {

467 
	`iscsi_£t_îr‹
(
iscsi
,

469  
NULL
;

472 
	`evít_lo›
(
iscsi
, &
°©e
);

474  
°©e
.
èsk
;

475 
	}
}

477 
scsi_èsk
 *

478 
	$iscsi_ªad10_iov_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

479 
uöt32_t
 
d©Æí
, 
blocksize
,

480 
rd¥Ÿe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
,

481 
scsi_iovec
 *
iov
, 
niov
)

483 
iscsi_sync_°©e
 
°©e
;

485 
	`mem£t
(&
°©e
, 0, (state));

487 i‡(
	`iscsi_ªad10_iov_èsk
(
iscsi
, 
lun
, 
lba
, 
d©Æí
, 
blocksize
, 
rd¥Ÿe˘
,

488 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
,

489 
scsi_sync_cb
, &
°©e
, 
iov
, 
niov
Ë=
NULL
) {

490 
	`iscsi_£t_îr‹
(
iscsi
,

492  
NULL
;

495 
	`evít_lo›
(
iscsi
, &
°©e
);

497  
°©e
.
èsk
;

498 
	}
}

500 
scsi_èsk
 *

501 
	$iscsi_ªad12_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

502 
uöt32_t
 
d©Æí
, 
blocksize
,

503 
rd¥Ÿe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
)

505 
iscsi_sync_°©e
 
°©e
;

507 
	`mem£t
(&
°©e
, 0, (state));

509 i‡(
	`iscsi_ªad12_èsk
(
iscsi
, 
lun
, 
lba
, 
d©Æí
, 
blocksize
, 
rd¥Ÿe˘
,

510 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
,

511 
scsi_sync_cb
, &
°©e
Ë=
NULL
) {

512 
	`iscsi_£t_îr‹
(
iscsi
,

514  
NULL
;

517 
	`evít_lo›
(
iscsi
, &
°©e
);

519  
°©e
.
èsk
;

520 
	}
}

522 
scsi_èsk
 *

523 
	$iscsi_ªad12_iov_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

524 
uöt32_t
 
d©Æí
, 
blocksize
,

525 
rd¥Ÿe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
,

526 
scsi_iovec
 *
iov
, 
niov
)

528 
iscsi_sync_°©e
 
°©e
;

530 
	`mem£t
(&
°©e
, 0, (state));

532 i‡(
	`iscsi_ªad12_iov_èsk
(
iscsi
, 
lun
, 
lba
, 
d©Æí
, 
blocksize
, 
rd¥Ÿe˘
,

533 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
,

534 
scsi_sync_cb
, &
°©e
, 
iov
, 
niov
Ë=
NULL
) {

535 
	`iscsi_£t_îr‹
(
iscsi
,

537  
NULL
;

540 
	`evít_lo›
(
iscsi
, &
°©e
);

542  
°©e
.
èsk
;

543 
	}
}

545 
scsi_èsk
 *

546 
	$iscsi_ªad16_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
,

547 
uöt32_t
 
d©Æí
, 
blocksize
,

548 
rd¥Ÿe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
)

550 
iscsi_sync_°©e
 
°©e
;

552 
	`mem£t
(&
°©e
, 0, (state));

554 i‡(
	`iscsi_ªad16_èsk
(
iscsi
, 
lun
, 
lba
, 
d©Æí
, 
blocksize
, 
rd¥Ÿe˘
,

555 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
,

556 
scsi_sync_cb
, &
°©e
Ë=
NULL
) {

557 
	`iscsi_£t_îr‹
(
iscsi
,

559  
NULL
;

562 
	`evít_lo›
(
iscsi
, &
°©e
);

564  
°©e
.
èsk
;

565 
	}
}

567 
scsi_èsk
 *

568 
	$iscsi_ªad16_iov_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
,

569 
uöt32_t
 
d©Æí
, 
blocksize
,

570 
rd¥Ÿe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
,

571 
scsi_iovec
 *
iov
, 
niov
)

573 
iscsi_sync_°©e
 
°©e
;

575 
	`mem£t
(&
°©e
, 0, (state));

577 i‡(
	`iscsi_ªad16_iov_èsk
(
iscsi
, 
lun
, 
lba
, 
d©Æí
, 
blocksize
, 
rd¥Ÿe˘
,

578 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
,

579 
scsi_sync_cb
, &
°©e
, 
iov
, 
niov
Ë=
NULL
) {

580 
	`iscsi_£t_îr‹
(
iscsi
,

582  
NULL
;

585 
	`evít_lo›
(
iscsi
, &
°©e
);

587  
°©e
.
èsk
;

588 
	}
}

590 
scsi_èsk
 *

591 
	$iscsi_ªadˇ∑côy10_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
lba
,

592 
pmi
)

594 
iscsi_sync_°©e
 
°©e
;

596 
	`mem£t
(&
°©e
, 0, (state));

598 i‡(
	`iscsi_ªadˇ∑côy10_èsk
(
iscsi
, 
lun
, 
lba
, 
pmi
,

599 
scsi_sync_cb
, &
°©e
Ë=
NULL
) {

600 
	`iscsi_£t_îr‹
(
iscsi
,

602  
NULL
;

605 
	`evít_lo›
(
iscsi
, &
°©e
);

607  
°©e
.
èsk
;

608 
	}
}

610 
scsi_èsk
 *

611 
	$iscsi_ªadˇ∑côy16_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
)

613 
iscsi_sync_°©e
 
°©e
;

615 
	`mem£t
(&
°©e
, 0, (state));

617 i‡(
	`iscsi_ªadˇ∑côy16_èsk
(
iscsi
, 
lun
,

618 
scsi_sync_cb
, &
°©e
Ë=
NULL
) {

619 
	`iscsi_£t_îr‹
(
iscsi
,

621  
NULL
;

624 
	`evít_lo›
(
iscsi
, &
°©e
);

626  
°©e
.
èsk
;

627 
	}
}

629 
scsi_èsk
 *

630 
	$iscsi_ªadde„˘d©a10_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

631 
ªq_∂i°
, 
ªq_gli°
,

632 
de„˘_li°_f‹m©
, 
uöt16_t
 
Æloc_Àn
)

634 
iscsi_sync_°©e
 
°©e
;

636 
	`mem£t
(&
°©e
, 0, (state));

638 i‡(
	`iscsi_ªadde„˘d©a10_èsk
(
iscsi
, 
lun
,

639 
ªq_∂i°
, 
ªq_gli°
,

640 
de„˘_li°_f‹m©
, 
Æloc_Àn
,

641 
scsi_sync_cb
, &
°©e
Ë=
NULL
) {

642 
	`iscsi_£t_îr‹
(
iscsi
,

644  
NULL
;

647 
	`evít_lo›
(
iscsi
, &
°©e
);

649  
°©e
.
èsk
;

650 
	}
}

652 
scsi_èsk
 *

653 
	$iscsi_ªadde„˘d©a12_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

654 
ªq_∂i°
, 
ªq_gli°
,

655 
de„˘_li°_f‹m©
,

656 
uöt32_t
 
addªss_des¸ùt‹_ödex
,

657 
uöt32_t
 
Æloc_Àn
)

659 
iscsi_sync_°©e
 
°©e
;

661 
	`mem£t
(&
°©e
, 0, (state));

663 i‡(
	`iscsi_ªadde„˘d©a12_èsk
(
iscsi
, 
lun
,

664 
ªq_∂i°
, 
ªq_gli°
,

665 
de„˘_li°_f‹m©
,

666 
addªss_des¸ùt‹_ödex
, 
Æloc_Àn
,

667 
scsi_sync_cb
, &
°©e
Ë=
NULL
) {

668 
	`iscsi_£t_îr‹
(
iscsi
,

670  
NULL
;

673 
	`evít_lo›
(
iscsi
, &
°©e
);

675  
°©e
.
èsk
;

676 
	}
}

678 
scsi_èsk
 *

679 
	$iscsi_ßnôize_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

680 
immed
, 
au£
, 
ß
, 
∑øm_Àn
,

681 
iscsi_d©a
 *
d©a
)

683 
iscsi_sync_°©e
 
°©e
;

685 
	`mem£t
(&
°©e
, 0, (state));

687 i‡(
	`iscsi_ßnôize_èsk
(
iscsi
, 
lun
,

688 
immed
, 
au£
, 
ß
, 
∑øm_Àn
, 
d©a
,

689 
scsi_sync_cb
, &
°©e
Ë=
NULL
) {

690 
	`iscsi_£t_îr‹
(
iscsi
,

692  
NULL
;

695 
	`evít_lo›
(
iscsi
, &
°©e
);

697  
°©e
.
èsk
;

698 
	}
}

700 
scsi_èsk
 *

701 
	$iscsi_ßnôize_block_îa£_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

702 
immed
, 
au£
)

704 
iscsi_sync_°©e
 
°©e
;

706 
	`mem£t
(&
°©e
, 0, (state));

708 i‡(
	`iscsi_ßnôize_block_îa£_èsk
(
iscsi
, 
lun
,

709 
immed
, 
au£
,

710 
scsi_sync_cb
, &
°©e
Ë=
NULL
) {

711 
	`iscsi_£t_îr‹
(
iscsi
,

713  
NULL
;

716 
	`evít_lo›
(
iscsi
, &
°©e
);

718  
°©e
.
èsk
;

719 
	}
}

721 
scsi_èsk
 *

722 
	$iscsi_ßnôize_¸y±o_îa£_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

723 
immed
, 
au£
)

725 
iscsi_sync_°©e
 
°©e
;

727 
	`mem£t
(&
°©e
, 0, (state));

729 i‡(
	`iscsi_ßnôize_¸y±o_îa£_èsk
(
iscsi
, 
lun
,

730 
immed
, 
au£
,

731 
scsi_sync_cb
, &
°©e
Ë=
NULL
) {

732 
	`iscsi_£t_îr‹
(
iscsi
,

734  
NULL
;

737 
	`evít_lo›
(
iscsi
, &
°©e
);

739  
°©e
.
èsk
;

740 
	}
}

742 
scsi_èsk
 *

743 
	$iscsi_ßnôize_exô_Áûuª_mode_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

744 
immed
, 
au£
)

746 
iscsi_sync_°©e
 
°©e
;

748 
	`mem£t
(&
°©e
, 0, (state));

750 i‡(
	`iscsi_ßnôize_exô_Áûuª_mode_èsk
(
iscsi
, 
lun
,

751 
immed
, 
au£
,

752 
scsi_sync_cb
, &
°©e
Ë=
NULL
) {

753 
	`iscsi_£t_îr‹
(
iscsi
,

755  
NULL
;

758 
	`evít_lo›
(
iscsi
, &
°©e
);

760  
°©e
.
èsk
;

761 
	}
}

763 
scsi_èsk
 *

764 
	$iscsi_gë_lba_°©us_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
°¨tög_lba
, 
uöt32_t
 
Æloc_Àn
)

766 
iscsi_sync_°©e
 
°©e
;

768 
	`mem£t
(&
°©e
, 0, (state));

770 i‡(
	`iscsi_gë_lba_°©us_èsk
(
iscsi
, 
lun
, 
°¨tög_lba
, 
Æloc_Àn
,

771 
scsi_sync_cb
, &
°©e
Ë=
NULL
) {

772 
	`iscsi_£t_îr‹
(
iscsi
,

774  
NULL
;

777 
	`evít_lo›
(
iscsi
, &
°©e
);

779  
°©e
.
èsk
;

780 
	}
}

782 
scsi_èsk
 *

783 
	$iscsi_synchr⁄izeˇche10_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
lba
,

784 
num_blocks
, 
syn˙v
, 
immed
)

786 
iscsi_sync_°©e
 
°©e
;

788 
	`mem£t
(&
°©e
, 0, (state));

790 i‡(
	`iscsi_synchr⁄izeˇche10_èsk
(
iscsi
, 
lun
, 
lba
, 
num_blocks
,

791 
syn˙v
, 
immed
,

792 
scsi_sync_cb
, &
°©e
Ë=
NULL
) {

793 
	`iscsi_£t_îr‹
(
iscsi
,

795  
NULL
;

798 
	`evít_lo›
(
iscsi
, &
°©e
);

800  
°©e
.
èsk
;

801 
	}
}

803 
scsi_èsk
 *

804 
	$iscsi_°¨t°›unô_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

805 
immed
, 
pcm
, 
pc
,

806 
no_Êush
, 
l€j
, 
°¨t
)

808 
iscsi_sync_°©e
 
°©e
;

810 
	`mem£t
(&
°©e
, 0, (state));

812 i‡(
	`iscsi_°¨t°›unô_èsk
(
iscsi
, 
lun
, 
immed
, 
pcm
, 
pc
,

813 
no_Êush
, 
l€j
, 
°¨t
,

814 
scsi_sync_cb
, &
°©e
Ë=
NULL
) {

815 
	`iscsi_£t_îr‹
(
iscsi
,

817  
NULL
;

820 
	`evít_lo›
(
iscsi
, &
°©e
);

822  
°©e
.
èsk
;

823 
	}
}

825 
scsi_èsk
 *

826 
	$iscsi_¥evíèŒow_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

827 
¥evít
)

829 
iscsi_sync_°©e
 
°©e
;

831 
	`mem£t
(&
°©e
, 0, (state));

833 i‡(
	`iscsi_¥evíèŒow_èsk
(
iscsi
, 
lun
, 
¥evít
,

834 
scsi_sync_cb
, &
°©e
Ë=
NULL
) {

835 
	`iscsi_£t_îr‹
(
iscsi
,

837  
NULL
;

840 
	`evít_lo›
(
iscsi
, &
°©e
);

842  
°©e
.
èsk
;

843 
	}
}

845 
scsi_èsk
 *

846 
	$iscsi_synchr⁄izeˇche16_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
,

847 
uöt32_t
 
num_blocks
, 
syn˙v
, 
immed
)

849 
iscsi_sync_°©e
 
°©e
;

851 
	`mem£t
(&
°©e
, 0, (state));

853 i‡(
	`iscsi_synchr⁄izeˇche16_èsk
(
iscsi
, 
lun
, 
lba
, 
num_blocks
,

854 
syn˙v
, 
immed
,

855 
scsi_sync_cb
, &
°©e
Ë=
NULL
) {

856 
	`iscsi_£t_îr‹
(
iscsi
,

858  
NULL
;

861 
	`evít_lo›
(
iscsi
, &
°©e
);

863  
°©e
.
èsk
;

864 
	}
}

866 
scsi_èsk
 *

867 
	$iscsi_¥e„tch10_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

868 
num_blocks
, 
immed
, 
group
)

870 
iscsi_sync_°©e
 
°©e
;

872 
	`mem£t
(&
°©e
, 0, (state));

874 i‡(
	`iscsi_¥e„tch10_èsk
(
iscsi
, 
lun
, 
lba
, 
num_blocks
,

875 
immed
, 
group
,

876 
scsi_sync_cb
, &
°©e
Ë=
NULL
) {

877 
	`iscsi_£t_îr‹
(
iscsi
,

879  
NULL
;

882 
	`evít_lo›
(
iscsi
, &
°©e
);

884  
°©e
.
èsk
;

885 
	}
}

887 
scsi_èsk
 *

888 
	$iscsi_¥e„tch16_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
,

889 
num_blocks
, 
immed
, 
group
)

891 
iscsi_sync_°©e
 
°©e
;

893 
	`mem£t
(&
°©e
, 0, (state));

895 i‡(
	`iscsi_¥e„tch16_èsk
(
iscsi
, 
lun
, 
lba
, 
num_blocks
,

896 
immed
, 
group
,

897 
scsi_sync_cb
, &
°©e
Ë=
NULL
) {

898 
	`iscsi_£t_îr‹
(
iscsi
,

900  
NULL
;

903 
	`evít_lo›
(
iscsi
, &
°©e
);

905  
°©e
.
èsk
;

906 
	}
}

908 
scsi_èsk
 *

909 
	$iscsi_wrôe10_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

910 *
d©a
, 
uöt32_t
 
d©Æí
, 
blocksize
,

911 
wΩrŸe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
)

913 
iscsi_sync_°©e
 
°©e
;

915 
	`mem£t
(&
°©e
, 0, (state));

917 i‡(
	`iscsi_wrôe10_èsk
(
iscsi
, 
lun
, 
lba
, 
d©a
, 
d©Æí
, 
blocksize
,

918 
wΩrŸe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
,

919 
scsi_sync_cb
, &
°©e
Ë=
NULL
) {

920 
	`iscsi_£t_îr‹
(
iscsi
,

922  
NULL
;

925 
	`evít_lo›
(
iscsi
, &
°©e
);

927  
°©e
.
èsk
;

928 
	}
}

930 
scsi_èsk
 *

931 
	$iscsi_wrôe10_iov_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

932 *
d©a
, 
uöt32_t
 
d©Æí
, 
blocksize
,

933 
wΩrŸe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
,

934 
scsi_iovec
 *
iov
, 
niov
)

936 
iscsi_sync_°©e
 
°©e
;

938 
	`mem£t
(&
°©e
, 0, (state));

940 i‡(
	`iscsi_wrôe10_iov_èsk
(
iscsi
, 
lun
, 
lba
, 
d©a
, 
d©Æí
, 
blocksize
,

941 
wΩrŸe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
,

942 
scsi_sync_cb
, &
°©e
, 
iov
, 
niov
Ë=
NULL
) {

943 
	`iscsi_£t_îr‹
(
iscsi
,

945  
NULL
;

948 
	`evít_lo›
(
iscsi
, &
°©e
);

950  
°©e
.
èsk
;

951 
	}
}

953 
scsi_èsk
 *

954 
	$iscsi_wrôe12_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

955 *
d©a
, 
uöt32_t
 
d©Æí
, 
blocksize
,

956 
wΩrŸe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
)

958 
iscsi_sync_°©e
 
°©e
;

960 
	`mem£t
(&
°©e
, 0, (state));

962 i‡(
	`iscsi_wrôe12_èsk
(
iscsi
, 
lun
, 
lba
,

963 
d©a
, 
d©Æí
, 
blocksize
, 
wΩrŸe˘
,

964 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
,

965 
scsi_sync_cb
, &
°©e
Ë=
NULL
) {

966 
	`iscsi_£t_îr‹
(
iscsi
,

968  
NULL
;

971 
	`evít_lo›
(
iscsi
, &
°©e
);

973  
°©e
.
èsk
;

974 
	}
}

976 
scsi_èsk
 *

977 
	$iscsi_wrôe12_iov_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

978 *
d©a
, 
uöt32_t
 
d©Æí
, 
blocksize
,

979 
wΩrŸe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
,

980 
scsi_iovec
 *
iov
,
niov
)

982 
iscsi_sync_°©e
 
°©e
;

984 
	`mem£t
(&
°©e
, 0, (state));

986 i‡(
	`iscsi_wrôe12_iov_èsk
(
iscsi
, 
lun
, 
lba
,

987 
d©a
, 
d©Æí
, 
blocksize
, 
wΩrŸe˘
,

988 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
,

989 
scsi_sync_cb
, &
°©e
, 
iov
, 
niov
Ë=
NULL
) {

990 
	`iscsi_£t_îr‹
(
iscsi
,

992  
NULL
;

995 
	`evít_lo›
(
iscsi
, &
°©e
);

997  
°©e
.
èsk
;

998 
	}
}

1000 
scsi_èsk
 *

1001 
	$iscsi_wrôe16_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
,

1002 *
d©a
, 
uöt32_t
 
d©Æí
, 
blocksize
,

1003 
wΩrŸe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
)

1005 
iscsi_sync_°©e
 
°©e
;

1007 
	`mem£t
(&
°©e
, 0, (state));

1009 i‡(
	`iscsi_wrôe16_èsk
(
iscsi
, 
lun
, 
lba
,

1010 
d©a
, 
d©Æí
, 
blocksize
, 
wΩrŸe˘
,

1011 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
,

1012 
scsi_sync_cb
, &
°©e
Ë=
NULL
) {

1013 
	`iscsi_£t_îr‹
(
iscsi
,

1015  
NULL
;

1018 
	`evít_lo›
(
iscsi
, &
°©e
);

1020  
°©e
.
èsk
;

1021 
	}
}

1023 
scsi_èsk
 *

1024 
	$iscsi_wrôe16_iov_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
,

1025 *
d©a
, 
uöt32_t
 
d©Æí
, 
blocksize
,

1026 
wΩrŸe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
,

1027 
scsi_iovec
 *
iov
, 
niov
)

1029 
iscsi_sync_°©e
 
°©e
;

1031 
	`mem£t
(&
°©e
, 0, (state));

1033 i‡(
	`iscsi_wrôe16_iov_èsk
(
iscsi
, 
lun
, 
lba
,

1034 
d©a
, 
d©Æí
, 
blocksize
, 
wΩrŸe˘
,

1035 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
,

1036 
scsi_sync_cb
, &
°©e
, 
iov
, 
niov
Ë=
NULL
) {

1037 
	`iscsi_£t_îr‹
(
iscsi
,

1039  
NULL
;

1042 
	`evít_lo›
(
iscsi
, &
°©e
);

1044  
°©e
.
èsk
;

1045 
	}
}

1047 
scsi_èsk
 *

1048 
	$iscsi_wrôótomic16_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
,

1049 *
d©a
, 
uöt32_t
 
d©Æí
, 
blocksize
,

1050 
wΩrŸe˘
, 
dpo
, 
fua
, 
group_numbî
)

1052 
iscsi_sync_°©e
 
°©e
;

1054 
	`mem£t
(&
°©e
, 0, (state));

1056 i‡(
	`iscsi_wrôótomic16_èsk
(
iscsi
, 
lun
, 
lba
,

1057 
d©a
, 
d©Æí
, 
blocksize
, 
wΩrŸe˘
,

1058 
dpo
, 
fua
, 
group_numbî
,

1059 
scsi_sync_cb
, &
°©e
Ë=
NULL
) {

1060 
	`iscsi_£t_îr‹
(
iscsi
,

1062  
NULL
;

1065 
	`evít_lo›
(
iscsi
, &
°©e
);

1067  
°©e
.
èsk
;

1068 
	}
}

1070 
scsi_èsk
 *

1071 
	$iscsi_wrôótomic16_iov_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
,

1072 *
d©a
, 
uöt32_t
 
d©Æí
, 
blocksize
,

1073 
wΩrŸe˘
, 
dpo
, 
fua
, 
group_numbî
,

1074 
scsi_iovec
 *
iov
, 
niov
)

1076 
iscsi_sync_°©e
 
°©e
;

1078 
	`mem£t
(&
°©e
, 0, (state));

1080 i‡(
	`iscsi_wrôótomic16_iov_èsk
(
iscsi
, 
lun
, 
lba
,

1081 
d©a
, 
d©Æí
, 
blocksize
, 
wΩrŸe˘
,

1082 
dpo
, 
fua
, 
group_numbî
,

1083 
scsi_sync_cb
, &
°©e
, 
iov
, 
niov
Ë=
NULL
) {

1084 
	`iscsi_£t_îr‹
(
iscsi
,

1086  
NULL
;

1089 
	`evít_lo›
(
iscsi
, &
°©e
);

1091  
°©e
.
èsk
;

1092 
	}
}

1094 
scsi_èsk
 *

1095 
	$iscsi_‹wrôe_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
,

1096 *
d©a
, 
uöt32_t
 
d©Æí
, 
blocksize
,

1097 
wΩrŸe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
)

1099 
iscsi_sync_°©e
 
°©e
;

1101 
	`mem£t
(&
°©e
, 0, (state));

1103 i‡(
	`iscsi_‹wrôe_èsk
(
iscsi
, 
lun
, 
lba
,

1104 
d©a
, 
d©Æí
, 
blocksize
, 
wΩrŸe˘
,

1105 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
,

1106 
scsi_sync_cb
, &
°©e
Ë=
NULL
) {

1107 
	`iscsi_£t_îr‹
(
iscsi
,

1109  
NULL
;

1112 
	`evít_lo›
(
iscsi
, &
°©e
);

1114  
°©e
.
èsk
;

1115 
	}
}

1117 
scsi_èsk
 *

1118 
	$iscsi_‹wrôe_iov_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
,

1119 *
d©a
, 
uöt32_t
 
d©Æí
, 
blocksize
,

1120 
wΩrŸe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
,

1121 
scsi_iovec
 *
iov
, 
niov
)

1123 
iscsi_sync_°©e
 
°©e
;

1125 
	`mem£t
(&
°©e
, 0, (state));

1127 i‡(
	`iscsi_‹wrôe_iov_èsk
(
iscsi
, 
lun
, 
lba
,

1128 
d©a
, 
d©Æí
, 
blocksize
, 
wΩrŸe˘
,

1129 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
,

1130 
scsi_sync_cb
, &
°©e
, 
iov
, 
niov
Ë=
NULL
) {

1131 
	`iscsi_£t_îr‹
(
iscsi
,

1133  
NULL
;

1136 
	`evít_lo›
(
iscsi
, &
°©e
);

1138  
°©e
.
èsk
;

1139 
	}
}

1141 
scsi_èsk
 *

1142 
	$iscsi_com∑ª™dwrôe_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
,

1143 *
d©a
, 
uöt32_t
 
d©Æí
, 
blocksize
,

1144 
wΩrŸe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
)

1146 
iscsi_sync_°©e
 
°©e
;

1148 
	`mem£t
(&
°©e
, 0, (state));

1150 i‡(
	`iscsi_com∑ª™dwrôe_èsk
(
iscsi
, 
lun
, 
lba
,

1151 
d©a
, 
d©Æí
, 
blocksize
, 
wΩrŸe˘
,

1152 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
,

1153 
scsi_sync_cb
, &
°©e
Ë=
NULL
) {

1154 
	`iscsi_£t_îr‹
(
iscsi
,

1156  
NULL
;

1159 
	`evít_lo›
(
iscsi
, &
°©e
);

1161  
°©e
.
èsk
;

1162 
	}
}

1164 
scsi_èsk
 *

1165 
	$iscsi_com∑ª™dwrôe_iov_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
,

1166 *
d©a
, 
uöt32_t
 
d©Æí
, 
blocksize
,

1167 
wΩrŸe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
,

1168 
scsi_iovec
 *
iov
, 
niov
)

1170 
iscsi_sync_°©e
 
°©e
;

1172 
	`mem£t
(&
°©e
, 0, (state));

1174 i‡(
	`iscsi_com∑ª™dwrôe_iov_èsk
(
iscsi
, 
lun
, 
lba
,

1175 
d©a
, 
d©Æí
, 
blocksize
, 
wΩrŸe˘
,

1176 
dpo
, 
fua
, 
fua_nv
, 
group_numbî
,

1177 
scsi_sync_cb
, &
°©e
, 
iov
, 
niov
Ë=
NULL
) {

1178 
	`iscsi_£t_îr‹
(
iscsi
,

1180  
NULL
;

1183 
	`evít_lo›
(
iscsi
, &
°©e
);

1185  
°©e
.
èsk
;

1186 
	}
}

1188 
scsi_èsk
 *

1189 
	$iscsi_wrôevîify10_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

1190 *
d©a
, 
uöt32_t
 
d©Æí
, 
blocksize
,

1191 
wΩrŸe˘
, 
dpo
, 
bytchk
, 
group_numbî
)

1193 
iscsi_sync_°©e
 
°©e
;

1195 
	`mem£t
(&
°©e
, 0, (state));

1197 i‡(
	`iscsi_wrôevîify10_èsk
(
iscsi
, 
lun
, 
lba
, 
d©a
, 
d©Æí
, 
blocksize
,

1198 
wΩrŸe˘
, 
dpo
, 
bytchk
, 
group_numbî
,

1199 
scsi_sync_cb
, &
°©e
Ë=
NULL
) {

1200 
	`iscsi_£t_îr‹
(
iscsi
,

1202  
NULL
;

1205 
	`evít_lo›
(
iscsi
, &
°©e
);

1207  
°©e
.
èsk
;

1208 
	}
}

1210 
scsi_èsk
 *

1211 
	$iscsi_wrôevîify10_iov_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

1212 *
d©a
, 
uöt32_t
 
d©Æí
, 
blocksize
,

1213 
wΩrŸe˘
, 
dpo
, 
bytchk
, 
group_numbî
,

1214 
scsi_iovec
 *
iov
, 
niov
)

1216 
iscsi_sync_°©e
 
°©e
;

1218 
	`mem£t
(&
°©e
, 0, (state));

1220 i‡(
	`iscsi_wrôevîify10_iov_èsk
(
iscsi
, 
lun
, 
lba
, 
d©a
, 
d©Æí
, 
blocksize
,

1221 
wΩrŸe˘
, 
dpo
, 
bytchk
, 
group_numbî
,

1222 
scsi_sync_cb
, &
°©e
, 
iov
, 
niov
Ë=
NULL
) {

1223 
	`iscsi_£t_îr‹
(
iscsi
,

1225  
NULL
;

1228 
	`evít_lo›
(
iscsi
, &
°©e
);

1230  
°©e
.
èsk
;

1231 
	}
}

1233 
scsi_èsk
 *

1234 
	$iscsi_wrôevîify12_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

1235 *
d©a
, 
uöt32_t
 
d©Æí
, 
blocksize
,

1236 
wΩrŸe˘
, 
dpo
, 
bytchk
, 
group_numbî
)

1238 
iscsi_sync_°©e
 
°©e
;

1240 
	`mem£t
(&
°©e
, 0, (state));

1242 i‡(
	`iscsi_wrôevîify12_èsk
(
iscsi
, 
lun
, 
lba
,

1243 
d©a
, 
d©Æí
, 
blocksize
, 
wΩrŸe˘
,

1244 
dpo
, 
bytchk
, 
group_numbî
,

1245 
scsi_sync_cb
, &
°©e
Ë=
NULL
) {

1246 
	`iscsi_£t_îr‹
(
iscsi
,

1248  
NULL
;

1251 
	`evít_lo›
(
iscsi
, &
°©e
);

1253  
°©e
.
èsk
;

1254 
	}
}

1256 
scsi_èsk
 *

1257 
	$iscsi_wrôevîify12_iov_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

1258 *
d©a
, 
uöt32_t
 
d©Æí
, 
blocksize
,

1259 
wΩrŸe˘
, 
dpo
, 
bytchk
, 
group_numbî
,

1260 
scsi_iovec
 *
iov
, 
niov
)

1262 
iscsi_sync_°©e
 
°©e
;

1264 
	`mem£t
(&
°©e
, 0, (state));

1266 i‡(
	`iscsi_wrôevîify12_iov_èsk
(
iscsi
, 
lun
, 
lba
,

1267 
d©a
, 
d©Æí
, 
blocksize
, 
wΩrŸe˘
,

1268 
dpo
, 
bytchk
, 
group_numbî
,

1269 
scsi_sync_cb
, &
°©e
, 
iov
, 
niov
Ë=
NULL
) {

1270 
	`iscsi_£t_îr‹
(
iscsi
,

1272  
NULL
;

1275 
	`evít_lo›
(
iscsi
, &
°©e
);

1277  
°©e
.
èsk
;

1278 
	}
}

1280 
scsi_èsk
 *

1281 
	$iscsi_wrôevîify16_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
,

1282 *
d©a
, 
uöt32_t
 
d©Æí
, 
blocksize
,

1283 
wΩrŸe˘
, 
dpo
, 
bytchk
, 
group_numbî
)

1285 
iscsi_sync_°©e
 
°©e
;

1287 
	`mem£t
(&
°©e
, 0, (state));

1289 i‡(
	`iscsi_wrôevîify16_èsk
(
iscsi
, 
lun
, 
lba
,

1290 
d©a
, 
d©Æí
, 
blocksize
, 
wΩrŸe˘
,

1291 
dpo
, 
bytchk
, 
group_numbî
,

1292 
scsi_sync_cb
, &
°©e
Ë=
NULL
) {

1293 
	`iscsi_£t_îr‹
(
iscsi
,

1295  
NULL
;

1298 
	`evít_lo›
(
iscsi
, &
°©e
);

1300  
°©e
.
èsk
;

1301 
	}
}

1303 
scsi_èsk
 *

1304 
	$iscsi_wrôevîify16_iov_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
,

1305 *
d©a
, 
uöt32_t
 
d©Æí
, 
blocksize
,

1306 
wΩrŸe˘
, 
dpo
, 
bytchk
, 
group_numbî
,

1307 
scsi_iovec
 *
iov
, 
niov
)

1309 
iscsi_sync_°©e
 
°©e
;

1311 
	`mem£t
(&
°©e
, 0, (state));

1313 i‡(
	`iscsi_wrôevîify16_iov_èsk
(
iscsi
, 
lun
, 
lba
,

1314 
d©a
, 
d©Æí
, 
blocksize
, 
wΩrŸe˘
,

1315 
dpo
, 
bytchk
, 
group_numbî
,

1316 
scsi_sync_cb
, &
°©e
, 
iov
, 
niov
Ë=
NULL
) {

1317 
	`iscsi_£t_îr‹
(
iscsi
,

1319  
NULL
;

1322 
	`evít_lo›
(
iscsi
, &
°©e
);

1324  
°©e
.
èsk
;

1325 
	}
}

1327 
scsi_èsk
 *

1328 
	$iscsi_vîify10_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, *
d©a
, 
uöt32_t
 
d©Æí
, uöt32_à
lba
,

1329 
v¥Ÿe˘
, 
dpo
, 
bytchk
, 
blocksize
)

1331 
iscsi_sync_°©e
 
°©e
;

1333 
	`mem£t
(&
°©e
, 0, (state));

1335 i‡(
	`iscsi_vîify10_èsk
(
iscsi
, 
lun
, 
d©a
, 
d©Æí
, 
lba
, 
v¥Ÿe˘
, 
dpo
, 
bytchk
, 
blocksize
,

1336 
scsi_sync_cb
, &
°©e
Ë=
NULL
) {

1337 
	`iscsi_£t_îr‹
(
iscsi
,

1339  
NULL
;

1342 
	`evít_lo›
(
iscsi
, &
°©e
);

1344  
°©e
.
èsk
;

1345 
	}
}

1347 
scsi_èsk
 *

1348 
	$iscsi_vîify10_iov_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, *
d©a
, 
uöt32_t
 
d©Æí
, uöt32_à
lba
,

1349 
v¥Ÿe˘
, 
dpo
, 
bytchk
, 
blocksize
, 
scsi_iovec
 *
iov
, 
niov
)

1351 
iscsi_sync_°©e
 
°©e
;

1353 
	`mem£t
(&
°©e
, 0, (state));

1355 i‡(
	`iscsi_vîify10_iov_èsk
(
iscsi
, 
lun
, 
d©a
, 
d©Æí
, 
lba
, 
v¥Ÿe˘
, 
dpo
, 
bytchk
, 
blocksize
,

1356 
scsi_sync_cb
, &
°©e
, 
iov
, 
niov
Ë=
NULL
) {

1357 
	`iscsi_£t_îr‹
(
iscsi
,

1359  
NULL
;

1362 
	`evít_lo›
(
iscsi
, &
°©e
);

1364  
°©e
.
èsk
;

1365 
	}
}

1368 
scsi_èsk
 *

1369 
	$iscsi_vîify12_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, *
d©a
, 
uöt32_t
 
d©Æí
, uöt32_à
lba
,

1370 
v¥Ÿe˘
, 
dpo
, 
bytchk
, 
blocksize
)

1372 
iscsi_sync_°©e
 
°©e
;

1374 
	`mem£t
(&
°©e
, 0, (state));

1376 i‡(
	`iscsi_vîify12_èsk
(
iscsi
, 
lun
, 
d©a
, 
d©Æí
, 
lba
, 
v¥Ÿe˘
, 
dpo
, 
bytchk
, 
blocksize
,

1377 
scsi_sync_cb
, &
°©e
Ë=
NULL
) {

1378 
	`iscsi_£t_îr‹
(
iscsi
,

1380  
NULL
;

1383 
	`evít_lo›
(
iscsi
, &
°©e
);

1385  
°©e
.
èsk
;

1386 
	}
}

1388 
scsi_èsk
 *

1389 
	$iscsi_vîify12_iov_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, *
d©a
, 
uöt32_t
 
d©Æí
, uöt32_à
lba
,

1390 
v¥Ÿe˘
, 
dpo
, 
bytchk
, 
blocksize
, 
scsi_iovec
 *
iov
, 
niov
)

1392 
iscsi_sync_°©e
 
°©e
;

1394 
	`mem£t
(&
°©e
, 0, (state));

1396 i‡(
	`iscsi_vîify12_iov_èsk
(
iscsi
, 
lun
, 
d©a
, 
d©Æí
, 
lba
, 
v¥Ÿe˘
, 
dpo
, 
bytchk
, 
blocksize
,

1397 
scsi_sync_cb
, &
°©e
, 
iov
, 
niov
Ë=
NULL
) {

1398 
	`iscsi_£t_îr‹
(
iscsi
,

1400  
NULL
;

1403 
	`evít_lo›
(
iscsi
, &
°©e
);

1405  
°©e
.
èsk
;

1406 
	}
}

1408 
scsi_èsk
 *

1409 
	$iscsi_vîify16_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, *
d©a
, 
uöt32_t
 
d©Æí
, 
uöt64_t
 
lba
,

1410 
v¥Ÿe˘
, 
dpo
, 
bytchk
, 
blocksize
)

1412 
iscsi_sync_°©e
 
°©e
;

1414 
	`mem£t
(&
°©e
, 0, (state));

1416 i‡(
	`iscsi_vîify16_èsk
(
iscsi
, 
lun
, 
d©a
, 
d©Æí
, 
lba
, 
v¥Ÿe˘
, 
dpo
, 
bytchk
, 
blocksize
,

1417 
scsi_sync_cb
, &
°©e
Ë=
NULL
) {

1418 
	`iscsi_£t_îr‹
(
iscsi
,

1420  
NULL
;

1423 
	`evít_lo›
(
iscsi
, &
°©e
);

1425  
°©e
.
èsk
;

1426 
	}
}

1428 
scsi_èsk
 *

1429 
	$iscsi_vîify16_iov_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, *
d©a
, 
uöt32_t
 
d©Æí
, 
uöt64_t
 
lba
,

1430 
v¥Ÿe˘
, 
dpo
, 
bytchk
, 
blocksize
, 
scsi_iovec
 *
iov
, 
niov
)

1432 
iscsi_sync_°©e
 
°©e
;

1434 
	`mem£t
(&
°©e
, 0, (state));

1436 i‡(
	`iscsi_vîify16_iov_èsk
(
iscsi
, 
lun
, 
d©a
, 
d©Æí
, 
lba
, 
v¥Ÿe˘
, 
dpo
, 
bytchk
, 
blocksize
,

1437 
scsi_sync_cb
, &
°©e
, 
iov
, 
niov
Ë=
NULL
) {

1438 
	`iscsi_£t_îr‹
(
iscsi
,

1440  
NULL
;

1443 
	`evít_lo›
(
iscsi
, &
°©e
);

1445  
°©e
.
èsk
;

1446 
	}
}

1448 
scsi_èsk
 *

1449 
	$iscsi_wrôeßme10_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

1450 *
d©a
, 
uöt32_t
 
d©Æí
,

1451 
uöt16_t
 
num_blocks
,

1452 
™ch‹
, 
unm≠
, 
wΩrŸe˘
, 
group
)

1454 
iscsi_sync_°©e
 
°©e
;

1456 
	`mem£t
(&
°©e
, 0, (state));

1458 i‡(
	`iscsi_wrôeßme10_èsk
(
iscsi
, 
lun
, 
lba
,

1459 
d©a
, 
d©Æí
, 
num_blocks
,

1460 
™ch‹
, 
unm≠
, 
wΩrŸe˘
, 
group
,

1461 
scsi_sync_cb
, &
°©e
Ë=
NULL
) {

1462 
	`iscsi_£t_îr‹
(
iscsi
,

1464  
NULL
;

1467 
	`evít_lo›
(
iscsi
, &
°©e
);

1469  
°©e
.
èsk
;

1470 
	}
}

1472 
scsi_èsk
 *

1473 
	$iscsi_wrôeßme10_iov_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt32_t
 
lba
,

1474 *
d©a
, 
uöt32_t
 
d©Æí
,

1475 
uöt16_t
 
num_blocks
,

1476 
™ch‹
, 
unm≠
, 
wΩrŸe˘
, 
group
,

1477 
scsi_iovec
 *
iov
, 
niov
)

1479 
iscsi_sync_°©e
 
°©e
;

1481 
	`mem£t
(&
°©e
, 0, (state));

1483 i‡(
	`iscsi_wrôeßme10_iov_èsk
(
iscsi
, 
lun
, 
lba
,

1484 
d©a
, 
d©Æí
, 
num_blocks
,

1485 
™ch‹
, 
unm≠
, 
wΩrŸe˘
, 
group
,

1486 
scsi_sync_cb
, &
°©e
, 
iov
, 
niov
Ë=
NULL
) {

1487 
	`iscsi_£t_îr‹
(
iscsi
,

1489  
NULL
;

1492 
	`evít_lo›
(
iscsi
, &
°©e
);

1494  
°©e
.
èsk
;

1495 
	}
}

1497 
scsi_èsk
 *

1498 
	$iscsi_wrôeßme16_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
,

1499 *
d©a
, 
uöt32_t
 
d©Æí
,

1500 
uöt32_t
 
num_blocks
,

1501 
™ch‹
, 
unm≠
, 
wΩrŸe˘
, 
group
)

1503 
iscsi_sync_°©e
 
°©e
;

1505 
	`mem£t
(&
°©e
, 0, (state));

1507 i‡(
	`iscsi_wrôeßme16_èsk
(
iscsi
, 
lun
, 
lba
,

1508 
d©a
, 
d©Æí
, 
num_blocks
,

1509 
™ch‹
, 
unm≠
, 
wΩrŸe˘
, 
group
,

1510 
scsi_sync_cb
, &
°©e
Ë=
NULL
) {

1511 
	`iscsi_£t_îr‹
(
iscsi
,

1513  
NULL
;

1516 
	`evít_lo›
(
iscsi
, &
°©e
);

1518  
°©e
.
èsk
;

1519 
	}
}

1521 
scsi_èsk
 *

1522 
	$iscsi_wrôeßme16_iov_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
uöt64_t
 
lba
,

1523 *
d©a
, 
uöt32_t
 
d©Æí
,

1524 
uöt32_t
 
num_blocks
,

1525 
™ch‹
, 
unm≠
, 
wΩrŸe˘
, 
group
,

1526 
scsi_iovec
 *
iov
, 
niov
)

1528 
iscsi_sync_°©e
 
°©e
;

1530 
	`mem£t
(&
°©e
, 0, (state));

1532 i‡(
	`iscsi_wrôeßme16_iov_èsk
(
iscsi
, 
lun
, 
lba
,

1533 
d©a
, 
d©Æí
, 
num_blocks
,

1534 
™ch‹
, 
unm≠
, 
wΩrŸe˘
, 
group
,

1535 
scsi_sync_cb
, &
°©e
, 
iov
, 
niov
Ë=
NULL
) {

1536 
	`iscsi_£t_îr‹
(
iscsi
,

1538  
NULL
;

1541 
	`evít_lo›
(
iscsi
, &
°©e
);

1543  
°©e
.
èsk
;

1544 
	}
}

1546 
scsi_èsk
 *

1547 
	$iscsi_≥rsi°ít_ª£rve_ö_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

1548 
ß
, 
uöt16_t
 
x„æí
)

1550 
iscsi_sync_°©e
 
°©e
;

1552 
	`mem£t
(&
°©e
, 0, (state));

1554 i‡(
	`iscsi_≥rsi°ít_ª£rve_ö_èsk
(
iscsi
, 
lun
, 
ß
, 
x„æí
,

1555 
scsi_sync_cb
, &
°©e
Ë=
NULL
) {

1556 
	`iscsi_£t_îr‹
(
iscsi
,

1558  
NULL
;

1561 
	`evít_lo›
(
iscsi
, &
°©e
);

1563  
°©e
.
èsk
;

1564 
	}
}

1566 
scsi_èsk
 *

1567 
	$iscsi_≥rsi°ít_ª£rve_out_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

1568 
ß
, 
sc›e
, 
ty≥
, *
∑øm
)

1570 
iscsi_sync_°©e
 
°©e
;

1572 
	`mem£t
(&
°©e
, 0, (state));

1574 i‡(
	`iscsi_≥rsi°ít_ª£rve_out_èsk
(
iscsi
, 
lun
,

1575 
ß
, 
sc›e
, 
ty≥
, 
∑øm
,

1576 
scsi_sync_cb
, &
°©e
Ë=
NULL
) {

1577 
	`iscsi_£t_îr‹
(
iscsi
,

1579  
NULL
;

1582 
	`evít_lo›
(
iscsi
, &
°©e
);

1584  
°©e
.
èsk
;

1585 
	}
}

1587 
scsi_èsk
 *

1588 
	$iscsi_unm≠_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
™ch‹
, 
group
,

1589 
unm≠_li°
 *
li°
, 
li°_Àn
)

1591 
iscsi_sync_°©e
 
°©e
;

1593 
	`mem£t
(&
°©e
, 0, (state));

1595 i‡(
	`iscsi_unm≠_èsk
(
iscsi
, 
lun
, 
™ch‹
, 
group
, 
li°
, 
li°_Àn
,

1596 
scsi_sync_cb
, &
°©e
Ë=
NULL
) {

1597 
	`iscsi_£t_îr‹
(
iscsi
,

1599  
NULL
;

1602 
	`evít_lo›
(
iscsi
, &
°©e
);

1604  
°©e
.
èsk
;

1605 
	}
}

1607 
scsi_èsk
 *

1608 
	$iscsi_ªadtoc_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
msf
, 
f‹m©
,

1609 
åack_£ssi⁄
, 
maxsize
)

1611 
iscsi_sync_°©e
 
°©e
;

1613 
	`mem£t
(&
°©e
, 0, (state));

1615 i‡(
	`iscsi_ªadtoc_èsk
(
iscsi
, 
lun
, 
msf
, 
f‹m©
, 
åack_£ssi⁄
,

1616 
maxsize
, 
scsi_sync_cb
, &
°©e
Ë=
NULL
) {

1617 
	`iscsi_£t_îr‹
(
iscsi
, "FailedÅo send Read TOC command");

1618  
NULL
;

1621 
	`evít_lo›
(
iscsi
, &
°©e
);

1623  
°©e
.
èsk
;

1624 
	}
}

1626 
scsi_èsk
 *

1627 
	$iscsi_ª£rve6_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
)

1629 
iscsi_sync_°©e
 
°©e
;

1631 
	`mem£t
(&
°©e
, 0, (state));

1633 i‡(
	`iscsi_ª£rve6_èsk
(
iscsi
, 
lun
, 
scsi_sync_cb
, &
°©e
Ë=
NULL
) {

1634 
	`iscsi_£t_îr‹
(
iscsi
, "FailedÅo send RESERVE6 command");

1635  
NULL
;

1638 
	`evít_lo›
(
iscsi
, &
°©e
);

1640  
°©e
.
èsk
;

1641 
	}
}

1643 
scsi_èsk
 *

1644 
	$iscsi_ªÀa£6_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
)

1646 
iscsi_sync_°©e
 
°©e
;

1648 
	`mem£t
(&
°©e
, 0, (state));

1650 i‡(
	`iscsi_ªÀa£6_èsk
(
iscsi
, 
lun
, 
scsi_sync_cb
, &
°©e
Ë=
NULL
) {

1651 
	`iscsi_£t_îr‹
(
iscsi
, "FailedÅo send RELEASE6 command");

1652  
NULL
;

1655 
	`evít_lo›
(
iscsi
, &
°©e
);

1657  
°©e
.
èsk
;

1658 
	}
}

1660 
scsi_èsk
 *

1661 
	$iscsi_ªp‹t_suµ‹ãd_›codes_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

1662 
r˘d
, 
›ti⁄s
,

1663 
›code
, 
ß
,

1664 
uöt32_t
 
Æloc_Àn
)

1666 
iscsi_sync_°©e
 
°©e
;

1668 
	`mem£t
(&
°©e
, 0, (state));

1670 i‡(
	`iscsi_ªp‹t_suµ‹ãd_›codes_èsk
(
iscsi
, 
lun
, 
r˘d
, 
›ti⁄s
, 
›code
, 
ß
, 
Æloc_Àn
, 
scsi_sync_cb
, &
°©e
Ë=
NULL
) {

1671 
	`iscsi_£t_îr‹
(
iscsi
, "FailedÅo send MaintenanceIn:"

1673  
NULL
;

1676 
	`evít_lo›
(
iscsi
, &
°©e
);

1678  
°©e
.
èsk
;

1679 
	}
}

1681 
scsi_èsk
 *

1682 
	$iscsi_ª˚ive_c›y_ªsu…s_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

1683 
ß
, 
li°_id
, 
Æloc_Àn
)

1685 
iscsi_sync_°©e
 
°©e
;

1687 
	`mem£t
(&
°©e
, 0, (state));

1689 i‡(
	`iscsi_ª˚ive_c›y_ªsu…s_èsk
(
iscsi
, 
lun
, 
ß
, 
li°_id
, 
Æloc_Àn
,

1690 
scsi_sync_cb
, &
°©e
Ë=
NULL
) {

1691 
	`iscsi_£t_îr‹
(
iscsi
, "FailedÅo send RECEIVE COPY RESULTS"

1693  
NULL
;

1696 
	`evít_lo›
(
iscsi
, &
°©e
);

1698  
°©e
.
èsk
;

1699 
	}
}

1701 
scsi_èsk
 *

1702 
	$iscsi_exãnded_c›y_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

1703 
iscsi_d©a
 *
∑øm_d©a
)

1705 
iscsi_sync_°©e
 
°©e
;

1707 
	`mem£t
(&
°©e
, 0, (state));

1709 i‡(
	`iscsi_exãnded_c›y_èsk
(
iscsi
, 
lun
, 
∑øm_d©a
,

1710 
scsi_sync_cb
, &
°©e
Ë=
NULL
) {

1711 
	`iscsi_£t_îr‹
(
iscsi
, "FailedÅo send EXTENDED COPY"

1713  
NULL
;

1716 
	`evít_lo›
(
iscsi
, &
°©e
);

1718  
°©e
.
èsk
;

1719 
	}
}

1721 
scsi_èsk
 *

1722 
	$iscsi_scsi_comm™d_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

1723 
scsi_èsk
 *
èsk
, 
iscsi_d©a
 *
d©a
)

1725 
iscsi_sync_°©e
 
°©e
;

1727 
	`mem£t
(&
°©e
, 0, (state));

1729 i‡(
	`iscsi_scsi_comm™d_async
(
iscsi
, 
lun
, 
èsk
,

1730 
scsi_sync_cb
, 
d©a
, &
°©e
) != 0) {

1731 
	`iscsi_£t_îr‹
(
iscsi
, "FailedÅo send SCSI command");

1732  
NULL
;

1735 
	`evít_lo›
(
iscsi
, &
°©e
);

1737  
°©e
.
èsk
;

1738 
	}
}

1741 
scsi_èsk
 *

1742 
	$iscsi_mode£À˘6_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

1743 
pf
, 
•
, 
scsi_mode_∑ge
 *
mp
)

1745 
iscsi_sync_°©e
 
°©e
;

1747 
	`mem£t
(&
°©e
, 0, (state));

1749 i‡(
	`iscsi_mode£À˘6_èsk
(
iscsi
, 
lun
, 
pf
, 
•
, 
mp
,

1750 
scsi_sync_cb
, &
°©e
Ë=
NULL
) {

1751 
	`iscsi_£t_îr‹
(
iscsi
,

1753  
NULL
;

1756 
	`evít_lo›
(
iscsi
, &
°©e
);

1758  
°©e
.
èsk
;

1759 
	}
}

1761 
scsi_èsk
 *

1762 
	$iscsi_mode£À˘10_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
,

1763 
pf
, 
•
, 
scsi_mode_∑ge
 *
mp
)

1765 
iscsi_sync_°©e
 
°©e
;

1767 
	`mem£t
(&
°©e
, 0, (state));

1769 i‡(
	`iscsi_mode£À˘10_èsk
(
iscsi
, 
lun
, 
pf
, 
•
, 
mp
,

1770 
scsi_sync_cb
, &
°©e
Ë=
NULL
) {

1771 
	`iscsi_£t_îr‹
(
iscsi
,

1773  
NULL
;

1776 
	`evít_lo›
(
iscsi
, &
°©e
);

1778  
°©e
.
èsk
;

1779 
	}
}

1781 
scsi_èsk
 *

1782 
	$iscsi_mode£n£6_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
dbd
,

1783 
pc
, 
∑ge_code
, 
sub_∑ge_code
,

1784 
Æloc_Àn
)

1786 
iscsi_sync_°©e
 
°©e
;

1788 
	`mem£t
(&
°©e
, 0, (state));

1790 i‡(
	`iscsi_mode£n£6_èsk
(
iscsi
, 
lun
, 
dbd
, 
pc
, 
∑ge_code
, 
sub_∑ge_code
, 
Æloc_Àn
,

1791 
scsi_sync_cb
, &
°©e
Ë=
NULL
) {

1792 
	`iscsi_£t_îr‹
(
iscsi
,

1794  
NULL
;

1797 
	`evít_lo›
(
iscsi
, &
°©e
);

1799  
°©e
.
èsk
;

1800 
	}
}

1802 
scsi_èsk
 *

1803 
	$iscsi_mode£n£10_sync
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
ŒbØ
, 
dbd
,

1804 
pc
, 
∑ge_code
, 
sub_∑ge_code
,

1805 
Æloc_Àn
)

1807 
iscsi_sync_°©e
 
°©e
;

1809 
	`mem£t
(&
°©e
, 0, (state));

1811 i‡(
	`iscsi_mode£n£10_èsk
(
iscsi
, 
lun
, 
ŒbØ
, 
dbd
, 
pc
,

1812 
∑ge_code
, 
sub_∑ge_code
, 
Æloc_Àn
,

1813 
scsi_sync_cb
, &
°©e
Ë=
NULL
) {

1814 
	`iscsi_£t_îr‹
(
iscsi
,

1816  
NULL
;

1819 
	`evít_lo›
(
iscsi
, &
°©e
);

1821  
°©e
.
èsk
;

1822 
	}
}

1824 
	$iscsi_‰ì_discovîy_d©a
(
iscsi_c⁄ãxt
 *
iscsi
 
_U_
,

1825 
iscsi_discovîy_addªss
 *
da
)

1827 
da
) {

1828 
iscsi_discovîy_addªss
 *
d™ext
 = 
da
->
√xt
;

1830 
da
->
p‹èls
) {

1831 
iscsi_èrgë_p‹èl
 *
p⁄ext
 = 
da
->
p‹èls
->
√xt
;

1832 
	`‰ì
(
	`disˇrd_c⁄°
(
da
->
p‹èls
->
p‹èl
));

1833 
	`‰ì
(
da
->
p‹èls
);

1834 
da
->
p‹èls
 = 
p⁄ext
;

1836 
	`‰ì
(
	`disˇrd_c⁄°
(
da
->
èrgë_«me
));

1837 
	`‰ì
(
da
);

1838 
da
 = 
d™ext
;

1840 
	}
}

1843 
	$iscsi_discovîy_cb
(
iscsi_c⁄ãxt
 *
iscsi
 
_U_
, 
°©us
,

1844 *
comm™d_d©a
, *
¥iv©e_d©a
)

1846 
iscsi_sync_°©e
 *
°©e
 = 
¥iv©e_d©a
;

1847 
iscsi_discovîy_addªss
 *
da
;

1848 
iscsi_discovîy_addªss
 *
dahód
 = 
NULL
;

1849 
iscsi_èrgë_p‹èl
 *
po
;

1851 
da
 = 
comm™d_d©a
; d®!
NULL
; d®da->
√xt
) {

1852 
iscsi_discovîy_addªss
 *
d©mp
;

1854 
d©mp
 = 
	`mÆloc
((
iscsi_discovîy_addªss
));

1855 
	`mem£t
(
d©mp
, 0, (
iscsi_discovîy_addªss
));

1856 
d©mp
->
èrgë_«me
 = 
	`°rdup
(
da
->target_name);

1857 
d©mp
->
√xt
 = 
dahód
;

1858 
dahód
 = 
d©mp
;

1860 
po
 = 
da
->
p‹èls
;Öÿ!
NULL
;Öÿpo->
√xt
) {

1861 
iscsi_èrgë_p‹èl
 *
pŸmp
;

1863 
pŸmp
 = 
	`mÆloc
((
iscsi_èrgë_p‹èl
));

1864 
	`mem£t
(
pŸmp
, 0, (
iscsi_èrgë_p‹èl
));

1865 
pŸmp
->
p‹èl
 = 
	`°rdup
(
po
->portal);

1867 
pŸmp
->
√xt
 = 
dahód
->
p‹èls
;

1868 
dahód
->
p‹èls
 = 
pŸmp
;

1872 
°©e
->
°©us
 = status;

1873 
°©e
->
föished
 = 1;

1874 
°©e
->
±r
 = 
dahód
;

1875 
	}
}

1877 
iscsi_discovîy_addªss
 *

1878 
	$iscsi_discovîy_sync
(
iscsi_c⁄ãxt
 *
iscsi
)

1880 
iscsi_sync_°©e
 
°©e
;

1882 
	`mem£t
(&
°©e
, 0, (state));

1884 i‡(
	`iscsi_discovîy_async
(
iscsi
, 
iscsi_discovîy_cb
, &
°©e
) != 0) {

1885 
	`iscsi_£t_îr‹
(
iscsi
, "FailedÅoÑun discovery. %s",

1886 
	`iscsi_gë_îr‹
(
iscsi
));

1887 
	`¥ötf
("async discovery call failed\n");

1888  
NULL
;

1891 
	`evít_lo›
(
iscsi
, &
°©e
);

1893  
°©e
.
±r
;

1894 
	}
}

	@lib/task_mgmt.c

18 #ifde‡
HAVE_CONFIG_H


19 
	~"c⁄fig.h
"

22 #ifde‡
HAVE_SYS_TYPES_H


23 
	~<sys/ty≥s.h
>

26 #ifde‡
HAVE_ARPA_INET_H


27 
	~<¨∑/öë.h
>

30 #ifde‡
HAVE_UNISTD_H


31 
	~<uni°d.h
>

34 
	~<°dio.h
>

35 
	~"iscsi.h
"

36 
	~"iscsi-¥iv©e.h
"

37 
	~"scsi-lowÀvñ.h
"

40 
	$iscsi_èsk_mgmt_async
(
iscsi_c⁄ãxt
 *
iscsi
,

41 
lun
, 
iscsi_èsk_mgmt_funcs
 
fun˘i⁄
,

42 
uöt32_t
 
rôt
, uöt32_à
rcmd¢
,

43 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

45 
iscsi_pdu
 *
pdu
;

47 i‡(
iscsi
->
is_loggedö
 == 0) {

48 
	`iscsi_£t_îr‹
(
iscsi
, "tryingÅo sendÅask-mgmt whileÇot "

53 
pdu
 = 
	`iscsi_Æloˇã_pdu
(
iscsi
,

54 
ISCSI_PDU_SCSI_TASK_MANAGEMENT_REQUEST
,

55 
ISCSI_PDU_SCSI_TASK_MANAGEMENT_RESPONSE
,

56 
	`iscsi_ôt_po°_ö¸emít
(
iscsi
),

57 
ISCSI_PDU_DROP_ON_RECONNECT
);

58 i‡(
pdu
 =
NULL
) {

59 
	`iscsi_£t_îr‹
(
iscsi
, "FailedÅoállocateÅask mgmtÖdu");

64 
	`iscsi_pdu_£t_immedüã
(
pdu
);

67 
	`iscsi_pdu_£t_pduÊags
(
pdu
, 0x80 | 
fun˘i⁄
);

70 
	`iscsi_pdu_£t_lun
(
pdu
, 
lun
);

73 
	`iscsi_pdu_£t_rôt
(
pdu
, 
rôt
);

76 
	`iscsi_pdu_£t_cmd¢
(
pdu
, 
iscsi
->
cmd¢
);

79 
	`iscsi_pdu_£t_rcmd¢
(
pdu
, 
rcmd¢
);

81 
pdu
->
ˇŒback
 = 
cb
;

82 
pdu
->
¥iv©e_d©a
 =Örivate_data;

84 i‡(
	`iscsi_queue_pdu
(
iscsi
, 
pdu
) != 0) {

85 
	`iscsi_£t_îr‹
(
iscsi
, "failedÅo queue iscsiÅaskmgmtÖdu");

86 
iscsi
->
drv
->
	`‰ì_pdu
(iscsi, 
pdu
);

91 
	}
}

94 
	$iscsi_¥o˚ss_èsk_mgmt_ª∂y
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_pdu
 *
pdu
,

95 
iscsi_ö_pdu
 *
ö
)

97 
uöt32_t
 
ª•⁄£
 = 
ö
->
hdr
[2];

99 i‡(
pdu
->
ˇŒback
) {

100 
pdu
->
	`ˇŒback
(
iscsi
, 
SCSI_STATUS_GOOD
, &
ª•⁄£
,Ödu->
¥iv©e_d©a
);

103 
	}
}

106 
	$iscsi_èsk_mgmt_ab‹t_èsk_async
(
iscsi_c⁄ãxt
 *
iscsi
,

107 
scsi_èsk
 *
èsk
,

108 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

110  
	`iscsi_èsk_mgmt_async
(
iscsi
,

111 
èsk
->
lun
, 
ISCSI_TM_ABORT_TASK
,

112 
èsk
->
ôt
,Åask->
cmd¢
,

113 
cb
, 
¥iv©e_d©a
);

114 
	}
}

117 
	$iscsi_èsk_mgmt_ab‹t_èsk_£t_async
(
iscsi_c⁄ãxt
 *
iscsi
,

118 
uöt32_t
 
lun
,

119 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

121 
	`iscsi_scsi_ˇn˚l_Æl_èsks
(
iscsi
);

123  
	`iscsi_èsk_mgmt_async
(
iscsi
,

124 
lun
, 
ISCSI_TM_ABORT_TASK_SET
,

126 
cb
, 
¥iv©e_d©a
);

127 
	}
}

130 
	$iscsi_èsk_mgmt_lun_ª£t_async
(
iscsi_c⁄ãxt
 *
iscsi
,

131 
uöt32_t
 
lun
,

132 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

134 
	`iscsi_scsi_ˇn˚l_Æl_èsks
(
iscsi
);

136  
	`iscsi_èsk_mgmt_async
(
iscsi
,

137 
lun
, 
ISCSI_TM_LUN_RESET
,

139 
cb
, 
¥iv©e_d©a
);

140 
	}
}

143 
	$iscsi_èsk_mgmt_èrgë_w¨m_ª£t_async
(
iscsi_c⁄ãxt
 *
iscsi
,

144 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

146 
	`iscsi_scsi_ˇn˚l_Æl_èsks
(
iscsi
);

148  
	`iscsi_èsk_mgmt_async
(
iscsi
,

149 0, 
ISCSI_TM_TARGET_WARM_RESET
,

151 
cb
, 
¥iv©e_d©a
);

152 
	}
}

156 
	$iscsi_èsk_mgmt_èrgë_cﬁd_ª£t_async
(
iscsi_c⁄ãxt
 *
iscsi
,

157 
iscsi_comm™d_cb
 
cb
, *
¥iv©e_d©a
)

159 
	`iscsi_scsi_ˇn˚l_Æl_èsks
(
iscsi
);

161  
	`iscsi_èsk_mgmt_async
(
iscsi
,

162 0, 
ISCSI_TM_TARGET_COLD_RESET
,

164 
cb
, 
¥iv©e_d©a
);

165 
	}
}

	@test-tool/iscsi-multipath.c

21 
	~"c⁄fig.h
"

23 
	#_GNU_SOURCE


	)

24 
	~<as£π.h
>

25 
	~<sys/sysˇŒ.h
>

26 
	~<dlf˙.h
>

27 
	~<sys/ty≥s.h
>

28 
	~<°dio.h
>

29 
	~<°dlib.h
>

30 
	~<°döt.h
>

31 
	~<°d¨g.h
>

32 
	~<öây≥s.h
>

33 
	~<°rög.h
>

34 
	~<pﬁl.h
>

35 
	~<‚m©ch.h
>

36 
	~<î∫o.h
>

38 #ifde‡
HAVE_SG_IO


39 
	~<f˙é.h
>

40 
	~<sys/io˘l.h
>

41 
	~<scsi/sg.h
>

44 
	~"¶i°.h
"

45 
	~"iscsi.h
"

46 
	~"scsi-lowÀvñ.h
"

47 
	~"iscsi-¥iv©e.h
"

48 
	~"iscsi-suµ‹t.h
"

49 
	~"iscsi-mu…ù©h.h
"

51 
	gmp_num_sds
 = 0;

52 
scsi_devi˚
 *
	gmp_sds
[
MPATH_MAX_DEVS
];

55 
	$m∑th_des_‰ì
(
scsi_öquúy_devi˚_desig«t‹
 *
des
)

57 i‡(!
des
) {

61 
	`‰ì
(
des
->
desig«t‹
);

62 
	`‰ì
(
des
);

63 
	}
}

66 
	$m∑th_des_c›y
(
scsi_öquúy_devi˚_desig«t‹
 *
des
,

67 
scsi_öquúy_devi˚_desig«t‹
 **
_des_˝
)

69 
scsi_öquúy_devi˚_desig«t‹
 *
des_˝
;

71 i‡(!
_des_˝
) {

75 
des_˝
 = 
	`mÆloc
((*des_cp));

76 i‡(
des_˝
 =
NULL
) {

80 
des_˝
->
¥Ÿocﬁ_idítifõr
 = 
des
->protocol_identifier;

81 
des_˝
->
code_£t
 = 
des
->code_set;

82 
des_˝
->
piv
 = 
des
->piv;

83 
des_˝
->
assocüti⁄
 = 
des
->association;

84 
des_˝
->
desig«t‹_ty≥
 = 
des
->designator_type;

85 
des_˝
->
desig«t‹_Àngth
 = 
des
->designator_length;

86 
des_˝
->
desig«t‹
 = 
	`mÆloc
(
des
->
desig«t‹_Àngth
);

87 i‡(
des_˝
->
desig«t‹
 =
NULL
) {

88 
	`‰ì
(
des_˝
);

91 
	`mem˝y
(
des_˝
->
desig«t‹
, 
des
->desig«t‹, des->
desig«t‹_Àngth
);

92 *
_des_˝
 = 
des_˝
;

95 
	}
}

98 
	$m∑th_des_cmp
(
scsi_öquúy_devi˚_desig«t‹
 *
des1
,

99 
scsi_öquúy_devi˚_desig«t‹
 *
des2
)

101 i‡(
des1
->
¥Ÿocﬁ_idítifõr
 !
des2
->protocol_identifier) {

105 i‡(
des1
->
code_£t
 !
des2
->code_set) {

109 i‡(
des1
->
piv
 !
des2
->piv) {

113 i‡(
des1
->
assocüti⁄
 !
des2
->association) {

117 i‡(
des1
->
desig«t‹_ty≥
 !
des2
->designator_type) {

121 i‡(
des1
->
desig«t‹_Àngth
 !
des2
->designator_length) {

125  
	`memcmp
(
des1
->
desig«t‹
, 
des2
->designator,

126 
des1
->
desig«t‹_Àngth
);

127 
	}
}

130 
	$m∑th_check_m©chög_ids_devid_vpd
(
num_sds
,

131 
scsi_devi˚
 **
sds
)

133 
i
;

134 
num_sds_wôh_vÆid_id
 = 0;

135 
scsi_èsk
 *
öq_èsk
 = 
NULL
;

136 
scsi_öquúy_devi˚_desig«t‹
 *
des_ßved
 = 
NULL
;

138 
i
 = 0; i < 
num_sds
; i++) {

139 
ªt
;

140 
fuŒ_size
;

141 
scsi_öquúy_devi˚_idítifiˇti⁄
 *
öq_id_d©a
;

142 
scsi_öquúy_devi˚_desig«t‹
 *
des
;

148 
	`öquúy
(
sds
[
i
], &
öq_èsk
, 1,

149 
SCSI_INQUIRY_PAGECODE_DEVICE_IDENTIFICATION
,

151 
EXPECT_STATUS_GOOD
);

152 i‡(
öq_èsk
 =
NULL
 || inq_èsk->
°©us
 !
SCSI_STATUS_GOOD
) {

153 
	`¥ötf
("Inquiry command failed : %s\n",

154 
sds
[
i
]->
îr‹_°r
);

155 
îr_˛ónup
;

157 
fuŒ_size
 = 
	`scsi_d©aö_gëfuŒsize
(
öq_èsk
);

158 i‡(
fuŒ_size
 > 
öq_èsk
->
d©aö
.
size
) {

160 
	`scsi_‰ì_scsi_èsk
(
öq_èsk
);

161 
öq_èsk
 = 
NULL
;

162 
	`öquúy
(
sds
[
i
], &
öq_èsk
, 1,

163 
SCSI_INQUIRY_PAGECODE_DEVICE_IDENTIFICATION
,

164 
fuŒ_size
,

165 
EXPECT_STATUS_GOOD
);

166 i‡(
öq_èsk
 =
NULL
) {

167 
	`¥ötf
("Inquiry command failed : %s\n",

168 
sds
[
i
]->
îr‹_°r
);

169 
îr_˛ónup
;

173 
öq_id_d©a
 = 
	`scsi_d©aö_unm¨shÆl
(
öq_èsk
);

174 i‡(
öq_id_d©a
 =
NULL
) {

175 
	`¥ötf
("failedÅo unmarshall inquiry ID datain blob\n");

176 
îr_˛ónup
;

179 i‡(
öq_id_d©a
->
quÆifõr


180 !
SCSI_INQUIRY_PERIPHERAL_QUALIFIER_CONNECTED
) {

181 
	`¥ötf
("error: multipath deviceÇot connected\n");

182 
îr_˛ónup
;

185 i‡(
öq_id_d©a
->
devi˚_ty≥


186 !
SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_DIRECT_ACCESS
) {

187 
	`¥ötf
("error: multipath devices must be SBC\n");

188 
îr_˛ónup
;

192 
des
 = 
öq_id_d©a
->
desig«t‹s
;

193 
des
 !
NULL
;

194 
des
 = des->
√xt
) {

195 i‡(
des
->
assocüti⁄
 !
SCSI_ASSOCIATION_LOGICAL_UNIT
) {

196 
	`¥ötf
("skippingÇon-LU designator: %d\n",

197 
des
->
assocüti⁄
);

201 i‡((
des
->
desig«t‹_ty≥
 !
SCSI_DESIGNATOR_TYPE_EUI_64
)

202 && (
des
->
desig«t‹_ty≥
 !
SCSI_DESIGNATOR_TYPE_NAA
)

203 && (
des
->
desig«t‹_ty≥
 !
SCSI_DESIGNATOR_TYPE_MD5_LOGICAL_UNIT_IDENTIFIER
)

204 && (
des
->
desig«t‹_ty≥
 !
SCSI_DESIGNATOR_TYPE_SCSI_NAME_STRING
)) {

205 
	`¥ötf
("skipping unsupported desÅype: %d\n",

206 
des
->
desig«t‹_ty≥
);

210 i‡(
des
->
desig«t‹_Àngth
 <= 0) {

211 
	`¥ötf
("skipping designator with badÜen: %d\n",

212 
des
->
desig«t‹_Àngth
);

216 i‡(
des_ßved
 =
NULL
) {

217 
ªt
 = 
	`m∑th_des_c›y
(
des
, &
des_ßved
);

218 i‡(
ªt
 < 0) {

219 
îr_˛ónup
;

225 
num_sds_wôh_vÆid_id
++;

227 } i‡(
	`m∑th_des_cmp
(
des
, 
des_ßved
) == 0) {

229 
num_sds_wôh_vÆid_id
++;

235 
	`scsi_‰ì_scsi_èsk
(
öq_èsk
);

236 
öq_èsk
 = 
NULL
;

238 
	`m∑th_des_‰ì
(
des_ßved
);

240 i‡(
num_sds_wôh_vÆid_id
 !
num_sds
) {

241 
	`¥ötf
("failedÅo find matching LU device ID forállÖaths\n");

245 
	`¥ötf
("found matching LU device identifier foráll (%d)Öaths\n",

246 
num_sds
);

249 
îr_˛ónup
:

250 
	`m∑th_des_‰ì
(
des_ßved
);

251 
	`scsi_‰ì_scsi_èsk
(
öq_èsk
);

253 
	}
}

256 
	$m∑th_check_m©chög_ids_£rül_vpd
(
num_sds
,

257 
scsi_devi˚
 **
sds
)

259 
i
;

260 
num_sds_wôh_vÆid_id
 = 0;

261 
scsi_èsk
 *
öq_èsk
 = 
NULL
;

262 *
u¢_ßved
 = 
NULL
;

264 
i
 = 0; i < 
num_sds
; i++) {

265 
fuŒ_size
;

266 
scsi_öquúy_unô_£rül_numbî
 *
öq_£rül
;

272 
öq_èsk
 = 
NULL
;

273 
	`öquúy
(
sds
[
i
], &
öq_èsk
, 1,

274 
SCSI_INQUIRY_PAGECODE_UNIT_SERIAL_NUMBER
, 64,

275 
EXPECT_STATUS_GOOD
);

276 i‡(
öq_èsk
 =
NULL
 || inq_èsk->
°©us
 !
SCSI_STATUS_GOOD
) {

277 
	`¥ötf
("Inquiry command failed : %s\n",

278 
sds
[
i
]->
îr‹_°r
);

279 
îr_˛ónup
;

281 
fuŒ_size
 = 
	`scsi_d©aö_gëfuŒsize
(
öq_èsk
);

282 i‡(
fuŒ_size
 > 
öq_èsk
->
d©aö
.
size
) {

283 
	`scsi_‰ì_scsi_èsk
(
öq_èsk
);

286 
öq_èsk
 = 
NULL
;

287 
	`öquúy
(
sds
[
i
], &
öq_èsk
, 1,

288 
SCSI_INQUIRY_PAGECODE_UNIT_SERIAL_NUMBER
,

289 
fuŒ_size
,

290 
EXPECT_STATUS_GOOD
);

291 i‡(
öq_èsk
 =
NULL
) {

292 
	`¥ötf
("Inquiry command failed : %s\n",

293 
sds
[
i
]->
îr‹_°r
);

294 
îr_˛ónup
;

298 
öq_£rül
 = 
	`scsi_d©aö_unm¨shÆl
(
öq_èsk
);

299 i‡(
öq_£rül
 =
NULL
) {

300 
	`¥ötf
("failedÅo unmarshall inquiry datain blob\n");

301 
îr_˛ónup
;

304 i‡(
öq_£rül
->
quÆifõr


305 !
SCSI_INQUIRY_PERIPHERAL_QUALIFIER_CONNECTED
) {

306 
	`¥ötf
("error: multipath deviceÇot connected\n");

307 
îr_˛ónup
;

310 i‡(
öq_£rül
->
devi˚_ty≥


311 !
SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_DIRECT_ACCESS
) {

312 
	`¥ötf
("error: multipath devices must be SBC\n");

313 
îr_˛ónup
;

316 i‡(
öq_£rül
->
u¢
 =
NULL
) {

317 
	`¥ötf
("error:Émpty usn for multipath device\n");

318 
îr_˛ónup
;

321 i‡(
u¢_ßved
 =
NULL
) {

322 
u¢_ßved
 = 
	`°rdup
(
öq_£rül
->
u¢
);

323 i‡(
u¢_ßved
 =
NULL
) {

324 
îr_˛ónup
;

326 
num_sds_wôh_vÆid_id
++;

327 } i‡(
	`°rcmp
(
u¢_ßved
, 
öq_£rül
->
u¢
) == 0) {

328 
num_sds_wôh_vÆid_id
++;

330 
	`¥ötf
("multipath unit serial mismatch: %s != %s\n",

331 
u¢_ßved
, 
öq_£rül
->
u¢
);

334 
	`scsi_‰ì_scsi_èsk
(
öq_èsk
);

335 
öq_èsk
 = 
NULL
;

338 i‡(
num_sds_wôh_vÆid_id
 !
num_sds
) {

339 
	`¥ötf
("failedÅo find matching serialÇumber forállÖaths\n");

340 
îr_˛ónup
;

343 
	`¥ötf
("found matching serialÇumber foráll (%d)Öaths: %s\n",

344 
num_sds
, 
u¢_ßved
);

345 
	`‰ì
(
u¢_ßved
);

349 
îr_˛ónup
:

350 
	`‰ì
(
u¢_ßved
);

351 
	`scsi_‰ì_scsi_èsk
(
öq_èsk
);

353 
	}
}

356 
	$m∑th_check_m©chög_ids
(
num_sds
,

357 
scsi_devi˚
 **
sds
)

359 
ªt
;

365 
ªt
 = 
	`m∑th_check_m©chög_ids_devid_vpd
(
num_sds
, 
sds
);

366 i‡(
ªt
 == 0) {

371 
ªt
 = 
	`m∑th_check_m©chög_ids_£rül_vpd
(
num_sds
, 
sds
);

372  
ªt
;

373 
	}
}

376 
	$m∑th_cou¡_iscsi
(
num_sds
,

377 
scsi_devi˚
 **
sds
)

379 
i
;

380 
found
 = 0;

382 
i
 = 0; i < 
num_sds
; i++) {

383 i‡(
sds
[
i
]->
iscsi_˘x
 !
NULL
) {

384 
found
++;

388  
found
;

389 
	}
}

395 
	$m∑th_sd2_gë_‹_˛⁄e
(
scsi_devi˚
 *
sd1
, scsi_devi˚ **
_sd2
)

397 
scsi_devi˚
 *
sd2
;

399 i‡(
mp_num_sds
 > 1) {

400 
	`loggög
(
LOG_VERBOSE
, "using multipath dev for second session");

401 *
_sd2
 = 
mp_sds
[1];

405 i‡(
sd1
->
iscsi_˘x
 =
NULL
) {

406 
	`loggög
(
LOG_NORMAL
, "can't cloneÇon-iscsi device");

407  -
EINVAL
;

410 
	`loggög
(
LOG_VERBOSE
, "cloning sd1 for second session");

411 
sd2
 = 
	`mÆloc
((*sd2));

412 i‡(
sd2
 =
NULL
) {

413  -
ENOMEM
;

416 
	`mem£t
(
sd2
, 0, (*sd2));

417 
sd2
->
iscsi_uæ
 = 
sd1
->iscsi_url;

418 
sd2
->
iscsi_lun
 = 
sd1
->iscsi_lun;

419 
sd2
->
iscsi_˘x
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹«me2
, sd2->
iscsi_uæ
,

420 &
sd2
->
iscsi_lun
);

421 i‡(
sd2
->
iscsi_˘x
 =
NULL
) {

422 
	`loggög
(
LOG_VERBOSE
, "FailedÅoÜoginÅoÅarget");

423 
	`‰ì
(
sd2
);

424  -
ENOMEM
;

426 *
_sd2
 = 
sd2
;

429 
	}
}

432 
	$m∑th_sd2_put
(
scsi_devi˚
 *
sd2
)

434 i‡(
mp_num_sds
 > 1) {

435 i‡(
sd2
 !
mp_sds
[1]) {

436 
	`loggög
(
LOG_NORMAL
, "Invalid sd2!");

442 
	`iscsi_logout_sync
(
sd2
->
iscsi_˘x
);

443 
	`iscsi_de°roy_c⁄ãxt
(
sd2
->
iscsi_˘x
);

444 
	`‰ì
(
sd2
);

445 
	}
}

	@test-tool/iscsi-multipath.h

20 #i‚de‡ 
_ISCSI_MULTIPATH_H_


21 
	#_ISCSI_MULTIPATH_H_


	)

23 
	#MPATH_MAX_DEVS
 2

	)

24 
mp_num_sds
;

25 
scsi_devi˚
 *
mp_sds
[
MPATH_MAX_DEVS
];

28 
m∑th_check_m©chög_ids
(
num_sds
,

29 
scsi_devi˚
 **
sds
);

31 
m∑th_cou¡_iscsi
(
num_sds
,

32 
scsi_devi˚
 **
sds
);

34 
m∑th_sd2_gë_‹_˛⁄e
(
scsi_devi˚
 *
sd1
, scsi_devi˚ **
_sd2
);

36 
m∑th_sd2_put
(
scsi_devi˚
 *
sd2
);

38 
	#MPATH_SKIP_IF_UNAVAILABLE
(
_sds
, 
_num_sds
) \

40 i‡(
_num_sds
 <= 1) { \

41 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] Multipath unavailable." \

43 
	`CU_PASS
("[SKIPPED] Multipath unavailable." \

47 } 0);

	)

49 
	#MPATH_SKIP_UNLESS_ISCSI
(
_sds
, 
_num_sds
) \

51 i‡(
	`m∑th_cou¡_iscsi
(
_num_sds
, 
_sds
) != _num_sds) { \

52 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] Non-iSCSI multipath." \

54 
	`CU_PASS
("[SKIPPED] Non-iSCSI multipath." \

58 } 0);

	)

	@test-tool/iscsi-support.c

22 
	~"c⁄fig.h
"

24 
	#_GNU_SOURCE


	)

25 
	~<as£π.h
>

26 
	~<sys/sysˇŒ.h
>

27 
	~<dlf˙.h
>

28 
	~<sys/ty≥s.h
>

29 
	~<°dio.h
>

30 
	~<°dlib.h
>

31 
	~<°döt.h
>

32 
	~<°d¨g.h
>

33 
	~<öây≥s.h
>

34 
	~<°rög.h
>

35 
	~<pﬁl.h
>

36 
	~<‚m©ch.h
>

37 
	~<î∫o.h
>

38 
	~<time.h
>

40 #ifde‡
HAVE_SG_IO


41 
	~<f˙é.h
>

42 
	~<sys/io˘l.h
>

43 
	~<scsi/sg.h
>

46 
	~"¶i°.h
"

47 
	~"iscsi.h
"

48 
	~"scsi-lowÀvñ.h
"

49 
	~"iscsi-¥iv©e.h
"

50 
	~"iscsi-suµ‹t.h
"

51 
	~"iscsi-mu…ù©h.h
"

57 c⁄° *
	göôüt‹«me1
 =

59 c⁄° *
	göôüt‹«me2
 =

62 
	gno_medium_ascqs
[3] = {

63 
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT
,

64 
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_OPEN
,

65 
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_CLOSED


67 
	glba_oob_ascqs
[1] = {

68 
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE


70 
	gövÆid_cdb_ascqs
[2] = {

71 
SCSI_SENSE_ASCQ_INVALID_FIELD_IN_CDB
,

72 
SCSI_SENSE_ASCQ_INVALID_FIELD_IN_PARAMETER_LIST


74 
	g∑øm_li°_Àn_îr_ascqs
[1] = {

75 
SCSI_SENSE_ASCQ_PARAMETER_LIST_LENGTH_ERROR


77 
	gwrôe_¥Ÿe˘_ascqs
[3] = {

78 
SCSI_SENSE_ASCQ_WRITE_PROTECTED
,

79 
SCSI_SENSE_ASCQ_HARDWARE_WRITE_PROTECTED
,

80 
SCSI_SENSE_ASCQ_SOFTWARE_WRITE_PROTECTED


82 
	gßnôize_ascqs
[1] = {

83 
SCSI_SENSE_ASCQ_SANITIZE_IN_PROGRESS


85 
	gªmovÆ_ascqs
[1] = {

86 
SCSI_SENSE_ASCQ_MEDIUM_REMOVAL_PREVENTED


88 
	gmiscom∑ª_ascqs
[1] = {

89 
SCSI_SENSE_ASCQ_MISCOMPARE_DURING_VERIFY


91 
	gtoo_m™y_desc_ascqs
[2] = {

92 
SCSI_SENSE_ASCQ_TOO_MANY_TARGET_DESCRIPTORS
,

93 
SCSI_SENSE_ASCQ_TOO_MANY_SEGMENT_DESCRIPTORS
,

95 
	gunsuµ_desc_code_ascqs
[2] = {

96 
SCSI_SENSE_ASCQ_UNSUPPORTED_TARGET_DESCRIPTOR_TYPE_CODE
,

97 
SCSI_SENSE_ASCQ_UNSUPPORTED_SEGMENT_DESCRIPTOR_TYPE_CODE


99 
	gc›y_ab‹ãd_ascqs
[3] = {

100 
SCSI_SENSE_ASCQ_NO_ADDL_SENSE
,

101 
SCSI_SENSE_ASCQ_UNREACHABLE_COPY_TARGET
,

102 
SCSI_SENSE_ASCQ_COPY_TARGET_DEVICE_NOT_REACHABLE


105 
scsi_öquúy_°™d¨d
 *
	göq
;

106 
scsi_öquúy_logiˇl_block_¥ovisi⁄ög
 *
	göq_lbp
;

107 
scsi_öquúy_block_devi˚_ch¨a˘îi°ics
 *
	göq_bdc
;

108 
scsi_öquúy_block_limôs
 *
	göq_bl
;

109 
scsi_ªadˇ∑côy16
 *
	grc16
;

110 
scsi_ªp‹t_suµ‹ãd_›_codes
 *
	grs›
;

112 *
	gs¸©ch
;

113 
size_t
 
	gblock_size
;

114 
uöt64_t
 
	gnum_blocks
;

115 
	glbµb
;

116 
scsi_öquúy_≥rùhîÆ_devi˚_ty≥
 
	gdevi˚_ty≥
;

117 
	gd©a_loss
;

118 
	gÆlow_ßnôize
;

119 
	gªad⁄ly
;

120 
	gsbc3_suµ‹t
;

121 
	gmaximum_å™s„r_Àngth
;

123 (*
ªÆ_iscsi_queue_pdu
)(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_pdu
 *
pdu
);

125 c⁄° 
zîoBlock
[4096];

130 
	$Æl_zîo
(c⁄° *
buf
, 
size
)

132 
j
, 
e
;

134 
j
 = 0; j < 
size
; j +
e
) {

135 
e
 = 
size
 - 
j
;

136 i‡(
e
 > (
zîoBlock
))

137 
e
 = (
zîoBlock
);

138 i‡(
	`memcmp
(
buf
 + 
j
, 
zîoBlock
, 
e
) != 0)

143 
	}
}

145 c⁄° *
	$scsi_°©us_°r
(
°©us
)

147 
°©us
) {

148 
SCSI_STATUS_GOOD
:  "SUCCESS";

149 
SCSI_STATUS_TIMEOUT
:  "TIMEOUT";

150 
SCSI_STATUS_CHECK_CONDITION
:  "CHECK_CONDITION";

151 
SCSI_STATUS_CONDITION_MET
:  "CONDITIONS_MET";

152 
SCSI_STATUS_BUSY
:  "BUSY";

153 
SCSI_STATUS_RESERVATION_CONFLICT
:  "RESERVATION_CONFLICT";

154 
SCSI_STATUS_TASK_SET_FULL
:  "TASK_SET_FULL";

155 
SCSI_STATUS_ACA_ACTIVE
:  "ACA_ACTIVE";

156 
SCSI_STATUS_TASK_ABORTED
:  "TASK_ABORTED";

159 
	}
}

169 
	$°©us_is_övÆid_›code
(
scsi_èsk
 *
èsk
)

171 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


172 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST
) {

173 i‡(
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
)

175 
èsk
->
cdb
[0]) {

176 
SCSI_OPCODE_MAINTENANCE_IN
:

177 
SCSI_OPCODE_SERVICE_ACTION_IN
:

178 
èsk
->
£n£
.
ascq
) {

179 
SCSI_SENSE_ASCQ_INVALID_FIELD_IN_CDB
:

180 
SCSI_SENSE_ASCQ_INVALID_FIELD_IN_PARAMETER_LIST
:

181  !
èsk
->
£n£
.
£n£_•ecific
 ||

182 
èsk
->
£n£
.
fõld_poöãr
 == 1;

187 
	}
}

189 
	$check_ªsu…
(c⁄° *
›code
, 
scsi_devi˚
 *
sdev
,

190 
scsi_èsk
 *
èsk
,

191 
°©us
, 
scsi_£n£_key
 
key
,

192 *
ascq
, 
num_ascq
)

194 
ascq_ok
 = 0;

196 i‡(
èsk
 =
NULL
) {

197 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send %s command: "

198 "%s", 
›code
, 
sdev
->
îr‹_°r
);

201 i‡(
	`°©us_is_övÆid_›code
(
èsk
)) {

202 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] %s isÇot implemented.",

203 
›code
);

206 i‡(
°©us
 =
SCSI_STATUS_GOOD
 && 
èsk
->status != SCSI_STATUS_GOOD) {

207 
	`loggög
(
LOG_NORMAL
,

209 
›code
, 
èsk
->
°©us
,

210 
	`scsi_£n£_key_°r
(
èsk
->
£n£
.
key
),Åask->sense.key,

211 
	`scsi_£n£_ascq_°r
(
èsk
->
£n£
.
ascq
),Åask->sense.ascq);

214 i‡(
°©us
 !
SCSI_STATUS_GOOD
 && 
èsk
->status == SCSI_STATUS_GOOD) {

215 
	`loggög
(
LOG_NORMAL
, "[FAILED] %s successful but should "

217 
›code
,

218 
	`scsi_£n£_key_°r
(
key
), key,

219 
num_ascq
 ? 
	`scsi_£n£_ascq_°r
(
ascq
[0]) : "NO ASCQ",

220 
num_ascq
 ? 
ascq
[0] : 0);

223 i‡(
°©us
 =
SCSI_STATUS_RESERVATION_CONFLICT


224 && 
èsk
->
°©us
 !
SCSI_STATUS_RESERVATION_CONFLICT
) {

225 
	`loggög
(
LOG_NORMAL
, "[FAILED] %s command should have failed "

226 "wôh RESERVATION_CONFLICT.", 
›code
);

230 i‡(
°©us
 =
SCSI_STATUS_CHECK_CONDITION
) {

231 
i
;

232 
i
 = 0; i < 
num_ascq
; i++) {

233 i‡(
ascq
[
i
] =
èsk
->
£n£
.ascq) {

234 
ascq_ok
 = 1;

237 i‡(
num_ascq
 == 0) {

238 
ascq_ok
 = 1;

241 i‡(
°©us
 =
SCSI_STATUS_CHECK_CONDITION
 &&

242 (
èsk
->
°©us
 != status

243 || 
èsk
->
£n£
.
key
 != key

244 || !
ascq_ok
)) {

245 
	`loggög
(
LOG_NORMAL
, "[FAILED] %s failed with wrong sense. "

248 
›code
,

249 
	`scsi_£n£_key_°r
(
key
), key,

250 
num_ascq
 ? 
	`scsi_£n£_ascq_°r
(
ascq
[0]) : "NO ASCQ",

251 
num_ascq
 ? 
ascq
[0] : 0,

252 
sdev
->
îr‹_°r
,

253 
èsk
->
£n£
.
key
,Åask->£n£.
ascq
);

256 
	`loggög
(
LOG_VERBOSE
, "[OK] %sÑeturned %s %s(0x%02x) %s(0x%04x)",

257 
›code
, 
	`scsi_°©us_°r
(
°©us
),

258 
	`scsi_£n£_key_°r
(
èsk
->
£n£
.
key
),Åask->sense.key,

259 
	`scsi_£n£_ascq_°r
(
èsk
->
£n£
.
ascq
),Åask->sense.ascq);

261 
	}
}

263 #ifde‡
HAVE_SG_IO


264 
size_t
 
	$iov_tŸ_Àn
(
scsi_iovec
 *
iov
, 
niov
)

266 
size_t
 
Àn
 = 0;

267 
i
;

269 
i
 = 0; i < 
niov
; i++)

270 
Àn
 +
iov
[
i
].
iov_Àn
;

271  
Àn
;

272 
	}
}

275 
scsi_èsk
 *
	$£nd_scsi_comm™d
(
scsi_devi˚
 *
sdev
, 
scsi_èsk
 *
èsk
, 
iscsi_d©a
 *
d
)

277 
time_t
 
œ°_time
 = 0;

285 i‡(
d
 !
NULL
 && d->
d©a
 != NULL) {

286 
scsi_iovec
 *
iov
;

288 
iov
 = 
	`scsi_mÆloc
(
èsk
, (
scsi_iovec
));

289 
iov
->
iov_ba£
 = 
d
->
d©a
;

290 
iov
->
iov_Àn
 = 
d
->
size
;

291 
èsk
->
x„r_dú
) {

292 
SCSI_XFER_WRITE
:

293 
	`scsi_èsk_£t_iov_out
(
èsk
, 
iov
, 1);

295 
SCSI_XFER_READ
:

296 
	`scsi_èsk_£t_iov_ö
(
èsk
, 
iov
, 1);

301 i‡(
sdev
->
iscsi_uæ
) {

302 
time_t
 
cuºít_time
 = 
	`time
(
NULL
);

304 i‡(
sdev
->
îr‹_°r
 !
NULL
) {

305 
	`‰ì
(
	`disˇrd_c⁄°
(
sdev
->
îr‹_°r
));

306 
sdev
->
îr‹_°r
 = 
NULL
;

308 
èsk
 = 
	`iscsi_scsi_comm™d_sync
(
sdev
->
iscsi_˘x
, sdev->
iscsi_lun
,Åask, 
NULL
);

309 i‡(
èsk
 =
NULL
) {

310 
sdev
->
îr‹_°r
 = 
	`°rdup
(
	`iscsi_gë_îr‹
(sdev->
iscsi_˘x
));

313 i‡(
cuºít_time
 > 
œ°_time
 + 1) {

314 
i
;

323 
i
 = 1; i < 
mp_num_sds
; i++) {

324 
	`iscsi_£rvi˚
(
mp_sds
[
i
]->
iscsi_˘x
, 
POLLIN
|
POLLOUT
);

326 
œ°_time
 = 
cuºít_time
;

329  
èsk
;

332 #ifde‡
HAVE_SG_IO


333 i‡(
sdev
->
sgio_dev
) {

334 
sg_io_hdr_t
 
io_hdr
;

335 
£n£_Àn
=32;

336 
£n£
[
£n£_Àn
];

337 
buf
[1024];

339 
	`mem£t
(
£n£
, 0, (sense));

340 
	`mem£t
(&
io_hdr
, 0, (
sg_io_hdr_t
));

341 
io_hdr
.
öãrÁ˚_id
 = 'S';

344 
io_hdr
.
cmdp
 = 
èsk
->
cdb
;

345 
io_hdr
.
cmd_Àn
 = 
èsk
->
cdb_size
;

348 
io_hdr
.
sbp
 = 
£n£
;

349 
io_hdr
.
mx_sb_Àn
 = 
£n£_Àn
;

354 
èsk
->
x„r_dú
) {

355 
SCSI_XFER_WRITE
:

356 
io_hdr
.
dx„r_dúe˘i⁄
 = 
SG_DXFER_TO_DEV
;

357 
io_hdr
.
iovec_cou¡
 = 
èsk
->
iove˘‹_out
.
niov
;

358 
io_hdr
.
dx„Ω
 = 
èsk
->
iove˘‹_out
.
iov
;

359 
io_hdr
.
dx„r_Àn
 = 
	`iov_tŸ_Àn
(
èsk
->
iove˘‹_out
.
iov
,

360 
èsk
->
iove˘‹_out
.
niov
);

362 
SCSI_XFER_READ
:

363 
io_hdr
.
dx„r_dúe˘i⁄
 = 
SG_DXFER_FROM_DEV
;

364 
èsk
->
d©aö
.
size
 =Åask->
expx„æí
;

365 
èsk
->
d©aö
.
d©a
 = 
	`mÆloc
—ask->d©aö.
size
);

366 
	`mem£t
(
èsk
->
d©aö
.
d©a
, 0,Åask->d©aö.
size
);

367 
io_hdr
.
dx„Ω
 = 
èsk
->
d©aö
.
d©a
;

368 
io_hdr
.
dx„r_Àn
 = 
èsk
->
d©aö
.
size
;

373 
io_hdr
.
timeout
 = 5000;

375 if(
	`io˘l
(
sdev
->
sgio_fd
, 
SG_IO
, &
io_hdr
) < 0){

376 i‡(
sdev
->
îr‹_°r
 !
NULL
) {

377 
	`‰ì
(
	`disˇrd_c⁄°
(
sdev
->
îr‹_°r
));

379 
sdev
->
îr‹_°r
 = 
	`°rdup
("SG_IO ioctl failed");

380  
NULL
;

383 
èsk
->
ªsiduÆ_°©us
 = 
SCSI_RESIDUAL_NO_RESIDUAL
;

384 
èsk
->
ªsiduÆ
 = 0;

386 i‡(
io_hdr
.
ªsid
) {

387 
èsk
->
ªsiduÆ_°©us
 = 
SCSI_RESIDUAL_UNDERFLOW
;

388 
èsk
->
ªsiduÆ
 = 
io_hdr
.
ªsid
;

391 i‡(
èsk
->
x„r_dú
 =
SCSI_XFER_READ
)

392 
èsk
->
d©aö
.
size
 -èsk->
ªsiduÆ
;

395 if(
io_hdr
.
sb_Àn_wr
 > 0){

396 
èsk
->
°©us
 = 
SCSI_STATUS_CHECK_CONDITION
;

397 
	`scsi_∑r£_£n£_d©a
(&
èsk
->
£n£
, sense);

398 
	`¢¥ötf
(
buf
, (buf), "SENSE KEY:%s(%d) ASCQ:%s(0x%04x)",

399 
	`scsi_£n£_key_°r
(
èsk
->
£n£
.
key
),

400 
èsk
->
£n£
.
key
,

401 
	`scsi_£n£_ascq_°r
(
èsk
->
£n£
.
ascq
),

402 
èsk
->
£n£
.
ascq
);

403 i‡(
sdev
->
îr‹_°r
 !
NULL
) {

404 
	`‰ì
(
	`disˇrd_c⁄°
(
sdev
->
îr‹_°r
));

406 
sdev
->
îr‹_°r
 = 
	`°rdup
(
buf
);

407  
èsk
;

410 if(
io_hdr
.
°©us
 =
SCSI_STATUS_RESERVATION_CONFLICT
){

411 
èsk
->
°©us
 = 
SCSI_STATUS_RESERVATION_CONFLICT
;

412 i‡(
sdev
->
îr‹_°r
 !
NULL
) {

413 
	`‰ì
(
	`disˇrd_c⁄°
(
sdev
->
îr‹_°r
));

415 
sdev
->
îr‹_°r
 = 
	`°rdup
("Reservation Conflict");

416  
èsk
;

419 if(
io_hdr
.
masked_°©us
){

420 
èsk
->
°©us
 = 
SCSI_STATUS_ERROR
;

421 
èsk
->
£n£
.
key
 = 0x0f;

422 
èsk
->
£n£
.
ascq
 = 0xffff;

424 i‡(
sdev
->
îr‹_°r
 !
NULL
) {

425 
	`‰ì
(
	`disˇrd_c⁄°
(
sdev
->
îr‹_°r
));

427 
sdev
->
îr‹_°r
 = 
	`°rdup
("SCSI maskedÉrror");

428  
NULL
;

430 if(
io_hdr
.
ho°_°©us
){

431 
èsk
->
°©us
 = 
SCSI_STATUS_ERROR
;

432 
èsk
->
£n£
.
key
 = 0x0f;

433 
èsk
->
£n£
.
ascq
 = 0xffff;

435 
	`¢¥ötf
(
buf
, (buf), "SCSI ho°Éº‹. Sètus=0x%x", 
io_hdr
.
ho°_°©us
);

436 i‡(
sdev
->
îr‹_°r
 !
NULL
) {

437 
	`‰ì
(
	`disˇrd_c⁄°
(
sdev
->
îr‹_°r
));

439 
sdev
->
îr‹_°r
 = 
	`°rdup
(
buf
);

440  
èsk
;

442 if(
io_hdr
.
drivî_°©us
){

443 
èsk
->
°©us
 = 
SCSI_STATUS_ERROR
;

444 
èsk
->
£n£
.
key
 = 0x0f;

445 
èsk
->
£n£
.
ascq
 = 0xffff;

447 i‡(
sdev
->
îr‹_°r
 !
NULL
) {

448 
	`‰ì
(
	`disˇrd_c⁄°
(
sdev
->
îr‹_°r
));

450 
sdev
->
îr‹_°r
 = 
	`°rdup
("SCSI driverÉrror");

451  
NULL
;

453  
èsk
;

456  
NULL
;

457 
	}
}

459 
	$loggög
(
Àvñ
, c⁄° *
f‹m©
, ...)

461 
va_li°
 
≠
;

462 
mesßge
[1024];

463 
ªt
;

464 i‡(
logÀvñ
 < 
Àvñ
) {

466 i‡(
	`°∫cmp
(
LOG_BLANK_LINE
, 
f‹m©
, 
LOG_BLANK_LINE_CMP_LEN
)==0) {

467 
	`¥ötf
("\n");

471 
	`va_°¨t
(
≠
, 
f‹m©
);

472 
ªt
 = 
	`v¢¥ötf
(
mesßge
, 1024, 
f‹m©
, 
≠
);

473 
	`va_íd
(
≠
);

475 i‡(
ªt
 < 0) {

479 
	`¥ötf
(" %s\n", 
mesßge
);

480 
	}
}

482 
iscsi_c⁄ãxt
 *

483 
	$iscsi_c⁄ãxt_logö
(c⁄° *
öôüt‹«me
, c⁄° *
uæ
, *
lun
)

485 
iscsi_c⁄ãxt
 *
iscsi
;

486 
iscsi_uæ
 *iscsi_url;

488 
iscsi
 = 
	`iscsi_¸óã_c⁄ãxt
(
öôüt‹«me
);

489 i‡(
iscsi
 =
NULL
) {

490 
	`Ârötf
(
°dîr
, "FailedÅo create context\n");

491  
NULL
;

494 
iscsi_uæ
 = 
	`iscsi_∑r£_fuŒ_uæ
(
iscsi
, 
uæ
);

495 i‡(
iscsi_uæ
 =
NULL
) {

496 
	`Ârötf
(
°dîr
, "FailedÅoÖarse URL: %s\n",

497 
	`iscsi_gë_îr‹
(
iscsi
));

498 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

499  
NULL
;

502 
	`iscsi_£t_èrgë«me
(
iscsi
, 
iscsi_uæ
->
èrgë
);

503 
	`iscsi_£t_£ssi⁄_ty≥
(
iscsi
, 
ISCSI_SESSION_NORMAL
);

504 
	`iscsi_£t_hódî_dige°
(
iscsi
, 
ISCSI_HEADER_DIGEST_NONE_CRC32C
);

506 i‡(
iscsi_uæ
->
u£r
[0] != '\0') {

507 i‡(
	`iscsi_£t_öôüt‹_u£∫ame_pwd
(
iscsi
, 
iscsi_uæ
->
u£r
, iscsi_uæ->
∑sswd
) != 0) {

508 
	`Ârötf
(
°dîr
, "FailedÅo set initiator usernameándÖassword\n");

509 
	`iscsi_de°roy_uæ
(
iscsi_uæ
);

510 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

511  
NULL
;

515 i‡(
	`iscsi_fuŒ_c⁄√˘_sync
(
iscsi
, 
iscsi_uæ
->
p‹èl
, iscsi_uæ->
lun
) != 0) {

516 
	`Ârötf
(
°dîr
, "Logö Faûed. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

517 
	`iscsi_de°roy_uæ
(
iscsi_uæ
);

518 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

519  
NULL
;

521 i‡(
lun
 !
NULL
) {

522 *
lun
 = 
iscsi_uæ
->lun;

525 
	`iscsi_de°roy_uæ
(
iscsi_uæ
);

526  
iscsi
;

527 
	}
}

530 
	$waô_u¡û_ã°_föished
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_async_°©e
 *
°©e
)

532 
pﬁlfd
 
pfd
;

533 
cou¡
 = 0;

534 
ªt
;

536 
°©e
->
föished
 == 0) {

537 
pfd
.
fd
 = 
	`iscsi_gë_fd
(
iscsi
);

538 
pfd
.
evíts
 = 
	`iscsi_which_evíts
(
iscsi
);

540 
ªt
 = 
	`pﬁl
(&
pfd
, 1, 1000);

541 i‡(
ªt
 < 0) {

542 
	`¥ötf
("Poll failed");

543 
	`exô
(10);

545 i‡(
ªt
 == 0) {

546 i‡(
cou¡
++ > 5) {

547 
iscsi_pdu
 *
pdu
;

549 
°©e
->
föished
 = 1;

550 
°©e
->
°©us
 = 
SCSI_STATUS_CANCELLED
;

551 
°©e
->
èsk
->
°©us
 = 
SCSI_STATUS_CANCELLED
;

553 (
pdu
 = 
iscsi
->
outqueue
)) {

554 
	`ISCSI_LIST_REMOVE
(&
iscsi
->
outqueue
, 
pdu
);

556 (
pdu
 = 
iscsi
->
waôpdu
)) {

557 
	`ISCSI_LIST_REMOVE
(&
iscsi
->
waôpdu
, 
pdu
);

563 i‡(
	`iscsi_£rvi˚
(
iscsi
, 
pfd
.
ªvíts
) < 0) {

564 
	`¥ötf
("iscsi_£rvi˚ faûed wôh : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

568 
	}
}

571 
	$iscsi_queue_pdu
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_pdu
 *
pdu
)

573 i‡(
loˇl_iscsi_queue_pdu
 !
NULL
) {

574 
	`loˇl_iscsi_queue_pdu
(
iscsi
, 
pdu
);

576  
	`ªÆ_iscsi_queue_pdu
(
iscsi
, 
pdu
);

577 
	}
}

580 
	$‹wrôe
(
scsi_devi˚
 *
sdev
, 
uöt64_t
 
lba
,

581 
uöt32_t
 
d©Æí
, 
blocksize
, 
wΩrŸe˘
,

582 
dpo
, 
fua
, 
fua_nv
, 
group
,

583 *
d©a
,

584 
°©us
, 
scsi_£n£_key
 
key
, *
ascq
, 
num_ascq
)

586 
scsi_èsk
 *
èsk
;

587 
iscsi_d©a
 
d
;

588 
ªt
;

590 
	`loggög
(
LOG_VERBOSE
, "Síd ORWRITE (Ex≥˘ög %sËLBA:%" 
PRIu64


592 
	`scsi_°©us_°r
(
°©us
),

593 
lba
, 
d©Æí
 / 
blocksize
, 
wΩrŸe˘
,

594 
dpo
, 
fua
, 
fua_nv
, 
group
);

596 i‡(!
d©a_loss
) {

597 
	`¥ötf
("--dataloss flag isÇot set in. Skipping write\n");

601 
èsk
 = 
	`scsi_cdb_‹wrôe
(
lba
, 
d©Æí
, 
blocksize
, 
wΩrŸe˘
,

602 
dpo
, 
fua
, 
fua_nv
, 
group
);

603 
	`as£π
(
èsk
 !
NULL
);

605 
d
.
d©a
 = data;

606 
d
.
size
 = 
d©Æí
;

607 
èsk
 = 
	`£nd_scsi_comm™d
(
sdev
,Åask, &
d
);

609 
ªt
 = 
	`check_ªsu…
("ORWRITE", 
sdev
, 
èsk
, 
°©us
, 
key
, 
ascq
, 
num_ascq
);

610 i‡(
èsk
) {

611 
	`scsi_‰ì_scsi_èsk
(
èsk
);

613  
ªt
;

614 
	}
}

617 
	$¥ö_èsk
(
scsi_devi˚
 *
sdev
, 
£rvi˚_a˘i⁄
,

618 
suc˚ss_ex≥˘ed
)

620 c⁄° 
buf_sz
 = 16384;

621 
scsi_èsk
 *
èsk
;

622 
ªt
 = 0;

625 
	`loggög
(
LOG_VERBOSE
, "Síd PRIN/SA=0x%02x,Éx≥˘ %s", 
£rvi˚_a˘i⁄
,

626 
suc˚ss_ex≥˘ed
 ? "success" : "failure");

628 
èsk
 = 
	`scsi_cdb_≥rsi°ít_ª£rve_ö
(
£rvi˚_a˘i⁄
, 
buf_sz
);

629 
	`as£π
(
èsk
 !
NULL
);

631 
èsk
 = 
	`£nd_scsi_comm™d
(
sdev
,Åask, 
NULL
);

632 i‡(
èsk
 =
NULL
) {

633 
	`loggög
(
LOG_NORMAL
,

635 
	`iscsi_gë_îr‹
(
sdev
->
iscsi_˘x
));

638 i‡(
	`°©us_is_övÆid_›code
(
èsk
)) {

639 
	`scsi_‰ì_scsi_èsk
(
èsk
);

640 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] PERSISTENT RESERVE IN isÇot implemented.");

644 i‡(
suc˚ss_ex≥˘ed
) {

645 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

646 
	`loggög
(
LOG_NORMAL
,

648 
£rvi˚_a˘i⁄
, 
	`iscsi_gë_îr‹
(
sdev
->
iscsi_˘x
));

649 
ªt
 = -1;

652 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

653 
	`loggög
(
LOG_NORMAL
,

655 
£rvi˚_a˘i⁄
);

656 
ªt
 = -1;

660 
	`scsi_‰ì_scsi_èsk
(
èsk
);

661 
èsk
 = 
NULL
;

663  
ªt
;

664 
	}
}

667 
	$¥ö_ªad_keys
(
scsi_devi˚
 *
sdev
,

668 
scsi_èsk
 **
ç
,

669 
scsi_≥rsi°ít_ª£rve_ö_ªad_keys
 **
rkp
,

670 
uöt16_t
 
Æloˇti⁄_Àn
)

672 
scsi_≥rsi°ít_ª£rve_ö_ªad_keys
 *
rk
 = 
NULL
;

675 
	`loggög
(
LOG_VERBOSE
, "Send PRIN/READ_KEYS");

677 *
ç
 = 
	`scsi_cdb_≥rsi°ít_ª£rve_ö
(
SCSI_PERSISTENT_RESERVE_READ_KEYS
,

678 
Æloˇti⁄_Àn
);

679 
	`as£π
(*
ç
 !
NULL
);

681 *
ç
 = 
	`£nd_scsi_comm™d
(
sdev
, *ç, 
NULL
);

682 i‡(*
ç
 =
NULL
) {

683 
	`loggög
(
LOG_NORMAL
,

685 
	`iscsi_gë_îr‹
(
sdev
->
iscsi_˘x
));

688 i‡(
	`°©us_is_övÆid_›code
(*
ç
)) {

689 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] PERSISTENT RESERVE IN isÇot implemented.");

692 i‡((*
ç
)->
°©us
 !
SCSI_STATUS_GOOD
) {

693 
	`loggög
(
LOG_NORMAL
,

695 
	`iscsi_gë_îr‹
(
sdev
->
iscsi_˘x
));

699 
rk
 = 
	`scsi_d©aö_unm¨shÆl
(*
ç
);

700 i‡(
rk
 =
NULL
) {

701 
	`loggög
(
LOG_NORMAL
,

703 
	`iscsi_gë_îr‹
(
sdev
->
iscsi_˘x
));

706 i‡(
rkp
 !
NULL
)

707 *
rkp
 = 
rk
;

710 
	}
}

713 
	$¥out_ªgi°î_™d_ign‹e
(
scsi_devi˚
 *
sdev
,

714 
ßrk
)

716 
scsi_≥rsi°ít_ª£rve_out_basic
 
poc
;

717 
scsi_èsk
 *
èsk
;

718 
ªt
 = 0;

722 
	`loggög
(
LOG_VERBOSE
,

724 
sdev
->
iscsi_˘x
 ? sdev->iscsi_˘x->
öôüt‹_«me
 : sdev->
sgio_dev
);

726 i‡(!
d©a_loss
) {

727 
	`¥ötf
("--dataloss flag isÇot set in. Skipping PROUT\n");

731 
	`mem£t
(&
poc
, 0,  (poc));

732 
poc
.
£rvi˚_a˘i⁄_ª£rv©i⁄_key
 = 
ßrk
;

733 
èsk
 = 
	`scsi_cdb_≥rsi°ít_ª£rve_out
(

734 
SCSI_PERSISTENT_RESERVE_REGISTER_AND_IGNORE_EXISTING_KEY
,

735 
SCSI_PERSISTENT_RESERVE_SCOPE_LU
, 0, &
poc
);

736 
	`as£π
(
èsk
 !
NULL
);

738 
èsk
 = 
	`£nd_scsi_comm™d
(
sdev
,Åask, 
NULL
);

739 i‡(
èsk
 =
NULL
) {

740 
	`loggög
(
LOG_NORMAL
,

742 
	`iscsi_gë_îr‹
(
sdev
->
iscsi_˘x
));

745 i‡(
	`°©us_is_övÆid_›code
(
èsk
)) {

746 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] PROUT Not Supported");

747 
ªt
 = -2;

748 
dun
;

750 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

751 
	`loggög
(
LOG_NORMAL
,

753 
	`iscsi_gë_îr‹
(
sdev
->
iscsi_˘x
));

754 
ªt
 = -1;

757 
dun
:

758 
	`scsi_‰ì_scsi_èsk
(
èsk
);

759  
ªt
;

760 
	}
}

763 
	$¥out_ªgi°î_key
(
scsi_devi˚
 *
sdev
,

764 
ßrk
, 
rk
)

766 
scsi_≥rsi°ít_ª£rve_out_basic
 
poc
;

767 
scsi_èsk
 *
èsk
;

768 
ªt
 = 0;

773 
	`loggög
(
LOG_VERBOSE
, "Send PROUT/REGISTERÅo %s init=%s",

774 
ßrk
 != 0 ? "register" : "unregister",

775 
sdev
->
iscsi_˘x
 ? sdev->iscsi_˘x->
öôüt‹_«me
 : sdev->
sgio_dev
);

777 i‡(!
d©a_loss
) {

778 
	`¥ötf
("--dataloss flag isÇot set in. Skipping PROUT\n");

782 
	`mem£t
(&
poc
, 0,  (poc));

783 
poc
.
£rvi˚_a˘i⁄_ª£rv©i⁄_key
 = 
ßrk
;

784 
poc
.
ª£rv©i⁄_key
 = 
rk
;

785 
èsk
 = 
	`scsi_cdb_≥rsi°ít_ª£rve_out
(

786 
SCSI_PERSISTENT_RESERVE_REGISTER
,

787 
SCSI_PERSISTENT_RESERVE_SCOPE_LU
, 0, &
poc
);

788 
	`as£π
(
èsk
 !
NULL
);

790 
èsk
 = 
	`£nd_scsi_comm™d
(
sdev
,Åask, 
NULL
);

791 i‡(
èsk
 =
NULL
) {

792 
	`loggög
(
LOG_NORMAL
,

794 
	`iscsi_gë_îr‹
(
sdev
->
iscsi_˘x
));

797 i‡(
	`°©us_is_övÆid_›code
(
èsk
)) {

798 
	`scsi_‰ì_scsi_èsk
(
èsk
);

799 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] PERSISTENT RESERVE OUT isÇot implemented.");

802 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

803 
	`loggög
(
LOG_NORMAL
,

805 
	`iscsi_gë_îr‹
(
sdev
->
iscsi_˘x
));

806 
ªt
 = -1;

809 
	`scsi_‰ì_scsi_èsk
(
èsk
);

811  
ªt
;

812 
	}
}

815 
	$¥ö_vîify_key_¥e£n˚
(
scsi_devi˚
 *
sdev
,

816 
key
, 
¥e£¡
)

818 
scsi_èsk
 *
èsk
;

819 c⁄° 
buf_sz
 = 16384;

820 
i
;

821 
key_found
;

822 
scsi_≥rsi°ít_ª£rve_ö_ªad_keys
 *
rk
 = 
NULL
;

823 
ªt
 = 0;

826 
	`loggög
(
LOG_VERBOSE
,

828 
¥e£¡
 ? "present" : "absent",

829 
sdev
->
iscsi_˘x
 ? sdev->iscsi_˘x->
öôüt‹_«me
 : sdev->
sgio_dev
);

831 
èsk
 = 
	`scsi_cdb_≥rsi°ít_ª£rve_ö
(
SCSI_PERSISTENT_RESERVE_READ_KEYS
,

832 
buf_sz
);

833 
	`as£π
(
èsk
 !
NULL
);

835 
èsk
 = 
	`£nd_scsi_comm™d
(
sdev
,Åask, 
NULL
);

836 i‡(
èsk
 =
NULL
) {

837 
	`loggög
(
LOG_NORMAL
,

839 
	`iscsi_gë_îr‹
(
sdev
->
iscsi_˘x
));

842 i‡(
	`°©us_is_övÆid_›code
(
èsk
)) {

843 
	`scsi_‰ì_scsi_èsk
(
èsk
);

844 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] PERSISTENT RESERVE IN isÇot implemented.");

848 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

849 
	`loggög
(
LOG_NORMAL
,

851 
	`iscsi_gë_îr‹
(
sdev
->
iscsi_˘x
));

852 
ªt
 = -1;

853 
dun
;

856 
rk
 = 
	`scsi_d©aö_unm¨shÆl
(
èsk
);

857 i‡(
rk
 =
NULL
) {

858 
	`loggög
(
LOG_NORMAL
,

860 
	`iscsi_gë_îr‹
(
sdev
->
iscsi_˘x
));

861 
ªt
 = -1;

862 
dun
;

865 
key_found
 = 0;

866 
i
 = 0; i < 
rk
->
num_keys
; i++) {

867 i‡(
rk
->
keys
[
i
] =
key
)

868 
key_found
 = 1;

871 i‡((
¥e£¡
 && !
key_found
) || (!present && key_found)) {

872 i‡(
¥e£¡
)

873 
	`loggög
(
LOG_NORMAL
,

876 
	`loggög
(
LOG_NORMAL
,

878 
ªt
 = -1;

881 
dun
:

882 
	`scsi_‰ì_scsi_èsk
(
èsk
);

883  
ªt
;

884 
	}
}

887 
	$¥out_ªªgi°î_key_Áûs
(
scsi_devi˚
 *
sdev
,

888 
ßrk
)

890 
scsi_≥rsi°ít_ª£rve_out_basic
 
poc
;

891 
scsi_èsk
 *
èsk
;

892 
ªt
 = 0;

895 
	`loggög
(
LOG_VERBOSE
,

897 
sdev
->
iscsi_˘x
 ? sdev->iscsi_˘x->
öôüt‹_«me
 : sdev->
sgio_dev
);

899 i‡(!
d©a_loss
) {

900 
	`¥ötf
("--dataloss flag isÇot set in. Skipping PROUT\n");

904 
	`mem£t
(&
poc
, 0,  (poc));

905 
poc
.
£rvi˚_a˘i⁄_ª£rv©i⁄_key
 = 
ßrk
;

906 
èsk
 = 
	`scsi_cdb_≥rsi°ít_ª£rve_out
(

907 
SCSI_PERSISTENT_RESERVE_REGISTER
,

908 
SCSI_PERSISTENT_RESERVE_SCOPE_LU
, 0, &
poc
);

909 
	`as£π
(
èsk
 !
NULL
);

911 
èsk
 = 
	`£nd_scsi_comm™d
(
sdev
,Åask, 
NULL
);

912 i‡(
èsk
 =
NULL
) {

913 
	`loggög
(
LOG_NORMAL
,

915 
	`iscsi_gë_îr‹
(
sdev
->
iscsi_˘x
));

918 i‡(
	`°©us_is_övÆid_›code
(
èsk
)) {

919 
	`scsi_‰ì_scsi_èsk
(
èsk
);

920 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] PERSISTENT RESERVE OUT isÇot implemented.");

924 i‡(
èsk
->
°©us
 !
SCSI_STATUS_RESERVATION_CONFLICT
) {

925 
	`loggög
(
LOG_NORMAL
,

927 
ªt
 = -1;

930 
	`scsi_‰ì_scsi_èsk
(
èsk
);

931  
ªt
;

932 
	}
}

935 
	$¥out_ª£rve
(
scsi_devi˚
 *
sdev
,

936 
key
, 
scsi_≥rsi°ít_out_ty≥
 
¥_ty≥
)

938 
scsi_≥rsi°ít_ª£rve_out_basic
 
poc
;

939 
scsi_èsk
 *
èsk
;

940 
ªt
 = 0;

944 
	`loggög
(
LOG_VERBOSE
,

946 
¥_ty≥
, 
	`scsi_¥_ty≥_°r
(pr_type),

947 
sdev
->
iscsi_˘x
 ? sdev->iscsi_˘x->
öôüt‹_«me
 : sdev->
sgio_dev
);

949 i‡(!
d©a_loss
) {

950 
	`¥ötf
("--dataloss flag isÇot set in. Skipping PROUT\n");

954 
	`mem£t
(&
poc
, 0,  (poc));

955 
poc
.
ª£rv©i⁄_key
 = 
key
;

956 
èsk
 = 
	`scsi_cdb_≥rsi°ít_ª£rve_out
(

957 
SCSI_PERSISTENT_RESERVE_RESERVE
,

958 
SCSI_PERSISTENT_RESERVE_SCOPE_LU
,

959 
¥_ty≥
, &
poc
);

960 
	`as£π
(
èsk
 !
NULL
);

962 
èsk
 = 
	`£nd_scsi_comm™d
(
sdev
,Åask, 
NULL
);

963 i‡(
èsk
 =
NULL
) {

964 
	`loggög
(
LOG_NORMAL
,

966 
	`iscsi_gë_îr‹
(
sdev
->
iscsi_˘x
));

969 i‡(
	`°©us_is_övÆid_›code
(
èsk
)) {

970 
	`scsi_‰ì_scsi_èsk
(
èsk
);

971 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] PERSISTENT RESERVE OUT isÇot implemented.");

975 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

976 
	`loggög
(
LOG_NORMAL
,

978 
	`iscsi_gë_îr‹
(
sdev
->
iscsi_˘x
));

979 
ªt
 = -1;

982 
	`scsi_‰ì_scsi_èsk
(
èsk
);

983  
ªt
;

984 
	}
}

987 
	$¥out_ªÀa£
(
scsi_devi˚
 *
sdev
,

988 
key
, 
scsi_≥rsi°ít_out_ty≥
 
¥_ty≥
)

990 
scsi_≥rsi°ít_ª£rve_out_basic
 
poc
;

991 
scsi_èsk
 *
èsk
;

992 
ªt
 = 0;

995 
	`loggög
(
LOG_VERBOSE
,

997 
¥_ty≥
, 
sdev
->
iscsi_˘x
 ? sdev->iscsi_˘x->
öôüt‹_«me
 : sdev->
sgio_dev
);

999 i‡(!
d©a_loss
) {

1000 
	`¥ötf
("--dataloss flag isÇot set in. Skipping PROUT\n");

1004 
	`mem£t
(&
poc
, 0,  (poc));

1005 
poc
.
ª£rv©i⁄_key
 = 
key
;

1006 
èsk
 = 
	`scsi_cdb_≥rsi°ít_ª£rve_out
(

1007 
SCSI_PERSISTENT_RESERVE_RELEASE
,

1008 
SCSI_PERSISTENT_RESERVE_SCOPE_LU
,

1009 
¥_ty≥
, &
poc
);

1010 
	`as£π
(
èsk
 !
NULL
);

1012 
èsk
 = 
	`£nd_scsi_comm™d
(
sdev
,Åask, 
NULL
);

1013 i‡(
èsk
 =
NULL
) {

1014 
	`loggög
(
LOG_NORMAL
,

1016 
	`iscsi_gë_îr‹
(
sdev
->
iscsi_˘x
));

1019 i‡(
	`°©us_is_övÆid_›code
(
èsk
)) {

1020 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1021 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] PERSISTENT RESERVE OUT isÇot implemented.");

1025 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

1026 
	`loggög
(
LOG_NORMAL
,

1028 
	`iscsi_gë_îr‹
(
sdev
->
iscsi_˘x
));

1029 
ªt
 = -1;

1032 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1033  
ªt
;

1034 
	}
}

1037 
	$¥out_˛ór
(
scsi_devi˚
 *
sdev
, 
key
)

1039 
scsi_≥rsi°ít_ª£rve_out_basic
 
poc
;

1040 
scsi_èsk
 *
èsk
;

1041 
ªt
 = 0;

1044 
	`loggög
(
LOG_VERBOSE
,

1048 i‡(!
d©a_loss
) {

1049 
	`¥ötf
("--dataloss flag isÇot set in. Skipping PROUT\n");

1053 
	`mem£t
(&
poc
, 0,  (poc));

1054 
poc
.
ª£rv©i⁄_key
 = 
key
;

1055 
èsk
 = 
	`scsi_cdb_≥rsi°ít_ª£rve_out
(

1056 
SCSI_PERSISTENT_RESERVE_CLEAR
,

1057 
SCSI_PERSISTENT_RESERVE_SCOPE_LU
,

1058 0, &
poc
);

1059 
	`as£π
(
èsk
 !
NULL
);

1061 
èsk
 = 
	`£nd_scsi_comm™d
(
sdev
,Åask, 
NULL
);

1062 i‡(
èsk
 =
NULL
) {

1063 
	`loggög
(
LOG_NORMAL
,

1065 
	`iscsi_gë_îr‹
(
sdev
->
iscsi_˘x
));

1068 i‡(
	`°©us_is_övÆid_›code
(
èsk
)) {

1069 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1070 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] PERSISTENT RESERVE OUT isÇot implemented.");

1074 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

1075 
	`loggög
(
LOG_NORMAL
,

1077 
	`iscsi_gë_îr‹
(
sdev
->
iscsi_˘x
));

1078 
ªt
 = -1;

1081 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1082  
ªt
;

1083 
	}
}

1086 
	$¥out_¥ìm±
(
scsi_devi˚
 *
sdev
,

1087 
ßrk
, 
rk
,

1088 
scsi_≥rsi°ít_out_ty≥
 
¥_ty≥
)

1090 
scsi_≥rsi°ít_ª£rve_out_basic
 
poc
;

1091 
scsi_èsk
 *
èsk
;

1092 
ªt
 = 0;

1095 
	`loggög
(
LOG_VERBOSE
,

1099 i‡(!
d©a_loss
) {

1100 
	`¥ötf
("--dataloss flag isÇot set in. Skipping PROUT\n");

1104 
	`mem£t
(&
poc
, 0,  (poc));

1105 
poc
.
ª£rv©i⁄_key
 = 
rk
;

1106 
poc
.
£rvi˚_a˘i⁄_ª£rv©i⁄_key
 = 
ßrk
;

1107 
èsk
 = 
	`scsi_cdb_≥rsi°ít_ª£rve_out
(

1108 
SCSI_PERSISTENT_RESERVE_PREEMPT
,

1109 
SCSI_PERSISTENT_RESERVE_SCOPE_LU
,

1110 
¥_ty≥
, &
poc
);

1111 
	`as£π
(
èsk
 !
NULL
);

1113 
èsk
 = 
	`£nd_scsi_comm™d
(
sdev
,Åask, 
NULL
);

1114 i‡(
èsk
 =
NULL
) {

1115 
	`loggög
(
LOG_NORMAL
,

1117 
	`iscsi_gë_îr‹
(
sdev
->
iscsi_˘x
));

1120 i‡(
	`°©us_is_övÆid_›code
(
èsk
)) {

1121 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1122 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] PERSISTENT RESERVE OUT isÇot implemented.");

1126 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

1127 
	`loggög
(
LOG_NORMAL
,

1129 
	`iscsi_gë_îr‹
(
sdev
->
iscsi_˘x
));

1130 
ªt
 = -1;

1133 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1134  
ªt
;

1135 
	}
}

1138 
	$¥ö_vîify_ª£rved_as
(
scsi_devi˚
 *
sdev
,

1139 
key
, 
scsi_≥rsi°ít_out_ty≥
 
¥_ty≥
)

1141 
scsi_èsk
 *
èsk
;

1142 c⁄° 
buf_sz
 = 16384;

1143 
scsi_≥rsi°ít_ª£rve_ö_ªad_ª£rv©i⁄
 *
º
 = 
NULL
;

1144 
ªt
 = 0;

1147 
	`loggög
(
LOG_VERBOSE
,

1149 
¥_ty≥
, 
sdev
->
iscsi_˘x
 ? sdev->iscsi_˘x->
öôüt‹_«me
 : sdev->
sgio_dev
);

1151 
èsk
 = 
	`scsi_cdb_≥rsi°ít_ª£rve_ö
(

1152 
SCSI_PERSISTENT_RESERVE_READ_RESERVATION
, 
buf_sz
);

1153 
	`as£π
(
èsk
 !
NULL
);

1155 
èsk
 = 
	`£nd_scsi_comm™d
(
sdev
,Åask, 
NULL
);

1156 i‡(
èsk
 =
NULL
) {

1157 
	`loggög
(
LOG_NORMAL
,

1159 
	`iscsi_gë_îr‹
(
sdev
->
iscsi_˘x
));

1162 i‡(
	`°©us_is_övÆid_›code
(
èsk
)) {

1163 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1164 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] PERSISTENT RESERVE IN isÇot implemented.");

1168 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

1169 
	`loggög
(
LOG_NORMAL
,

1171 
	`iscsi_gë_îr‹
(
sdev
->
iscsi_˘x
));

1172 
ªt
 = -1;

1173 
dun
;

1175 
º
 = 
	`scsi_d©aö_unm¨shÆl
(
èsk
);

1176 i‡(
º
 =
NULL
) {

1177 
	`loggög
(
LOG_NORMAL
,

1179 
	`iscsi_gë_îr‹
(
sdev
->
iscsi_˘x
));

1180 
ªt
 = -1;

1181 
dun
;

1183 i‡(!
º
->
ª£rved
) {

1184 
	`loggög
(
LOG_NORMAL
,

1186 
ªt
 = -1;

1187 
dun
;

1189 i‡(
º
->
ª£rv©i⁄_key
 !
key
) {

1190 
	`loggög
(
LOG_NORMAL
,

1192 
PRIu64
 ".",

1193 
key
, 
º
->
ª£rv©i⁄_key
);

1194 
ªt
 = -1;

1195 
dun
;

1197 i‡(
º
->
¥_ty≥
 !=Ör_type) {

1198 
	`loggög
(
LOG_NORMAL
,

1200 
¥_ty≥
, 
º
->pr_type);

1202 
ªt
 = -1;

1203 
dun
;

1206 
dun
:

1208 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1209  
ªt
;

1210 
	}
}

1213 
	$¥ö_vîify_nŸ_ª£rved
(
scsi_devi˚
 *
sdev
)

1215 
scsi_èsk
 *
èsk
;

1216 c⁄° 
buf_sz
 = 16384;

1217 
scsi_≥rsi°ít_ª£rve_ö_ªad_ª£rv©i⁄
 *
º
 = 
NULL
;

1218 
ªt
 = 0;

1221 
	`loggög
(
LOG_VERBOSE
,

1223 
sdev
->
iscsi_˘x
 ? sdev->iscsi_˘x->
öôüt‹_«me
 : sdev->
sgio_dev
);

1225 
èsk
 = 
	`scsi_cdb_≥rsi°ít_ª£rve_ö
(

1226 
SCSI_PERSISTENT_RESERVE_READ_RESERVATION
, 
buf_sz
);

1227 
	`as£π
(
èsk
 !
NULL
);

1229 
èsk
 = 
	`£nd_scsi_comm™d
(
sdev
,Åask, 
NULL
);

1230 i‡(
èsk
 =
NULL
) {

1231 
	`loggög
(
LOG_NORMAL
,

1233 
	`iscsi_gë_îr‹
(
sdev
->
iscsi_˘x
));

1236 i‡(
	`°©us_is_övÆid_›code
(
èsk
)) {

1237 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1238 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] PERSISTENT RESERVE IN isÇot implemented.");

1242 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

1243 
	`loggög
(
LOG_NORMAL
,

1245 
	`iscsi_gë_îr‹
(
sdev
->
iscsi_˘x
));

1246 
ªt
 = -1;

1247 
dun
;

1249 
º
 = 
	`scsi_d©aö_unm¨shÆl
(
èsk
);

1250 i‡(
º
 =
NULL
) {

1251 
	`loggög
(
LOG_NORMAL
,

1253 
	`iscsi_gë_îr‹
(
sdev
->
iscsi_˘x
));

1254 
ªt
 = -1;

1255 
dun
;

1257 i‡(
º
->
ª£rved
) {

1258 
	`loggög
(
LOG_NORMAL
,

1260 
ªt
 = -1;

1261 
dun
;

1264 
dun
:

1266 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1267  
ªt
;

1268 
	}
}

1271 
	$¥ö_ªp‹t_ˇps
(
scsi_devi˚
 *
sdev
, 
scsi_èsk
 **
ç
,

1272 
scsi_≥rsi°ít_ª£rve_ö_ªp‹t_ˇ∑bûôõs
 **
_rˇps
)

1274 c⁄° 
buf_sz
 = 16384;

1275 
scsi_≥rsi°ít_ª£rve_ö_ªp‹t_ˇ∑bûôõs
 *
rˇps
 = 
NULL
;

1277 
	`loggög
(
LOG_VERBOSE
, "Send PRIN/REPORT_CAPABILITIES");

1279 *
ç
 = 
	`scsi_cdb_≥rsi°ít_ª£rve_ö
(

1280 
SCSI_PERSISTENT_RESERVE_REPORT_CAPABILITIES
,

1281 
buf_sz
);

1282 
	`as£π
(*
ç
 !
NULL
);

1284 *
ç
 = 
	`£nd_scsi_comm™d
(
sdev
, *ç, 
NULL
);

1285 i‡(*
ç
 =
NULL
) {

1286 
	`loggög
(
LOG_NORMAL
,

1288 
	`iscsi_gë_îr‹
(
sdev
->
iscsi_˘x
));

1291 i‡(
	`°©us_is_övÆid_›code
(*
ç
)) {

1292 
	`loggög
(
LOG_NORMAL
,

1296 i‡((*
ç
)->
°©us
 !
SCSI_STATUS_GOOD
) {

1297 
	`loggög
(
LOG_NORMAL
,

1299 
	`iscsi_gë_îr‹
(
sdev
->
iscsi_˘x
));

1303 
rˇps
 = 
	`scsi_d©aö_unm¨shÆl
(*
ç
);

1304 i‡(
rˇps
 =
NULL
) {

1305 
	`loggög
(
LOG_NORMAL
,

1307 "d©a. %s", 
	`iscsi_gë_îr‹
(
sdev
->
iscsi_˘x
));

1310 i‡(
_rˇps
 !
NULL
)

1311 *
_rˇps
 = 
rˇps
;

1314 
	}
}

1317 
	$vîify_ªad_w‹ks
(
scsi_devi˚
 *
sdev
, *
buf
)

1319 
scsi_èsk
 *
èsk
;

1320 c⁄° 
uöt32_t
 
lba
 = 1;

1321 c⁄° 
blksize
 = 512;

1322 c⁄° 
uöt32_t
 
d©Æí
 = 1 * 
blksize
;

1323 
ªt
 = 0;

1330 
	`loggög
(
LOG_VERBOSE
, "Send READ10Åo verify READ works init=%s",

1331 
sdev
->
iscsi_˘x
 ? sdev->iscsi_˘x->
öôüt‹_«me
 : sdev->
sgio_dev
);

1333 
èsk
 = 
	`scsi_cdb_ªad10
(
lba
, 
d©Æí
, 
blksize
, 0, 0, 0, 0, 0);

1334 
	`as£π
(
èsk
 !
NULL
);

1336 
èsk
 = 
	`£nd_scsi_comm™d
(
sdev
,Åask, 
NULL
);

1337 i‡(
èsk
 =
NULL
) {

1338 
	`loggög
(
LOG_NORMAL
,

1340 
	`iscsi_gë_îr‹
(
sdev
->
iscsi_˘x
));

1344 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

1345 
	`loggög
(
LOG_NORMAL
,

1347 
	`iscsi_gë_îr‹
(
sdev
->
iscsi_˘x
));

1348 
ªt
 = -1;

1349 
dun
;

1351 
	`mem˝y
(
buf
, 
èsk
->
d©aö
.
d©a
,Åask->d©aö.
size
);

1353 
dun
:

1354 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1355  
ªt
;

1356 
	}
}

1359 
	$vîify_wrôe_w‹ks
(
scsi_devi˚
 *
sdev
, *
buf
)

1361 
scsi_èsk
 *
èsk
;

1362 
iscsi_d©a
 
d
;

1363 c⁄° 
uöt32_t
 
lba
 = 1;

1364 c⁄° 
blksize
 = 512;

1365 c⁄° 
uöt32_t
 
d©Æí
 = 1 * 
blksize
;

1366 
ªt
 = 0;

1373 
	`loggög
(
LOG_VERBOSE
, "Send WRITE10Åo verify WRITE works init=%s",

1374 
sdev
->
iscsi_˘x
 ? sdev->iscsi_˘x->
öôüt‹_«me
 : sdev->
sgio_dev
);

1376 
èsk
 = 
	`scsi_cdb_wrôe10
(
lba
, 
d©Æí
, 
blksize
, 0, 0, 0, 0, 0);

1377 
	`as£π
(
èsk
 !
NULL
);

1379 
d
.
d©a
 = 
buf
;

1380 
d
.
size
 = 
d©Æí
;

1382 
èsk
 = 
	`£nd_scsi_comm™d
(
sdev
,Åask, &
d
);

1383 i‡(
èsk
 =
NULL
) {

1384 
	`loggög
(
LOG_NORMAL
,

1386 
	`iscsi_gë_îr‹
(
sdev
->
iscsi_˘x
));

1389 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

1390 
	`loggög
(
LOG_NORMAL
,

1392 
	`iscsi_gë_îr‹
(
sdev
->
iscsi_˘x
));

1393 
ªt
 = -1;

1395 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1396  
ªt
;

1397 
	}
}

1400 
	$vîify_ªad_Áûs
(
scsi_devi˚
 *
sdev
, *
buf
)

1402 
scsi_èsk
 *
èsk
;

1403 c⁄° 
uöt32_t
 
lba
 = 1;

1404 c⁄° 
blksize
 = 512;

1405 c⁄° 
uöt32_t
 
d©Æí
 = 1 * 
blksize
;

1406 
ªt
 = 0;

1413 
	`loggög
(
LOG_VERBOSE
,

1415 
sdev
->
iscsi_˘x
 ? sdev->iscsi_˘x->
öôüt‹_«me
 : sdev->
sgio_dev
);

1417 
èsk
 = 
	`scsi_cdb_ªad10
(
lba
, 
d©Æí
, 
blksize
, 0, 0, 0, 0, 0);

1418 
	`as£π
(
èsk
 !
NULL
);

1420 
èsk
 = 
	`£nd_scsi_comm™d
(
sdev
,Åask, 
NULL
);

1421 i‡(
èsk
 =
NULL
) {

1422 
	`loggög
(
LOG_NORMAL
,

1424 
	`iscsi_gë_îr‹
(
sdev
->
iscsi_˘x
));

1428 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

1429 
	`mem˝y
(
buf
, 
èsk
->
d©aö
.
d©a
,Åask->d©aö.
size
);

1430 
	`loggög
(
LOG_NORMAL
,

1432 
ªt
 = -1;

1433 
dun
;

1440 
dun
:

1441 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1442  
ªt
;

1443 
	}
}

1446 
	$vîify_wrôe_Áûs
(
scsi_devi˚
 *
sdev
, *
buf
)

1448 
scsi_èsk
 *
èsk
;

1449 
iscsi_d©a
 
d
;

1450 c⁄° 
uöt32_t
 
lba
 = 1;

1451 c⁄° 
blksize
 = 512;

1452 c⁄° 
uöt32_t
 
d©Æí
 = 1 * 
blksize
;

1453 
ªt
 = 0;

1460 
	`loggög
(
LOG_VERBOSE
,

1462 
sdev
->
iscsi_˘x
 ? sdev->iscsi_˘x->
öôüt‹_«me
 : sdev->
sgio_dev
);

1464 
èsk
 = 
	`scsi_cdb_wrôe10
(
lba
, 
d©Æí
, 
blksize
, 0, 0, 0, 0, 0);

1465 
	`as£π
(
èsk
 !
NULL
);

1467 
d
.
d©a
 = 
buf
;

1468 
d
.
size
 = 
d©Æí
;

1470 
èsk
 = 
	`£nd_scsi_comm™d
(
sdev
,Åask, &
d
);

1471 i‡(
èsk
 =
NULL
) {

1472 
	`loggög
(
LOG_NORMAL
,

1474 
	`iscsi_gë_îr‹
(
sdev
->
iscsi_˘x
));

1478 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

1479 
	`loggög
(
LOG_NORMAL
,

1481 
ªt
 = -1;

1482 
dun
;

1489 
dun
:

1490 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1491  
ªt
;

1492 
	}
}

1495 
	$synchr⁄izeˇche10
(
scsi_devi˚
 *
sdev
, 
uöt32_t
 
lba
, 
num
, 
sync_nv
, 
immed
, 
°©us
, 
scsi_£n£_key
 
key
, *
ascq
, 
num_ascq
)

1497 
scsi_èsk
 *
èsk
;

1498 
ªt
;

1500 
	`loggög
(
LOG_VERBOSE
, "Send SYNCHRONIZECACHE10 (Expecting %s) LBA:%d"

1502 
	`scsi_°©us_°r
(
°©us
),

1503 
lba
, 
num
, 
sync_nv
, 
immed
);

1505 
èsk
 = 
	`scsi_cdb_synchr⁄izeˇche10
(
lba
, 
num_blocks
, 
sync_nv
, 
immed
);

1506 
	`as£π
(
èsk
 !
NULL
);

1508 
èsk
 = 
	`£nd_scsi_comm™d
(
sdev
,Åask, 
NULL
);

1510 
ªt
 = 
	`check_ªsu…
("SYNCHRONIZECACHE10", 
sdev
, 
èsk
, 
°©us
, 
key
, 
ascq
, 
num_ascq
);

1511 i‡(
èsk
) {

1512 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1514  
ªt
;

1515 
	}
}

1518 
	$synchr⁄izeˇche16
(
scsi_devi˚
 *
sdev
, 
uöt64_t
 
lba
, 
num
, 
sync_nv
, 
immed
, 
°©us
, 
scsi_£n£_key
 
key
, *
ascq
, 
num_ascq
)

1520 
scsi_èsk
 *
èsk
;

1521 
ªt
;

1523 
	`loggög
(
LOG_VERBOSE
, "Send SYNCHRONIZECACHE16 (Expecting %s) LBA:%"

1524 
PRIu64
 " blocks:%d sync_nv:%d immed:%d",

1525 
	`scsi_°©us_°r
(
°©us
),

1526 
lba
, 
num
, 
sync_nv
, 
immed
);

1528 
èsk
 = 
	`scsi_cdb_synchr⁄izeˇche16
(
lba
, 
num_blocks
, 
sync_nv
, 
immed
);

1529 
	`as£π
(
èsk
 !
NULL
);

1531 
èsk
 = 
	`£nd_scsi_comm™d
(
sdev
,Åask, 
NULL
);

1533 
ªt
 = 
	`check_ªsu…
("SYNCHRONIZECACHE16", 
sdev
, 
èsk
, 
°©us
, 
key
, 
ascq
, 
num_ascq
);

1534 i‡(
èsk
) {

1535 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1537  
ªt
;

1538 
	}
}

1540 
	$ßnôize
(
scsi_devi˚
 *
sdev
, 
immed
, 
au£
, 
ß
, 
∑øm_Àn
, 
iscsi_d©a
 *
d©a
, 
°©us
, 
scsi_£n£_key
 
key
, *
ascq
, 
num_ascq
)

1542 
scsi_èsk
 *
èsk
;

1543 
ªt
;

1545 
	`loggög
(
LOG_VERBOSE
, "Send SANITIZE (Expecting %s) IMMED:%d AUSE:%d "

1547 
	`scsi_°©us_°r
(
°©us
),

1548 
immed
, 
au£
, 
ß
, 
∑øm_Àn
);

1550 i‡(!
d©a_loss
) {

1551 
	`¥ötf
("--dataloss flag isÇot set in. Skipping sanitize\n");

1555 
èsk
 = 
	`scsi_cdb_ßnôize
(
immed
, 
au£
, 
ß
, 
∑øm_Àn
);

1557 
	`as£π
(
èsk
 !
NULL
);

1559 
èsk
 = 
	`£nd_scsi_comm™d
(
sdev
,Åask, 
d©a
);

1561 
ªt
 = 
	`check_ªsu…
("SANITIZE", 
sdev
, 
èsk
, 
°©us
, 
key
, 
ascq
, 
num_ascq
);

1562 i‡(
èsk
) {

1563 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1565  
ªt
;

1566 
	}
}

1568 
	$°¨t°›unô
(
scsi_devi˚
 *
sdev
, 
immed
, 
pcm
, 
pc
, 
no_Êush
, 
l€j
, 
°¨t
, 
°©us
, 
scsi_£n£_key
 
key
, *
ascq
, 
num_ascq
)

1570 
scsi_èsk
 *
èsk
;

1571 
ªt
;

1573 
	`loggög
(
LOG_VERBOSE
, "Send STARTSTOPUNIT (Expecting %s) IMMED:%d "

1575 
	`scsi_°©us_°r
(
°©us
),

1576 
immed
, 
pcm
, 
pc
, 
no_Êush
, 
l€j
, 
°¨t
);

1578 
èsk
 = 
	`scsi_cdb_°¨t°›unô
(
immed
, 
pcm
, 
pc
, 
no_Êush
, 
l€j
, 
°¨t
);

1579 
	`as£π
(
èsk
 !
NULL
);

1581 
èsk
 = 
	`£nd_scsi_comm™d
(
sdev
,Åask, 
NULL
);

1583 
ªt
 = 
	`check_ªsu…
("STARTSTOPUNIT", 
sdev
, 
èsk
, 
°©us
, 
key
, 
ascq
,

1584 
num_ascq
);

1585 i‡(
èsk
) {

1586 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1588  
ªt
;

1589 
	}
}

1592 
	$ã°unôªady
(
scsi_devi˚
 *
sdev
, 
°©us
, 
scsi_£n£_key
 
key
, *
ascq
, 
num_ascq
)

1594 
scsi_èsk
 *
èsk
;

1595 
ªt
;

1597 
	`loggög
(
LOG_VERBOSE
, "Send TESTUNITREADY (Expecting %s)",

1598 
	`scsi_°©us_°r
(
°©us
));

1600 
èsk
 = 
	`scsi_cdb_ã°unôªady
();

1601 
	`as£π
(
èsk
 !
NULL
);

1603 
èsk
 = 
	`£nd_scsi_comm™d
(
sdev
,Åask, 
NULL
);

1605 
ªt
 = 
	`check_ªsu…
("TESTUNITREADY", 
sdev
, 
èsk
, 
°©us
, 
key
, 
ascq
, 
num_ascq
);

1606 i‡(
èsk
) {

1607 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1609  
ªt
;

1610 
	}
}

1613 
	$ã°unôªady_˛ór_ua
(
scsi_devi˚
 *
sdev
)

1615 
scsi_èsk
 *
èsk
;

1616 
ªt
 = -1;

1618 
	`loggög
(
LOG_VERBOSE
,

1620 
sdev
->
iscsi_˘x
 ? sdev->iscsi_˘x->
öôüt‹_«me
 : sdev->
sgio_dev
);

1622 
èsk
 = 
	`scsi_cdb_ã°unôªady
();

1623 
	`as£π
(
èsk
 !
NULL
);

1625 
èsk
 = 
	`£nd_scsi_comm™d
(
sdev
,Åask, 
NULL
);

1626 i‡(
èsk
 =
NULL
) {

1627 
	`loggög
(
LOG_NORMAL
,

1629 
	`iscsi_gë_îr‹
(
sdev
->
iscsi_˘x
));

1630 
out
;

1632 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

1633 
	`loggög
(
LOG_NORMAL
,

1635 
	`iscsi_gë_îr‹
(
sdev
->
iscsi_˘x
));

1636 
out
;

1638 
	`loggög
(
LOG_VERBOSE
, "[OK] TESTUNITREADY doesÇotÑeturn unit "

1640 
ªt
 = 0;

1642 
out
:

1643 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1644  
ªt
;

1645 
	}
}

1651 
	$mode£n£6
(
scsi_devi˚
 *
sdev
, 
scsi_èsk
 **
out_èsk
, 
dbd
, 
scsi_mode£n£_∑ge_c⁄åﬁ
 
pc
, 
scsi_mode£n£_∑ge_code
 
∑ge_code
, 
sub_∑ge_code
, 
Æloc_Àn
, 
°©us
, 
scsi_£n£_key
 
key
, *
ascq
, 
num_ascq
)

1653 
scsi_èsk
 *
èsk
;

1654 
ªt
;

1656 
	`loggög
(
LOG_VERBOSE
, "Send MODESENSE6 (Expecting %s) ",

1657 
	`scsi_°©us_°r
(
°©us
));

1659 
èsk
 = 
	`scsi_cdb_mode£n£6
(
dbd
, 
pc
, 
∑ge_code
, 
sub_∑ge_code
, 
Æloc_Àn
);

1660 
	`as£π
(
èsk
 !
NULL
);

1662 
èsk
 = 
	`£nd_scsi_comm™d
(
sdev
,Åask, 
NULL
);

1664 
ªt
 = 
	`check_ªsu…
("MODESENSE6", 
sdev
, 
èsk
, 
°©us
, 
key
, 
ascq
, 
num_ascq
);

1665 i‡(
out_èsk
) {

1666 *
out_èsk
 = 
èsk
;

1667 } i‡(
èsk
) {

1668 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1670  
ªt
;

1671 
	}
}

1673 
	$mode£À˘6
(
scsi_devi˚
 *
sdev
, 
pf
, 
•
, 
scsi_mode_∑ge
 *
mp
, 
°©us
, 
scsi_£n£_key
 
key
, *
ascq
, 
num_ascq
)

1675 
scsi_èsk
 *
èsk
;

1676 
ªt
;

1677 
scsi_d©a
 *
d©a
;

1678 
iscsi_d©a
 
d
;

1680 
	`loggög
(
LOG_VERBOSE
, "Send MODESELECT6 (Expecting %s) ",

1681 
	`scsi_°©us_°r
(
°©us
));

1683 
èsk
 = 
	`scsi_cdb_mode£À˘6
(
pf
, 
•
, 255);

1684 
	`as£π
(
èsk
 !
NULL
);

1686 
d©a
 = 
	`scsi_mode£n£_d©aout_m¨shÆl
(
èsk
, 
mp
, 1);

1687 i‡(
d©a
 =
NULL
) {

1688 
	`loggög
(
LOG_VERBOSE
, "FailedÅo marshall MODESELECT6 data");

1689 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1693 
d
.
d©a
 = data->data;

1694 
d
.
size
 = 
d©a
->size;

1695 
èsk
->
cdb
[4] = 
d©a
->
size
;

1696 
èsk
->
expx„æí
 = 
d©a
->
size
;

1698 
èsk
 = 
	`£nd_scsi_comm™d
(
sdev
,Åask, &
d
);

1700 
ªt
 = 
	`check_ªsu…
("MODESELECT6", 
sdev
, 
èsk
, 
°©us
, 
key
, 
ascq
, 
num_ascq
);

1701 i‡(
èsk
) {

1702 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1704  
ªt
;

1705 
	}
}

1707 
	$com∑ª™dwrôe
(
scsi_devi˚
 *
sdev
, 
uöt64_t
 
lba
,

1708 *
d©a
, 
uöt32_t
 
d©Æí
, 
blocksize
,

1709 
wΩrŸe˘
, 
dpo
,

1710 
fua
, 
group_numbî
,

1711 
°©us
, 
scsi_£n£_key
 
key
, *
ascq
, 
num_ascq
)

1713 
scsi_èsk
 *
èsk
;

1714 
iscsi_d©a
 
d
;

1715 
ªt
;

1717 
	`loggög
(
LOG_VERBOSE
, "Send COMPAREANDWRITE (Expecting %s) LBA:%"

1718 
PRIu64
 " LEN:%d WRPROTECT:%d",

1719 
	`scsi_°©us_°r
(
°©us
),

1720 
lba
, 
d©Æí
, 
wΩrŸe˘
);

1722 i‡(!
d©a_loss
) {

1723 
	`¥ötf
("--dataloss flag isÇot set in. Skipping write\n");

1727 
èsk
 = 
	`scsi_cdb_com∑ª™dwrôe
(
lba
, 
d©Æí
, 
blocksize
, 
wΩrŸe˘
,

1728 
dpo
, 
fua
, 0, 
group_numbî
);

1729 
	`as£π
(
èsk
 !
NULL
);

1731 
d
.
d©a
 = data;

1732 
d
.
size
 = 
d©Æí
;

1733 
èsk
 = 
	`£nd_scsi_comm™d
(
sdev
,Åask, &
d
);

1735 
ªt
 = 
	`check_ªsu…
("COMPAREANDWRITE", 
sdev
, 
èsk
, 
°©us
, 
key
, 
ascq
, 
num_ascq
);

1736 i‡(
èsk
) {

1737 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1739  
ªt
;

1740 
	}
}

1742 
	$gë_lba_°©us
(
scsi_devi˚
 *
sdev
, 
scsi_èsk
 **
out_èsk
, 
uöt64_t
 
lba
, 
uöt32_t
 
Àn
, 
°©us
, 
scsi_£n£_key
 
key
, *
ascq
, 
num_ascq
)

1744 
scsi_èsk
 *
èsk
;

1745 
ªt
;

1747 
	`loggög
(
LOG_VERBOSE
, "Síd GET_LBA_STATUS (Ex≥˘ög %sËLBA:%" 
PRIu64


1749 
	`scsi_°©us_°r
(
°©us
),

1750 
lba
, 
Àn
);

1752 
èsk
 = 
	`scsi_cdb_gë_lba_°©us
(
lba
, 
Àn
);

1753 
	`as£π
(
èsk
 !
NULL
);

1755 
èsk
 = 
	`£nd_scsi_comm™d
(
sdev
,Åask, 
NULL
);

1757 
ªt
 = 
	`check_ªsu…
("GET_LBA_STATUS", 
sdev
, 
èsk
, 
°©us
, 
key
, 
ascq
, 
num_ascq
);

1758 i‡(
out_èsk
) {

1759 *
out_èsk
 = 
èsk
;

1760 } i‡(
èsk
) {

1761 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1763  
ªt
;

1764 
	}
}

1767 
	$¥e„tch10
(
scsi_devi˚
 *
sdev
, 
uöt32_t
 
lba
, 
num
, 
immed
, 
group
, 
°©us
, 
scsi_£n£_key
 
key
, *
ascq
, 
num_ascq
)

1769 
scsi_èsk
 *
èsk
;

1770 
ªt
;

1772 
	`loggög
(
LOG_VERBOSE
, "Send PREFETCH10 (Expecting %s) LBA:%d blocks:%d"

1774 
	`scsi_°©us_°r
(
°©us
),

1775 
lba
, 
num
, 
immed
, 
group
);

1777 
èsk
 = 
	`scsi_cdb_¥e„tch10
(
lba
, 
num
, 
immed
, 
group
);

1778 
	`as£π
(
èsk
 !
NULL
);

1780 
èsk
 = 
	`£nd_scsi_comm™d
(
sdev
,Åask, 
NULL
);

1782 
ªt
 = 
	`check_ªsu…
("PREFETCH10", 
sdev
, 
èsk
, 
°©us
, 
key
, 
ascq
, 
num_ascq
);

1783 i‡(
èsk
) {

1784 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1786  
ªt
;

1787 
	}
}

1790 
	$¥e„tch16
(
scsi_devi˚
 *
sdev
, 
uöt64_t
 
lba
, 
num
, 
immed
, 
group
, 
°©us
, 
scsi_£n£_key
 
key
, *
ascq
, 
num_ascq
)

1792 
scsi_èsk
 *
èsk
;

1793 
ªt
;

1795 
	`loggög
(
LOG_VERBOSE
, "Síd PREFETCH16 (Ex≥˘ög %sËLBA:%" 
PRIu64


1797 
	`scsi_°©us_°r
(
°©us
),

1798 
lba
, 
num
, 
immed
, 
group
);

1800 
èsk
 = 
	`scsi_cdb_¥e„tch16
(
lba
, 
num
, 
immed
, 
group
);

1801 
	`as£π
(
èsk
 !
NULL
);

1803 
èsk
 = 
	`£nd_scsi_comm™d
(
sdev
,Åask, 
NULL
);

1805 
ªt
 = 
	`check_ªsu…
("PREFETCH16", 
sdev
, 
èsk
, 
°©us
, 
key
, 
ascq
, 
num_ascq
);

1806 i‡(
èsk
) {

1807 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1809  
ªt
;

1810 
	}
}

1813 
	$¥evíèŒow
(
scsi_devi˚
 *
sdev
, 
¥evít
)

1815 
scsi_èsk
 *
èsk
;

1817 
	`loggög
(
LOG_VERBOSE
, "Síd PREVENTALLOWÖªvít:%d", 
¥evít
);

1818 
èsk
 = 
	`scsi_cdb_¥evíèŒow
(
¥evít
);

1819 
	`as£π
(
èsk
 !
NULL
);

1821 
èsk
 = 
	`£nd_scsi_comm™d
(
sdev
,Åask, 
NULL
);

1822 i‡(
èsk
 =
NULL
) {

1823 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo send PREVENTALLOW "

1824 "comm™d: %s", 
	`iscsi_gë_îr‹
(
sdev
->
iscsi_˘x
));

1827 i‡(
	`°©us_is_övÆid_›code
(
èsk
)) {

1828 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] PREVENTALLOW isÇot implemented onÅarget");

1829 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1832 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

1833 
	`loggög
(
LOG_NORMAL
, "[FAILED] PREVENTALLOW command: "

1834 "Áûed wôh sí£. %s", 
	`iscsi_gë_îr‹
(
sdev
->
iscsi_˘x
));

1835 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1839 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1840 
	`loggög
(
LOG_VERBOSE
, "[OK] PREVENTALLOWÑeturned SUCCESS.");

1842 
	}
}

1845 
	$ªad6
(
scsi_devi˚
 *
sdev
, 
scsi_èsk
 **
out_èsk
, 
uöt32_t
 
lba
,

1846 
uöt32_t
 
d©Æí
, 
blocksize
,

1847 *
d©a
,

1848 
°©us
, 
scsi_£n£_key
 
key
, *
ascq
, 
num_ascq
)

1850 
scsi_èsk
 *
èsk
;

1851 
ªt
;

1853 
	`loggög
(
LOG_VERBOSE
, "Send READ6 (Expecting %s) LBA:%d blocks:%d",

1854 
	`scsi_°©us_°r
(
°©us
),

1855 
lba
, 
d©Æí
 / 
blocksize
);

1857 
èsk
 = 
	`scsi_cdb_ªad6
(
lba
, 
d©Æí
, 
blocksize
);

1858 
	`as£π
(
èsk
 !
NULL
);

1860 
èsk
 = 
	`£nd_scsi_comm™d
(
sdev
,Åask, 
NULL
);

1862 
ªt
 = 
	`check_ªsu…
("READ6", 
sdev
, 
èsk
, 
°©us
, 
key
, 
ascq
, 
num_ascq
);

1863 i‡(
d©a
 && 
èsk
) {

1864 
	`mem˝y
(
d©a
, 
èsk
->
d©aö
.d©a,Åask->d©aö.
size
);

1866 i‡(
out_èsk
) {

1867 *
out_èsk
 = 
èsk
;

1868 } i‡(
èsk
) {

1869 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1871  
ªt
;

1872 
	}
}

1875 
	$ªad10
(
scsi_devi˚
 *
sdev
, 
scsi_èsk
 **
out_èsk
,

1876 
uöt32_t
 
lba
,

1877 
uöt32_t
 
d©Æí
, 
blocksize
, 
rd¥Ÿe˘
,

1878 
dpo
, 
fua
, 
fua_nv
, 
group
,

1879 *
d©a
,

1880 
°©us
, 
scsi_£n£_key
 
key
, *
ascq
, 
num_ascq
)

1882 
scsi_èsk
 *
èsk
;

1883 
ªt
;

1885 
	`loggög
(
LOG_VERBOSE
, "Send READ10 (Expecting %s) LBA:%d"

1887 
	`scsi_°©us_°r
(
°©us
),

1888 
lba
, 
d©Æí
 / 
blocksize
, 
rd¥Ÿe˘
,

1889 
dpo
, 
fua
, 
fua_nv
, 
group
);

1891 
èsk
 = 
	`scsi_cdb_ªad10
(
lba
, 
d©Æí
, 
blocksize
, 
rd¥Ÿe˘
,

1892 
dpo
, 
fua
, 
fua_nv
, 
group
);

1893 
	`as£π
(
èsk
 !
NULL
);

1895 
èsk
 = 
	`£nd_scsi_comm™d
(
sdev
,Åask, 
NULL
);

1897 
ªt
 = 
	`check_ªsu…
("READ10", 
sdev
, 
èsk
, 
°©us
, 
key
, 
ascq
, 
num_ascq
);

1898 i‡(
d©a
 && 
èsk
) {

1899 
	`mem˝y
(
d©a
, 
èsk
->
d©aö
.d©a,Åask->d©aö.
size
);

1901 i‡(
out_èsk
) {

1902 *
out_èsk
 = 
èsk
;

1903 } i‡(
èsk
) {

1904 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1906  
ªt
;

1907 
	}
}

1910 
	$ªad12
(
scsi_devi˚
 *
sdev
, 
scsi_èsk
 **
out_èsk
,

1911 
uöt32_t
 
lba
,

1912 
uöt32_t
 
d©Æí
, 
blocksize
, 
rd¥Ÿe˘
,

1913 
dpo
, 
fua
, 
fua_nv
, 
group
,

1914 *
d©a
,

1915 
°©us
, 
scsi_£n£_key
 
key
, *
ascq
, 
num_ascq
)

1917 
scsi_èsk
 *
èsk
;

1918 
ªt
;

1920 
	`loggög
(
LOG_VERBOSE
, "Send READ12 (Expecting %s) LBA:%d"

1922 
	`scsi_°©us_°r
(
°©us
),

1923 
lba
, 
d©Æí
 / 
blocksize
, 
rd¥Ÿe˘
,

1924 
dpo
, 
fua
, 
fua_nv
, 
group
);

1926 
èsk
 = 
	`scsi_cdb_ªad12
(
lba
, 
d©Æí
, 
blocksize
, 
rd¥Ÿe˘
,

1927 
dpo
, 
fua
, 
fua_nv
, 
group
);

1928 
	`as£π
(
èsk
 !
NULL
);

1930 
èsk
 = 
	`£nd_scsi_comm™d
(
sdev
,Åask, 
NULL
);

1932 
ªt
 = 
	`check_ªsu…
("READ12", 
sdev
, 
èsk
, 
°©us
, 
key
, 
ascq
, 
num_ascq
);

1933 i‡(
d©a
 && 
èsk
) {

1934 
	`mem˝y
(
d©a
, 
èsk
->
d©aö
.d©a,Åask->d©aö.
size
);

1936 i‡(
out_èsk
) {

1937 *
out_èsk
 = 
èsk
;

1938 } i‡(
èsk
) {

1939 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1941  
ªt
;

1942 
	}
}

1945 
	$ªad16
(
scsi_devi˚
 *
sdev
, 
scsi_èsk
 **
out_èsk
,

1946 
uöt64_t
 
lba
,

1947 
uöt32_t
 
d©Æí
, 
blocksize
, 
rd¥Ÿe˘
,

1948 
dpo
, 
fua
, 
fua_nv
, 
group
,

1949 *
d©a
,

1950 
°©us
, 
scsi_£n£_key
 
key
, *
ascq
, 
num_ascq
)

1952 
scsi_èsk
 *
èsk
;

1953 
ªt
;

1955 
	`loggög
(
LOG_VERBOSE
, "Síd READ16 (Ex≥˘ög %sËLBA:%" 
PRIu64


1957 
	`scsi_°©us_°r
(
°©us
),

1958 
lba
, 
d©Æí
 / 
blocksize
, 
rd¥Ÿe˘
,

1959 
dpo
, 
fua
, 
fua_nv
, 
group
);

1961 
èsk
 = 
	`scsi_cdb_ªad16
(
lba
, 
d©Æí
, 
blocksize
, 
rd¥Ÿe˘
,

1962 
dpo
, 
fua
, 
fua_nv
, 
group
);

1963 
	`as£π
(
èsk
 !
NULL
);

1965 
èsk
 = 
	`£nd_scsi_comm™d
(
sdev
,Åask, 
NULL
);

1967 
ªt
 = 
	`check_ªsu…
("READ16", 
sdev
, 
èsk
, 
°©us
, 
key
, 
ascq
, 
num_ascq
);

1968 i‡(
d©a
 && 
èsk
) {

1969 
	`mem˝y
(
d©a
, 
èsk
->
d©aö
.d©a,Åask->d©aö.
size
);

1971 i‡(
out_èsk
) {

1972 *
out_èsk
 = 
èsk
;

1973 } i‡(
èsk
) {

1974 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1976  
ªt
;

1977 
	}
}

1980 
	$ªadˇ∑côy10
(
scsi_devi˚
 *
sdev
, 
scsi_èsk
 **
out_èsk
, 
uöt32_t
 
lba
, 
pmi
, 
°©us
, 
scsi_£n£_key
 
key
, *
ascq
, 
num_ascq
)

1982 
scsi_èsk
 *
èsk
;

1983 
ªt
;

1985 
	`loggög
(
LOG_VERBOSE
, "Send READCAPACITY10 (Expecting %s) LBA:%d"

1987 
	`scsi_°©us_°r
(
°©us
),

1988 
lba
, 
pmi
);

1990 
èsk
 = 
	`scsi_cdb_ªadˇ∑côy10
(
lba
, 
pmi
);

1991 
	`as£π
(
èsk
 !
NULL
);

1993 
èsk
 = 
	`£nd_scsi_comm™d
(
sdev
,Åask, 
NULL
);

1995 
ªt
 = 
	`check_ªsu…
("READCAPACITY10", 
sdev
, 
èsk
, 
°©us
, 
key
, 
ascq
, 
num_ascq
);

1996 i‡(
out_èsk
) {

1997 *
out_èsk
 = 
èsk
;

1998 } i‡(
èsk
) {

1999 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2001  
ªt
;

2002 
	}
}

2005 
	$ªadˇ∑côy16
(
scsi_devi˚
 *
sdev
, 
scsi_èsk
 **
out_èsk
, 
Æloc_Àn
, 
°©us
, 
scsi_£n£_key
 
key
, *
ascq
, 
num_ascq
)

2007 
scsi_èsk
 *
èsk
;

2008 
ªt
;

2010 
	`loggög
(
LOG_VERBOSE
, "Send READCAPACITY16 (Expecting %s)",

2011 
	`scsi_°©us_°r
(
°©us
));

2013 
èsk
 = 
	`scsi_cdb_£rvi˚a˘i⁄ö16
(
SCSI_READCAPACITY16
, 
Æloc_Àn
);

2014 
	`as£π
(
èsk
 !
NULL
);

2016 
èsk
 = 
	`£nd_scsi_comm™d
(
sdev
,Åask, 
NULL
);

2018 
ªt
 = 
	`check_ªsu…
("READCAPACITY16", 
sdev
, 
èsk
, 
°©us
, 
key
, 
ascq
, 
num_ascq
);

2019 i‡(
out_èsk
) {

2020 *
out_èsk
 = 
èsk
;

2021 } i‡(
èsk
) {

2022 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2024  
ªt
;

2025 
	}
}

2028 
	$ªadde„˘d©a10
(
scsi_devi˚
 *
sdev
, 
scsi_èsk
 **
out_èsk
,

2029 
ªq_∂i°
, 
ªq_gli°
,

2030 
de„˘_li°_f‹m©
, 
uöt16_t
 
Æloc_Àn
,

2031 
°©us
, 
scsi_£n£_key
 
key
, *
ascq
, 
num_ascq
)

2033 
scsi_èsk
 *
èsk
;

2034 
ªt
;

2036 
	`loggög
(
LOG_VERBOSE
, "Send READDEFECTDATA10 (Expecting %s)"

2038 
	`scsi_°©us_°r
(
°©us
),

2039 
ªq_∂i°
, 
ªq_gli°
, 
de„˘_li°_f‹m©
);

2041 
èsk
 = 
	`scsi_cdb_ªadde„˘d©a10
(
ªq_∂i°
, 
ªq_gli°
,

2042 
de„˘_li°_f‹m©
, 
Æloc_Àn
);

2043 
	`as£π
(
èsk
 !
NULL
);

2045 
èsk
 = 
	`£nd_scsi_comm™d
(
sdev
,Åask, 
NULL
);

2047 
ªt
 = 
	`check_ªsu…
("READDEFECTDATA10", 
sdev
, 
èsk
,

2048 
°©us
, 
key
, 
ascq
, 
num_ascq
);

2049 i‡(
out_èsk
) {

2050 *
out_èsk
 = 
èsk
;

2051 } i‡(
èsk
) {

2052 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2054  
ªt
;

2055 
	}
}

2058 
	$ªadde„˘d©a12
(
scsi_devi˚
 *
sdev
, 
scsi_èsk
 **
out_èsk
,

2059 
ªq_∂i°
, 
ªq_gli°
,

2060 
de„˘_li°_f‹m©
,

2061 
uöt32_t
 
addªss_des¸ùt‹_ödex
,

2062 
uöt32_t
 
Æloc_Àn
,

2063 
°©us
, 
scsi_£n£_key
 
key
, *
ascq
, 
num_ascq
)

2065 
scsi_èsk
 *
èsk
;

2066 
ªt
;

2068 
	`loggög
(
LOG_VERBOSE
, "Send READDEFECTDATA12 (Expecting %s)"

2070 
	`scsi_°©us_°r
(
°©us
),

2071 
ªq_∂i°
, 
ªq_gli°
, 
de„˘_li°_f‹m©
);

2073 
èsk
 = 
	`scsi_cdb_ªadde„˘d©a12
(
ªq_∂i°
, 
ªq_gli°
,

2074 
de„˘_li°_f‹m©
,

2075 
addªss_des¸ùt‹_ödex
,

2076 
Æloc_Àn
);

2077 
	`as£π
(
èsk
 !
NULL
);

2079 
èsk
 = 
	`£nd_scsi_comm™d
(
sdev
,Åask, 
NULL
);

2081 
ªt
 = 
	`check_ªsu…
("READDEFECTDATA12", 
sdev
, 
èsk
,

2082 
°©us
, 
key
, 
ascq
, 
num_ascq
);

2083 i‡(
out_èsk
) {

2084 *
out_èsk
 = 
èsk
;

2085 } i‡(
èsk
) {

2086 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2088  
ªt
;

2089 
	}
}

2092 
	$ªÀa£6
(
scsi_devi˚
 *
sdev
)

2094 
scsi_èsk
 *
èsk
;

2095 
i
, 
ªs
 = -1;

2097 
	`loggög
(
LOG_VERBOSE
, "Send RELEASE6");

2099 
i
 = 0; i < 3 && 
ªs
 != 0; ++i) {

2100 
èsk
 = 
	`scsi_cdb_ªÀa£6
();

2101 
	`as£π
(
èsk
 !
NULL
);

2103 
èsk
 = 
	`£nd_scsi_comm™d
(
sdev
,Åask, 
NULL
);

2104 i‡(
èsk
 =
NULL
) {

2105 
	`loggög
(
LOG_NORMAL
,

2107 
	`iscsi_gë_îr‹
(
sdev
->
iscsi_˘x
));

2108 
ªs
 = -1;

2111 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
 &&

2112 !(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


2113 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_UNIT_ATTENTION


2114 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_BUS_RESET
)) {

2115 
	`loggög
(
LOG_NORMAL
, "[FAILED] RELEASE6 command: "

2117 
	`iscsi_gë_îr‹
(
sdev
->
iscsi_˘x
));

2118 
ªs
 = -1;

2120 
ªs
 = 0;

2122 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2125 i‡(
ªs
 == 0)

2126 
	`loggög
(
LOG_VERBOSE
, "[OK] RELEASE6Ñeturned SUCCESS.");

2127  
ªs
;

2128 
	}
}

2130 
	$ªp‹t_suµ‹ãd_›codes
(
scsi_devi˚
 *
sdev
, 
scsi_èsk
 **
out_èsk
, 
r˘d
, 
›ti⁄s
, 
›code
, 
ß
, 
Æloc_Àn
, 
°©us
, 
scsi_£n£_key
 
key
, *
ascq
, 
num_ascq
)

2132 
scsi_èsk
 *
èsk
;

2133 
ªt
;

2135 
	`loggög
(
LOG_VERBOSE
, "Send REPORT_SUPPORTED_OPCODE (Expecting %s) "

2137 
	`scsi_°©us_°r
(
°©us
),

2138 
r˘d
, 
›ti⁄s
, 
›code
, 
ß
, 
Æloc_Àn
);

2140 
èsk
 = 
	`scsi_cdb_ªp‹t_suµ‹ãd_›codes
(
r˘d
, 
›ti⁄s
, 
›code
, 
ß
,

2141 
Æloc_Àn
);

2142 
	`as£π
(
èsk
 !
NULL
);

2144 
èsk
 = 
	`£nd_scsi_comm™d
(
sdev
,Åask, 
NULL
);

2146 
ªt
 = 
	`check_ªsu…
("REPORT_SUPPORTED_OPCODES", 
sdev
, 
èsk
, 
°©us
, 
key
, 
ascq
, 
num_ascq
);

2147 i‡(
out_èsk
) {

2148 *
out_èsk
 = 
èsk
;

2149 } i‡(
èsk
) {

2150 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2152  
ªt
;

2153 
	}
}

2156 
	$ª£rve6
(
scsi_devi˚
 *
sdev
)

2158 
scsi_èsk
 *
èsk
;

2159 
i
, 
ªs
 = -1;

2161 
	`loggög
(
LOG_VERBOSE
, "Send RESERVE6");

2163 
i
 = 0; i < 3 && 
ªs
 != 0; ++i) {

2164 
èsk
 = 
	`scsi_cdb_ª£rve6
();

2165 
	`as£π
(
èsk
 !
NULL
);

2167 
èsk
 = 
	`£nd_scsi_comm™d
(
sdev
,Åask, 
NULL
);

2168 i‡(
èsk
 =
NULL
) {

2169 
	`loggög
(
LOG_NORMAL
,

2171 
	`iscsi_gë_îr‹
(
sdev
->
iscsi_˘x
));

2172 
ªs
 = -1;

2175 i‡(
	`°©us_is_övÆid_›code
(
èsk
)) {

2176 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] RESERVE6 isÇot "

2178 
ªs
 = -2;

2179 } i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
 &&

2180 !(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


2181 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_UNIT_ATTENTION


2182 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_BUS_RESET
)) {

2183 
	`loggög
(
LOG_NORMAL
, "[FAILED] RESERVE6 command: "

2185 
	`iscsi_gë_îr‹
(
sdev
->
iscsi_˘x
));

2186 
ªs
 = -1;

2188 
ªs
 = 0;

2190 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2193 i‡(
ªs
 == 0)

2194 
	`loggög
(
LOG_VERBOSE
, "[OK] RESERVE6Ñeturned SUCCESS.");

2195  
ªs
;

2196 
	}
}

2199 
	$ª£rve6_c⁄Êi˘
(
scsi_devi˚
 *
sdev
)

2201 
scsi_èsk
 *
èsk
;

2202 
i
, 
ªs
 = -1;

2204 
	`loggög
(
LOG_VERBOSE
, "Send RESERVE6 (Expecting RESERVATION_CONFLICT)");

2206 
i
 = 0; i < 3 && 
ªs
 != 0; ++i) {

2207 
èsk
 = 
	`scsi_cdb_ª£rve6
();

2208 
	`as£π
(
èsk
 !
NULL
);

2210 
èsk
 = 
	`£nd_scsi_comm™d
(
sdev
,Åask, 
NULL
);

2211 i‡(
èsk
 =
NULL
) {

2212 
	`loggög
(
LOG_NORMAL
,

2214 
	`iscsi_gë_îr‹
(
sdev
->
iscsi_˘x
));

2215 
ªs
 = -1;

2218 i‡(
	`°©us_is_övÆid_›code
(
èsk
)) {

2219 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] RESERVE6 isÇot"

2221 
ªs
 = -2;

2222 } i‡(
èsk
->
°©us
 !
SCSI_STATUS_RESERVATION_CONFLICT
 &&

2223 !(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


2224 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_UNIT_ATTENTION


2225 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_BUS_RESET
)) {

2226 
	`loggög
(
LOG_NORMAL
, "[FAILED] RESERVE6 command: "

2228 
ªs
 = -1;

2230 
ªs
 = 0;

2232 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2235 i‡(
ªs
 == 0)

2236 
	`loggög
(
LOG_VERBOSE
,

2238  
ªs
;

2239 
	}
}

2242 
	$unm≠
(
scsi_devi˚
 *
sdev
, 
™ch‹
, 
unm≠_li°
 *
li°
, 
li°_Àn
, 
°©us
, 
scsi_£n£_key
 
key
, *
ascq
, 
num_ascq
)

2244 
scsi_èsk
 *
èsk
;

2245 *
d©a
;

2246 
iscsi_d©a
 
d
;

2247 
x„æí
;

2248 
i
;

2249 
ªt
;

2251 
	`loggög
(
LOG_VERBOSE
, "Send UNMAP (Expecting %s)Üist_len:%dánchor:%d",

2252 
	`scsi_°©us_°r
(
°©us
),

2253 
li°_Àn
, 
™ch‹
);

2255 i‡(!
d©a_loss
) {

2256 
	`¥ötf
("--dataloss flag isÇot set in. Skipping unmap\n");

2260 
x„æí
 = 8 + 
li°_Àn
 * 16;

2262 
èsk
 = 
	`scsi_cdb_unm≠
(
™ch‹
, 0, 
x„æí
);

2263 
	`as£π
(
èsk
 !
NULL
);

2265 
d©a
 = 
	`scsi_mÆloc
(
èsk
, 
x„æí
);

2266 i‡(
d©a
 =
NULL
) {

2267 
	`loggög
(
LOG_NORMAL
, "Out-of-memory: FailedÅo create "

2269 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2273 
	`scsi_£t_uöt16
(&
d©a
[0], 
x„æí
 - 2);

2274 
	`scsi_£t_uöt16
(&
d©a
[2], 
x„æí
 - 8);

2275 
i
 = 0; i < 
li°_Àn
; i++) {

2276 
	`scsi_£t_uöt32
(&
d©a
[8 + 16 * 
i
], 
li°
[i].
lba
 >> 32);

2277 
	`scsi_£t_uöt32
(&
d©a
[8 + 16 * 
i
 + 4], 
li°
[i].
lba
 & 0xffffffff);

2278 
	`scsi_£t_uöt32
(&
d©a
[8 + 16 * 
i
 + 8], 
li°
[i].
num
);

2281 
d
.
d©a
 = data;

2282 
d
.
size
 = 
x„æí
;

2284 
èsk
 = 
	`£nd_scsi_comm™d
(
sdev
,Åask, &
d
);

2286 
ªt
 = 
	`check_ªsu…
("UNMAP", 
sdev
, 
èsk
, 
°©us
, 
key
, 
ascq
, 
num_ascq
);

2287 i‡(
èsk
) {

2288 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2290  
ªt
;

2291 
	}
}

2294 
	$vîify10
(
scsi_devi˚
 *
sdev
, 
uöt32_t
 
lba
, uöt32_à
d©Æí
, 
blocksize
, 
v¥Ÿe˘
, 
dpo
, 
bytchk
, *
d©a
, 
°©us
, 
scsi_£n£_key
 
key
, *
ascq
, 
num_ascq
)

2297 
scsi_èsk
 *
èsk
;

2298 
iscsi_d©a
 
d
;

2299 
ªt
;

2301 
	`loggög
(
LOG_VERBOSE
, "Send VERIFY10 (Expecting %s) LBA:%d "

2303 
	`scsi_°©us_°r
(
°©us
),

2304 
lba
, 
d©Æí
 / 
blocksize
, 
v¥Ÿe˘
, 
dpo
, 
bytchk
);

2306 
èsk
 = 
	`scsi_cdb_vîify10
(
lba
, 
d©Æí
, 
v¥Ÿe˘
, 
dpo
, 
bytchk
, 
blocksize
);

2307 
	`as£π
(
èsk
 !
NULL
);

2309 
d
.
d©a
 = data;

2310 
d
.
size
 = 
d©Æí
;

2311 
èsk
 = 
	`£nd_scsi_comm™d
(
sdev
,Åask, &
d
);

2313 
ªt
 = 
	`check_ªsu…
("VERIFY10", 
sdev
, 
èsk
, 
°©us
, 
key
, 
ascq
, 
num_ascq
);

2314 i‡(
èsk
) {

2315 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2317  
ªt
;

2318 
	}
}

2321 
	$vîify12
(
scsi_devi˚
 *
sdev
, 
uöt32_t
 
lba
, uöt32_à
d©Æí
, 
blocksize
, 
v¥Ÿe˘
, 
dpo
, 
bytchk
, *
d©a
, 
°©us
, 
scsi_£n£_key
 
key
, *
ascq
, 
num_ascq
)

2323 
scsi_èsk
 *
èsk
;

2324 
iscsi_d©a
 
d
;

2325 
ªt
;

2327 
	`loggög
(
LOG_VERBOSE
, "Send VERIFY12 (Expecting %s) LBA:%d "

2329 
	`scsi_°©us_°r
(
°©us
),

2330 
lba
, 
d©Æí
 / 
blocksize
, 
v¥Ÿe˘
, 
dpo
, 
bytchk
);

2332 
èsk
 = 
	`scsi_cdb_vîify12
(
lba
, 
d©Æí
, 
v¥Ÿe˘
, 
dpo
, 
bytchk
, 
blocksize
);

2333 
	`as£π
(
èsk
 !
NULL
);

2335 
d
.
d©a
 = data;

2336 
d
.
size
 = 
d©Æí
;

2337 
èsk
 = 
	`£nd_scsi_comm™d
(
sdev
,Åask, &
d
);

2339 
ªt
 = 
	`check_ªsu…
("VERIFY12", 
sdev
, 
èsk
, 
°©us
, 
key
, 
ascq
, 
num_ascq
);

2340 i‡(
èsk
) {

2341 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2343  
ªt
;

2344 
	}
}

2347 
	$vîify16
(
scsi_devi˚
 *
sdev
, 
uöt64_t
 
lba
, 
uöt32_t
 
d©Æí
, 
blocksize
, 
v¥Ÿe˘
, 
dpo
, 
bytchk
, *
d©a
, 
°©us
, 
scsi_£n£_key
 
key
, *
ascq
, 
num_ascq
)

2349 
scsi_èsk
 *
èsk
;

2350 
iscsi_d©a
 
d
;

2351 
ªt
;

2353 
	`loggög
(
LOG_VERBOSE
, "Síd VERIFY16 (Ex≥˘ög %sËLBA:%" 
PRIu64


2355 
	`scsi_°©us_°r
(
°©us
),

2356 
lba
, 
d©Æí
 / 
blocksize
, 
v¥Ÿe˘
, 
dpo
, 
bytchk
);

2358 
èsk
 = 
	`scsi_cdb_vîify16
(
lba
, 
d©Æí
, 
v¥Ÿe˘
, 
dpo
, 
bytchk
, 
blocksize
);

2359 
	`as£π
(
èsk
 !
NULL
);

2361 
d
.
d©a
 = data;

2362 
d
.
size
 = 
d©Æí
;

2363 
èsk
 = 
	`£nd_scsi_comm™d
(
sdev
,Åask, &
d
);

2365 
ªt
 = 
	`check_ªsu…
("VERIFY16", 
sdev
, 
èsk
, 
°©us
, 
key
, 
ascq
, 
num_ascq
);

2366 i‡(
èsk
) {

2367 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2369  
ªt
;

2370 
	}
}

2373 
	$wrôe10
(
scsi_devi˚
 *
sdev
, 
uöt32_t
 
lba
, uöt32_à
d©Æí
, 
blocksize
, 
wΩrŸe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group
, *
d©a
, 
°©us
, 
scsi_£n£_key
 
key
, *
ascq
, 
num_ascq
)

2375 
scsi_èsk
 *
èsk
;

2376 
iscsi_d©a
 
d
;

2377 
ªt
;

2379 
	`loggög
(
LOG_VERBOSE
, "Send WRITE10 (Expecting %s) LBA:%d blocks:%d "

2381 
	`scsi_°©us_°r
(
°©us
),

2382 
lba
, 
d©Æí
 / 
blocksize
, 
wΩrŸe˘
,

2383 
dpo
, 
fua
, 
fua_nv
, 
group
);

2385 i‡(!
d©a_loss
) {

2386 
	`¥ötf
("--dataloss flag isÇot set in. Skipping write\n");

2390 
èsk
 = 
	`scsi_cdb_wrôe10
(
lba
, 
d©Æí
, 
blocksize
, 
wΩrŸe˘
,

2391 
dpo
, 
fua
, 
fua_nv
, 
group
);

2392 
	`as£π
(
èsk
 !
NULL
);

2394 
d
.
d©a
 = data;

2395 
d
.
size
 = 
d©Æí
;

2396 
èsk
 = 
	`£nd_scsi_comm™d
(
sdev
,Åask, &
d
);

2398 
ªt
 = 
	`check_ªsu…
("WRITE10", 
sdev
, 
èsk
, 
°©us
, 
key
, 
ascq
, 
num_ascq
);

2399 i‡(
èsk
) {

2400 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2402  
ªt
;

2403 
	}
}

2406 
	$wrôe12
(
scsi_devi˚
 *
sdev
, 
uöt32_t
 
lba
, uöt32_à
d©Æí
, 
blocksize
, 
wΩrŸe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group
, *
d©a
, 
°©us
, 
scsi_£n£_key
 
key
, *
ascq
, 
num_ascq
)

2408 
scsi_èsk
 *
èsk
;

2409 
iscsi_d©a
 
d
;

2410 
ªt
;

2412 
	`loggög
(
LOG_VERBOSE
, "Send WRITE12 (Expecting %s) LBA:%d blocks:%d "

2414 
	`scsi_°©us_°r
(
°©us
),

2415 
lba
, 
d©Æí
 / 
blocksize
, 
wΩrŸe˘
,

2416 
dpo
, 
fua
, 
fua_nv
, 
group
);

2418 i‡(!
d©a_loss
) {

2419 
	`¥ötf
("--dataloss flag isÇot set in. Skipping write\n");

2423 
èsk
 = 
	`scsi_cdb_wrôe12
(
lba
, 
d©Æí
, 
blocksize
, 
wΩrŸe˘
,

2424 
dpo
, 
fua
, 
fua_nv
, 
group
);

2425 
	`as£π
(
èsk
 !
NULL
);

2427 
d
.
d©a
 = data;

2428 
d
.
size
 = 
d©Æí
;

2429 
èsk
 = 
	`£nd_scsi_comm™d
(
sdev
,Åask, &
d
);

2431 
ªt
 = 
	`check_ªsu…
("WRITE12", 
sdev
, 
èsk
, 
°©us
, 
key
, 
ascq
, 
num_ascq
);

2432 i‡(
èsk
) {

2433 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2435  
ªt
;

2436 
	}
}

2439 
	$wrôe16
(
scsi_devi˚
 *
sdev
, 
uöt64_t
 
lba
, 
uöt32_t
 
d©Æí
, 
blocksize
, 
wΩrŸe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group
, *
d©a
, 
°©us
, 
scsi_£n£_key
 
key
, *
ascq
, 
num_ascq
)

2441 
scsi_èsk
 *
èsk
;

2442 
iscsi_d©a
 
d
;

2443 
ªt
;

2445 
	`loggög
(
LOG_VERBOSE
, "Síd WRITE16 (Ex≥˘ög %sËLBA:%" 
PRIu64


2447 
	`scsi_°©us_°r
(
°©us
),

2448 
lba
, 
d©Æí
 / 
blocksize
, 
wΩrŸe˘
,

2449 
dpo
, 
fua
, 
fua_nv
, 
group
);

2451 i‡(!
d©a_loss
) {

2452 
	`¥ötf
("--dataloss flag isÇot set in. Skipping write\n");

2456 
èsk
 = 
	`scsi_cdb_wrôe16
(
lba
, 
d©Æí
, 
blocksize
, 
wΩrŸe˘
,

2457 
dpo
, 
fua
, 
fua_nv
, 
group
);

2458 
	`as£π
(
èsk
 !
NULL
);

2460 
d
.
d©a
 = data;

2461 
d
.
size
 = 
d©Æí
;

2462 
	`£nd_scsi_comm™d
(
sdev
, 
èsk
, &
d
);

2464 
ªt
 = 
	`check_ªsu…
("WRITE16", 
sdev
, 
èsk
, 
°©us
, 
key
, 
ascq
, 
num_ascq
);

2465 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2467  
ªt
;

2468 
	}
}

2471 
	$wrôótomic16
(
scsi_devi˚
 *
sdev
, 
uöt64_t
 
lba
, 
uöt32_t
 
d©Æí
, 
blocksize
, 
wΩrŸe˘
, 
dpo
, 
fua
, 
group
, *
d©a
, 
°©us
, 
scsi_£n£_key
 
key
, *
ascq
, 
num_ascq
)

2473 
scsi_èsk
 *
èsk
;

2474 
iscsi_d©a
 
d
;

2475 
ªt
;

2477 
	`loggög
(
LOG_VERBOSE
, "Síd WRITEATOMIC16 (Ex≥˘ög %sËLBA:%" 
PRIu64


2479 
	`scsi_°©us_°r
(
°©us
),

2480 
lba
, 
d©Æí
 / 
blocksize
, 
wΩrŸe˘
,

2481 
dpo
, 
fua
, 
group
);

2483 i‡(!
d©a_loss
) {

2484 
	`¥ötf
("--dataloss flag isÇot set in. Skipping write\n");

2488 
èsk
 = 
	`scsi_cdb_wrôótomic16
(
lba
, 
d©Æí
, 
blocksize
, 
wΩrŸe˘
,

2489 
dpo
, 
fua
, 
group
);

2490 
	`as£π
(
èsk
 !
NULL
);

2492 
d
.
d©a
 = data;

2493 
d
.
size
 = 
d©Æí
;

2494 
	`£nd_scsi_comm™d
(
sdev
, 
èsk
, &
d
);

2496 
ªt
 = 
	`check_ªsu…
("WRITEATOMIC16", 
sdev
, 
èsk
, 
°©us
, 
key
, 
ascq
, 
num_ascq
);

2497 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2499  
ªt
;

2500 
	}
}

2503 
	$wrôeßme10
(
scsi_devi˚
 *
sdev
, 
uöt32_t
 
lba
, uöt32_à
d©Æí
, 
num
, 
™ch‹
, 
unm≠_Êag
, 
wΩrŸe˘
, 
group
, *
d©a
, 
°©us
, 
scsi_£n£_key
 
key
, *
ascq
, 
num_ascq
)

2505 
scsi_èsk
 *
èsk
;

2506 
iscsi_d©a
 
d
;

2507 
ªt
;

2509 
	`loggög
(
LOG_VERBOSE
, "Send WRITESAME10 (Expecting %s) LBA:%d blocks:%d "

2511 
	`scsi_°©us_°r
(
°©us
),

2512 
lba
, 
num
, 
wΩrŸe˘
, 
™ch‹
, 
unm≠_Êag
, 
group
);

2514 i‡(!
d©a_loss
) {

2515 
	`¥ötf
("--dataloss flag isÇot set in. Skipping write\n");

2519 
èsk
 = 
	`scsi_cdb_wrôeßme10
(
wΩrŸe˘
, 
™ch‹
, 
unm≠_Êag
, 
lba
, 
group
,

2520 
num
, 
d©Æí
);

2521 
	`as£π
(
èsk
 !
NULL
);

2523 i‡(
d©a
 !
NULL
) {

2524 
èsk
->
expx„æí
 = 
d©Æí
;

2526 
èsk
->
expx„æí
 = 0;

2527 
èsk
->
x„r_dú
 = 
SCSI_XFER_NONE
;

2530 
d
.
d©a
 = data;

2531 
d
.
size
 = 
d©Æí
;

2532 
èsk
 = 
	`£nd_scsi_comm™d
(
sdev
,Åask, &
d
);

2534 
ªt
 = 
	`check_ªsu…
("WRITESAME10", 
sdev
, 
èsk
, 
°©us
, 
key
, 
ascq
, 
num_ascq
);

2535 i‡(
èsk
) {

2536 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2538  
ªt
;

2539 
	}
}

2542 
	$wrôeßme16
(
scsi_devi˚
 *
sdev
, 
uöt64_t
 
lba
, 
uöt32_t
 
d©Æí
, 
num
, 
™ch‹
, 
unm≠_Êag
, 
wΩrŸe˘
, 
group
, *
d©a
, 
°©us
, 
scsi_£n£_key
 
key
, *
ascq
, 
num_ascq
)

2544 
scsi_èsk
 *
èsk
;

2545 
iscsi_d©a
 
d
;

2546 
ªt
;

2548 
	`loggög
(
LOG_VERBOSE
, "Síd WRITESAME16 (Ex≥˘ög %sËLBA:%" 
PRIu64


2550 
	`scsi_°©us_°r
(
°©us
),

2551 
lba
, 
num
, 
wΩrŸe˘
, 
™ch‹
, 
unm≠_Êag
, 
group
);

2553 i‡(!
d©a_loss
) {

2554 
	`¥ötf
("--dataloss flag isÇot set in. Skipping write\n");

2558 
èsk
 = 
	`scsi_cdb_wrôeßme16
(
wΩrŸe˘
, 
™ch‹
, 
unm≠_Êag
, 
lba
, 
group
,

2559 
num
, 
d©Æí
);

2560 
	`as£π
(
èsk
 !
NULL
);

2562 i‡(
d©a
 !
NULL
) {

2563 
èsk
->
expx„æí
 = 
d©Æí
;

2565 
èsk
->
expx„æí
 = 0;

2566 
èsk
->
x„r_dú
 = 
SCSI_XFER_NONE
;

2569 
d
.
d©a
 = data;

2570 
d
.
size
 = 
d©Æí
;

2571 
èsk
 = 
	`£nd_scsi_comm™d
(
sdev
,Åask, &
d
);

2573 
ªt
 = 
	`check_ªsu…
("WRITESAME16", 
sdev
, 
èsk
, 
°©us
, 
key
, 
ascq
, 
num_ascq
);

2574 i‡(
èsk
) {

2575 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2577  
ªt
;

2578 
	}
}

2581 
	$wrôevîify10
(
scsi_devi˚
 *
sdev
, 
uöt32_t
 
lba
,

2582 
uöt32_t
 
d©Æí
, 
blocksize
, 
wΩrŸe˘
,

2583 
dpo
, 
bytchk
, 
group
, *
d©a
,

2584 
°©us
, 
scsi_£n£_key
 
key
, *
ascq
, 
num_ascq
)

2586 
scsi_èsk
 *
èsk
;

2587 
iscsi_d©a
 
d
;

2588 
ªt
;

2590 
	`loggög
(
LOG_VERBOSE
, "Send WRITEVERIFY10 (Expecting %s) LBA:%d "

2592 
	`scsi_°©us_°r
(
°©us
),

2593 
lba
, 
d©Æí
 / 
blocksize
, 
wΩrŸe˘
,

2594 
dpo
, 
bytchk
, 
group
);

2596 i‡(!
d©a_loss
) {

2597 
	`¥ötf
("--dataloss flag isÇot set in. Skipping write\n");

2601 
èsk
 = 
	`scsi_cdb_wrôevîify10
(
lba
, 
d©Æí
, 
blocksize
, 
wΩrŸe˘
,

2602 
dpo
, 
bytchk
, 
group
);

2603 
	`as£π
(
èsk
 !
NULL
);

2605 
d
.
d©a
 = data;

2606 
d
.
size
 = 
d©Æí
;

2607 
èsk
 = 
	`£nd_scsi_comm™d
(
sdev
,Åask, &
d
);

2609 
ªt
 = 
	`check_ªsu…
("WRITEVERIFY10", 
sdev
, 
èsk
, 
°©us
, 
key
, 
ascq
, 
num_ascq
);

2610 i‡(
èsk
) {

2611 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2613  
ªt
;

2614 
	}
}

2617 
	$wrôevîify12
(
scsi_devi˚
 *
sdev
, 
uöt32_t
 
lba
,

2618 
uöt32_t
 
d©Æí
, 
blocksize
, 
wΩrŸe˘
,

2619 
dpo
, 
bytchk
, 
group
, *
d©a
,

2620 
°©us
, 
scsi_£n£_key
 
key
, *
ascq
, 
num_ascq
)

2622 
scsi_èsk
 *
èsk
;

2623 
iscsi_d©a
 
d
;

2624 
ªt
;

2626 
	`loggög
(
LOG_VERBOSE
, "Send WRITEVERIFY12 (Expecting %s) LBA:%d "

2628 
	`scsi_°©us_°r
(
°©us
),

2629 
lba
, 
d©Æí
 / 
blocksize
, 
wΩrŸe˘
,

2630 
dpo
, 
bytchk
, 
group
);

2632 i‡(!
d©a_loss
) {

2633 
	`¥ötf
("--dataloss flag isÇot set in. Skipping write\n");

2637 
èsk
 = 
	`scsi_cdb_wrôevîify12
(
lba
, 
d©Æí
, 
blocksize
, 
wΩrŸe˘
,

2638 
dpo
, 
bytchk
, 
group
);

2639 
	`as£π
(
èsk
 !
NULL
);

2641 
d
.
d©a
 = data;

2642 
d
.
size
 = 
d©Æí
;

2643 
èsk
 = 
	`£nd_scsi_comm™d
(
sdev
,Åask, &
d
);

2645 
ªt
 = 
	`check_ªsu…
("WRITEVERIFY12", 
sdev
, 
èsk
, 
°©us
, 
key
, 
ascq
, 
num_ascq
);

2646 i‡(
èsk
) {

2647 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2649  
ªt
;

2650 
	}
}

2653 
	$wrôevîify16
(
scsi_devi˚
 *
sdev
, 
uöt64_t
 
lba
,

2654 
uöt32_t
 
d©Æí
, 
blocksize
, 
wΩrŸe˘
,

2655 
dpo
, 
bytchk
, 
group
, *
d©a
,

2656 
°©us
, 
scsi_£n£_key
 
key
, *
ascq
, 
num_ascq
)

2658 
scsi_èsk
 *
èsk
;

2659 
iscsi_d©a
 
d
;

2660 
ªt
;

2662 
	`loggög
(
LOG_VERBOSE
, "Síd WRITEVERIFY16 (Ex≥˘ög %sËLBA:%" 
PRIu64


2664 
	`scsi_°©us_°r
(
°©us
),

2665 
lba
, 
d©Æí
 / 
blocksize
, 
wΩrŸe˘
,

2666 
dpo
, 
bytchk
, 
group
);

2668 i‡(!
d©a_loss
) {

2669 
	`¥ötf
("--dataloss flag isÇot set in. Skipping write\n");

2673 
èsk
 = 
	`scsi_cdb_wrôevîify16
(
lba
, 
d©Æí
, 
blocksize
, 
wΩrŸe˘
,

2674 
dpo
, 
bytchk
, 
group
);

2675 
	`as£π
(
èsk
 !
NULL
);

2677 
d
.
d©a
 = data;

2678 
d
.
size
 = 
d©Æí
;

2679 
èsk
 = 
	`£nd_scsi_comm™d
(
sdev
,Åask, &
d
);

2681 
ªt
 = 
	`check_ªsu…
("WRITEVERIFY16", 
sdev
, 
èsk
, 
°©us
, 
key
, 
ascq
, 
num_ascq
);

2682 i‡(
èsk
) {

2683 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2685  
ªt
;

2686 
	}
}

2689 
	$öquúy
(
scsi_devi˚
 *
sdev
, 
scsi_èsk
 **
out_èsk
, 
evpd
, 
∑ge_code
, 
maxsize
, 
°©us
, 
scsi_£n£_key
 
key
, *
ascq
, 
num_ascq
)

2691 
scsi_èsk
 *
èsk
;

2692 
ªt
;

2694 
	`loggög
(
LOG_VERBOSE
, "Send INQUIRY (Expecting %s)Évpd:%d "

2696 
	`scsi_°©us_°r
(
°©us
),

2697 
evpd
, 
∑ge_code
, 
maxsize
);

2699 
èsk
 = 
	`scsi_cdb_öquúy
(
evpd
, 
∑ge_code
, 
maxsize
);

2700 
	`as£π
(
èsk
 !
NULL
);

2702 
èsk
 = 
	`£nd_scsi_comm™d
(
sdev
,Åask, 
NULL
);

2704 
ªt
 = 
	`check_ªsu…
("INQUIRY", 
sdev
, 
èsk
, 
°©us
, 
key
, 
ascq
, 
num_ascq
);

2705 i‡(
out_èsk
) {

2706 *
out_èsk
 = 
èsk
;

2707 } i‡(
èsk
) {

2708 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2710  
ªt
;

2711 
	}
}

2713 
scsi_comm™d_des¸ùt‹
 *

2714 
	$gë_comm™d_des¸ùt‹
(
›code
, 
ß
)

2716 
i
;

2718 i‡(
rs›
 =
NULL
) {

2719  
NULL
;

2722 
i
 = 0; i < 
rs›
->
num_des¸ùt‹s
; i++) {

2723 i‡(
rs›
->
des¸ùt‹s
[
i
].
›code
 == opcode

2724 && 
rs›
->
des¸ùt‹s
[
i
].
ß
 == sa) {

2725  &
rs›
->
des¸ùt‹s
[
i
];

2729  
NULL
;

2730 
	}
}

2732 
	$£t_swp
(
scsi_devi˚
 *
sdev
)

2734 
ªt
;

2735 
scsi_èsk
 *
£n£_èsk
 = 
NULL
;

2736 
scsi_mode_£n£
 *
ms
;

2737 
scsi_mode_∑ge
 *
mp
;

2739 
	`loggög
(
LOG_VERBOSE
, "Read CONTROLÖage");

2742 
ªt
 = 
	`mode£n£6
(
sdev
, &
£n£_èsk
, 1, 
SCSI_MODESENSE_PC_CHANGEABLE
,

2743 
SCSI_MODEPAGE_CONTROL
, 0, 255,

2744 
EXPECT_STATUS_GOOD
);

2745 i‡(
ªt
) {

2746 
	`loggög
(
LOG_NORMAL
, "FailedÅoÑead CONTROL modeÖage.");

2747 
föished
;

2749 
	`loggög
(
LOG_VERBOSE
, "[SUCCESS] CONTROLÖage fetched.");

2751 
ms
 = 
	`scsi_d©aö_unm¨shÆl
(
£n£_èsk
);

2752 i‡(
ms
 =
NULL
) {

2753 
	`loggög
(
LOG_NORMAL
, "failedÅo unmarshall mode sense datain "

2755 
ªt
 = -1;

2756 
föished
;

2759 i‡(
ms
->
∑ges
->
c⁄åﬁ
.
swp
 == 0) {

2760 
	`loggög
(
LOG_NORMAL
, "SWP isÇot changeable");

2761 
ªt
 = -2;

2762 
föished
;

2766 
ªt
 = 
	`mode£n£6
(
sdev
, &
£n£_èsk
, 1, 
SCSI_MODESENSE_PC_CURRENT
,

2767 
SCSI_MODEPAGE_CONTROL
, 0, 255,

2768 
EXPECT_STATUS_GOOD
);

2769 i‡(
ªt
) {

2770 
	`loggög
(
LOG_NORMAL
, "FailedÅoÑead CONTROL modeÖage.");

2771 
föished
;

2773 
	`loggög
(
LOG_VERBOSE
, "[SUCCESS] CONTROLÖage fetched.");

2775 
ms
 = 
	`scsi_d©aö_unm¨shÆl
(
£n£_èsk
);

2776 i‡(
ms
 =
NULL
) {

2777 
	`loggög
(
LOG_NORMAL
, "failedÅo unmarshall mode sense datain "

2779 
ªt
 = -1;

2780 
föished
;

2783 
mp
 = 
	`scsi_mode£n£_gë_∑ge
(
ms
, 
SCSI_MODEPAGE_CONTROL
, 0);

2784 i‡(
mp
 =
NULL
) {

2785 
	`loggög
(
LOG_NORMAL
, "failedÅoÑead control modeÖage");

2786 
ªt
 = -1;

2787 
föished
;

2791 
mp
->
ps
 = 0;

2793 
	`loggög
(
LOG_VERBOSE
, "Turn SWP ON");

2794 
mp
->
c⁄åﬁ
.
swp
 = 1;

2796 
ªt
 = 
	`mode£À˘6
(
sdev
, 1, 0, 
mp
,

2797 
EXPECT_STATUS_GOOD
);

2798 i‡(
ªt
) {

2799 
	`loggög
(
LOG_NORMAL
, "FailedÅo write CONTROL modeÖage.");

2800 
föished
;

2802 
	`loggög
(
LOG_VERBOSE
, "[SUCCESS] CONTROLÖage written.");

2804 
föished
:

2805 i‡(
£n£_èsk
 !
NULL
) {

2806 
	`scsi_‰ì_scsi_èsk
(
£n£_èsk
);

2808  
ªt
;

2809 
	}
}

2811 
	$˛ór_swp
(
scsi_devi˚
 *
sdev
)

2813 
ªt
;

2814 
scsi_èsk
 *
£n£_èsk
 = 
NULL
;

2815 
scsi_mode_£n£
 *
ms
;

2816 
scsi_mode_∑ge
 *
mp
;

2818 
	`loggög
(
LOG_VERBOSE
, "Read CONTROLÖage");

2819 
ªt
 = 
	`mode£n£6
(
sdev
, &
£n£_èsk
, 1, 
SCSI_MODESENSE_PC_CURRENT
,

2820 
SCSI_MODEPAGE_CONTROL
, 0, 255,

2821 
EXPECT_STATUS_GOOD
);

2822 i‡(
ªt
) {

2823 
	`loggög
(
LOG_NORMAL
, "FailedÅoÑead CONTROL modeÖage.");

2824 
föished
;

2826 
	`loggög
(
LOG_VERBOSE
, "[SUCCESS] CONTROLÖage fetched.");

2828 
ms
 = 
	`scsi_d©aö_unm¨shÆl
(
£n£_èsk
);

2829 i‡(
ms
 =
NULL
) {

2830 
	`loggög
(
LOG_NORMAL
, "failedÅo unmarshall mode sense datain "

2832 
ªt
 = -1;

2833 
föished
;

2835 
mp
 = 
	`scsi_mode£n£_gë_∑ge
(
ms
, 
SCSI_MODEPAGE_CONTROL
, 0);

2836 i‡(
mp
 =
NULL
) {

2837 
	`loggög
(
LOG_NORMAL
, "failedÅoÑead control modeÖage");

2838 
ªt
 = -1;

2839 
föished
;

2843 
mp
->
ps
 = 0;

2845 
	`loggög
(
LOG_VERBOSE
, "Turn SWP OFF");

2846 
mp
->
c⁄åﬁ
.
swp
 = 0;

2848 
ªt
 = 
	`mode£À˘6
(
sdev
, 1, 0, 
mp
,

2849 
EXPECT_STATUS_GOOD
);

2850 i‡(
ªt
) {

2851 
	`loggög
(
LOG_NORMAL
, "FailedÅo write CONTROL modeÖage.");

2852 
föished
;

2854 
	`loggög
(
LOG_VERBOSE
, "[SUCCESS] CONTROLÖage written.");

2856 
föished
:

2857 i‡(
£n£_èsk
 !
NULL
) {

2858 
	`scsi_‰ì_scsi_èsk
(
£n£_èsk
);

2860  
ªt
;

2861 
	}
}

2864 
	$exãndedc›y
(
scsi_devi˚
 *
sdev
, 
iscsi_d©a
 *
d©a
, 
°©us
, 
scsi_£n£_key
 
key
, *
ascq
, 
num_ascq
)

2866 
scsi_èsk
 *
èsk
;

2867 
ªt
;

2869 
	`loggög
(
LOG_VERBOSE
, "Send EXTENDED COPY (Expecting %s)",

2870 
	`scsi_°©us_°r
(
°©us
));

2872 i‡(!
d©a_loss
) {

2873 
	`loggög
(
LOG_NORMAL
, "--dataloss flag isÇot set in. SkippingÉxtendedcopy\n");

2877 
èsk
 = 
	`scsi_cdb_exãnded_c›y
(
d©a
->
size
);

2879 
	`as£π
(
èsk
 !
NULL
);

2881 
	`£nd_scsi_comm™d
(
sdev
, 
èsk
, 
d©a
);

2883 
ªt
 = 
	`check_ªsu…
("EXTENDEDCOPY", 
sdev
, 
èsk
, 
°©us
, 
key
, 
ascq
, 
num_ascq
);

2884 
	`scsi_‰ì_scsi_èsk
(
èsk
);

2886  
ªt
;

2887 
	}
}

2889 
	$gë_desc_Àn
(
ec_des¸_ty≥_code
 
desc_ty≥
)

2891 
desc_Àn
 = 0;

2892 
desc_ty≥
) {

2894 
BLK_TO_STRM_SEG_DESCR
:

2895 
STRM_TO_BLK_SEG_DESCR
:

2896 
desc_Àn
 = 0x18;

2898 
BLK_TO_BLK_SEG_DESCR
:

2899 
desc_Àn
 = 0x1C;

2901 
STRM_TO_STRM_SEG_DESCR
:

2902 
desc_Àn
 = 0x14;

2906 
IPV6_TGT_DESCR
:

2907 
IP_COPY_SVC_TGT_DESCR
:

2908 
desc_Àn
 = 64;

2910 
IDENT_DESCR_TGT_DESCR
:

2912 i‡(
desc_ty≥
 >= 0xE0 && desc_type <= 0xE9)

2913 
desc_Àn
 = 32;

2916  
desc_Àn
;

2917 
	}
}

2919 
	$p›uœã_idít_tgt_desc
(*
buf
, 
scsi_devi˚
 *
dev
)

2921 
ªt
;

2922 
scsi_èsk
 *
öq_di_èsk
 = 
NULL
;

2923 
scsi_öquúy_devi˚_idítifiˇti⁄
 *
öq_di
 = 
NULL
;

2924 
scsi_öquúy_devi˚_desig«t‹
 *
desig
, *
tgt_desig
 = 
NULL
;

2925 
scsi_desig«t‹_ty≥
 
¥ev_ty≥
 = 0;

2927 
ªt
 = 
	`öquúy
(
dev
, &
öq_di_èsk
, 1, 
SCSI_INQUIRY_PAGECODE_DEVICE_IDENTIFICATION
, 255, 
EXPECT_STATUS_GOOD
);

2928 i‡(
ªt
 < 0 || 
öq_di_èsk
 =
NULL
) {

2929 
	`loggög
(
LOG_NORMAL
, "FailedÅoÑead Device IdentificationÖage");

2930 
föished
;

2932 
öq_di
 = 
	`scsi_d©aö_unm¨shÆl
(
öq_di_èsk
);

2933 i‡(
öq_di
 =
NULL
) {

2934 
	`loggög
(
LOG_NORMAL
, "FailedÅo unmarshall inquiry datain blob");

2935 
föished
;

2939 
desig
 = 
öq_di
->
desig«t‹s
; desig; desig = desig->
√xt
) {

2940 
desig
->
desig«t‹_ty≥
) {

2941 
SCSI_DESIGNATOR_TYPE_VENDOR_SPECIFIC
:

2942 
SCSI_DESIGNATOR_TYPE_T10_VENDORT_ID
:

2943 
SCSI_DESIGNATOR_TYPE_EUI_64
:

2944 
SCSI_DESIGNATOR_TYPE_NAA
:

2945 i‡(
¥ev_ty≥
 <
desig
->
desig«t‹_ty≥
) {

2946 
tgt_desig
 = 
desig
;

2947 
¥ev_ty≥
 = 
desig
->
desig«t‹_ty≥
;

2954 i‡(
tgt_desig
 =
NULL
) {

2955 
	`loggög
(
LOG_NORMAL
, "No suitalbleÅarget descriptor format found");

2956 
föished
;

2959 
buf
[0] = 
tgt_desig
->
code_£t
;

2960 
buf
[1] = (
tgt_desig
->
desig«t‹_ty≥
 & 0xFË| (—gt_desig->
assocüti⁄
 & 3) << 4);

2961 
buf
[3] = 
tgt_desig
->
desig«t‹_Àngth
;

2962 
	`mem˝y
(
buf
 + 4, 
tgt_desig
->
desig«t‹
,Ågt_desig->
desig«t‹_Àngth
);

2964 
föished
:

2965 
	`scsi_‰ì_scsi_èsk
(
öq_di_èsk
);

2966 
	}
}

2968 
	$p›uœã_tgt_desc
(*
desc
, 
ec_des¸_ty≥_code
 
desc_ty≥
, 
luid_ty≥
, 
nul
, 
≥rùhîÆ_ty≥
, 
ªl_öô_p‹t_id
, 
∑d
, 
scsi_devi˚
 *
dev
)

2970 
desc
[0] = 
desc_ty≥
;

2971 
desc
[1] = (
luid_ty≥
 << 6Ë| (
nul
 << 5Ë| 
≥rùhîÆ_ty≥
;

2972 
desc
[2] = (
ªl_öô_p‹t_id
 >> 8) & 0xFF;

2973 
desc
[3] = 
ªl_öô_p‹t_id
 & 0xFF;

2975 i‡(
desc_ty≥
 =
IDENT_DESCR_TGT_DESCR
)

2976 
	`p›uœã_idít_tgt_desc
(
desc
+4, 
dev
);

2978 i‡(
≥rùhîÆ_ty≥
 == 0) {

2981 
desc
[28] = 
∑d
 << 2;

2982 
desc
[29] = (
block_size
 >> 16) & 0xFF;

2983 
desc
[30] = (
block_size
 >> 8) & 0xFF;

2984 
desc
[31] = 
block_size
 & 0xFF;

2986  
	`gë_desc_Àn
(
desc_ty≥
);

2987 
	}
}

2989 
	$p›uœã_£g_desc_hdr
(*
hdr
, 
ec_des¸_ty≥_code
 
desc_ty≥
, 
dc
, 
ˇt
, 
§c_ödex
, 
d°_ödex
)

2991 
desc_Àn
 = 
	`gë_desc_Àn
(
desc_ty≥
);

2993 
hdr
[0] = 
desc_ty≥
;

2994 
hdr
[1] = ((
dc
 << 1Ë| 
ˇt
) & 0xFF;

2995 
hdr
[2] = (
desc_Àn
 >> 8) & 0xFF;

2996 
hdr
[3] = (
desc_Àn
 - 
SEG_DESC_SRC_INDEX_OFFSET
) & 0xFF;

2997 
hdr
[4] = (
§c_ödex
 >> 8) & 0xFF;

2998 
hdr
[5] = 
§c_ödex
 & 0xFF;

2999 
hdr
[6] = (
d°_ödex
 >> 8) & 0xFF;

3000 
hdr
[7] = 
d°_ödex
 & 0xFF;

3002  
desc_Àn
;

3003 
	}
}

3005 
	$p›uœã_£g_desc_b2b
(*
desc
, 
dc
, 
ˇt
, 
§c_ödex
, 
d°_ödex
, 
num_blks
, 
uöt64_t
 
§c_lba
, uöt64_à
d°_lba
)

3007 
desc_Àn
 = 
	`p›uœã_£g_desc_hdr
(
desc
, 
BLK_TO_BLK_SEG_DESCR
, 
dc
, 
ˇt
, 
§c_ödex
, 
d°_ödex
);

3009 
desc
[10] = (
num_blks
 >> 8) & 0xFF;

3010 
desc
[11] = 
num_blks
 & 0xFF;

3011 
desc
[12] = (
§c_lba
 >> 56) & 0xFF;

3012 
desc
[13] = (
§c_lba
 >> 48) & 0xFF;

3013 
desc
[14] = (
§c_lba
 >> 40) & 0xFF;

3014 
desc
[15] = (
§c_lba
 >> 32) & 0xFF;

3015 
desc
[16] = (
§c_lba
 >> 24) & 0xFF;

3016 
desc
[17] = (
§c_lba
 >> 16) & 0xFF;

3017 
desc
[18] = (
§c_lba
 >> 8) & 0xFF;

3018 
desc
[19] = 
§c_lba
 & 0xFF;

3019 
desc
[20] = (
d°_lba
 >> 56) & 0xFF;

3020 
desc
[21] = (
d°_lba
 >> 48) & 0xFF;

3021 
desc
[22] = (
d°_lba
 >> 40) & 0xFF;

3022 
desc
[23] = (
d°_lba
 >> 32) & 0xFF;

3023 
desc
[24] = (
d°_lba
 >> 24) & 0xFF;

3024 
desc
[25] = (
d°_lba
 >> 16) & 0xFF;

3025 
desc
[26] = (
d°_lba
 >> 8) & 0xFF;

3026 
desc
[27] = 
d°_lba
 & 0xFF;

3028  
desc_Àn
;

3029 
	}
}

3031 
	$p›uœã_∑øm_hódî
(*
buf
, 
li°_id
, 
°r
, 
li°_id_ußge
, 
¥io
, 
tgt_desc_Àn
, 
£g_desc_Àn
, 
ölöe_d©a_Àn
)

3033 
buf
[0] = 
li°_id
;

3034 
buf
[1] = ((
°r
 & 1Ë<< 5Ë| ((
li°_id_ußge
 & 3Ë<< 3Ë| (
¥io
 & 7);

3035 
buf
[2] = (
tgt_desc_Àn
 >> 8) & 0xFF;

3036 
buf
[3] = 
tgt_desc_Àn
 & 0xFF;

3037 
buf
[8] = (
£g_desc_Àn
 >> 24) & 0xFF;

3038 
buf
[9] = (
£g_desc_Àn
 >> 16) & 0xFF;

3039 
buf
[10] = (
£g_desc_Àn
 >> 8) & 0xFF;

3040 
buf
[11] = 
£g_desc_Àn
 & 0xFF;

3041 
buf
[12] = (
ölöe_d©a_Àn
 >> 24) & 0xFF;

3042 
buf
[13] = (
ölöe_d©a_Àn
 >> 16) & 0xFF;

3043 
buf
[14] = (
ölöe_d©a_Àn
 >> 8) & 0xFF;

3044 
buf
[15] = 
ölöe_d©a_Àn
 & 0xFF;

3045 
	}
}

3047 
	$ª˚ive_c›y_ªsu…s
(
scsi_èsk
 **
èsk
, 
scsi_devi˚
 *
sdev
,

3048 
scsi_c›y_ªsu…s_ß
 
ß
, 
li°_id
,

3049 **
d©≠
, 
°©us
, 
scsi_£n£_key
 
key
,

3050 *
ascq
, 
num_ascq
)

3052 
ªt
;

3054 
	`loggög
(
LOG_VERBOSE
, "Send RECEIVE COPY RESULTS");

3056 *
èsk
 = 
	`scsi_cdb_ª˚ive_c›y_ªsu…s
(
ß
, 
li°_id
, 1024);

3057 
	`as£π
(
èsk
 !
NULL
);

3059 *
èsk
 = 
	`£nd_scsi_comm™d
(
sdev
, *èsk, 
NULL
);

3061 
ªt
 = 
	`check_ªsu…
("RECEIVECOPYRESULT", 
sdev
, *
èsk
, 
°©us
, 
key
, 
ascq
,

3062 
num_ascq
);

3063 i‡(
ªt
 < 0)

3064  
ªt
;

3066 i‡((*
èsk
)->
°©us
 =
SCSI_STATUS_GOOD
 && 
d©≠
 !
NULL
) {

3067 *
d©≠
 = 
	`scsi_d©aö_unm¨shÆl
(*
èsk
);

3068 i‡(*
d©≠
 =
NULL
) {

3069 
	`loggög
(
LOG_NORMAL
,

3071 
	`iscsi_gë_îr‹
(
sdev
->
iscsi_˘x
));

3076  
	`check_ªsu…
("RECEIVECOPYRESULT", 
sdev
, *
èsk
, 
°©us
, 
key
, 
ascq
,

3077 
num_ascq
);

3078 
	}
}

3080 
	#TEST_ISCSI_TUR_MAX_RETRIES
 5

	)

3083 
	$ã°_iscsi_tur_u¡û_good
(
scsi_devi˚
 *
iscsi_sd
, *
num_uas
)

3085 
num_turs
;

3087 i‡(
iscsi_sd
->
iscsi_˘x
 =
NULL
) {

3088 
	`loggög
(
LOG_NORMAL
, "invalid sd forÅur_until_good");

3089  -
EINVAL
;

3092 *
num_uas
 = 0;

3093 
num_turs
 = 0;Çum_tur†< 
TEST_ISCSI_TUR_MAX_RETRIES
;Çum_turs++) {

3094 
scsi_èsk
 *
tsk
;

3095 
tsk
 = 
	`iscsi_ã°unôªady_sync
(
iscsi_sd
->
iscsi_˘x
,

3096 
iscsi_sd
->
iscsi_lun
);

3097 i‡(
tsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

3098 
	`loggög
(
LOG_VERBOSE
, "TUR goodáfter %dÑetries",

3099 
num_turs
);

3101 } i‡((
tsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION
)

3102 && (
tsk
->
£n£
.
key
 =
SCSI_SENSE_UNIT_ATTENTION
)) {

3103 
	`loggög
(
LOG_VERBOSE
, "Got UA for TUR");

3104 (*
num_uas
)++;

3106 
	`loggög
(
LOG_NORMAL
, "unexpectedÇon-UA failure: %d,%d",

3107 
tsk
->
°©us
,Åsk->
£n£
.
key
);

3111  -
ETIMEDOUT
;

3112 
	}
}

3114 
uöt64_t


3115 
	$ã°_gë_˛ock_£c
()

3117 
uöt64_t
 
£cs
;

3118 
ªs
;

3120 #ifde‡
HAVE_CLOCK_GETTIME


3121 
time•ec
 
ts
;

3122 
ªs
 = 
	`˛ock_gëtime
(
CLOCK_MONOTONIC
, &
ts
);

3123 
£cs
 = 
ts
.
tv_£c
;

3125 
timevÆ
 
tv
;

3126 
ªs
 = 
	`gëtimeofday
(&
tv
, 
NULL
);

3127 
£cs
 = 
tv
.
tv_£c
;

3129 
	`as£π
(
ªs
 == 0);

3130  
£cs
;

3131 
	}
}

	@test-tool/iscsi-support.h

21 #i‚de‡ 
_ISCSI_SUPPORT_H_


22 
	#_ISCSI_SUPPORT_H_


	)

24 
	~<time.h
>

25 
	~<sys/ty≥s.h
>

26 
	~<sys/time.h
>

27 
	~<uni°d.h
>

28 
	~<°dlib.h
>

30 #i‚de‡
disˇrd_c⁄°


31 
	#disˇrd_c⁄°
(
±r
Ë((*)((
öçå_t
)’å)))

	)

34 c⁄° *
öôüt‹«me1
;

35 c⁄° *
öôüt‹«me2
;

37 
	#EXPECT_STATUS_GOOD
 
SCSI_STATUS_GOOD
, 
SCSI_SENSE_NO_SENSE
, 
NULL
, 0

	)

38 
	#EXPECT_STATUS_GENERIC_BAD
 
SCSI_STATUS_CHECK_CONDITION
, 
SCSI_SENSE_ILLEGAL_REQUEST
, 
NULL
, 0

	)

39 
	#EXPECT_STATUS_TIMEOUT
 
SCSI_STATUS_TIMEOUT
, 
SCSI_SENSE_NO_SENSE
, 
NULL
, 0

	)

40 
	#EXPECT_NO_MEDIUM
 
SCSI_STATUS_CHECK_CONDITION
, 
SCSI_SENSE_NOT_READY
, 
no_medium_ascqs
, 3

	)

41 
	#EXPECT_LBA_OOB
 
SCSI_STATUS_CHECK_CONDITION
, 
SCSI_SENSE_ILLEGAL_REQUEST
, 
lba_oob_ascqs
, 1

	)

42 
	#EXPECT_INVALID_FIELD_IN_CDB
 
SCSI_STATUS_CHECK_CONDITION
, 
SCSI_SENSE_ILLEGAL_REQUEST
, 
övÆid_cdb_ascqs
,2

	)

43 
	#EXPECT_PARAM_LIST_LEN_ERR
 
SCSI_STATUS_CHECK_CONDITION
, 
SCSI_SENSE_ILLEGAL_REQUEST
, 
∑øm_li°_Àn_îr_ascqs
, 1

	)

44 
	#EXPECT_TOO_MANY_DESCR
 
SCSI_STATUS_CHECK_CONDITION
, 
SCSI_SENSE_ILLEGAL_REQUEST
, 
too_m™y_desc_ascqs
, 2

	)

45 
	#EXPECT_UNSUPP_DESCR_CODE
 
SCSI_STATUS_CHECK_CONDITION
, 
SCSI_SENSE_ILLEGAL_REQUEST
, 
unsuµ_desc_code_ascqs
, 2

	)

46 
	#EXPECT_MISCOMPARE
 
SCSI_STATUS_CHECK_CONDITION
, 
SCSI_SENSE_MISCOMPARE
, 
miscom∑ª_ascqs
, 1

	)

47 
	#EXPECT_WRITE_PROTECTED
 
SCSI_STATUS_CHECK_CONDITION
, 
SCSI_SENSE_DATA_PROTECTION
, 
wrôe_¥Ÿe˘_ascqs
, 3

	)

48 
	#EXPECT_SANITIZE
 
SCSI_STATUS_CHECK_CONDITION
, 
SCSI_SENSE_NOT_READY
, 
ßnôize_ascqs
, 1

	)

49 
	#EXPECT_REMOVAL_PREVENTED
 
SCSI_STATUS_CHECK_CONDITION
, 
SCSI_SENSE_ILLEGAL_REQUEST
, 
ªmovÆ_ascqs
, 1

	)

50 
	#EXPECT_RESERVATION_CONFLICT
 
SCSI_STATUS_RESERVATION_CONFLICT
, 0, 
NULL
, 0

	)

51 
	#EXPECT_COPY_ABORTED
 
SCSI_STATUS_CHECK_CONDITION
, 
SCSI_SENSE_COPY_ABORTED
, 
c›y_ab‹ãd_ascqs
, 3

	)

53 
	gno_medium_ascqs
[3];

54 
	glba_oob_ascqs
[1];

55 
	gövÆid_cdb_ascqs
[2];

56 
	g∑øm_li°_Àn_îr_ascqs
[1];

57 
	gtoo_m™y_desc_ascqs
[2];

58 
	gunsuµ_desc_code_ascqs
[2];

59 
	gwrôe_¥Ÿe˘_ascqs
[3];

60 
	gßnôize_ascqs
[1];

61 
	gªmovÆ_ascqs
[1];

62 
	gmiscom∑ª_ascqs
[1];

63 
	gc›y_ab‹ãd_ascqs
[3];

65 
logÀvñ
;

66 
	#LOG_SILENT
 0

	)

67 
	#LOG_NORMAL
 1

	)

68 
	#LOG_VERBOSE
 2

	)

69 
	$loggög
(
Àvñ
, c⁄° *
f‹m©
, ...Ë
	`_R_
(2,3);

75 
	#LOG_BLANK_LINE
 " "

	)

76 
	#LOG_BLANK_LINE_CMP_LEN
 2

	)

78 
	#CHECK_FOR_DATALOSS
 \

80 i‡(!
d©a_loss
) { \

81 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] --dataloss flag isÇot " \

83 
	`CU_PASS
("[SKIPPED] --dataloss flag isÇot set." \

87 
	}
} 0);

	)

89 
	#CHECK_FOR_SANITIZE
 \

91 i‡(!
Ælow_ßnôize
) { \

92 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] --allow-sanitize flag " \

94 
	`CU_PASS
("[SKIPPED] --allow-sanitize flag isÇot set." \

98 } 0);

	)

100 
	#CHECK_FOR_READONLY
 \

102 i‡(!
ªad⁄ly
) { \

103 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] Logical unit isÇot " \

105 
	`CU_PASS
("[SKIPPED] Logical unit isÇot write-" \

109 } 0);

	)

111 
	#CHECK_FOR_REMOVABLE
 \

113 i‡(!
öq
->
rmb
) { \

114 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] Logical unit isÇot " \

116 
	`CU_PASS
("[SKIPPED] Logical unit isÇotÑemovable" \

120 } 0);

	)

122 
	#CHECK_FOR_THIN_PROVISIONING
 \

124 i‡(
rc16
 =
NULL
 ||Ñc16->
lbpme
 == 0) { \

125 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] Logical unit is fully" \

127 
	`CU_PASS
("[SKIPPED] Logical unit is fullyÖrovisioned." \

131 } 0);

	)

133 
	#CHECK_FOR_LBPWS10
 \

135 i‡(
öq_lbp
->
lbpws10
 == 0) { \

136 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] Logical unit doesÇot" \

138 
	`CU_PASS
("[SKIPPED] Logical unit doesÇot have LBPWS10." \

142 } 0);

	)

144 
	#CHECK_FOR_LBPWS
 \

146 i‡(
öq_lbp
->
lbpws
 == 0) { \

147 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] Logical unit doesÇot" \

149 
	`CU_PASS
("[SKIPPED] Logical unit doesÇot have LBPWS." \

153 } 0);

	)

155 
	#CHECK_FOR_LBPU
 \

157 i‡(
öq_lbp
->
lbpu
 == 0) { \

158 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] Logical unit doesÇot" \

160 
	`CU_PASS
("[SKIPPED] Logical unit doesÇot have LBPU." \

164 } 0);

	)

166 
	#CHECK_FOR_LBPPB_GT_1
 \

168 i‡(
lbµb
 < 2) { \

169 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] LBPPB < 2. SkippingÅest"); \

170 
	`CU_PASS
("[SKIPPED] LBPPB < 2. SkippingÅest"); \

173 } 0);

	)

175 
	#CHECK_FOR_SBC
 \

177 i‡(
öq
->
devi˚_ty≥
 !
SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_DIRECT_ACCESS
) {\

178 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] Not SBC device." \

180 
	`CU_PASS
("[SKIPPED] Not SBC device." \

184 } 0);

	)

186 
	#CHECK_SIZE
(
_mö_blocks
, 
_c
) \

188 i‡(
num_blocks
 < 
_mö_blocks
) { \

189 
	`loggög
(
LOG_VERBOSE
, "[SKIPPED] " \

192 
_c
 \

194 } 0);

	)

196 
	#COMPAREANDWRITE
(...) \

198 
_r
; \

199 
_r
 = 
	`com∑ª™dwrôe
(
__VA_ARGS__
); \

200 i‡(
_r
 == -2) { \

201 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] COMPAREANDWRITE " \

203 
	`CU_PASS
("[SKIPPED] Target doesÇot support " \

207 
	`CU_ASSERT_EQUAL
(
_r
, 0); \

208 } 0);

	)

210 
	#EXTENDEDCOPY
(...) \

212 
_r
; \

213 
_r
 = 
	`exãndedc›y
(
__VA_ARGS__
); \

214 i‡(
_r
 == -2) { \

215 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] EXTENDEDCOPY " \

217 
	`CU_PASS
("[SKIPPED] Target doesÇot support " \

221 
	`CU_ASSERT_EQUAL
(
_r
, 0); \

222 } 0);

	)

224 
	#GETLBASTATUS
(...) \

226 
_r
; \

227 
_r
 = 
	`gë_lba_°©us
(
__VA_ARGS__
); \

228 i‡(
_r
 == -2) { \

229 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] GETLBASTATUS " \

231 
	`CU_PASS
("[SKIPPED] Target doesÇot support " \

235 
	`CU_ASSERT_EQUAL
(
_r
, 0); \

236 } 0);

	)

238 
	#MODESENSE6
(...) \

240 
_r
; \

241 
_r
 = 
	`mode£n£6
(
__VA_ARGS__
); \

242 i‡(
_r
 == -2) { \

243 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] MODESENSE6 " \

245 
	`CU_PASS
("[SKIPPED] Target doesÇot support " \

249 
	`CU_ASSERT_EQUAL
(
_r
, 0); \

250 } 0);

	)

252 
	#ORWRITE
(...) \

254 
_r
; \

255 
_r
 = 
	`‹wrôe
(
__VA_ARGS__
); \

256 i‡(
_r
 == -2) { \

257 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] ORWRITE " \

259 
	`CU_PASS
("[SKIPPED] Target doesÇot support " \

263 
	`CU_ASSERT_EQUAL
(
_r
, 0); \

264 } 0);

	)

266 
	#PREFETCH10
(...) \

268 
_r
; \

269 
_r
 = 
	`¥e„tch10
(
__VA_ARGS__
); \

270 i‡(
_r
 == -2) { \

271 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] PREFETCH10 " \

273 
	`CU_PASS
("[SKIPPED] Target doesÇot support " \

277 
	`CU_ASSERT_EQUAL
(
_r
, 0); \

278 } 0);

	)

280 
	#PREFETCH16
(...) \

282 
_r
; \

283 
_r
 = 
	`¥e„tch16
(
__VA_ARGS__
); \

284 i‡(
_r
 == -2) { \

285 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] PREFETCH16 " \

287 
	`CU_PASS
("[SKIPPED] Target doesÇot support " \

291 
	`CU_ASSERT_EQUAL
(
_r
, 0); \

292 } 0);

	)

294 
	#PREVENTALLOW
(...) \

296 
_r
; \

297 
_r
 = 
	`¥evíèŒow
(
__VA_ARGS__
); \

298 i‡(
_r
 == -2) { \

299 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] PREVENTALLOW " \

301 
	`CU_PASS
("[SKIPPED] Target doesÇot support " \

305 
	`CU_ASSERT_EQUAL
(
_r
, 0); \

306 } 0);

	)

308 
	#READ6
(...) \

310 
_r
; \

311 
_r
 = 
	`ªad6
(
__VA_ARGS__
); \

312 i‡(
_r
 == -2) { \

313 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] READ6 " \

315 
	`CU_PASS
("[SKIPPED] Target doesÇot support " \

319 
	`CU_ASSERT_EQUAL
(
_r
, 0); \

320 } 0);

	)

322 
	#READ10
(...) \

324 
_r
; \

325 
_r
 = 
	`ªad10
(
__VA_ARGS__
); \

326 i‡(
_r
 == -2) { \

327 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] READ10 " \

329 
	`CU_PASS
("[SKIPPED] Target doesÇot support " \

333 
	`CU_ASSERT_EQUAL
(
_r
, 0); \

334 
_r
; \

335 })

	)

337 
	#READ12
(...) \

339 
_r
; \

340 
_r
 = 
	`ªad12
(
__VA_ARGS__
); \

341 i‡(
_r
 == -2) { \

342 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] READ12 " \

344 
	`CU_PASS
("[SKIPPED] Target doesÇot support " \

348 
	`CU_ASSERT_EQUAL
(
_r
, 0); \

349 } 0);

	)

351 
	#READ16
(...) \

353 
_r
; \

354 
_r
 = 
	`ªad16
(
__VA_ARGS__
); \

355 i‡(
_r
 == -2) { \

356 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] READ16 " \

358 
	`CU_PASS
("[SKIPPED] Target doesÇot support " \

362 
	`CU_ASSERT_EQUAL
(
_r
, 0); \

363 } 0);

	)

365 
	#READCAPACITY10
(...) \

367 
_r
; \

368 
_r
 = 
	`ªadˇ∑côy10
(
__VA_ARGS__
); \

369 i‡(
_r
 == -2) { \

370 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] READCAPACITY10 " \

372 
	`CU_PASS
("[SKIPPED] Target doesÇot support " \

376 
	`CU_ASSERT_EQUAL
(
_r
, 0); \

377 } 0);

	)

379 
	#READCAPACITY16
(...) \

381 
_r
; \

382 
_r
 = 
	`ªadˇ∑côy16
(
__VA_ARGS__
); \

383 i‡(
_r
 == -2) { \

384 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] READCAPACITY16 " \

386 
	`CU_PASS
("[SKIPPED] Target doesÇot support " \

390 
	`CU_ASSERT_EQUAL
(
_r
, 0); \

391 } 0);

	)

393 
	#READDEFECTDATA10
(...) \

395 
_r
; \

396 
_r
 = 
	`ªadde„˘d©a10
(
__VA_ARGS__
); \

397 i‡(
_r
 == -2) { \

398 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] READDEFECTDATA10 " \

400 
	`CU_PASS
("[SKIPPED] Target doesÇot support " \

404 
	`CU_ASSERT_EQUAL
(
_r
, 0); \

405 } 0);

	)

407 
	#READDEFECTDATA12
(...) \

409 
_r
; \

410 
_r
 = 
	`ªadde„˘d©a12
(
__VA_ARGS__
); \

411 i‡(
_r
 == -2) { \

412 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] READDEFECTDATA12 " \

414 
	`CU_PASS
("[SKIPPED] Target doesÇot support " \

418 
	`CU_ASSERT_EQUAL
(
_r
, 0); \

419 } 0);

	)

421 
	#RECEIVE_COPY_RESULTS
(...) \

423 
_r
; \

424 
_r
 = 
	`ª˚ive_c›y_ªsu…s
(
__VA_ARGS__
); \

425 i‡(
_r
 == -2) { \

426 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] RECEIVE_COPY" \

428 
	`CU_PASS
("[SKIPPED] Target doesÇot support " \

432 
	`CU_ASSERT_EQUAL
(
_r
, 0); \

433 
_r
; \

434 })

	)

436 
	#RELEASE6
(...) \

438 
_r
; \

439 
_r
 = 
	`ªÀa£6
(
__VA_ARGS__
); \

440 i‡(
_r
 == -2) { \

441 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] RELEASE6 " \

443 
	`CU_PASS
("[SKIPPED] Target doesÇot support " \

447 
	`CU_ASSERT_EQUAL
(
_r
, 0); \

448 } 0);

	)

450 
	#REPORT_SUPPORTED_OPCODES
(...) \

452 
_r
; \

453 
_r
 = 
	`ªp‹t_suµ‹ãd_›codes
(
__VA_ARGS__
); \

454 i‡(
_r
 == -2) { \

455 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] REPORT_SUPPORTED" \

457 
	`CU_PASS
("[SKIPPED] Target doesÇot support " \

462 
	`CU_ASSERT_EQUAL
(
_r
, 0); \

463 } 0);

	)

465 
	#RESERVE6
(...) \

467 
_r
; \

468 
_r
 = 
	`ª£rve6
(
__VA_ARGS__
); \

469 i‡(
_r
 == -2) { \

470 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] RESERVE6 " \

472 
	`CU_PASS
("[SKIPPED] Target doesÇot support " \

476 
	`CU_ASSERT_EQUAL
(
_r
, 0); \

477 } 0);

	)

479 
	#SANITIZE
(...) \

481 
_r
; \

482 
_r
 = 
	`ßnôize
(
__VA_ARGS__
); \

483 i‡(
_r
 == -2) { \

484 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] SANITIZE " \

486 
	`CU_PASS
("[SKIPPED] Target doesÇot support " \

490 
	`CU_ASSERT_EQUAL
(
_r
, 0); \

491 } 0);

	)

493 
	#STARTSTOPUNIT
(...) \

495 
_r
; \

496 
_r
 = 
	`°¨t°›unô
(
__VA_ARGS__
); \

497 i‡(
_r
 == -2) { \

498 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] STARTSTOPUNIT " \

500 
	`CU_PASS
("[SKIPPED] Target doesÇot support " \

504 
	`CU_ASSERT_EQUAL
(
_r
, 0); \

505 } 0);

	)

507 
	#SYNCHRONIZECACHE10
(...) \

509 
_r
; \

510 
_r
 = 
	`synchr⁄izeˇche10
(
__VA_ARGS__
); \

511 i‡(
_r
 == -2) { \

512 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] SYNCHRONIZECACHE10 " \

514 
	`CU_PASS
("[SKIPPED] Target doesÇot support " \

518 
	`CU_ASSERT_EQUAL
(
_r
, 0); \

519 } 0);

	)

521 
	#SYNCHRONIZECACHE16
(...) \

523 
_r
; \

524 
_r
 = 
	`synchr⁄izeˇche16
(
__VA_ARGS__
); \

525 i‡(
_r
 == -2) { \

526 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] SYNCHRONIZECACHE16 " \

528 
	`CU_PASS
("[SKIPPED] Target doesÇot support " \

532 
	`CU_ASSERT_EQUAL
(
_r
, 0); \

533 } 0);

	)

535 
	#TESTUNITREADY
(...) \

537 
_r
; \

538 
_r
 = 
	`ã°unôªady
(
__VA_ARGS__
); \

539 i‡(
_r
 == -2) { \

540 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] TESTUNITREADY " \

542 
	`CU_PASS
("[SKIPPED] Target doesÇot support " \

546 
	`CU_ASSERT_EQUAL
(
_r
, 0); \

547 } 0);

	)

549 
	#UNMAP
(...) \

551 
_r
; \

552 
_r
 = 
	`unm≠
(
__VA_ARGS__
); \

553 i‡(
_r
 == -2) { \

554 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] UNMAP " \

556 
	`CU_PASS
("[SKIPPED] Target doesÇot support " \

560 
	`CU_ASSERT_EQUAL
(
_r
, 0); \

561 } 0);

	)

563 
	#VERIFY10
(...) \

565 
_r
; \

566 
_r
 = 
	`vîify10
(
__VA_ARGS__
); \

567 i‡(
_r
 == -2) { \

568 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] VERIFY10 " \

570 
	`CU_PASS
("[SKIPPED] Target doesÇot support " \

574 
	`CU_ASSERT_EQUAL
(
_r
, 0); \

575 } 0);

	)

577 
	#VERIFY12
(...) \

579 
_r
; \

580 
_r
 = 
	`vîify12
(
__VA_ARGS__
); \

581 i‡(
_r
 == -2) { \

582 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] VERIFY12 " \

584 
	`CU_PASS
("[SKIPPED] Target doesÇot support " \

588 
	`CU_ASSERT_EQUAL
(
_r
, 0); \

589 } 0);

	)

591 
	#VERIFY16
(...) \

593 
_r
; \

594 
_r
 = 
	`vîify16
(
__VA_ARGS__
); \

595 i‡(
_r
 == -2) { \

596 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] VERIFY16 " \

598 
	`CU_PASS
("[SKIPPED] Target doesÇot support " \

602 
	`CU_ASSERT_EQUAL
(
_r
, 0); \

603 } 0);

	)

605 
	#WRITE10
(...) \

607 
_r
; \

608 
_r
 = 
	`wrôe10
(
__VA_ARGS__
); \

609 i‡(
_r
 == -2) { \

610 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITE10 " \

612 
	`CU_PASS
("[SKIPPED] Target doesÇot support " \

616 
	`CU_ASSERT_EQUAL
(
_r
, 0); \

617 
_r
; \

618 })

	)

620 
	#WRITE12
(...) \

622 
_r
; \

623 
_r
 = 
	`wrôe12
(
__VA_ARGS__
); \

624 i‡(
_r
 == -2) { \

625 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITE12 " \

627 
	`CU_PASS
("[SKIPPED] Target doesÇot support " \

631 
	`CU_ASSERT_EQUAL
(
_r
, 0); \

632 } 0);

	)

634 
	#WRITE16
(...) \

636 
_r
; \

637 
_r
 = 
	`wrôe16
(
__VA_ARGS__
); \

638 i‡(
_r
 == -2) { \

639 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITE16 " \

641 
	`CU_PASS
("[SKIPPED] Target doesÇot support " \

645 
	`CU_ASSERT_EQUAL
(
_r
, 0); \

646 } 0);

	)

648 
	#WRITEATOMIC16
(...) \

650 
_r
; \

651 
_r
 = 
	`wrôótomic16
(
__VA_ARGS__
); \

652 i‡(
_r
 == -2) { \

653 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITEATOMIC16 " \

655 
	`CU_PASS
("[SKIPPED] Target doesÇot support " \

659 
	`CU_ASSERT_EQUAL
(
_r
, 0); \

660 } 0);

	)

662 
	#WRITESAME10
(...) \

664 
_r
; \

665 
_r
 = 
	`wrôeßme10
(
__VA_ARGS__
); \

666 i‡(
_r
 == -2) { \

667 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITESAME10 " \

669 
	`CU_PASS
("[SKIPPED] Target doesÇot support " \

673 
	`CU_ASSERT_EQUAL
(
_r
, 0); \

674 } 0);

	)

676 
	#WRITESAME16
(...) \

678 
_r
; \

679 
_r
 = 
	`wrôeßme16
(
__VA_ARGS__
); \

680 i‡(
_r
 == -2) { \

681 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITESAME16 " \

683 
	`CU_PASS
("[SKIPPED] Target doesÇot support " \

687 
	`CU_ASSERT_EQUAL
(
_r
, 0); \

688 } 0);

	)

690 
	#WRITEVERIFY10
(...) \

692 
_r
; \

693 
_r
 = 
	`wrôevîify10
(
__VA_ARGS__
); \

694 i‡(
_r
 == -2) { \

695 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITEVERIFY10 " \

697 
	`CU_PASS
("[SKIPPED] Target doesÇot support " \

701 
	`CU_ASSERT_EQUAL
(
_r
, 0); \

702 } 0);

	)

704 
	#WRITEVERIFY12
(...) \

706 
_r
; \

707 
_r
 = 
	`wrôevîify12
(
__VA_ARGS__
); \

708 i‡(
_r
 == -2) { \

709 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITEVERIFY12 " \

711 
	`CU_PASS
("[SKIPPED] Target doesÇot support " \

715 
	`CU_ASSERT_EQUAL
(
_r
, 0); \

716 } 0);

	)

718 
	#WRITEVERIFY16
(...) \

720 
_r
; \

721 
_r
 = 
	`wrôevîify16
(
__VA_ARGS__
); \

722 i‡(
_r
 == -2) { \

723 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITEVERIFY16 " \

725 
	`CU_PASS
("[SKIPPED] Target doesÇot support " \

729 
	`CU_ASSERT_EQUAL
(
_r
, 0); \

730 } 0);

	)

732 
	#ALL_ZERO
(...) \

734 i‡(
	`Æl_zîo
(
__VA_ARGS__
) == 0) { \

735 
	`loggög
(
LOG_NORMAL
, "[FAILED] Blocks didÇot " \

737 
	`CU_FAIL
("[FAILED] Blocks didÇotÑead back " \

741 } 0);

	)

743 
scsi_öquúy_°™d¨d
 *
öq
;

744 
scsi_öquúy_logiˇl_block_¥ovisi⁄ög
 *
öq_lbp
;

745 
scsi_öquúy_block_devi˚_ch¨a˘îi°ics
 *
öq_bdc
;

746 
scsi_öquúy_block_limôs
 *
öq_bl
;

747 
scsi_ªadˇ∑côy16
 *
rc16
;

748 
scsi_ªp‹t_suµ‹ãd_›_codes
 *
rs›
;

750 *
s¸©ch
;

751 
size_t
 
block_size
;

752 
uöt64_t
 
num_blocks
;

753 
lbµb
;

754 
d©a_loss
;

755 
Ælow_ßnôize
;

756 
ªad⁄ly
;

757 
sbc3_suµ‹t
;

758 
maximum_å™s„r_Àngth
;

760 
	sscsi_devi˚
 {

761 *
	mîr‹_°r
;

763 
iscsi_c⁄ãxt
 *
	miscsi_˘x
;

764 
	miscsi_lun
;

765 *
	miscsi_uæ
;

767 *
	msgio_dev
;

768 
	msgio_fd
;

770 
scsi_devi˚
 *
sd
;

772 
iscsi_c⁄ãxt
 *
iscsi_c⁄ãxt_logö
(c⁄° *
öôüt‹«me
, c⁄° *
uæ
, *
lun
);

774 
	siscsi_async_°©e
 {

775 
scsi_èsk
 *
	mèsk
;

776 
	m°©us
;

777 
	mföished
;

779 
waô_u¡û_ã°_föished
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_async_°©e
 *
ã°_°©e
);

781 
	giscsi_pdu
;

782 (*
loˇl_iscsi_queue_pdu
)(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_pdu
 *
pdu
);

784 
scsi_comm™d_des¸ùt‹
 *
	`gë_comm™d_des¸ùt‹
(
›code
, 
ß
);

790 
ölöe
 
	$ønd_key
()

792 
£ed
 = 0;

794 i‡(!
£ed
) {

795 
timevÆ
 
tv
;

796 
pid_t
 
p
;

797 
s
;

799 
	`gëtimeofday
(&
tv
, 
NULL
);

800 
p
 = 
	`gëpid
();

801 
s
 = 
p
 ^ 
tv
.
tv_£c
 ^Åv.
tv_u£c
;

802 
	`§™dom
(
s
);

804 
£ed
 = 1;

805  
	`øndom
();

806 
	}
}

808 
ölöe
 
	$¥_ty≥_is_Æl_ªgi°ø¡s
(

809 
scsi_≥rsi°ít_out_ty≥
 
¥_ty≥
)

811 
¥_ty≥
) {

812 
SCSI_PERSISTENT_RESERVE_TYPE_WRITE_EXCLUSIVE_ALL_REGISTRANTS
:

813 
SCSI_PERSISTENT_RESERVE_TYPE_EXCLUSIVE_ACCESS_ALL_REGISTRANTS
:

818 
	}
}

820 
Æl_zîo
(c⁄° *
buf
, 
size
);

822 
¥ö_èsk
(
scsi_devi˚
 *
sdev
, 
£rvi˚_a˘i⁄
,

823 
suc˚ss_ex≥˘ed
);

824 
¥ö_ªad_keys
(
scsi_devi˚
 *
sdev
, 
scsi_èsk
 **
ç
,

825 
scsi_≥rsi°ít_ª£rve_ö_ªad_keys
 **
rkp
,

826 
uöt16_t
 
Æloˇti⁄_Àn
);

827 
¥out_ªgi°î_™d_ign‹e
(
scsi_devi˚
 *
sdev
,

828 
key
);

829 
¥out_ªgi°î_key
(
scsi_devi˚
 *
sdev
,

830 
ßrk
, 
rk
);

831 
¥ö_vîify_key_¥e£n˚
(
scsi_devi˚
 *
sdev
,

832 
key
, 
¥e£¡
);

833 
¥out_ªªgi°î_key_Áûs
(
scsi_devi˚
 *
sdev
,

834 
ßrk
);

835 
¥out_ª£rve
(
scsi_devi˚
 *
sdev
,

836 
key
, 
scsi_≥rsi°ít_out_ty≥
 
¥_ty≥
);

837 
¥out_ªÀa£
(
scsi_devi˚
 *
sdev
,

838 
key
, 
scsi_≥rsi°ít_out_ty≥
 
¥_ty≥
);

839 
¥out_˛ór
(
scsi_devi˚
 *
sdev
, 
key
);

840 
¥out_¥ìm±
(
scsi_devi˚
 *
sdev
,

841 
ßrk
, 
rk
,

842 
scsi_≥rsi°ít_out_ty≥
 
¥_ty≥
);

843 
¥ö_vîify_nŸ_ª£rved
(
scsi_devi˚
 *
sdev
);

844 
¥ö_vîify_ª£rved_as
(
scsi_devi˚
 *
sdev
,

845 
key
, 
scsi_≥rsi°ít_out_ty≥
 
¥_ty≥
);

846 
¥ö_ªp‹t_ˇps
(
scsi_devi˚
 *
sdev
, 
scsi_èsk
 **
ç
,

847 
scsi_≥rsi°ít_ª£rve_ö_ªp‹t_ˇ∑bûôõs
 **
_rˇps
);

848 
vîify_ªad_w‹ks
(
scsi_devi˚
 *
sdev
, *
buf
);

849 
vîify_wrôe_w‹ks
(
scsi_devi˚
 *
sdev
, *
buf
);

850 
vîify_ªad_Áûs
(
scsi_devi˚
 *
sdev
, *
buf
);

851 
vîify_wrôe_Áûs
(
scsi_devi˚
 *
sdev
, *
buf
);

853 
com∑ª™dwrôe
(
scsi_devi˚
 *
sdev
, 
uöt64_t
 
lba
, *
d©a
, 
uöt32_t
 
Àn
, 
blocksize
, 
wΩrŸe˘
, 
dpo
, 
fua
, 
group_numbî
, 
°©us
, 
scsi_£n£_key
 
key
, *
ascq
, 
num_ascq
);

854 
gë_lba_°©us
(
scsi_devi˚
 *
sdev
, 
scsi_èsk
 **
èsk
, 
uöt64_t
 
lba
, 
uöt32_t
 
Àn
, 
°©us
, 
scsi_£n£_key
 
key
, *
ascq
, 
num_ascq
);

855 
öquúy
(
scsi_devi˚
 *
sdev
, 
scsi_èsk
 **
èsk
, 
evpd
, 
∑ge_code
, 
maxsize
, 
°©us
, 
scsi_£n£_key
 
key
, *
ascq
, 
num_ascq
);

856 
mode£n£6
(
scsi_devi˚
 *
sdev
, 
scsi_èsk
 **
èsk
, 
dbd
, 
scsi_mode£n£_∑ge_c⁄åﬁ
 
pc
, 
scsi_mode£n£_∑ge_code
 
∑ge_code
, 
sub_∑ge_code
, 
Æloc_Àn
, 
°©us
, 
scsi_£n£_key
 
key
, *
ascq
, 
num_ascq
);

857 
mode£À˘6
(
scsi_devi˚
 *
sdev
, 
pf
, 
•
, 
scsi_mode_∑ge
 *
mp
, 
°©us
, 
scsi_£n£_key
 
key
, *
ascq
, 
num_ascq
);

858 
‹wrôe
(
scsi_devi˚
 *
sdev
, 
uöt64_t
 
lba
, 
uöt32_t
 
d©Æí
, 
blocksize
, 
wΩrŸe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group
, *
d©a
, 
°©us
, 
scsi_£n£_key
 
key
, *
ascq
, 
num_ascq
);

859 
¥e„tch10
(
scsi_devi˚
 *
sdev
, 
uöt32_t
 
lba
, 
num_blocks
, 
immed
, 
group
, 
°©us
, 
scsi_£n£_key
 
key
, *
ascq
, 
num_ascq
);

860 
¥e„tch16
(
scsi_devi˚
 *
sdev
, 
uöt64_t
 
lba
, 
num_blocks
, 
immed
, 
group
, 
°©us
, 
scsi_£n£_key
 
key
, *
ascq
, 
num_ascq
);

861 
¥evíèŒow
(
scsi_devi˚
 *
sdev
, 
¥evít
);

862 
ªad6
(
scsi_devi˚
 *
sdev
, 
scsi_èsk
 **
èsk
, 
uöt32_t
 
lba
, uöt32_à
d©Æí
, 
blocksize
, *
d©a
, 
°©us
, 
scsi_£n£_key
 
key
, *
ascq
, 
num_ascq
);

863 
ªad10
(
scsi_devi˚
 *
sdev
, 
scsi_èsk
 **
èsk
, 
uöt32_t
 
lba
, uöt32_à
d©Æí
, 
blocksize
, 
rd¥Ÿe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group
, *
d©a
, 
°©us
, 
scsi_£n£_key
 
key
, *
ascq
, 
num_ascq
);

864 
ªad12
(
scsi_devi˚
 *
sdev
, 
scsi_èsk
 **
èsk
, 
uöt32_t
 
lba
, uöt32_à
d©Æí
, 
blocksize
, 
rd¥Ÿe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group
, *
d©a
, 
°©us
, 
scsi_£n£_key
 
key
, *
ascq
, 
num_ascq
);

865 
ªad16
(
scsi_devi˚
 *
sdev
, 
scsi_èsk
 **
èsk
, 
uöt64_t
 
lba
, 
uöt32_t
 
d©Æí
, 
blocksize
, 
rd¥Ÿe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group
, *
d©a
, 
°©us
, 
scsi_£n£_key
 
key
, *
ascq
, 
num_ascq
);

866 
ªadˇ∑côy10
(
scsi_devi˚
 *
sdev
, 
scsi_èsk
 **
èsk
, 
uöt32_t
 
lba
, 
pmi
, 
°©us
, 
scsi_£n£_key
 
key
, *
ascq
, 
num_ascq
);

867 
ªadˇ∑côy16
(
scsi_devi˚
 *
sdev
, 
scsi_èsk
 **
èsk
, 
Æloc_Àn
, 
°©us
, 
scsi_£n£_key
 
key
, *
ascq
, 
num_ascq
);

868 
ªadde„˘d©a10
(
scsi_devi˚
 *
sdev
, 
scsi_èsk
 **
èsk
,

869 
ªq_∂i°
, 
ªq_gli°
,

870 
de„˘_li°_f‹m©
, 
uöt16_t
 
Æloc_Àn
,

871 
°©us
, 
scsi_£n£_key
 
key
,

872 *
ascq
, 
num_ascq
);

873 
ªadde„˘d©a12
(
scsi_devi˚
 *
sdev
, 
scsi_èsk
 **
èsk
,

874 
ªq_∂i°
, 
ªq_gli°
,

875 
de„˘_li°_f‹m©
,

876 
uöt32_t
 
addªss_des¸ùt‹_ödex
,

877 
uöt32_t
 
Æloc_Àn
,

878 
°©us
, 
scsi_£n£_key
 
key
,

879 *
ascq
, 
num_ascq
);

880 
ªp‹t_suµ‹ãd_›codes
(
scsi_devi˚
 *
sdev
, 
scsi_èsk
 **
ßve_èsk
, 
r˘d
, 
›ti⁄s
, 
›code
, 
ß
, 
Æloc_Àn
, 
°©us
, 
scsi_£n£_key
 
key
, *
ascq
, 
num_ascq
);

881 
ªÀa£6
(
scsi_devi˚
 *
sdev
);

882 
ª£rve6
(
scsi_devi˚
 *
sdev
);

883 
ª£rve6_c⁄Êi˘
(
scsi_devi˚
 *
sdev
);

884 
ßnôize
(
scsi_devi˚
 *
sdev
, 
immed
, 
au£
, 
ß
, 
∑øm_Àn
, 
iscsi_d©a
 *
d©a
, 
°©us
, 
scsi_£n£_key
 
key
, *
ascq
, 
num_ascq
);

885 
°¨t°›unô
(
scsi_devi˚
 *
sdev
, 
immed
, 
pcm
, 
pc
, 
no_Êush
, 
l€j
, 
°¨t
, 
°©us
, 
scsi_£n£_key
 
key
, *
ascq
, 
num_ascq
);

886 
synchr⁄izeˇche10
(
scsi_devi˚
 *
sdev
, 
uöt32_t
 
lba
, 
num_blocks
, 
sync_nv
, 
immed
, 
°©us
, 
scsi_£n£_key
 
key
, *
ascq
, 
num_ascq
);

887 
synchr⁄izeˇche16
(
scsi_devi˚
 *
sdev
, 
uöt64_t
 
lba
, 
num_blocks
, 
sync_nv
, 
immed
, 
°©us
, 
scsi_£n£_key
 
key
, *
ascq
, 
num_ascq
);

888 
ã°unôªady_˛ór_ua
(
scsi_devi˚
 *
sdev
);

889 
ã°unôªady
(
scsi_devi˚
 *
sdev
, 
°©us
, 
scsi_£n£_key
 
key
, *
ascq
, 
num_ascq
);

890 
unm≠
(
scsi_devi˚
 *
sdev
, 
™ch‹
, 
unm≠_li°
 *
li°
, 
li°_Àn
, 
°©us
, 
scsi_£n£_key
 
key
, *
ascq
, 
num_ascq
);

891 
vîify10
(
scsi_devi˚
 *
sdev
, 
uöt32_t
 
lba
, uöt32_à
d©Æí
, 
blocksize
, 
v¥Ÿe˘
, 
dpo
, 
bytchk
, *
d©a
, 
°©us
, 
scsi_£n£_key
 
key
, *
ascq
, 
num_ascq
);

892 
vîify12
(
scsi_devi˚
 *
sdev
, 
uöt32_t
 
lba
, uöt32_à
d©Æí
, 
blocksize
, 
v¥Ÿe˘
, 
dpo
, 
bytchk
, *
d©a
, 
°©us
, 
scsi_£n£_key
 
key
, *
ascq
, 
num_ascq
);

893 
vîify16
(
scsi_devi˚
 *
sdev
, 
uöt64_t
 
lba
, 
uöt32_t
 
d©Æí
, 
blocksize
, 
v¥Ÿe˘
, 
dpo
, 
bytchk
, *
d©a
, 
°©us
, 
scsi_£n£_key
 
key
, *
ascq
, 
num_ascq
);

894 
wrôe10
(
scsi_devi˚
 *
sdev
, 
uöt32_t
 
lba
, uöt32_à
d©Æí
, 
blocksize
, 
wΩrŸe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group
, *
d©a
, 
°©us
, 
scsi_£n£_key
 
key
, *
ascq
, 
num_ascq
);

895 
wrôe12
(
scsi_devi˚
 *
sdev
, 
uöt32_t
 
lba
, uöt32_à
d©Æí
, 
blocksize
, 
wΩrŸe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group
, *
d©a
, 
°©us
, 
scsi_£n£_key
 
key
, *
ascq
, 
num_ascq
);

896 
wrôe16
(
scsi_devi˚
 *
sdev
, 
uöt64_t
 
lba
, 
uöt32_t
 
d©Æí
, 
blocksize
, 
wΩrŸe˘
, 
dpo
, 
fua
, 
fua_nv
, 
group
, *
d©a
, 
°©us
, 
scsi_£n£_key
 
key
, *
ascq
, 
num_ascq
);

897 
wrôótomic16
(
scsi_devi˚
 *
sdev
, 
uöt64_t
 
lba
, 
uöt32_t
 
d©Æí
, 
blocksize
, 
wΩrŸe˘
, 
dpo
, 
fua
, 
group
, *
d©a
, 
°©us
, 
scsi_£n£_key
 
key
, *
ascq
, 
num_ascq
);

898 
wrôeßme10
(
scsi_devi˚
 *
sdev
, 
uöt32_t
 
lba
, uöt32_à
d©Æí
, 
num_blocks
, 
™ch‹
, 
unm≠
, 
wΩrŸe˘
, 
group
, *
d©a
, 
°©us
, 
scsi_£n£_key
 
key
, *
ascq
, 
num_ascq
);

899 
wrôeßme16
(
scsi_devi˚
 *
sdev
, 
uöt64_t
 
lba
, 
uöt32_t
 
d©Æí
, 
num_blocks
, 
™ch‹
, 
unm≠
, 
wΩrŸe˘
, 
group
, *
d©a
, 
°©us
, 
scsi_£n£_key
 
key
, *
ascq
, 
num_ascq
);

900 
wrôevîify10
(
scsi_devi˚
 *
sdev
, 
uöt32_t
 
lba
, uöt32_à
d©Æí
, 
blocksize
, 
wΩrŸe˘
, 
dpo
, 
bytchk
, 
group
, *
d©a
, 
°©us
, 
scsi_£n£_key
 
key
, *
ascq
, 
num_ascq
);

901 
wrôevîify12
(
scsi_devi˚
 *
sdev
, 
uöt32_t
 
lba
, uöt32_à
d©Æí
, 
blocksize
, 
wΩrŸe˘
, 
dpo
, 
bytchk
, 
group
, *
d©a
, 
°©us
, 
scsi_£n£_key
 
key
, *
ascq
, 
num_ascq
);

902 
wrôevîify16
(
scsi_devi˚
 *
sdev
, 
uöt64_t
 
lba
, 
uöt32_t
 
d©Æí
, 
blocksize
, 
wΩrŸe˘
, 
dpo
, 
bytchk
, 
group
, *
d©a
, 
°©us
, 
scsi_£n£_key
 
key
, *
ascq
, 
num_ascq
);

904 
£t_swp
(
scsi_devi˚
 *
sdev
);

905 
˛ór_swp
(
scsi_devi˚
 *
sdev
);

907 
exãndedc›y
(
scsi_devi˚
 *
sdev
, 
iscsi_d©a
 *
d©a
, 
°©us
, 
scsi_£n£_key
 
key
, *
ascq
, 
num_ascq
);

908 
gë_desc_Àn
(
ec_des¸_ty≥_code
 
desc_ty≥
);

909 
p›uœã_tgt_desc
(*
desc
, 
ec_des¸_ty≥_code
 
desc_ty≥
, 
luid_ty≥
, 
nul
, 
≥rùhîÆ_ty≥
, 
ªl_öô_p‹t_id
, 
∑d
, 
scsi_devi˚
 *
dev
);

910 
p›uœã_£g_desc_hdr
(*
hdr
, 
ec_des¸_ty≥_code
 
desc_ty≥
, 
dc
, 
ˇt
, 
§c_ödex
, 
d°_ödex
);

911 
p›uœã_£g_desc_b2b
(*
desc
, 
dc
, 
ˇt
, 
§c_ödex
, 
d°_ödex
, 
num_blks
, 
uöt64_t
 
§c_lba
, uöt64_à
d°_lba
);

912 
p›uœã_∑øm_hódî
(*
buf
, 
li°_id
, 
°r
, 
li°_id_ußge
, 
¥io
, 
tgt_desc_Àn
, 
£g_desc_Àn
, 
ölöe_d©a_Àn
);

913 
ª˚ive_c›y_ªsu…s
(
scsi_èsk
 **
èsk
, 
scsi_devi˚
 *
sdev
,

914 
scsi_c›y_ªsu…s_ß
 
ß
, 
li°_id
,

915 **
d©≠
, 
°©us
, 
scsi_£n£_key
 
key
,

916 *
ascq
, 
num_ascq
);

917 
ã°_iscsi_tur_u¡û_good
(
scsi_devi˚
 *
iscsi_sd
, *
num_uas
);

919 
uöt64_t
 
ã°_gë_˛ock_£c
();

	@test-tool/iscsi-test-cu.c

21 
	~"c⁄fig.h
"

23 
	#_GNU_SOURCE


	)

24 
	~<sys/sysˇŒ.h
>

25 
	~<dlf˙.h
>

26 
	~<sys/ty≥s.h
>

27 
	~<°dio.h
>

28 
	~<°dlib.h
>

29 
	~<°döt.h
>

30 
	~<°dboﬁ.h
>

31 
	~<uni°d.h
>

32 
	~<°rög.h
>

33 
	~<gë›t.h
>

34 
	~<‚m©ch.h
>

35 
	~<˘y≥.h
>

37 #ifde‡
HAVE_SG_IO


38 
	~<f˙é.h
>

39 
	~<sys/io˘l.h
>

40 
	~<scsi/sg.h
>

41 
	~<sys/mou¡.h
>

44 
	~<CUnô/CUnô.h
>

45 
	~<CUnô/Basic.h
>

46 
	~<CUnô/Autom©ed.h
>

48 
	~"iscsi.h
"

49 
	~"scsi-lowÀvñ.h
"

50 
	~"iscsi-¥iv©e.h
"

52 
	~"iscsi-suµ‹t.h
"

53 
	~"iscsi-ã°-cu.h
"

54 
	~"iscsi-suµ‹t.h
"

55 
	~"iscsi-mu…ù©h.h
"

57 
	#PROG
 "iscsi-ã°-cu"

	)

59 
	glogÀvñ
 = 
LOG_NORMAL
;

60 
scsi_devi˚
 *
	gsd
 = 
NULL
;

61 
	gmax£˘‹s
;

67 (*
ªÆ_iscsi_queue_pdu
)(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_pdu
 *
pdu
);

74 
CU_Te°Info
 
ã°s_com∑ª™dwrôe
[] = {

75 { (*)"Sim∂e", 
ã°_com∑ª™dwrôe_sim∂e
 },

76 { (*)"DpoFua", 
ã°_com∑ª™dwrôe_dpofua
 },

77 { (*)"Miscom∑ª", 
ã°_com∑ª™dwrôe_miscom∑ª
 },

78 { (*)"Unwrôãn", 
ã°_com∑ª™dwrôe_unwrôãn
 },

80 
ã°_com∑ª™dwrôe_övÆid_d©aout_size
 },

81 
CU_TEST_INFO_NULL


82 
	}
};

84 
CU_Te°Info
 
	gã°s_gë_lba_°©us
[] = {

85 { (*)"Sim∂e", 
ã°_gë_lba_°©us_sim∂e
 },

86 { (*)"Bey⁄dEﬁ", 
ã°_gë_lba_°©us_bey⁄d_eﬁ
 },

87 { (*)"Unm≠SögÀ", 
ã°_gë_lba_°©us_unm≠_sögÀ
 },

88 
CU_TEST_INFO_NULL


91 
CU_Te°Info
 
	gã°s_öquúy
[] = {

92 { (*)"Sènd¨d", 
ã°_öquúy_°™d¨d
 },

93 { (*)"AŒocLígth", 
ã°_öquúy_Æloc_Àngth
},

94 { (*)"EVPD", 
ã°_öquúy_evpd
},

95 { (*)"BlockLimôs", 
ã°_öquúy_block_limôs
},

96 { (*)"M™d©‹yVPDSBC", 
ã°_öquúy_m™d©‹y_vpd_sbc
},

97 { (*)"Suµ‹ãdVPD", 
ã°_öquúy_suµ‹ãd_vpd
},

98 { (*)"Vîsi⁄Des¸ùt‹s", 
ã°_öquúy_vîsi⁄_des¸ùt‹s
},

99 
CU_TEST_INFO_NULL


102 
CU_Te°Info
 
	gã°s_m™d©‹y
[] = {

103 { (*)"M™d©‹ySBC", 
ã°_m™d©‹y_sbc
 },

104 
CU_TEST_INFO_NULL


107 
CU_Te°Info
 
	gã°s_mode£n£6
[] = {

108 { (*)"AŒPages", 
ã°_mode£n£6_Æl_∑ges
 },

109 { (*)"C⁄åﬁ", 
ã°_mode£n£6_c⁄åﬁ
 },

110 { (*)"C⁄åﬁ-D_SENSE", 
ã°_mode£n£6_c⁄åﬁ_d_£n£
 },

111 { (*)"C⁄åﬁ-SWP", 
ã°_mode£n£6_c⁄åﬁ_swp
 },

112 { (*)"ResiduÆs", 
ã°_mode£n£6_ªsiduÆs
 },

113 
CU_TEST_INFO_NULL


116 
CU_Te°Info
 
	gã°s_nomedü
[] = {

117 { (*)"NoMedüSBC", 
ã°_nomedü_sbc
 },

118 
CU_TEST_INFO_NULL


121 
CU_Te°Info
 
	gã°s_‹wrôe
[] = {

122 { (*)"Sim∂e", 
ã°_‹wrôe_sim∂e
 },

123 { (*)"Bey⁄dEﬁ", 
ã°_‹wrôe_bey⁄d_eﬁ
 },

124 { (*)"ZîoBlocks", 
ã°_‹wrôe_0blocks
 },

125 { (*)"PrŸe˘", 
ã°_‹wrôe_wΩrŸe˘
 },

126 { (*)"DpoFua", 
ã°_‹wrôe_dpofua
 },

127 { (*)"Vîify", 
ã°_‹wrôe_vîify
 },

128 
CU_TEST_INFO_NULL


131 
CU_Te°Info
 
	gã°s_¥e„tch10
[] = {

132 { (*)"Sim∂e", 
ã°_¥e„tch10_sim∂e
 },

133 { (*)"Bey⁄dEﬁ", 
ã°_¥e„tch10_bey⁄d_eﬁ
 },

134 { (*)"ZîoBlocks", 
ã°_¥e„tch10_0blocks
 },

135 { (*)"Fœgs", 
ã°_¥e„tch10_Êags
 },

136 
CU_TEST_INFO_NULL


139 
CU_Te°Info
 
	gã°s_¥e„tch16
[] = {

140 { (*)"Sim∂e", 
ã°_¥e„tch16_sim∂e
 },

141 { (*)"Bey⁄dEﬁ", 
ã°_¥e„tch16_bey⁄d_eﬁ
 },

142 { (*)"ZîoBlocks", 
ã°_¥e„tch16_0blocks
 },

143 { (*)"Fœgs", 
ã°_¥e„tch16_Êags
 },

144 
CU_TEST_INFO_NULL


147 
CU_Te°Info
 
	gã°s_¥evíèŒow
[] = {

148 { (*)"Sim∂e", 
ã°_¥evíèŒow_sim∂e
 },

149 { (*)"Eje˘", 
ã°_¥evíèŒow_eje˘
 },

150 { (*)"ITNexusLoss", 
ã°_¥evíèŒow_ô√xus_loss
 },

151 { (*)"Logout", 
ã°_¥evíèŒow_logout
 },

152 { (*)"W¨mRe£t", 
ã°_¥evíèŒow_w¨m_ª£t
 },

153 { (*)"CﬁdRe£t", 
ã°_¥evíèŒow_cﬁd_ª£t
 },

154 { (*)"LUNRe£t", 
ã°_¥evíèŒow_lun_ª£t
 },

155 { (*)"2ITNexu£s", 
ã°_¥evíèŒow_2_ô√xu£s
 },

156 
CU_TEST_INFO_NULL


159 
CU_Te°Info
 
	gã°s_¥ö_ªad_keys
[] = {

160 { (*)"Sim∂e", 
ã°_¥ö_ªad_keys_sim∂e
 },

161 { (*)"Trunˇã", 
ã°_¥ö_ªad_keys_åunˇã
 },

162 
CU_TEST_INFO_NULL


165 
CU_Te°Info
 
	gã°s_¥ö_ªp‹t_ˇps
[] = {

166 { (*)"Sim∂e", 
ã°_¥ö_ªp‹t_ˇps_sim∂e
 },

167 
CU_TEST_INFO_NULL


170 
CU_Te°Info
 
	gã°s_¥out_ªgi°î
[] = {

171 { (*)"Sim∂e", 
ã°_¥out_ªgi°î_sim∂e
 },

172 
CU_TEST_INFO_NULL


175 
CU_Te°Info
 
	gã°s_¥out_ª£rve
[] = {

177 
ã°_¥out_ª£rve_sim∂e
 },

179 
ã°_¥out_ª£rve_ac˚ss_ó
 },

181 
ã°_¥out_ª£rve_ac˚ss_we
 },

183 
ã°_¥out_ª£rve_ac˚ss_óro
 },

185 
ã°_¥out_ª£rve_ac˚ss_wîo
 },

187 
ã°_¥out_ª£rve_ac˚ss_ó¨
 },

189 
ã°_¥out_ª£rve_ac˚ss_wór
 },

191 
ã°_¥out_ª£rve_ow√rshù_ó
 },

193 
ã°_¥out_ª£rve_ow√rshù_we
 },

195 
ã°_¥out_ª£rve_ow√rshù_óro
 },

197 
ã°_¥out_ª£rve_ow√rshù_wîo
 },

199 
ã°_¥out_ª£rve_ow√rshù_ó¨
 },

201 
ã°_¥out_ª£rve_ow√rshù_wór
 },

202 
CU_TEST_INFO_NULL


205 
CU_Te°Info
 
	gã°s_¥out_˛ór
[] = {

207 
ã°_¥out_˛ór_sim∂e
 },

208 
CU_TEST_INFO_NULL


211 
CU_Te°Info
 
	gã°s_¥out_¥ìm±
[] = {

213 
ã°_¥out_¥ìm±_rm_ªg
 },

214 
CU_TEST_INFO_NULL


217 
CU_Te°Info
 
	gã°s_¥ö_£rvi˚a˘i⁄_ønge
[] = {

218 { (*)"R™ge", 
ã°_¥ö_£rvi˚a˘i⁄_ønge
 },

219 
CU_TEST_INFO_NULL


222 
CU_Te°Info
 
	gã°s_ªad6
[] = {

223 { (*)"Sim∂e", 
ã°_ªad6_sim∂e
 },

224 { (*)"Bey⁄dEﬁ", 
ã°_ªad6_bey⁄d_eﬁ
 },

225 
CU_TEST_INFO_NULL


228 
CU_Te°Info
 
	gã°s_ªad10
[] = {

229 { (*)"Sim∂e", 
ã°_ªad10_sim∂e
 },

230 { (*)"Bey⁄dEﬁ", 
ã°_ªad10_bey⁄d_eﬁ
 },

231 { (*)"ZîoBlocks", 
ã°_ªad10_0blocks
 },

232 { (*)"RódPrŸe˘", 
ã°_ªad10_rd¥Ÿe˘
 },

233 { (*)"DpoFua", 
ã°_ªad10_dpofua
 },

234 { (*)"Async", 
ã°_async_ªad
 },

235 
CU_TEST_INFO_NULL


238 
CU_Te°Info
 
	gã°s_ªad12
[] = {

239 { (*)"Sim∂e", 
ã°_ªad12_sim∂e
 },

240 { (*)"Bey⁄dEﬁ", 
ã°_ªad12_bey⁄d_eﬁ
 },

241 { (*)"ZîoBlocks", 
ã°_ªad12_0blocks
 },

242 { (*)"RódPrŸe˘", 
ã°_ªad12_rd¥Ÿe˘
 },

243 { (*)"DpoFua", 
ã°_ªad12_dpofua
 },

244 
CU_TEST_INFO_NULL


247 
CU_Te°Info
 
	gã°s_ªad16
[] = {

248 { (*)"Sim∂e", 
ã°_ªad16_sim∂e
 },

249 { (*)"Bey⁄dEﬁ", 
ã°_ªad16_bey⁄d_eﬁ
 },

250 { (*)"ZîoBlocks", 
ã°_ªad16_0blocks
 },

251 { (*)"RódPrŸe˘", 
ã°_ªad16_rd¥Ÿe˘
 },

252 { (*)"DpoFua", 
ã°_ªad16_dpofua
 },

253 
CU_TEST_INFO_NULL


256 
CU_Te°Info
 
	gã°s_ªadˇ∑côy10
[] = {

257 { (*)"Sim∂e", 
ã°_ªadˇ∑côy10_sim∂e
 },

258 
CU_TEST_INFO_NULL


261 
CU_Te°Info
 
	gã°s_ªadˇ∑côy16
[] = {

262 { (*)"Sim∂e", 
ã°_ªadˇ∑côy16_sim∂e
 },

263 { (*)"AŒo˛í", 
ã°_ªadˇ∑côy16_Ælo˛í
 },

264 { (*)"PI", 
ã°_ªadˇ∑côy16_¥Ÿe˘i⁄
 },

265 { (*)"Suµ‹t", 
ã°_ªadˇ∑côy16_suµ‹t
 },

266 
CU_TEST_INFO_NULL


269 
CU_Te°Info
 
	gã°s_ªadde„˘d©a10
[] = {

270 { (*)"Sim∂e", 
ã°_ªadde„˘d©a10_sim∂e
 },

271 
CU_TEST_INFO_NULL


274 
CU_Te°Info
 
	gã°s_ªadde„˘d©a12
[] = {

275 { (*)"Sim∂e", 
ã°_ªadde„˘d©a12_sim∂e
 },

276 
CU_TEST_INFO_NULL


279 
CU_Te°Info
 
	gã°s_ªad⁄ly
[] = {

280 { (*)"RódO∆ySBC", 
ã°_ªad⁄ly_sbc
 },

281 
CU_TEST_INFO_NULL


284 
CU_Te°Info
 
	gã°s_ßnôize
[] = {

285 { (*)"BlockEø£", 
ã°_ßnôize_block_îa£
 },

286 { (*)"BlockEø£Re£rved", 
ã°_ßnôize_block_îa£_ª£rved
 },

287 { (*)"Cry±oEø£", 
ã°_ßnôize_¸y±o_îa£
 },

288 { (*)"Cry±oEø£Re£rved", 
ã°_ßnôize_¸y±o_îa£_ª£rved
 },

289 { (*)"ExôFaûuªMode", 
ã°_ßnôize_exô_Áûuª_mode
 },

290 { (*)"InvÆidSîvi˚A˘i⁄", 
ã°_ßnôize_övÆid_£rvi˚a˘i⁄
 },

291 { (*)"Ovîwrôe", 
ã°_ßnôize_ovîwrôe
 },

292 { (*)"OvîwrôeRe£rved", 
ã°_ßnôize_ovîwrôe_ª£rved
 },

293 { (*)"Ród⁄ly", 
ã°_ßnôize_ªad⁄ly
 },

294 { (*)"Re£rv©i⁄s", 
ã°_ßnôize_ª£rv©i⁄s
 },

295 { (*)"Re£t", 
ã°_ßnôize_ª£t
 },

296 
CU_TEST_INFO_NULL


299 
CU_Te°Info
 
	gã°s_exãnded_c›y
[] = {

300 { (*)"Sim∂e", 
ã°_exãndedc›y_sim∂e
 },

301 { (*)"P¨amHdr", 
ã°_exãndedc›y_∑øm
 },

302 { (*)"Des¸Limôs", 
ã°_exãndedc›y_des¸_limôs
 },

303 { (*)"Des¸Ty≥", 
ã°_exãndedc›y_des¸_ty≥
 },

304 { (*)"VÆidTgtDes¸", 
ã°_exãndedc›y_vÆid©e_tgt_des¸
 },

305 { (*)"VÆidSegDes¸", 
ã°_exãndedc›y_vÆid©e_£g_des¸
 },

306 
CU_TEST_INFO_NULL


309 
CU_Te°Info
 
	gã°s_ª˚ive_c›y_ªsu…s
[] = {

310 { (*)"C›ySètus", 
ã°_ª˚ive_c›y_ªsu…s_c›y_°©us
 },

311 { (*)"OpP¨ams", 
ã°_ª˚ive_c›y_ªsu…s_›_∑øms
 },

312 
CU_TEST_INFO_NULL


315 
CU_Te°Info
 
	gã°s_ªp‹t_suµ‹ãd_›codes
[] = {

316 { (*)"Sim∂e", 
ã°_ªp‹t_suµ‹ãd_›codes_sim∂e
 },

317 { (*)"O√Comm™d", 
ã°_ªp‹t_suµ‹ãd_›codes_⁄e_comm™d
 },

318 { (*)"RCTD", 
ã°_ªp‹t_suµ‹ãd_›codes_r˘d
 },

319 { (*)"SERVACTV", 
ã°_ªp‹t_suµ‹ãd_›codes_£rva˘v
 },

320 
CU_TEST_INFO_NULL


323 
CU_Te°Info
 
	gã°s_ª£rve6
[] = {

324 { (*)"Sim∂e", 
ã°_ª£rve6_sim∂e
 },

325 { (*)"2Inôüt‹s", 
ã°_ª£rve6_2öôüt‹s
 },

326 { (*)"Logout", 
ã°_ª£rve6_logout
 },

327 { (*)"ITNexusLoss", 
ã°_ª£rve6_ô√xus_loss
 },

328 { (*)"T¨gëCﬁdRe£t", 
ã°_ª£rve6_èrgë_cﬁd_ª£t
 },

329 { (*)"T¨gëW¨mRe£t", 
ã°_ª£rve6_èrgë_w¨m_ª£t
 },

330 { (*)"LUNRe£t", 
ã°_ª£rve6_lun_ª£t
 },

331 
CU_TEST_INFO_NULL


334 
CU_Te°Info
 
	gã°s_ã°unôªady
[] = {

335 { (*)"Sim∂e", 
ã°_ã°unôªady_sim∂e
 },

336 
CU_TEST_INFO_NULL


339 
CU_Te°Info
 
	gã°s_°¨t°›unô
[] = {

340 { (*)"Sim∂e", 
ã°_°¨t°›unô_sim∂e
 },

341 { (*)"PwrCnd", 
ã°_°¨t°›unô_pwr˙d
 },

342 { (*)"NoL€j", 
ã°_°¨t°›unô_nﬁ€j
 },

343 
CU_TEST_INFO_NULL


346 
CU_Te°Info
 
	gã°s_unm≠
[] = {

347 { (*)"Sim∂e", 
ã°_unm≠_sim∂e
 },

348 { (*)"VPD", 
ã°_unm≠_vpd
 },

349 { (*)"ZîoBlocks", 
ã°_unm≠_0blocks
 },

350 
CU_TEST_INFO_NULL


353 
CU_Te°Info
 
	gã°s_vîify10
[] = {

354 { (*)"Sim∂e", 
ã°_vîify10_sim∂e
 },

355 { (*)"Bey⁄dEﬁ", 
ã°_vîify10_bey⁄d_eﬁ
 },

356 { (*)"ZîoBlocks", 
ã°_vîify10_0blocks
 },

357 { (*)"VîifyPrŸe˘", 
ã°_vîify10_vΩrŸe˘
 },

358 { (*)"Fœgs", 
ã°_vîify10_Êags
 },

359 { (*)"Dpo", 
ã°_vîify10_dpo
 },

360 { (*)"Mism©ch", 
ã°_vîify10_mism©ch
 },

361 { (*)"Mism©chNoCmp", 
ã°_vîify10_mism©ch_no_cmp
 },

362 
CU_TEST_INFO_NULL


365 
CU_Te°Info
 
	gã°s_vîify12
[] = {

366 { (*)"Sim∂e", 
ã°_vîify12_sim∂e
 },

367 { (*)"Bey⁄dEﬁ", 
ã°_vîify12_bey⁄d_eﬁ
 },

368 { (*)"ZîoBlocks", 
ã°_vîify12_0blocks
 },

369 { (*)"VîifyPrŸe˘", 
ã°_vîify12_vΩrŸe˘
 },

370 { (*)"Fœgs", 
ã°_vîify12_Êags
 },

371 { (*)"Dpo", 
ã°_vîify12_dpo
 },

372 { (*)"Mism©ch", 
ã°_vîify12_mism©ch
 },

373 { (*)"Mism©chNoCmp", 
ã°_vîify12_mism©ch_no_cmp
 },

374 
CU_TEST_INFO_NULL


377 
CU_Te°Info
 
	gã°s_vîify16
[] = {

378 { (*)"Sim∂e", 
ã°_vîify16_sim∂e
 },

379 { (*)"Bey⁄dEﬁ", 
ã°_vîify16_bey⁄d_eﬁ
 },

380 { (*)"ZîoBlocks", 
ã°_vîify16_0blocks
 },

381 { (*)"VîifyPrŸe˘", 
ã°_vîify16_vΩrŸe˘
 },

382 { (*)"Fœgs", 
ã°_vîify16_Êags
 },

383 { (*)"Dpo", 
ã°_vîify16_dpo
 },

384 { (*)"Mism©ch", 
ã°_vîify16_mism©ch
 },

385 { (*)"Mism©chNoCmp", 
ã°_vîify16_mism©ch_no_cmp
 },

386 
CU_TEST_INFO_NULL


389 
CU_Te°Info
 
	gã°s_wrôe10
[] = {

390 { (*)"Sim∂e", 
ã°_wrôe10_sim∂e
 },

391 { (*)"Bey⁄dEﬁ", 
ã°_wrôe10_bey⁄d_eﬁ
 },

392 { (*)"ZîoBlocks", 
ã°_wrôe10_0blocks
 },

393 { (*)"WrôePrŸe˘", 
ã°_wrôe10_wΩrŸe˘
 },

394 { (*)"DpoFua", 
ã°_wrôe10_dpofua
 },

395 { (*)"Async", 
ã°_async_wrôe
 },

396 
CU_TEST_INFO_NULL


399 
CU_Te°Info
 
	gã°s_wrôe12
[] = {

400 { (*)"Sim∂e", 
ã°_wrôe12_sim∂e
 },

401 { (*)"Bey⁄dEﬁ", 
ã°_wrôe12_bey⁄d_eﬁ
 },

402 { (*)"ZîoBlocks", 
ã°_wrôe12_0blocks
 },

403 { (*)"WrôePrŸe˘", 
ã°_wrôe12_wΩrŸe˘
 },

404 { (*)"DpoFua", 
ã°_wrôe12_dpofua
 },

405 
CU_TEST_INFO_NULL


408 
CU_Te°Info
 
	gã°s_wrôe16
[] = {

409 { (*)"Sim∂e", 
ã°_wrôe16_sim∂e
 },

410 { (*)"Bey⁄dEﬁ", 
ã°_wrôe16_bey⁄d_eﬁ
 },

411 { (*)"ZîoBlocks", 
ã°_wrôe16_0blocks
 },

412 { (*)"WrôePrŸe˘", 
ã°_wrôe16_wΩrŸe˘
 },

413 { (*)"DpoFua", 
ã°_wrôe16_dpofua
 },

414 
CU_TEST_INFO_NULL


417 
CU_Te°Info
 
	gã°s_wrôótomic16
[] = {

418 { (*)"Sim∂e", 
ã°_wrôótomic16_sim∂e
 },

419 { (*)"Bey⁄dEﬁ", 
ã°_wrôótomic16_bey⁄d_eﬁ
 },

420 { (*)"ZîoBlocks", 
ã°_wrôótomic16_0blocks
 },

421 { (*)"WrôePrŸe˘", 
ã°_wrôótomic16_wΩrŸe˘
 },

422 { (*)"DpoFua", 
ã°_wrôótomic16_dpofua
 },

423 { (*)"VPD", 
ã°_wrôótomic16_vpd
 },

424 
CU_TEST_INFO_NULL


427 
CU_Te°Info
 
	gã°s_wrôeßme10
[] = {

428 { (*)"Sim∂e", 
ã°_wrôeßme10_sim∂e
 },

429 { (*)"Bey⁄dEﬁ", 
ã°_wrôeßme10_bey⁄d_eﬁ
 },

430 { (*)"ZîoBlocks", 
ã°_wrôeßme10_0blocks
 },

431 { (*)"WrôePrŸe˘", 
ã°_wrôeßme10_wΩrŸe˘
 },

432 { (*)"Unm≠", 
ã°_wrôeßme10_unm≠
 },

433 { (*)"Unm≠U«lig√d", 
ã°_wrôeßme10_unm≠_u«lig√d
 },

434 { (*)"Unm≠U¡ûEnd", 
ã°_wrôeßme10_unm≠_u¡û_íd
 },

435 { (*)"Unm≠VPD", 
ã°_wrôeßme10_unm≠_vpd
 },

436 { (*)"Check", 
ã°_wrôeßme10_check
 },

437 { (*)"InvÆidD©aOutSize", 
ã°_wrôeßme10_övÆid_d©aout_size
 },

438 
CU_TEST_INFO_NULL


441 
CU_Te°Info
 
	gã°s_wrôeßme16
[] = {

442 { (*)"Sim∂e", 
ã°_wrôeßme16_sim∂e
 },

443 { (*)"Bey⁄dEﬁ", 
ã°_wrôeßme16_bey⁄d_eﬁ
 },

444 { (*)"ZîoBlocks", 
ã°_wrôeßme16_0blocks
 },

445 { (*)"WrôePrŸe˘", 
ã°_wrôeßme16_wΩrŸe˘
 },

446 { (*)"Unm≠", 
ã°_wrôeßme16_unm≠
 },

447 { (*)"Unm≠U«lig√d", 
ã°_wrôeßme16_unm≠_u«lig√d
 },

448 { (*)"Unm≠U¡ûEnd", 
ã°_wrôeßme16_unm≠_u¡û_íd
 },

449 { (*)"Unm≠VPD", 
ã°_wrôeßme16_unm≠_vpd
 },

450 { (*)"Check", 
ã°_wrôeßme16_check
 },

451 { (*)"InvÆidD©aOutSize", 
ã°_wrôeßme16_övÆid_d©aout_size
 },

452 
CU_TEST_INFO_NULL


455 
CU_Te°Info
 
	gã°s_wrôevîify10
[] = {

456 { (*)"Sim∂e", 
ã°_wrôevîify10_sim∂e
 },

457 { (*)"Bey⁄dEﬁ", 
ã°_wrôevîify10_bey⁄d_eﬁ
 },

458 { (*)"ZîoBlocks", 
ã°_wrôevîify10_0blocks
 },

459 { (*)"WrôePrŸe˘", 
ã°_wrôevîify10_wΩrŸe˘
 },

460 { (*)"Fœgs", 
ã°_wrôevîify10_Êags
 },

461 { (*)"Dpo", 
ã°_wrôevîify10_dpo
 },

462 
CU_TEST_INFO_NULL


465 
CU_Te°Info
 
	gã°s_wrôevîify12
[] = {

466 { (*)"Sim∂e", 
ã°_wrôevîify12_sim∂e
 },

467 { (*)"Bey⁄dEﬁ", 
ã°_wrôevîify12_bey⁄d_eﬁ
 },

468 { (*)"ZîoBlocks", 
ã°_wrôevîify12_0blocks
 },

469 { (*)"WrôePrŸe˘", 
ã°_wrôevîify12_wΩrŸe˘
 },

470 { (*)"Fœgs", 
ã°_wrôevîify12_Êags
 },

471 { (*)"Dpo", 
ã°_wrôevîify12_dpo
 },

472 
CU_TEST_INFO_NULL


475 
CU_Te°Info
 
	gã°s_wrôevîify16
[] = {

476 { (*)"Sim∂e", 
ã°_wrôevîify16_sim∂e
 },

477 { (*)"Bey⁄dEﬁ", 
ã°_wrôevîify16_bey⁄d_eﬁ
 },

478 { (*)"ZîoBlocks", 
ã°_wrôevîify16_0blocks
 },

479 { (*)"WrôePrŸe˘", 
ã°_wrôevîify16_wΩrŸe˘
 },

480 { (*)"Fœgs", 
ã°_wrôevîify16_Êags
 },

481 { (*)"Dpo", 
ã°_wrôevîify16_dpo
 },

482 
CU_TEST_INFO_NULL


485 
CU_Te°Info
 
	gã°s_mu…ù©hio
[] = {

486 { (*)"Sim∂e", 
ã°_mu…ù©hio_sim∂e
 },

487 { (*)"Re£t", 
ã°_mu…ù©hio_ª£t
 },

488 { (*)"Com∑ªAndWrôe", 
ã°_mu…ù©hio_com∑ª™dwrôe
 },

489 { (*)"Com∑ªAndWrôeAsync", 
ã°_mpio_async_ˇw
 },

490 
CU_TEST_INFO_NULL


493 
	slibiscsi_suôe_öfo
 {

494 c⁄° *
	mpName
;

495 
CU_InôülizeFunc
 
	mpInôFunc
;

496 
CU_CÀ™upFunc
 
	mpCÀ™upFunc
;

497 
CU_SëUpFunc
 
	mpSëUpFunc
;

498 
CU_TórDownFunc
 
	mpTórDownFunc
;

499 
CU_Te°Info
 *
	mpTe°s
;

500 } 
	tlibiscsi_suôe_öfo
;

502 
	#NON_PGR_FUNCS
 
suôe_öô
, 
suôe_˛ónup
, 
ã°_£tup
, 
ã°_ã¨down


	)

505 
CU_Te°Info
 
	gã°s_iscsi_tmf
[] = {

506 { (*)"Ab‹tTaskSim∂eAsync", 
ã°_async_ab‹t_sim∂e
 },

507 { (*)"LUNRe£tSim∂eAsync", 
ã°_async_lu_ª£t_sim∂e
 },

508 
CU_TEST_INFO_NULL


512 
libiscsi_suôe_öfo
 
	gscsi_suôes
[] = {

513 { "Com∑ªAndWrôe", 
NON_PGR_FUNCS
, 
ã°s_com∑ª™dwrôe
 },

514 { "ExãndedC›y", 
NON_PGR_FUNCS
, 
ã°s_exãnded_c›y
 },

515 { "GëLBASètus", 
NON_PGR_FUNCS
, 
ã°s_gë_lba_°©us
 },

516 { "Inquúy", 
NON_PGR_FUNCS
, 
ã°s_öquúy
 },

517 { "M™d©‹y", 
NON_PGR_FUNCS
, 
ã°s_m™d©‹y
 },

518 { "ModeSí£6", 
NON_PGR_FUNCS
, 
ã°s_mode£n£6
 },

519 { "NoMedü", 
NON_PGR_FUNCS
, 
ã°s_nomedü
 },

520 { "OrWrôe", 
NON_PGR_FUNCS
, 
ã°s_‹wrôe
 },

521 { "Pª„tch10", 
NON_PGR_FUNCS
, 
ã°s_¥e„tch10
 },

522 { "Pª„tch16", 
NON_PGR_FUNCS
, 
ã°s_¥e„tch16
 },

523 { "PªvítAŒow", 
NON_PGR_FUNCS
, 
ã°s_¥evíèŒow
 },

524 { "PröRódKeys", 
NON_PGR_FUNCS
, 
ã°s_¥ö_ªad_keys
 },

525 { "PröSîvi˚a˘i⁄R™ge", 
NON_PGR_FUNCS
, 
ã°s_¥ö_£rvi˚a˘i⁄_ønge
 },

526 { "PröRï‹tC≠abûôõs", 
NON_PGR_FUNCS
, 
ã°s_¥ö_ªp‹t_ˇps
 },

527 { "ProutRegi°î", 
NON_PGR_FUNCS
, 
ã°s_¥out_ªgi°î
 },

528 { "ProutRe£rve", 
NON_PGR_FUNCS
, 
ã°s_¥out_ª£rve
 },

529 { "ProutCÀ¨", 
NON_PGR_FUNCS
, 
ã°s_¥out_˛ór
 },

530 { "ProutPªem±", 
NON_PGR_FUNCS
, 
ã°s_¥out_¥ìm±
 },

531 { "Ród6", 
NON_PGR_FUNCS
, 
ã°s_ªad6
 },

532 { "Ród10", 
NON_PGR_FUNCS
, 
ã°s_ªad10
 },

533 { "Ród12", 
NON_PGR_FUNCS
, 
ã°s_ªad12
 },

534 { "Ród16", 
NON_PGR_FUNCS
, 
ã°s_ªad16
 },

535 { "RódC≠acôy10", 
NON_PGR_FUNCS
, 
ã°s_ªadˇ∑côy10
 },

536 { "RódC≠acôy16", 
NON_PGR_FUNCS
, 
ã°s_ªadˇ∑côy16
 },

537 { "RódDe„˘D©a10", 
NON_PGR_FUNCS
, 
ã°s_ªadde„˘d©a10
 },

538 { "RódDe„˘D©a12", 
NON_PGR_FUNCS
, 
ã°s_ªadde„˘d©a12
 },

539 { "RódO∆y", 
NON_PGR_FUNCS
, 
ã°s_ªad⁄ly
 },

540 { "Re˚iveC›yResu…s", 
NON_PGR_FUNCS
, 
ã°s_ª˚ive_c›y_ªsu…s
 },

541 { "Rï‹tSuµ‹ãdOpcodes", 
NON_PGR_FUNCS
,

542 
ã°s_ªp‹t_suµ‹ãd_›codes
 },

543 { "Re£rve6", 
NON_PGR_FUNCS
, 
ã°s_ª£rve6
 },

544 { "S™ôize", 
NON_PGR_FUNCS
, 
ã°s_ßnôize
 },

545 { "SèπSt›Unô", 
NON_PGR_FUNCS
, 
ã°s_°¨t°›unô
 },

546 { "Te°UnôRódy", 
NON_PGR_FUNCS
, 
ã°s_ã°unôªady
 },

547 { "Unm≠", 
NON_PGR_FUNCS
, 
ã°s_unm≠
 },

548 { "Vîify10", 
NON_PGR_FUNCS
, 
ã°s_vîify10
 },

549 { "Vîify12", 
NON_PGR_FUNCS
, 
ã°s_vîify12
 },

550 { "Vîify16", 
NON_PGR_FUNCS
, 
ã°s_vîify16
 },

551 { "Wrôe10", 
NON_PGR_FUNCS
, 
ã°s_wrôe10
 },

552 { "Wrôe12", 
NON_PGR_FUNCS
, 
ã°s_wrôe12
 },

553 { "Wrôe16", 
NON_PGR_FUNCS
, 
ã°s_wrôe16
 },

554 { "WrôeAtomic16", 
NON_PGR_FUNCS
, 
ã°s_wrôótomic16
 },

555 { "WrôeSame10", 
NON_PGR_FUNCS
, 
ã°s_wrôeßme10
 },

556 { "WrôeSame16", 
NON_PGR_FUNCS
, 
ã°s_wrôeßme16
 },

557 { "WrôeVîify10", 
NON_PGR_FUNCS
, 
ã°s_wrôevîify10
 },

558 { "WrôeVîify12", 
NON_PGR_FUNCS
, 
ã°s_wrôevîify12
 },

559 { "WrôeVîify16", 
NON_PGR_FUNCS
, 
ã°s_wrôevîify16
 },

560 { "Mu…ù©hIO", 
NON_PGR_FUNCS
, 
ã°s_mu…ù©hio
 },

561 { "iSCSITMF", 
NON_PGR_FUNCS
, 
ã°s_iscsi_tmf
 },

562 { 
NULL
, NULL, NULL, NULL, NULL, NULL }

565 
CU_Te°Info
 
	gã°s_iscsi_cmd¢
[] = {

566 { (*)"iSCSICmdSnTooHigh", 
ã°_iscsi_cmd¢_toohigh
 },

567 { (*)"iSCSICmdSnTooLow", 
ã°_iscsi_cmd¢_toﬁow
 },

568 
CU_TEST_INFO_NULL


571 
CU_Te°Info
 
	gã°s_iscsi_d©a¢
[] = {

572 { (*)"iSCSID©aSnInvÆid", 
ã°_iscsi_d©a¢_övÆid
 },

573 
CU_TEST_INFO_NULL


576 
CU_Te°Info
 
	gã°s_iscsi_ªsiduÆs
[] = {

577 { (*)"Ród10InvÆid", 
ã°_ªad10_övÆid
 },

578 { (*)"Ród10ResiduÆs", 
ã°_ªad10_ªsiduÆs
 },

579 { (*)"Ród12ResiduÆs", 
ã°_ªad12_ªsiduÆs
 },

580 { (*)"Ród16ResiduÆs", 
ã°_ªad16_ªsiduÆs
 },

581 { (*)"Wrôe10ResiduÆs", 
ã°_wrôe10_ªsiduÆs
 },

582 { (*)"Wrôe12ResiduÆs", 
ã°_wrôe12_ªsiduÆs
 },

583 { (*)"Wrôe16ResiduÆs", 
ã°_wrôe16_ªsiduÆs
 },

584 { (*)"WrôeVîify10ResiduÆs", 
ã°_wrôevîify10_ªsiduÆs
 },

585 { (*)"WrôeVîify12ResiduÆs", 
ã°_wrôevîify12_ªsiduÆs
 },

586 { (*)"WrôeVîify16ResiduÆs", 
ã°_wrôevîify16_ªsiduÆs
 },

587 
CU_TEST_INFO_NULL


591 
libiscsi_suôe_öfo
 
	giscsi_suôes
[] = {

592 { "iSCSIcmd¢", 
NON_PGR_FUNCS
,

593 
ã°s_iscsi_cmd¢
 },

594 { "iSCSId©a¢", 
NON_PGR_FUNCS
,

595 
ã°s_iscsi_d©a¢
 },

596 { "iSCSIResiduÆs", 
NON_PGR_FUNCS
,

597 
ã°s_iscsi_ªsiduÆs
 },

598 { "iSCSITMF", 
NON_PGR_FUNCS
,

599 
ã°s_iscsi_tmf
 },

600 { 
NULL
, NULL, NULL, NULL, NULL, NULL }

604 
libiscsi_suôe_öfo
 
	gÆl_suôes
[] = {

605 { "Com∑ªAndWrôe", 
NON_PGR_FUNCS
, 
ã°s_com∑ª™dwrôe
 },

606 { "ExãndedC›y", 
NON_PGR_FUNCS
, 
ã°s_exãnded_c›y
 },

607 { "GëLBASètus", 
NON_PGR_FUNCS
, 
ã°s_gë_lba_°©us
 },

608 { "Inquúy", 
NON_PGR_FUNCS
, 
ã°s_öquúy
 },

609 { "M™d©‹y", 
NON_PGR_FUNCS
, 
ã°s_m™d©‹y
 },

610 { "ModeSí£6", 
NON_PGR_FUNCS
, 
ã°s_mode£n£6
 },

611 { "NoMedü", 
NON_PGR_FUNCS
, 
ã°s_nomedü
 },

612 { "OrWrôe", 
NON_PGR_FUNCS
, 
ã°s_‹wrôe
 },

613 { "Pª„tch10", 
NON_PGR_FUNCS
, 
ã°s_¥e„tch10
 },

614 { "Pª„tch16", 
NON_PGR_FUNCS
, 
ã°s_¥e„tch16
 },

615 { "PªvítAŒow", 
NON_PGR_FUNCS
, 
ã°s_¥evíèŒow
 },

616 { "PröRódKeys", 
NON_PGR_FUNCS
, 
ã°s_¥ö_ªad_keys
 },

617 { "PröSîvi˚a˘i⁄R™ge", 
NON_PGR_FUNCS
,

618 
ã°s_¥ö_£rvi˚a˘i⁄_ønge
 },

619 { "PröRï‹tC≠abûôõs", 
NON_PGR_FUNCS
, 
ã°s_¥ö_ªp‹t_ˇps
 },

620 { "ProutRegi°î", 
NON_PGR_FUNCS
, 
ã°s_¥out_ªgi°î
 },

621 { "ProutRe£rve", 
NON_PGR_FUNCS
, 
ã°s_¥out_ª£rve
 },

622 { "ProutCÀ¨", 
NON_PGR_FUNCS
, 
ã°s_¥out_˛ór
 },

623 { "ProutPªem±", 
NON_PGR_FUNCS
, 
ã°s_¥out_¥ìm±
 },

624 { "Ród6", 
NON_PGR_FUNCS
, 
ã°s_ªad6
 },

625 { "Ród10", 
NON_PGR_FUNCS
, 
ã°s_ªad10
 },

626 { "Ród12", 
NON_PGR_FUNCS
, 
ã°s_ªad12
 },

627 { "Ród16", 
NON_PGR_FUNCS
, 
ã°s_ªad16
 },

628 { "RódC≠acôy10", 
NON_PGR_FUNCS
, 
ã°s_ªadˇ∑côy10
 },

629 { "RódC≠acôy16", 
NON_PGR_FUNCS
, 
ã°s_ªadˇ∑côy16
 },

630 { "RódDe„˘D©a10", 
NON_PGR_FUNCS
, 
ã°s_ªadde„˘d©a10
 },

631 { "RódDe„˘D©a12", 
NON_PGR_FUNCS
, 
ã°s_ªadde„˘d©a12
 },

632 { "RódO∆y", 
NON_PGR_FUNCS
, 
ã°s_ªad⁄ly
 },

633 { "Re˚iveC›yResu…s", 
NON_PGR_FUNCS
, 
ã°s_ª˚ive_c›y_ªsu…s
 },

634 { "Rï‹tSuµ‹ãdOpcodes", 
NON_PGR_FUNCS
,

635 
ã°s_ªp‹t_suµ‹ãd_›codes
 },

636 { "Re£rve6", 
NON_PGR_FUNCS
, 
ã°s_ª£rve6
 },

637 { "S™ôize", 
NON_PGR_FUNCS
, 
ã°s_ßnôize
 },

638 { "SèπSt›Unô", 
NON_PGR_FUNCS
, 
ã°s_°¨t°›unô
 },

639 { "Te°UnôRódy", 
NON_PGR_FUNCS
, 
ã°s_ã°unôªady
 },

640 { "Unm≠", 
NON_PGR_FUNCS
, 
ã°s_unm≠
 },

641 { "Vîify10", 
NON_PGR_FUNCS
, 
ã°s_vîify10
 },

642 { "Vîify12", 
NON_PGR_FUNCS
, 
ã°s_vîify12
 },

643 { "Vîify16", 
NON_PGR_FUNCS
, 
ã°s_vîify16
 },

644 { "Wrôe10", 
NON_PGR_FUNCS
, 
ã°s_wrôe10
 },

645 { "Wrôe12", 
NON_PGR_FUNCS
, 
ã°s_wrôe12
 },

646 { "Wrôe16", 
NON_PGR_FUNCS
, 
ã°s_wrôe16
 },

647 { "WrôeAtomic16", 
NON_PGR_FUNCS
, 
ã°s_wrôótomic16
 },

648 { "WrôeSame10", 
NON_PGR_FUNCS
, 
ã°s_wrôeßme10
 },

649 { "WrôeSame16", 
NON_PGR_FUNCS
, 
ã°s_wrôeßme16
 },

650 { "WrôeVîify10", 
NON_PGR_FUNCS
, 
ã°s_wrôevîify10
 },

651 { "WrôeVîify12", 
NON_PGR_FUNCS
, 
ã°s_wrôevîify12
 },

652 { "WrôeVîify16", 
NON_PGR_FUNCS
, 
ã°s_wrôevîify16
 },

653 { "iSCSIcmd¢", 
NON_PGR_FUNCS
, 
ã°s_iscsi_cmd¢
 },

654 { "iSCSId©a¢", 
NON_PGR_FUNCS
, 
ã°s_iscsi_d©a¢
 },

655 { "iSCSIResiduÆs", 
NON_PGR_FUNCS
, 
ã°s_iscsi_ªsiduÆs
 },

656 { "iSCSITMF", 
NON_PGR_FUNCS
, 
ã°s_iscsi_tmf
 },

657 { "Mu…ù©hIO", 
NON_PGR_FUNCS
, 
ã°s_mu…ù©hio
 },

658 { 
NULL
, NULL, NULL, NULL, NULL, NULL },

661 
libiscsi_suôe_öfo
 
	glöux_suôes
[] = {

662 { "Com∑ªAndWrôe", 
NON_PGR_FUNCS
, 
ã°s_com∑ª™dwrôe
 },

663 { "GëLBASètus", 
NON_PGR_FUNCS
, 
ã°s_gë_lba_°©us
 },

664 { "Inquúy", 
NON_PGR_FUNCS
, 
ã°s_öquúy
 },

665 { "M™d©‹y", 
NON_PGR_FUNCS
, 
ã°s_m™d©‹y
 },

666 { "ModeSí£6", 
NON_PGR_FUNCS
, 
ã°s_mode£n£6
 },

667 { "OrWrôe", 
NON_PGR_FUNCS
, 
ã°s_‹wrôe
 },

668 { "Pª„tch10", 
NON_PGR_FUNCS
, 
ã°s_¥e„tch10
 },

669 { "Pª„tch16", 
NON_PGR_FUNCS
, 
ã°s_¥e„tch16
 },

670 { "Ród10", 
NON_PGR_FUNCS
, 
ã°s_ªad10
 },

671 { "Ród12", 
NON_PGR_FUNCS
, 
ã°s_ªad12
 },

672 { "Ród16", 
NON_PGR_FUNCS
, 
ã°s_ªad16
 },

673 { "RódC≠acôy10", 
NON_PGR_FUNCS
, 
ã°s_ªadˇ∑côy10
 },

674 { "RódC≠acôy16", 
NON_PGR_FUNCS
, 
ã°s_ªadˇ∑côy16
 },

675 { "RódDe„˘D©a10", 
NON_PGR_FUNCS
, 
ã°s_ªadde„˘d©a10
 },

676 { "RódDe„˘D©a12", 
NON_PGR_FUNCS
, 
ã°s_ªadde„˘d©a12
 },

677 { "RódO∆y", 
NON_PGR_FUNCS
, 
ã°s_ªad⁄ly
 },

678 { "Rï‹tSuµ‹ãdOpcodes", 
NON_PGR_FUNCS
,

679 
ã°s_ªp‹t_suµ‹ãd_›codes
 },

680 { "Te°UnôRódy", 
NON_PGR_FUNCS
, 
ã°s_ã°unôªady
 },

681 { "Unm≠", 
NON_PGR_FUNCS
, 
ã°s_unm≠
 },

682 { "Vîify10", 
NON_PGR_FUNCS
, 
ã°s_vîify10
 },

683 { "Vîify12", 
NON_PGR_FUNCS
, 
ã°s_vîify12
 },

684 { "Vîify16", 
NON_PGR_FUNCS
, 
ã°s_vîify16
 },

685 { "Wrôe10", 
NON_PGR_FUNCS
, 
ã°s_wrôe10
 },

686 { "Wrôe12", 
NON_PGR_FUNCS
, 
ã°s_wrôe12
 },

687 { "Wrôe16", 
NON_PGR_FUNCS
, 
ã°s_wrôe16
 },

688 { "WrôeAtomic16", 
NON_PGR_FUNCS
, 
ã°s_wrôótomic16
 },

689 { "WrôeSame10", 
NON_PGR_FUNCS
, 
ã°s_wrôeßme10
 },

690 { "WrôeSame16", 
NON_PGR_FUNCS
, 
ã°s_wrôeßme16
 },

691 { "WrôeVîify10", 
NON_PGR_FUNCS
, 
ã°s_wrôevîify10
 },

692 { "WrôeVîify12", 
NON_PGR_FUNCS
, 
ã°s_wrôevîify12
 },

693 { "WrôeVîify16", 
NON_PGR_FUNCS
, 
ã°s_wrôevîify16
 },

694 { "Mu…ù©hIO", 
NON_PGR_FUNCS
, 
ã°s_mu…ù©hio
 },

695 { "iSCSITMF", 
NON_PGR_FUNCS
, 
ã°s_iscsi_tmf
 },

696 { 
NULL
, NULL, NULL, NULL, NULL, NULL },

699 
	sã°_Ámûy
 {

700 c⁄° *
	m«me
;

701 
libiscsi_suôe_öfo
 *
	msuôes
;

704 
ã°_Ámûy
 
	gÁmûõs
[] = {

705 { "ALL", 
Æl_suôes
 },

706 { "SCSI", 
scsi_suôes
 },

707 { "iSCSI", 
iscsi_suôes
 },

708 { "LINUX", 
löux_suôes
 },

709 { 
NULL
, NULL}

715 
scsi_èsk
 *
	gèsk
;

716 *
	gªad_wrôe_buf
;

719 
	$¥öt_ußge
()

721 
	`Ârötf
(
°dîr
,

723 
PROG
);

724 
	`Ârötf
(
°dîr
,

725 "‹ %†[OPTIONS] <iscsi-uæ> [mu…ù©h-iscsi-uæ]\n", 
PROG
);

726 
	`Ârötf
(
°dîr
,

728 
	`Ârötf
(
°dîr
,

730 
öôüt‹«me1
);

731 
	`Ârötf
(
°dîr
,

733 
öôüt‹«me2
);

734 
	`Ârötf
(
°dîr
,

736 
	`Ârötf
(
°dîr
,

738 
	`Ârötf
(
°dîr
,

740 
	`Ârötf
(
°dîr
,

742 
	`Ârötf
(
°dîr
,

744 
	`Ârötf
(
°dîr
,

746 
	`Ârötf
(
°dîr
,

748 
	`Ârötf
(
°dîr
,

750 
	`Ârötf
(
°dîr
,

752 
	`Ârötf
(
°dîr
,

754 
	`Ârötf
(
°dîr
,

756 
	`Ârötf
(
°dîr
,

758 
	`Ârötf
(
°dîr
, "\n");

759 
	`Ârötf
(
°dîr
,

760 "Whîê<iscsi-uæ> iSCSI URL f‹m© is: %s\n", 
ISCSI_URL_SYNTAX
);

761 
	`Ârötf
(
°dîr
, "\n");

762 
	`Ârötf
(
°dîr
,

764 
	`Ârötf
(
°dîr
,

766 
	`Ârötf
(
°dîr
,

768 
	`Ârötf
(
°dîr
,

770 
	`Ârötf
(
°dîr
, "\n");

771 
	`Ârötf
(
°dîr
,

773 
	`Ârötf
(
°dîr
, "\n");

774 
	}
}

777 
	$˛ór_¥
(
scsi_devi˚
 *
sdev
)

779 
i
, 
ªs
;

780 
scsi_èsk
 *
¥_èsk
;

781 
scsi_≥rsi°ít_ª£rve_ö_ªad_keys
 *
rk
;

783 
ªs
 = 0;

784 i‡(
	`¥ö_ªad_keys
(
sdev
, &
¥_èsk
, &
rk
, 16384) != 0)

785 
out
;

787 
ªs
 = -1;

788 i‡(
rk
->
num_keys
 && 
d©a_loss
 == 0)

789 
out
;

791 
ªs
 = 0;

792 
i
 = 0; i < 
rk
->
num_keys
; i++) {

793 
ªs
 = 
	`¥out_ªgi°î_™d_ign‹e
(
sdev
, 
rk
->
keys
[
i
]);

794 i‡(
ªs
)

796 
ªs
 = 
	`¥out_ªgi°î_key
(
sdev
, 0, 
rk
->
keys
[
i
]);

797 i‡(
ªs
)

801 
	`scsi_‰ì_scsi_èsk
(
¥_èsk
);

803 
out
:

804  
ªs
;

805 
	}
}

808 
	$ã°_£tup
()

810 
èsk
 = 
NULL
;

811 
ªad_wrôe_buf
 = 
NULL
;

812 
loˇl_iscsi_queue_pdu
 = 
NULL
;

813 
	}
}

816 
	$ã°_ã¨down
()

818 
	`‰ì
(
ªad_wrôe_buf
);

819 
ªad_wrôe_buf
 = 
NULL
;

820 
	`scsi_‰ì_scsi_èsk
(
èsk
);

821 
èsk
 = 
NULL
;

822 
	}
}

825 
	$suôe_öô
()

827 
i
;

828 c⁄° *
öôüt‹«mes
[
MPATH_MAX_DEVS
] = { 
öôüt‹«me1
, 
öôüt‹«me2
 };

830 
i
 = 0; i < 
mp_num_sds
; i++) {

831 i‡(!
mp_sds
[
i
]->
iscsi_uæ
) {

834 i‡(
mp_sds
[
i
]->
iscsi_˘x
) {

835 
	`iscsi_logout_sync
(
mp_sds
[
i
]->
iscsi_˘x
);

836 
	`iscsi_de°roy_c⁄ãxt
(
mp_sds
[
i
]->
iscsi_˘x
);

838 
mp_sds
[
i
]->
iscsi_˘x
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹«mes
[i],

839 
mp_sds
[
i
]->
iscsi_uæ
,

840 &
mp_sds
[
i
]->
iscsi_lun
);

841 i‡(
mp_sds
[
i
]->
iscsi_˘x
 =
NULL
) {

842 
	`Ârötf
(
°dîr
,

846 
	`iscsi_£t_no_ua_⁄_ªc⁄√˘
(
mp_sds
[
i
]->
iscsi_˘x
, 1);

848 #i‚de‡
HAVE_CU_SUITEINFO_PSETUPFUNC


850 
	`ã°_£tup
();

853 
	}
}

856 
	$suôe_˛ónup
()

858 
i
;

860 #i‚de‡
HAVE_CU_SUITEINFO_PSETUPFUNC


862 
	`ã°_ã¨down
();

864 
i
 = 0; i < 
mp_num_sds
; i++) {

865 i‡(
mp_sds
[
i
]->
iscsi_uæ
) {

866 i‡(
mp_sds
[
i
]->
iscsi_˘x
) {

867 
	`˛ór_¥
(
mp_sds
[
i
]);

868 
	`iscsi_logout_sync
(
mp_sds
[
i
]->
iscsi_˘x
);

869 
	`iscsi_de°roy_c⁄ãxt
(
mp_sds
[
i
]->
iscsi_˘x
);

870 
mp_sds
[
i
]->
iscsi_˘x
 = 
NULL
;

875 
	}
}

878 
	$li°_Æl_ã°s
()

880 
ã°_Ámûy
 *
Â
;

881 
libiscsi_suôe_öfo
 *
•
;

882 
CU_Te°Info
 *
ç
;

884 
Â
 = 
Ámûõs
; fp->
«me
; fp++) {

885 
	`¥ötf
("%s\n", 
Â
->
«me
);

886 
•
 = 
Â
->
suôes
; sp->
pName
 !
NULL
; sp++) {

887 
	`¥ötf
("%s.%s\n", 
Â
->
«me
,
•
->
pName
);

888 
ç
 = 
•
->
pTe°s
;Åp->
pName
 !
NULL
;Åp++) {

889 
	`¥ötf
("%s.%s.%s\n", 
Â
->
«me
,
•
->
pName
,

890 
ç
->
pName
);

894 
	}
}

897 
CU_Eº‹Code


898 
	$add_ã°s
(c⁄° *
ã°«me_ª
)

900 *
Ámûy_ª
 = 
NULL
;

901 *
suôe_ª
 = 
NULL
;

902 *
ã°_ª
 = 
NULL
;

903 *
˝
;

904 
ã°_Ámûy
 *
Â
;

905 
libiscsi_suôe_öfo
 *
•
;

906 
CU_Te°Info
 *
ç
;

910 i‡(!
ã°«me_ª
) {

911 
Ámûy_ª
 = 
	`°rdup
("*");

912 
suôe_ª
 = 
	`°rdup
("*");

913 
ã°_ª
 = 
	`°rdup
("*");

920 
Ámûy_ª
 = 
	`°rdup
(
ã°«me_ª
);

921 i‡((
˝
 = 
	`°rchr
(
Ámûy_ª
, '.')Ë!
NULL
) {

922 *
˝
++ = 0;

923 
suôe_ª
 = 
	`°rdup
(
˝
);

924 i‡((
˝
 = 
	`°rchr
(
suôe_ª
, '.')Ë!
NULL
) {

925 *
˝
++ = 0;

926 
ã°_ª
 = 
	`°rdup
(
˝
);

929 i‡(!
suôe_ª
)

930 
suôe_ª
 = 
	`°rdup
("*");

931 i‡(!
ã°_ª
)

932 
ã°_ª
 = 
	`°rdup
("*");

933 i‡(!
Ámûy_ª
) {

934 
	`Ârötf
(
°dîr
,

936 
Ámûy_ª
);

937  
CUE_NOTEST
;

945 
Â
 = 
Ámûõs
; fp->
«me
; fp++) {

946 i‡(
	`‚m©ch
(
Ámûy_ª
, 
Â
->
«me
, 0) != 0)

949 
•
 = 
Â
->
suôes
; sp->
pName
 !
NULL
; sp++) {

950 
suôe_added
 = 0;

951 
CU_pSuôe
 
pSuôe
 = 
NULL
;

953 i‡(
	`‚m©ch
(
suôe_ª
, 
•
->
pName
, 0) != 0)

956 
ç
 = 
•
->
pTe°s
;Åp->
pName
 !
NULL
;Åp++) {

957 i‡(
	`‚m©ch
(
ã°_ª
, 
ç
->
pName
, 0) != 0) {

960 i‡(!
suôe_added
) {

961 
suôe_added
++;

962 #ifde‡
HAVE_CU_SUITEINFO_PSETUPFUNC


963 
pSuôe
 = 
	`CU_add_suôe_wôh_£tup_™d_ã¨down
(
•
->
pName
,

964 
•
->
pInôFunc
, sp->
pCÀ™upFunc
,

965 
•
->
pSëUpFunc
, sp->
pTórDownFunc
);

967 
pSuôe
 = 
	`CU_add_suôe
(
•
->
pName
,

968 
•
->
pInôFunc
, sp->
pCÀ™upFunc
);

971 
	`CU_add_ã°
(
pSuôe
, 
ç
->
pName
,Åp->
pTe°Func
);

977 
	`‰ì
(
Ámûy_ª
);

978 
	`‰ì
(
suôe_ª
);

979 
	`‰ì
(
ã°_ª
);

981  
CUE_SUCCESS
;

982 
	}
}

984 
∑r£_™d_add_ã°s
(*
ã°«me_ª
);

986 
	$∑r£_™d_add_ã°
(c⁄° *
ã°
)

988 i‡(
ã°
 && 
	`ac˚ss
—e°, 
F_OK
) == 0) {

989 
FILE
 *
fh
;

990 
t
[256];

992 i‡((
fh
 = 
	`f›í
(
ã°
, "r")Ë=
NULL
) {

993 
	`¥ötf
("FaûedÅÿ›íÅe°-li° fûê%s\n", 
ã°
);

994 
	`exô
(10);

996 
	`fgës
(
t
, —), 
fh
Ë!
NULL
) {

998 
Àn
 = 
	`°æí
(
t
);

999 i‡(
Àn
 == 0) {

1002 i‡(!
	`i•röt
(
t
[--
Àn
])) {

1003 
t
[
Àn
] = 0;

1008 
	`∑r£_™d_add_ã°s
(
t
);

1010 
	`f˛o£
(
fh
);

1014 i‡(
	`add_ã°s
(
ã°
Ë!
CUE_SUCCESS
) {

1015 
	`Ârötf
(
°dîr
, "error: suiteÑegistration failed: %s\n",

1016 
	`CU_gë_îr‹_msg
());

1017 
	`exô
(1);

1019 
	}
}

1021 
	$∑r£_™d_add_ã°s
(*
ã°«me_ª
)

1023 i‡(
ã°«me_ª
 !
NULL
) {

1024 *
ã°«me
;

1025 (
ã°«me
 = 
	`°ºchr
(
ã°«me_ª
, ',')Ë!
NULL
) {

1026 
	`∑r£_™d_add_ã°
(
ã°«me
 + 1);

1027 *
ã°«me
 = 0;

1030 
	`∑r£_™d_add_ã°
(
ã°«me_ª
);

1031 
	}
}

1033 
	$c⁄√˘_scsi_devi˚
(
scsi_devi˚
 *
sdev
, c⁄° *
öôüt‹«me
)

1035 i‡(
sdev
->
iscsi_uæ
) {

1036 
sdev
->
iscsi_˘x
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹«me
, sdev->
iscsi_uæ
, &sdev->
iscsi_lun
);

1037 i‡(
sdev
->
iscsi_˘x
 =
NULL
) {

1040 
	`iscsi_£t_no_ua_⁄_ªc⁄√˘
(
sdev
->
iscsi_˘x
, 1);

1043 #ifde‡
HAVE_SG_IO


1044 i‡(
sdev
->
sgio_dev
) {

1045 
vîsi⁄
;

1047 i‡((
sdev
->
sgio_fd
 = 
	`›í
(sdev->
sgio_dev
, 
O_RDWR
|
O_NONBLOCK
)) == -1) {

1048 
	`Ârötf
(
°dîr
, "FaûedÅÿ›í SG_IO devi˚ %s. Eº‹:%s\n", 
sdev
->
sgio_dev
,

1049 
	`°ªº‹
(
î∫o
));

1052 i‡((
	`io˘l
(
sdev
->
sgio_fd
, 
SG_GET_VERSION_NUM
, &
vîsi⁄
) < 0) || (version < 30000)) {

1053 
	`Ârötf
(
°dîr
, "%†i†nŸá SCSI devi˚Çode\n", 
sdev
->
sgio_dev
);

1054 
	`˛o£
(
sdev
->
sgio_fd
);

1057 i‡(!
	`°∫cmp
(
sdev
->
sgio_dev
, "/dev/sg", 7)) {

1059 
	`¥ötf
("CanÇot use BLKSECTGET for /dev/sg devices\n");

1062 i‡(
	`io˘l
(
sdev
->
sgio_fd
, 
BLKSECTGET
, &
max£˘‹s
) < 0) {

1063 
	`Ârötf
(
°dîr
, "%†ÁûedÅÿªad BLKSECTGET\n", 
sdev
->
sgio_dev
);

1064 
	`˛o£
(
sdev
->
sgio_fd
);

1071 
	}
}

1073 
	$‰ì_scsi_devi˚
(
scsi_devi˚
 *
sdev
)

1075 i‡(
sdev
->
îr‹_°r
) {

1076 
	`‰ì
(
sdev
->
îr‹_°r
);

1077 
sdev
->
îr‹_°r
 = 
NULL
;

1079 i‡(
sdev
->
iscsi_uæ
) {

1080 
	`‰ì
(
sdev
->
iscsi_uæ
);

1081 
sdev
->
iscsi_uæ
 = 
NULL
;

1083 i‡(
sdev
->
iscsi_˘x
) {

1084 
	`iscsi_logout_sync
(
sdev
->
iscsi_˘x
);

1085 
	`iscsi_de°roy_c⁄ãxt
(
sdev
->
iscsi_˘x
);

1086 
sdev
->
iscsi_˘x
 = 
NULL
;

1089 i‡(
sdev
->
sgio_dev
) {

1090 
	`‰ì
(
sdev
->
sgio_dev
);

1091 
sdev
->
sgio_dev
 = 
NULL
;

1093 i‡(
sdev
->
sgio_fd
 != -1) {

1094 
	`˛o£
(
sdev
->
sgio_fd
);

1095 
sdev
->
sgio_fd
 = -1;

1097 
	`‰ì
(
sdev
);

1098 
	}
}

1101 
	$maö
(
¨gc
, *
¨gv
[])

1103 *
ã°«me_ª
 = 
NULL
;

1104 
CU_BasicRunMode
 
mode
 = 
CU_BRM_VERBOSE
;

1105 
CU_Eº‹A˘i⁄
 
îr‹_a˘i⁄
 = 
CUEA_IGNORE
;

1106 
ªs
;

1107 
scsi_ªadˇ∑côy10
 *
rc10
;

1108 
scsi_èsk
 *
öq_èsk
 = 
NULL
;

1109 
scsi_èsk
 *
öq_lbp_èsk
 = 
NULL
;

1110 
scsi_èsk
 *
öq_bdc_èsk
 = 
NULL
;

1111 
scsi_èsk
 *
öq_bl_èsk
 = 
NULL
;

1112 
scsi_èsk
 *
rc16_èsk
 = 
NULL
;

1113 
scsi_èsk
 *
rs›_èsk
 = 
NULL
;

1114 
fuŒ_size
;

1115 
xml_mode
 = 0;

1116 
›ti⁄
 
l⁄g_›ts
[] = {

1117 { "hñp", 
no_¨gumít
, 0, '?' },

1118 { "li°", 
no_¨gumít
, 0, 'l' },

1119 { "öôüt‹-«me", 
ªquúed_¨gumít
, 0, 'i' },

1120 { "öôüt‹-«me-2", 
ªquúed_¨gumít
, 0, 'I' },

1121 { "ã°", 
ªquúed_¨gumít
, 0, 't' },

1122 { "d©Æoss", 
no_¨gumít
, 0, 'd' },

1123 { "Ælow-ßnôize", 
no_¨gumít
, 0, 'S' },

1124 { "ign‹e", 
no_¨gumít
, 0, 'g' },

1125 { "Áû", 
no_¨gumít
, 0, 'f' },

1126 { "ab‹t", 
no_¨gumít
, 0, 'A' },

1127 { "sûít", 
no_¨gumít
, 0, 's' },

1128 { "n‹mÆ", 
no_¨gumít
, 0, 'n' },

1129 { "vîbo£", 
no_¨gumít
, 0, 'v' },

1130 { "xml", 
no_¨gumít
, 0, 'x' },

1131 { "Vîbo£-scsi", 
no_¨gumít
, 0, 'V' },

1132 { 
NULL
, 0, 0, 0 }

1134 
i
, 
c
;

1135 
›t_idx
 = 0;

1136 
Áûuªs
 = 0;

1137 
ªt
;

1139 (
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "?hli:I:t:sdgfAsSnvxV", 
l⁄g_›ts
,

1140 &
›t_idx
)) > 0) {

1141 
c
) {

1144 
	`¥öt_ußge
();

1147 
	`li°_Æl_ã°s
();

1150 
öôüt‹«me1
 = 
	`°rdup
(
›èrg
);

1153 
öôüt‹«me2
 = 
	`°rdup
(
›èrg
);

1156 
ã°«me_ª
 = 
	`°rdup
(
›èrg
);

1159 
d©a_loss
++;

1162 
îr‹_a˘i⁄
 = 
CUEA_IGNORE
;

1165 
îr‹_a˘i⁄
 = 
CUEA_FAIL
;

1168 
îr‹_a˘i⁄
 = 
CUEA_ABORT
;

1171 
mode
 = 
CU_BRM_SILENT
;

1174 
Ælow_ßnôize
 = 1;

1177 
mode
 = 
CU_BRM_NORMAL
;

1180 
mode
 = 
CU_BRM_VERBOSE
;

1183 
xml_mode
 = 1;

1186 
logÀvñ
 = 
LOG_VERBOSE
;

1189 
	`Ârötf
(
°dîr
,

1191 
c
, 
¨gv
[
›töd
]);

1197 
mp_num_sds
 = 0;

1198 
›töd
 < 
¨gc
) {

1199 i‡(
mp_num_sds
 >
MPATH_MAX_DEVS
) {

1200 
	`Ârötf
(
°dîr
, "Too many multipath device URLs\n");

1201 
	`¥öt_ußge
();

1202 
	`‰ì
(
ã°«me_ª
);

1206 
mp_sds
[
mp_num_sds
] = 
	`mÆloc
((
scsi_devi˚
));

1207 
	`mem£t
(
mp_sds
[
mp_num_sds
], '\0', (
scsi_devi˚
));

1208 
mp_sds
[
mp_num_sds
]->
sgio_fd
 = -1;

1210 i‡(!
	`°∫cmp
(
¨gv
[
›töd
], "iscsi://", 8) ||

1211 !
	`°∫cmp
(
¨gv
[
›töd
], "iser://", 7)) {

1212 
mp_sds
[
mp_num_sds
]->
iscsi_uæ
 = 
	`°rdup
(
¨gv
[
›töd
++]);

1213 #ifde‡
HAVE_SG_IO


1215 
mp_sds
[
mp_num_sds
]->
sgio_dev
 = 
	`°rdup
(
¨gv
[
›töd
++]);

1218 
mp_num_sds
++;

1220 
	`¥ötf
("\n111@@@@@@@@@@@@@@@@@@@@@@@@@ \n");

1227 
ªÆ_iscsi_queue_pdu
 = 
	`dlsym
(
RTLD_NEXT
, "iscsi_queue_pdu");

1229 i‡((
mp_num_sds
 =0Ë|| (
mp_sds
[0]->
iscsi_uæ
 =
NULL


1230 && 
mp_sds
[0]->
sgio_dev
 =
NULL
)) {

1231 #ifde‡
HAVE_SG_IO


1232 
	`Ârötf
(
°dîr
, "You must specifyÉitherán iSCSI URL orá device file\n");

1234 
	`Ârötf
(
°dîr
, "You must specifyán iSCSI URL\n");

1236 
	`¥öt_ußge
();

1237 i‡(
ã°«me_ª
)

1238 
	`‰ì
(
ã°«me_ª
);

1243 
sd
 = 
mp_sds
[0];

1245 
i
 = 0; i < 
mp_num_sds
; i++) {

1246 
ªs
 = 
	`c⁄√˘_scsi_devi˚
(
mp_sds
[
i
], 
öôüt‹«me1
);

1247 i‡(
ªs
 < 0) {

1248 
	`Ârötf
(
°dîr
,

1249 "FaûedÅÿc⁄√˘ÅÿSCSI devi˚ %d\n", 
i
);

1250 
îr_sds_‰ì
;

1252 i‡(
	`˛ór_¥
(
mp_sds
[
i
]) < 0) {

1253 
	`¥ötf
("One or moreÖersistentÑeservations keys have beenÑegistered\n");

1258 i‡(
mp_num_sds
 > 1) {

1260 
ªs
 = 
	`m∑th_check_m©chög_ids
(
mp_num_sds
, 
mp_sds
);

1261 i‡(
ªs
 < 0) {

1262 
	`Ârötf
(
°dîr
, "multipath devices don't match\n");

1263 
îr_sds_‰ì
;

1272 
èsk
 = 
NULL
;

1273 
	`ªadˇ∑côy10
(
sd
, &
èsk
, 0, 0, 
EXPECT_STATUS_GOOD
);

1274 i‡(
èsk
 =
NULL
) {

1275 
	`¥ötf
("FaûedÅÿ£nd READCAPACITY10 comm™d: %s\n", 
sd
->
îr‹_°r
);

1276 
îr_sds_‰ì
;

1278 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

1279 
	`¥ötf
("READCAPACITY10 comm™d: faûed wôh sí£. %s\n", 
sd
->
îr‹_°r
);

1280 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1281 
îr_sds_‰ì
;

1283 
rc10
 = 
	`scsi_d©aö_unm¨shÆl
(
èsk
);

1284 i‡(
rc10
 =
NULL
) {

1285 
	`¥ötf
("failedÅo unmarshall READCAPACITY10 data.\n");

1286 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1287 
îr_sds_‰ì
;

1289 
block_size
 = 
rc10
->block_size;

1290 
num_blocks
 = 
rc10
->
lba
 + 1;

1291 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1293 
rc16_èsk
 = 
NULL
;

1294 
	`ªadˇ∑côy16
(
sd
, &
rc16_èsk
, 96, 
EXPECT_STATUS_GOOD
);

1295 i‡(
rc16_èsk
 =
NULL
) {

1296 
	`¥ötf
("FaûedÅÿ£nd READCAPACITY16 comm™d: %s\n", 
sd
->
îr‹_°r
);

1297 
îr_sds_‰ì
;

1299 i‡(
rc16_èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

1300 
rc16
 = 
	`scsi_d©aö_unm¨shÆl
(
rc16_èsk
);

1301 i‡(
rc16
 =
NULL
) {

1302 
	`¥ötf
("ÁûedÅÿunm¨shÆ»READCAPACITY16 d©a. %s\n", 
sd
->
îr‹_°r
);

1303 
	`scsi_‰ì_scsi_èsk
(
rc16_èsk
);

1304 
îr_sds_‰ì
;

1306 
block_size
 = 
rc16
->
block_Àngth
;

1307 
num_blocks
 = 
rc16
->
ªtu∫ed_lba
 + 1;

1308 
lbµb
 = 1 << 
rc16
->
lbµbe
;

1312 
s¸©ch
 = 
	`mÆloc
(65536 * 
block_size
);

1314 
öq_èsk
 = 
NULL
;

1315 
	`öquúy
(
sd
, &
öq_èsk
, 0, 0, 64, 
EXPECT_STATUS_GOOD
);

1316 i‡(
öq_èsk
 =
NULL
 || inq_èsk->
°©us
 !
SCSI_STATUS_GOOD
) {

1317 
	`¥ötf
("Inquúy comm™d faûed : %s\n", 
sd
->
îr‹_°r
);

1318 
îr_sds_‰ì
;

1320 
fuŒ_size
 = 
	`scsi_d©aö_gëfuŒsize
(
öq_èsk
);

1321 i‡(
fuŒ_size
 > 
öq_èsk
->
d©aö
.
size
) {

1322 
	`scsi_‰ì_scsi_èsk
(
öq_èsk
);

1325 
öq_èsk
 = 
NULL
;

1326 
	`öquúy
(
sd
, &
öq_èsk
, 0, 0, 
fuŒ_size
, 
EXPECT_STATUS_GOOD
);

1327 i‡(
öq_èsk
 =
NULL
) {

1328 
	`¥ötf
("Inquúy comm™d faûed : %s\n", 
sd
->
îr‹_°r
);

1329 
îr_sds_‰ì
;

1332 
öq
 = 
	`scsi_d©aö_unm¨shÆl
(
öq_èsk
);

1333 i‡(
öq
 =
NULL
) {

1334 
	`¥ötf
("failedÅo unmarshall inquiry datain blob\n");

1335 
	`scsi_‰ì_scsi_èsk
(
öq_èsk
);

1336 
îr_sds_‰ì
;

1339 
sbc3_suµ‹t
 = 0;

1340 
i
 = 0; i < 8; i++) {

1341 i‡(
öq
->
vîsi⁄_des¸ùt‹
[
i
] == 0x04C0) {

1342 
sbc3_suµ‹t
 = 1;

1347 
öq_bl_èsk
 = 
NULL
;

1348 
	`öquúy
(
sd
, &
öq_bl_èsk
, 1, 
SCSI_INQUIRY_PAGECODE_BLOCK_LIMITS
, 64, 
EXPECT_STATUS_GOOD
);

1349 i‡(
öq_bl_èsk
 && inq_bl_èsk->
°©us
 !
SCSI_STATUS_GOOD
) {

1350 
	`scsi_‰ì_scsi_èsk
(
öq_bl_èsk
);

1351 
öq_bl_èsk
 = 
NULL
;

1353 i‡(
öq_bl_èsk
) {

1354 
fuŒ_size
 = 
	`scsi_d©aö_gëfuŒsize
(
öq_bl_èsk
);

1355 i‡(
fuŒ_size
 > 
öq_bl_èsk
->
d©aö
.
size
) {

1356 
	`scsi_‰ì_scsi_èsk
(
öq_bl_èsk
);

1358 
öq_bl_èsk
 = 
NULL
;

1359 
	`öquúy
(
sd
, &
öq_bl_èsk
, 1, 
SCSI_INQUIRY_PAGECODE_BLOCK_LIMITS
, 
fuŒ_size
,

1360 
EXPECT_STATUS_GOOD
);

1361 i‡(
öq_bl_èsk
 =
NULL
) {

1362 
	`¥ötf
("Inquúy comm™d faûed : %s\n", 
sd
->
îr‹_°r
);

1363 
îr_sds_‰ì
;

1367 
öq_bl
 = 
	`scsi_d©aö_unm¨shÆl
(
öq_bl_èsk
);

1368 i‡(
öq_bl
 =
NULL
) {

1369 
	`¥ötf
("failedÅo unmarshall inquiry datain blob\n");

1370 
îr_sds_‰ì
;

1389 i‡(
rc16
 &&Ñc16->
lbpme
 != 0){

1390 
öq_lbp_èsk
 = 
NULL
;

1391 
	`öquúy
(
sd
, &
öq_lbp_èsk
, 1, 
SCSI_INQUIRY_PAGECODE_LOGICAL_BLOCK_PROVISIONING
, 64,

1392 
EXPECT_STATUS_GOOD
);

1393 i‡(
öq_lbp_èsk
 =
NULL
 || inq_lbp_èsk->
°©us
 !
SCSI_STATUS_GOOD
) {

1394 
	`¥ötf
("Inquúy comm™d faûed : %s\n", 
sd
->
îr‹_°r
);

1395 
îr_sds_‰ì
;

1397 
fuŒ_size
 = 
	`scsi_d©aö_gëfuŒsize
(
öq_lbp_èsk
);

1398 i‡(
fuŒ_size
 > 
öq_lbp_èsk
->
d©aö
.
size
) {

1399 
	`scsi_‰ì_scsi_èsk
(
öq_lbp_èsk
);

1402 
öq_lbp_èsk
 = 
NULL
;

1403 
	`öquúy
(
sd
, &
öq_lbp_èsk
, 1, 
SCSI_INQUIRY_PAGECODE_LOGICAL_BLOCK_PROVISIONING
,

1404 
fuŒ_size
, 
EXPECT_STATUS_GOOD
);

1405 i‡(
öq_lbp_èsk
 =
NULL
) {

1406 
	`¥ötf
("Inquúy comm™d faûed : %s\n", 
sd
->
îr‹_°r
);

1407 
îr_sds_‰ì
;

1411 
öq_lbp
 = 
	`scsi_d©aö_unm¨shÆl
(
öq_lbp_èsk
);

1412 i‡(
öq_lbp
 =
NULL
) {

1413 
	`¥ötf
("failedÅo unmarshall inquiry datain blob\n");

1414 
îr_sds_‰ì
;

1418 
rs›_èsk
 = 
NULL
;

1419 
	`ªp‹t_suµ‹ãd_›codes
(
sd
, &
rs›_èsk
, 1, 
SCSI_REPORT_SUPPORTING_OPS_ALL
, 0, 0, 65535,

1420 
EXPECT_STATUS_GOOD
);

1421 i‡(
rs›_èsk
 =
NULL
) {

1422 
	`¥ötf
("FaûedÅÿ£nd REPORT_SUPPORTED_OPCODES comm™d: %s\n", 
sd
->
îr‹_°r
);

1423 
îr_sds_‰ì
;

1425 i‡(
rs›_èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

1426 
rs›
 = 
	`scsi_d©aö_unm¨shÆl
(
rs›_èsk
);

1427 i‡(
rs›
 =
NULL
) {

1428 
	`¥ötf
("failedÅo unmarshall REPORT_SUPPORTED_OPCODES data.\n");

1429 
	`scsi_‰ì_scsi_èsk
(
rs›_èsk
);

1430 
rs›_èsk
 = 
NULL
;

1435 
èsk
 = 
NULL
;

1436 
	`mode£n£6
(
sd
, &
èsk
, 0, 
SCSI_MODESENSE_PC_CURRENT
, 
SCSI_MODEPAGE_RETURN_ALL_PAGES
, 0, 255,

1437 
EXPECT_STATUS_GOOD
);

1438 i‡(
èsk
 =
NULL
) {

1439 
	`¥ötf
("FaûedÅÿ£nd MODE_SENSE6 comm™d: %s\n", 
sd
->
îr‹_°r
);

1440 
îr_sds_‰ì
;

1442 i‡(
èsk
->
°©us
 =
SCSI_STATUS_GOOD
) {

1443 
scsi_mode_£n£
 *
ms
;

1445 
ms
 = 
	`scsi_d©aö_unm¨shÆl
(
èsk
);

1446 i‡(
ms
 =
NULL
) {

1447 
	`¥ötf
("failedÅo unmarshall mode sense datain blob\n");

1448 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1449 
îr_sds_‰ì
;

1451 
ªad⁄ly
 = !!(
ms
->
devi˚_•ecific_∑ømëî
 & 0x80);

1453 
	`scsi_‰ì_scsi_èsk
(
èsk
);

1460 i‡(
sd
->
sgio_dev
 && !
	`°∫cmp
(sd->sgio_dev, "/dev/sg", 7)) {

1461 
	`¥ötf
("LooksÜikeá /dev/sg device. Force max iosize "

1464 
max£˘‹s
 = 120 * 1024 / 
block_size
;

1466 i‡(
max£˘‹s
) {

1467 
maximum_å™s„r_Àngth
 = 
max£˘‹s
;

1468 
	`¥ötf
("BusÅransfer size isÜimitedÅo %d blocks. Clamping "

1469 "maxÅøns„r†acc‹dögly.\n", 
max£˘‹s
);

1472 i‡(
	`CU_öôülize_ªgi°ry
() != 0) {

1473 
	`Ârötf
(
°dîr
, "error: unableÅo initializeÅestÑegistry\n");

1474 
îr_sds_‰ì
;

1476 i‡(
	`CU_is_ã°_ru¬ög
()) {

1477 
	`Ârötf
(
°dîr
, "error:Åest suite(s)álreadyÑunning!?\n");

1478 
	`exô
(1);

1481 
	`∑r£_™d_add_ã°s
(
ã°«me_ª
);

1482 i‡(
ã°«me_ª
)

1483 
	`‰ì
(
ã°«me_ª
);

1485 
	`CU_basic_£t_mode
(
mode
);

1486 
	`CU_£t_îr‹_a˘i⁄
(
îr‹_a˘i⁄
);

1487 
	`¥ötf
("\n");

1493 i‡(
xml_mode
) {

1494 
	`CU_li°_ã°s_to_fûe
();

1495 
	`CU_autom©ed_run_ã°s
();

1497 
ªs
 = 
	`CU_basic_run_ã°s
();

1498 
	`¥ötf
("Te°†com∂ëed wôhÑëu∫ vÆue: %d\n", 
ªs
);

1501 
Áûuªs
 = 
	`CU_gë_numbî_of_Áûuªs
();

1502 
	`CU_˛ónup_ªgi°ry
();

1504 i‡(
öq_èsk
 !
NULL
) {

1505 
	`scsi_‰ì_scsi_èsk
(
öq_èsk
);

1507 i‡(
öq_bl_èsk
 !
NULL
) {

1508 
	`scsi_‰ì_scsi_èsk
(
öq_bl_èsk
);

1510 i‡(
öq_lbp_èsk
 !
NULL
) {

1511 
	`scsi_‰ì_scsi_èsk
(
öq_lbp_èsk
);

1513 i‡(
öq_bdc_èsk
 !
NULL
) {

1514 
	`scsi_‰ì_scsi_èsk
(
öq_bdc_èsk
);

1516 i‡(
rc16_èsk
 !
NULL
) {

1517 
	`scsi_‰ì_scsi_èsk
(
rc16_èsk
);

1519 i‡(
rs›_èsk
 !
NULL
) {

1520 
	`scsi_‰ì_scsi_èsk
(
rs›_èsk
);

1522 
i
 = 0; i < 
mp_num_sds
; i++) {

1523 
	`‰ì_scsi_devi˚
(
mp_sds
[
i
]);

1525 
	`‰ì
(
s¸©ch
);

1526 i‡(
Áûuªs
 > 0) {

1527 
ªt
 = 1;

1529 
ªt
 = 0;

1531  
ªt
;

1533 
îr_sds_‰ì
:

1534 
i
 = 0; i < 
mp_num_sds
; i++) {

1535 
	`‰ì_scsi_devi˚
(
mp_sds
[
i
]);

1537 
	`‰ì
(
s¸©ch
);

1539 
	}
}

	@test-tool/iscsi-test-cu.h

20 #i‚de‡ 
_ISCSI_TEST_CU_H_


21 
	#_ISCSI_TEST_CU_H_


	)

23 
	~<time.h
>

24 
	~<sys/ty≥s.h
>

25 
	~<uni°d.h
>

26 
	~<°dlib.h
>

28 #ifde‡
HAVE_CONFIG_H


29 
	~"c⁄fig.h
"

32 
	~"iscsi-suµ‹t.h
"

35 
scsi_èsk
 *
èsk
;

36 *
ªad_wrôe_buf
;

38 #i‚de‡
HAVE_CU_SUITEINFO_PSETUPFUNC


40 (*
	tCU_SëUpFunc
)();

41 (*
	tCU_TórDownFunc
)();

44 
	`suôe_öô
();

45 
	`suôe_˛ónup
();

46 
	`suôe_öô_pgr
();

47 
	`suôe_˛ónup_pgr
();

48 
	`ã°_£tup
();

49 
	`ã°_ã¨down
();

51 
	`ã°_com∑ª™dwrôe_sim∂e
();

52 
	`ã°_com∑ª™dwrôe_dpofua
();

53 
	`ã°_com∑ª™dwrôe_miscom∑ª
();

54 
	`ã°_com∑ª™dwrôe_unwrôãn
();

55 
	`ã°_com∑ª™dwrôe_övÆid_d©aout_size
();

57 
	`ã°_exãndedc›y_sim∂e
();

58 
	`ã°_exãndedc›y_∑øm
();

59 
	`ã°_exãndedc›y_des¸_limôs
();

60 
	`ã°_exãndedc›y_des¸_ty≥
();

61 
	`ã°_exãndedc›y_vÆid©e_tgt_des¸
();

62 
	`ã°_exãndedc›y_vÆid©e_£g_des¸
();

64 
	`ã°_gë_lba_°©us_sim∂e
();

65 
	`ã°_gë_lba_°©us_bey⁄d_eﬁ
();

66 
	`ã°_gë_lba_°©us_unm≠_sögÀ
();

68 
	`ã°_öquúy_Æloc_Àngth
();

69 
	`ã°_öquúy_block_limôs
();

70 
	`ã°_öquúy_evpd
();

71 
	`ã°_öquúy_m™d©‹y_vpd_sbc
();

72 
	`ã°_öquúy_°™d¨d
();

73 
	`ã°_öquúy_suµ‹ãd_vpd
();

74 
	`ã°_öquúy_vîsi⁄_des¸ùt‹s
();

76 
	`ã°_iscsi_cmd¢_toohigh
();

77 
	`ã°_iscsi_cmd¢_toﬁow
();

79 
	`ã°_iscsi_d©a¢_övÆid
();

81 
	`ã°_m™d©‹y_sbc
();

83 
	`ã°_mode£n£6_Æl_∑ges
();

84 
	`ã°_mode£n£6_c⁄åﬁ
();

85 
	`ã°_mode£n£6_c⁄åﬁ_d_£n£
();

86 
	`ã°_mode£n£6_c⁄åﬁ_swp
();

87 
	`ã°_mode£n£6_ªsiduÆs
();

89 
	`ã°_nomedü_sbc
();

91 
	`ã°_‹wrôe_sim∂e
();

92 
	`ã°_‹wrôe_bey⁄d_eﬁ
();

93 
	`ã°_‹wrôe_0blocks
();

94 
	`ã°_‹wrôe_wΩrŸe˘
();

95 
	`ã°_‹wrôe_dpofua
();

96 
	`ã°_‹wrôe_vîify
();

98 
	`ã°_¥e„tch10_sim∂e
();

99 
	`ã°_¥e„tch10_bey⁄d_eﬁ
();

100 
	`ã°_¥e„tch10_0blocks
();

101 
	`ã°_¥e„tch10_Êags
();

103 
	`ã°_¥e„tch16_sim∂e
();

104 
	`ã°_¥e„tch16_bey⁄d_eﬁ
();

105 
	`ã°_¥e„tch16_0blocks
();

106 
	`ã°_¥e„tch16_Êags
();

108 
	`ã°_¥evíèŒow_sim∂e
();

109 
	`ã°_¥evíèŒow_eje˘
();

110 
	`ã°_¥evíèŒow_ô√xus_loss
();

111 
	`ã°_¥evíèŒow_logout
();

112 
	`ã°_¥evíèŒow_w¨m_ª£t
();

113 
	`ã°_¥evíèŒow_cﬁd_ª£t
();

114 
	`ã°_¥evíèŒow_lun_ª£t
();

115 
	`ã°_¥evíèŒow_2_ô√xu£s
();

117 
	`ã°_¥ö_ªad_keys_sim∂e
();

118 
	`ã°_¥ö_ªad_keys_åunˇã
();

119 
	`ã°_¥ö_£rvi˚a˘i⁄_ønge
();

120 
	`ã°_¥ö_ªp‹t_ˇps_sim∂e
();

122 
	`ã°_¥out_ªgi°î_sim∂e
();

123 
	`ã°_¥out_ª£rve_sim∂e
();

124 
	`ã°_¥out_ª£rve_ac˚ss_ó
();

125 
	`ã°_¥out_ª£rve_ac˚ss_we
();

126 
	`ã°_¥out_ª£rve_ac˚ss_óro
();

127 
	`ã°_¥out_ª£rve_ac˚ss_wîo
();

128 
	`ã°_¥out_ª£rve_ac˚ss_ó¨
();

129 
	`ã°_¥out_ª£rve_ac˚ss_wór
();

130 
	`ã°_¥out_ª£rve_ow√rshù_ó
();

131 
	`ã°_¥out_ª£rve_ow√rshù_we
();

132 
	`ã°_¥out_ª£rve_ow√rshù_óro
();

133 
	`ã°_¥out_ª£rve_ow√rshù_wîo
();

134 
	`ã°_¥out_ª£rve_ow√rshù_ó¨
();

135 
	`ã°_¥out_ª£rve_ow√rshù_wór
();

136 
	`ã°_¥out_˛ór_sim∂e
();

137 
	`ã°_¥out_¥ìm±_rm_ªg
();

139 
	`ã°_ªad6_sim∂e
();

140 
	`ã°_ªad6_bey⁄d_eﬁ
();

141 
	`ã°_ªad6_rd¥Ÿe˘
();

142 
	`ã°_ªad6_Êags
();

144 
	`ã°_ªad10_sim∂e
();

145 
	`ã°_ªad10_bey⁄d_eﬁ
();

146 
	`ã°_ªad10_0blocks
();

147 
	`ã°_ªad10_rd¥Ÿe˘
();

148 
	`ã°_ªad10_dpofua
();

149 
	`ã°_ªad10_ªsiduÆs
();

150 
	`ã°_ªad10_övÆid
();

151 
	`ã°_async_ªad
();

153 
	`ã°_ªad12_sim∂e
();

154 
	`ã°_ªad12_bey⁄d_eﬁ
();

155 
	`ã°_ªad12_0blocks
();

156 
	`ã°_ªad12_rd¥Ÿe˘
();

157 
	`ã°_ªad12_dpofua
();

158 
	`ã°_ªad12_ªsiduÆs
();

160 
	`ã°_ªad16_sim∂e
();

161 
	`ã°_ªad16_bey⁄d_eﬁ
();

162 
	`ã°_ªad16_0blocks
();

163 
	`ã°_ªad16_rd¥Ÿe˘
();

164 
	`ã°_ªad16_dpofua
();

165 
	`ã°_ªad16_ªsiduÆs
();

167 
	`ã°_ªadˇ∑côy10_sim∂e
();

169 
	`ã°_ªadˇ∑côy16_Ælo˛í
();

170 
	`ã°_ªadˇ∑côy16_¥Ÿe˘i⁄
();

171 
	`ã°_ªadˇ∑côy16_sim∂e
();

172 
	`ã°_ªadˇ∑côy16_suµ‹t
();

174 
	`ã°_ªadde„˘d©a10_sim∂e
();

176 
	`ã°_ªadde„˘d©a12_sim∂e
();

178 
	`ã°_ªad⁄ly_sbc
();

180 
	`ã°_ª˚ive_c›y_ªsu…s_c›y_°©us
();

181 
	`ã°_ª˚ive_c›y_ªsu…s_›_∑øms
();

183 
	`ã°_ªp‹t_suµ‹ãd_›codes_⁄e_comm™d
();

184 
	`ã°_ªp‹t_suµ‹ãd_›codes_r˘d
();

185 
	`ã°_ªp‹t_suµ‹ãd_›codes_£rva˘v
();

186 
	`ã°_ªp‹t_suµ‹ãd_›codes_sim∂e
();

188 
	`ã°_ª£rve6_sim∂e
();

189 
	`ã°_ª£rve6_2öôüt‹s
();

190 
	`ã°_ª£rve6_logout
();

191 
	`ã°_ª£rve6_ô√xus_loss
();

192 
	`ã°_ª£rve6_èrgë_cﬁd_ª£t
();

193 
	`ã°_ª£rve6_èrgë_w¨m_ª£t
();

194 
	`ã°_ª£rve6_lun_ª£t
();

196 
	`ã°_ßnôize_block_îa£
();

197 
	`ã°_ßnôize_block_îa£_ª£rved
();

198 
	`ã°_ßnôize_¸y±o_îa£
();

199 
	`ã°_ßnôize_¸y±o_îa£_ª£rved
();

200 
	`ã°_ßnôize_exô_Áûuª_mode
();

201 
	`ã°_ßnôize_övÆid_£rvi˚a˘i⁄
();

202 
	`ã°_ßnôize_ovîwrôe
();

203 
	`ã°_ßnôize_ovîwrôe_ª£rved
();

204 
	`ã°_ßnôize_ªad⁄ly
();

205 
	`ã°_ßnôize_ª£rv©i⁄s
();

206 
	`ã°_ßnôize_ª£t
();

208 
	`ã°_°¨t°›unô_sim∂e
();

209 
	`ã°_°¨t°›unô_pwr˙d
();

210 
	`ã°_°¨t°›unô_nﬁ€j
();

212 
	`ã°_ã°unôªady_sim∂e
();

214 
	`ã°_unm≠_sim∂e
();

215 
	`ã°_unm≠_0blocks
();

216 
	`ã°_unm≠_vpd
();

218 
	`ã°_vîify10_sim∂e
();

219 
	`ã°_vîify10_bey⁄d_eﬁ
();

220 
	`ã°_vîify10_0blocks
();

221 
	`ã°_vîify10_vΩrŸe˘
();

222 
	`ã°_vîify10_Êags
();

223 
	`ã°_vîify10_dpo
();

224 
	`ã°_vîify10_mism©ch
();

225 
	`ã°_vîify10_mism©ch_no_cmp
();

227 
	`ã°_vîify12_sim∂e
();

228 
	`ã°_vîify12_bey⁄d_eﬁ
();

229 
	`ã°_vîify12_0blocks
();

230 
	`ã°_vîify12_vΩrŸe˘
();

231 
	`ã°_vîify12_Êags
();

232 
	`ã°_vîify12_dpo
();

233 
	`ã°_vîify12_mism©ch
();

234 
	`ã°_vîify12_mism©ch_no_cmp
();

236 
	`ã°_vîify16_sim∂e
();

237 
	`ã°_vîify16_bey⁄d_eﬁ
();

238 
	`ã°_vîify16_0blocks
();

239 
	`ã°_vîify16_vΩrŸe˘
();

240 
	`ã°_vîify16_Êags
();

241 
	`ã°_vîify16_dpo
();

242 
	`ã°_vîify16_mism©ch
();

243 
	`ã°_vîify16_mism©ch_no_cmp
();

245 
	`ã°_wrôe10_sim∂e
();

246 
	`ã°_wrôe10_bey⁄d_eﬁ
();

247 
	`ã°_wrôe10_0blocks
();

248 
	`ã°_wrôe10_wΩrŸe˘
();

249 
	`ã°_wrôe10_dpofua
();

250 
	`ã°_wrôe10_ªsiduÆs
();

251 
	`ã°_async_wrôe
();

253 
	`ã°_wrôe12_sim∂e
();

254 
	`ã°_wrôe12_bey⁄d_eﬁ
();

255 
	`ã°_wrôe12_0blocks
();

256 
	`ã°_wrôe12_wΩrŸe˘
();

257 
	`ã°_wrôe12_dpofua
();

258 
	`ã°_wrôe12_ªsiduÆs
();

260 
	`ã°_wrôe16_sim∂e
();

261 
	`ã°_wrôe16_bey⁄d_eﬁ
();

262 
	`ã°_wrôe16_0blocks
();

263 
	`ã°_wrôe16_wΩrŸe˘
();

264 
	`ã°_wrôe16_dpofua
();

265 
	`ã°_wrôe16_ªsiduÆs
();

267 
	`ã°_wrôótomic16_sim∂e
();

268 
	`ã°_wrôótomic16_bey⁄d_eﬁ
();

269 
	`ã°_wrôótomic16_0blocks
();

270 
	`ã°_wrôótomic16_wΩrŸe˘
();

271 
	`ã°_wrôótomic16_dpofua
();

272 
	`ã°_wrôótomic16_vpd
();

274 
	`ã°_wrôeßme10_sim∂e
();

275 
	`ã°_wrôeßme10_bey⁄d_eﬁ
();

276 
	`ã°_wrôeßme10_0blocks
();

277 
	`ã°_wrôeßme10_wΩrŸe˘
();

278 
	`ã°_wrôeßme10_unm≠
();

279 
	`ã°_wrôeßme10_unm≠_u«lig√d
();

280 
	`ã°_wrôeßme10_unm≠_u¡û_íd
();

281 
	`ã°_wrôeßme10_unm≠_vpd
();

282 
	`ã°_wrôeßme10_check
();

283 
	`ã°_wrôeßme10_övÆid_d©aout_size
();

285 
	`ã°_wrôeßme16_sim∂e
();

286 
	`ã°_wrôeßme16_bey⁄d_eﬁ
();

287 
	`ã°_wrôeßme16_0blocks
();

288 
	`ã°_wrôeßme16_wΩrŸe˘
();

289 
	`ã°_wrôeßme16_unm≠
();

290 
	`ã°_wrôeßme16_unm≠_u«lig√d
();

291 
	`ã°_wrôeßme16_unm≠_u¡û_íd
();

292 
	`ã°_wrôeßme16_unm≠_vpd
();

293 
	`ã°_wrôeßme16_check
();

294 
	`ã°_wrôeßme16_övÆid_d©aout_size
();

296 
	`ã°_wrôevîify10_sim∂e
();

297 
	`ã°_wrôevîify10_bey⁄d_eﬁ
();

298 
	`ã°_wrôevîify10_0blocks
();

299 
	`ã°_wrôevîify10_wΩrŸe˘
();

300 
	`ã°_wrôevîify10_Êags
();

301 
	`ã°_wrôevîify10_dpo
();

302 
	`ã°_wrôevîify10_ªsiduÆs
();

304 
	`ã°_wrôevîify12_sim∂e
();

305 
	`ã°_wrôevîify12_bey⁄d_eﬁ
();

306 
	`ã°_wrôevîify12_0blocks
();

307 
	`ã°_wrôevîify12_wΩrŸe˘
();

308 
	`ã°_wrôevîify12_Êags
();

309 
	`ã°_wrôevîify12_dpo
();

310 
	`ã°_wrôevîify12_ªsiduÆs
();

312 
	`ã°_wrôevîify16_sim∂e
();

313 
	`ã°_wrôevîify16_bey⁄d_eﬁ
();

314 
	`ã°_wrôevîify16_0blocks
();

315 
	`ã°_wrôevîify16_wΩrŸe˘
();

316 
	`ã°_wrôevîify16_Êags
();

317 
	`ã°_wrôevîify16_dpo
();

318 
	`ã°_wrôevîify16_ªsiduÆs
();

320 
	`ã°_mu…ù©hio_sim∂e
();

321 
	`ã°_mu…ù©hio_ª£t
();

322 
	`ã°_mu…ù©hio_com∑ª™dwrôe
();

323 
	`ã°_mpio_async_ˇw
();

325 
	`ã°_async_ab‹t_sim∂e
();

326 
	`ã°_async_lu_ª£t_sim∂e
();

	@test-tool/test_async_abort_simple.c

18 
	~<°dio.h
>

19 
	~<sig«l.h
>

20 
	~<pﬁl.h
>

22 
	~<CUnô/CUnô.h
>

24 
	~"iscsi.h
"

25 
	~"scsi-lowÀvñ.h
"

26 
	~"iscsi-suµ‹t.h
"

27 
	~"iscsi-ã°-cu.h
"

29 
	sã°s_async_ab‹t_°©e
 {

30 
scsi_èsk
 *
	mwèsk
;

31 
uöt32_t
 
	mwr_ˇn˚Œed
;

32 
uöt32_t
 
	mwr_good
;

33 
uöt32_t
 
	mab‹t_ok
;

34 
uöt32_t
 
	mab‹t_bad_ôt
;

38 
ã°_async_wrôe_cb
(
iscsi_c⁄ãxt
 *
iscsi
 
__©åibuã__
((
unu£d
)),

39 
°©us
, *
comm™d_d©a
,

40 *
¥iv©e_d©a
)

42 
scsi_èsk
 *
	gwèsk
 = 
comm™d_d©a
;

43 
ã°s_async_ab‹t_°©e
 *
	g°©e
 = 
¥iv©e_d©a
;

45 i‡(
	g°©us
 =
SCSI_STATUS_GOOD
) {

46 
°©e
->
wr_good
++;

47 
loggög
(
LOG_VERBOSE
, "WRITE10 successful: (CmdSN=0x%x, "

48 "ITT=0x%x)", 
wèsk
->
cmd¢
, wèsk->
ôt
);

49 } i‡(
	g°©us
 =
SCSI_STATUS_CANCELLED
) {

50 
°©e
->
wr_ˇn˚Œed
++;

51 
loggög
(
LOG_VERBOSE
, "WRITE10 cancelled: (CmdSN=0x%x, "

52 "ITT=0x%x)", 
wèsk
->
cmd¢
, wèsk->
ôt
);

54 
CU_ASSERT_NOT_EQUAL
(
°©us
, 
SCSI_STATUS_CHECK_CONDITION
);

59 
ã°_async_ab‹t_cb
(
iscsi_c⁄ãxt
 *
iscsi
 
__©åibuã__
((
unu£d
)),

60 
°©us
, *
comm™d_d©a
,

61 *
¥iv©e_d©a
)

63 
uöt32_t
 
	gtmf_ª•⁄£
;

64 
ã°s_async_ab‹t_°©e
 *
	g°©e
 = 
¥iv©e_d©a
;

67 
CU_ASSERT_PTR_NOT_NULL_FATAL
(
comm™d_d©a
);

68 
	gtmf_ª•⁄£
 = *(
uöt32_t
 *)
comm™d_d©a
;

70 
loggög
(
LOG_VERBOSE
, "ABORT TASK: TMFÑesponse %d for"

72 
tmf_ª•⁄£
, 
°©e
->
wèsk
->
cmd¢
, sèã->wèsk->
ôt
);

73 i‡(
	gtmf_ª•⁄£
 =
ISCSI_TMR_FUNC_COMPLETE
) {

74 
°©e
->
ab‹t_ok
++;

75 
loggög
(
LOG_VERBOSE
, "ABORT TASK completed");

76 } i‡(
	gtmf_ª•⁄£
 =
ISCSI_TMR_TASK_DOES_NOT_EXIST
) {

78 
°©e
->
ab‹t_bad_ôt
++;

79 
loggög
(
LOG_VERBOSE
, "ABORT TASK bad ITT");

81 
loggög
(
LOG_NORMAL
, "ABORT TASK: unexpected TMFÑesponse %d for"

83 
tmf_ª•⁄£
, 
°©e
->
wèsk
->
cmd¢
, sèã->wèsk->
ôt
);

84 
CU_ASSERT_FATAL
((
tmf_ª•⁄£
 !
ISCSI_TMR_FUNC_COMPLETE
)

85 && (
tmf_ª•⁄£
 !
ISCSI_TMR_TASK_DOES_NOT_EXIST
));

87 
CU_ASSERT_NOT_EQUAL
(
°©us
, 
SCSI_STATUS_CHECK_CONDITION
);

91 
	$ã°_async_ab‹t_sim∂e
()

93 
ªt
;

94 
ã°s_async_ab‹t_°©e
 
°©e
 = { 
NULL
, 0, 0, 0, 0 };

95 
blocksize
 = 512;

96 
blocks_≥r_io
 = 8;

97 
buf
[
blocksize
 * 
blocks_≥r_io
];

98 
uöt64_t
 
timeout_£c
;

100 
	`¥ötf
("\nCalledÅest_async_abort_simple");

101 
CHECK_FOR_DATALOSS
;

102 
CHECK_FOR_SBC
;

103 i‡(
sd
->
iscsi_˘x
 =
NULL
) {

104 
	`CU_PASS
("[SKIPPED] Non-iSCSI");

108 i‡(
maximum_å™s„r_Àngth


109 && (
maximum_å™s„r_Àngth
 < ()(
blocks_≥r_io
))) {

110 
	`CU_PASS
("[SKIPPED] deviceÅoo small forásync_abortÅest");

114 
	`mem£t
(
buf
, 0, 
blocksize
 * 
blocks_≥r_io
);

117 
°©e
.
wèsk
 = 
	`scsi_cdb_wrôe10
(0, 
blocks_≥r_io
 * 
blocksize
,

118 
blocksize
, 0, 0, 0, 0, 0);

119 
	`CU_ASSERT_PTR_NOT_NULL_FATAL
(
°©e
.
wèsk
);

121 
ªt
 = 
	`scsi_èsk_add_d©a_out_buf„r
(
°©e
.
wèsk
,

122 
blocks_≥r_io
 * 
blocksize
,

123 
buf
);

124 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

126 
ªt
 = 
	`iscsi_scsi_comm™d_async
(
sd
->
iscsi_˘x
, sd->
iscsi_lun
,

127 
°©e
.
wèsk
, 
ã°_async_wrôe_cb
, 
NULL
,

128 &
°©e
);

129 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

131 
	`loggög
(
LOG_VERBOSE
, "WRITE10 queued: (CmdSN=0x%x, ITT=0x%x)",

132 
°©e
.
wèsk
->
cmd¢
, sèã.wèsk->
ôt
);

134 
	`CU_ASSERT_EQUAL
(
	`iscsi_out_queue_Àngth
(
sd
->
iscsi_˘x
), 1);

136 
	`loggög
(
LOG_VERBOSE
, "dispatching out queue...");

137 (
uöt32_t
)
	`iscsi_out_queue_Àngth
(
sd
->
iscsi_˘x
) > 0) {

138 
pﬁlfd
 
pfd
;

140 
pfd
.
fd
 = 
	`iscsi_gë_fd
(
sd
->
iscsi_˘x
);

141 
pfd
.
evíts
 = 
POLLOUT
;

143 
ªt
 = 
	`pﬁl
(&
pfd
, 1, 1000);

144 
	`CU_ASSERT_NOT_EQUAL
(
ªt
, -1);

146 
ªt
 = 
	`iscsi_£rvi˚
(
sd
->
iscsi_˘x
, 
pfd
.
ªvíts
);

147 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

149 
	`loggög
(
LOG_VERBOSE
, "dispatched");

155 
ªt
 = 
	`iscsi_èsk_mgmt_async
(
sd
->
iscsi_˘x
,

156 
°©e
.
wèsk
->
lun
, 
ISCSI_TM_ABORT_TASK
,

157 
°©e
.
wèsk
->
ôt
, sèã.wèsk->
cmd¢
,

158 
ã°_async_ab‹t_cb
, &
°©e
);

159 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

161 
	`loggög
(
LOG_VERBOSE
, "ABORT queued: (RefCmdSN=0x%x, "

162 "RefITT=0x%x)", 
°©e
.
wèsk
->
cmd¢
, sèã.wèsk->
ôt
);

169 
	`loggög
(
LOG_VERBOSE
, "dispatchingábortánd handlingÑesponses...");

170 
timeout_£c
 = 
	`ã°_gë_˛ock_£c
() + 5;

171 
	`ã°_gë_˛ock_£c
(Ë<
timeout_£c
) {

172 
pﬁlfd
 
pfd
;

174 
pfd
.
fd
 = 
	`iscsi_gë_fd
(
sd
->
iscsi_˘x
);

175 
pfd
.
evíts
 = 
	`iscsi_which_evíts
(
sd
->
iscsi_˘x
);

177 
ªt
 = 
	`pﬁl
(&
pfd
, 1, 1000);

178 
	`CU_ASSERT_NOT_EQUAL
(
ªt
, -1);

180 
ªt
 = 
	`iscsi_£rvi˚
(
sd
->
iscsi_˘x
, 
pfd
.
ªvíts
);

181 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

183 i‡(((
°©e
.
wr_good
 =1Ë&& (°©e.
ab‹t_bad_ôt
 == 1))

184 || (
°©e
.
ab‹t_ok
 == 1)) {

185 
	`loggög
(
LOG_VERBOSE
, "receivedállÉxpectedÑesponses");

190 
	`loggög
(
LOG_VERBOSE
, "%d IOs completed, %dáborts successful, "

192 
°©e
.
wr_good
, sèã.
ab‹t_ok
, sèã.
ab‹t_bad_ôt
);

194 i‡(
°©e
.
ab‹t_ok
 == 1) {

195 
	`CU_ASSERT_EQUAL
(
°©e
.
wr_good
, 0);

196 
	`CU_ASSERT_EQUAL
(
°©e
.
wr_ˇn˚Œed
, 0);

197 
	`CU_ASSERT_EQUAL
(
°©e
.
ab‹t_bad_ôt
, 0);

198 } i‡(
°©e
.
ab‹t_bad_ôt
 == 1) {

199 
	`CU_ASSERT_EQUAL
(
°©e
.
wr_good
, 1);

200 
	`CU_ASSERT_EQUAL
(
°©e
.
wr_ˇn˚Œed
, 0);

201 
	`CU_ASSERT_EQUAL
(
°©e
.
ab‹t_ok
, 0);

203 
	`CU_FAIL
("unexpected WRITE/ABORT state");

206 
	`scsi_‰ì_scsi_èsk
(
°©e
.
wèsk
);

209 
	`iscsi_logout_sync
(
sd
->
iscsi_˘x
);

210 
	`iscsi_de°roy_c⁄ãxt
(
sd
->
iscsi_˘x
);

211 
sd
->
iscsi_˘x
 = 
NULL
;

212 
	}
}

	@test-tool/test_async_lu_reset_simple.c

18 
	~<°dio.h
>

19 
	~<sig«l.h
>

20 
	~<pﬁl.h
>

22 
	~<CUnô/CUnô.h
>

24 
	~"iscsi.h
"

25 
	~"scsi-lowÀvñ.h
"

26 
	~"iscsi-suµ‹t.h
"

27 
	~"iscsi-ã°-cu.h
"

29 
	sã°s_async_ª£t_°©e
 {

30 
scsi_èsk
 *
	mwèsk
;

31 
uöt32_t
 
	mwr_ˇn˚Œed
;

32 
uöt32_t
 
	mwr_good
;

33 
uöt32_t
 
	mª£t_ok
;

36 
	gªc⁄√˘_suc˚eded
;

39 
ã°_async_wrôe_cb
(
iscsi_c⁄ãxt
 *
iscsi
 
__©åibuã__
((
unu£d
)),

40 
°©us
, *
comm™d_d©a
,

41 *
¥iv©e_d©a
)

43 
scsi_èsk
 *
	gwèsk
 = 
comm™d_d©a
;

44 
ã°s_async_ª£t_°©e
 *
	g°©e
 = 
¥iv©e_d©a
;

46 i‡(
	g°©us
 =
SCSI_STATUS_GOOD
) {

47 
°©e
->
wr_good
++;

48 
loggög
(
LOG_VERBOSE
, "WRITE10 successful: (CmdSN=0x%x, "

49 "ITT=0x%x)", 
wèsk
->
cmd¢
, wèsk->
ôt
);

50 } i‡(
	g°©us
 =
SCSI_STATUS_CANCELLED
) {

51 
°©e
->
wr_ˇn˚Œed
++;

52 
loggög
(
LOG_VERBOSE
, "WRITE10 cancelled: (CmdSN=0x%x, "

53 "ITT=0x%x)", 
wèsk
->
cmd¢
, wèsk->
ôt
);

55 
CU_ASSERT_NOT_EQUAL
(
°©us
, 
SCSI_STATUS_CHECK_CONDITION
);

60 
ã°_async_ª£t_cb
(
iscsi_c⁄ãxt
 *
iscsi
 
__©åibuã__
((
unu£d
)),

61 
°©us
, *
comm™d_d©a
,

62 *
¥iv©e_d©a
)

64 
uöt32_t
 
	gtmf_ª•⁄£
;

65 
ã°s_async_ª£t_°©e
 *
	g°©e
 = 
¥iv©e_d©a
;

68 
	gªc⁄√˘_suc˚eded
 = 
comm™d_d©a
 !
NULL
;

69 i‡(!
	gªc⁄√˘_suc˚eded
)

71 
	gtmf_ª•⁄£
 = *(
uöt32_t
 *)
comm™d_d©a
;

73 
loggög
(
LOG_VERBOSE
, "LU RESET: TMFÑesponse %d for"

75 
tmf_ª•⁄£
, 
°©e
->
wèsk
->
cmd¢
, sèã->wèsk->
ôt
);

76 i‡(
	gtmf_ª•⁄£
 =
ISCSI_TMR_FUNC_COMPLETE
) {

77 
°©e
->
ª£t_ok
++;

78 
loggög
(
LOG_VERBOSE
, "LU RESET completed");

80 
loggög
(
LOG_NORMAL
, "LU RESET: unexpected TMFÑesponse %d for"

82 
tmf_ª•⁄£
, 
°©e
->
wèsk
->
cmd¢
, sèã->wèsk->
ôt
);

83 
CU_ASSERT_FATAL
((
tmf_ª•⁄£
 !
ISCSI_TMR_FUNC_COMPLETE
)

84 && (
tmf_ª•⁄£
 !
ISCSI_TMR_TASK_DOES_NOT_EXIST
));

86 
CU_ASSERT_NOT_EQUAL
(
°©us
, 
SCSI_STATUS_CHECK_CONDITION
);

90 
	$ã°_async_lu_ª£t_sim∂e
()

92 
ªt
;

93 
ã°s_async_ª£t_°©e
 
°©e
 = { 
NULL
, 0, 0, 0, };

94 
blocksize
 = 512;

95 
blocks_≥r_io
 = 8;

96 
buf
[
blocksize
 * 
blocks_≥r_io
];

97 
uöt64_t
 
timeout_£c
;

99 
	`¥ötf
("\ntest_async_abort_simple");

100 
CHECK_FOR_DATALOSS
;

101 
CHECK_FOR_SBC
;

102 i‡(
sd
->
iscsi_˘x
 =
NULL
) {

103 
	`CU_PASS
("[SKIPPED] Non-iSCSI");

107 i‡(
maximum_å™s„r_Àngth


108 && (
maximum_å™s„r_Àngth
 < ()(
blocks_≥r_io
))) {

109 
	`CU_PASS
("[SKIPPED] deviceÅoo small forásync_resetÅest");

113 
	`mem£t
(
buf
, 0, 
blocksize
 * 
blocks_≥r_io
);

116 
°©e
.
wèsk
 = 
	`scsi_cdb_wrôe10
(0, 
blocks_≥r_io
 * 
blocksize
,

117 
blocksize
, 0, 0, 0, 0, 0);

118 
	`CU_ASSERT_PTR_NOT_NULL_FATAL
(
°©e
.
wèsk
);

120 
ªt
 = 
	`scsi_èsk_add_d©a_out_buf„r
(
°©e
.
wèsk
,

121 
blocks_≥r_io
 * 
blocksize
,

122 
buf
);

123 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

125 
ªt
 = 
	`iscsi_scsi_comm™d_async
(
sd
->
iscsi_˘x
, sd->
iscsi_lun
,

126 
°©e
.
wèsk
, 
ã°_async_wrôe_cb
, 
NULL
,

127 &
°©e
);

128 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

130 
	`loggög
(
LOG_VERBOSE
, "WRITE10 queued: (CmdSN=0x%x, ITT=0x%x)",

131 
°©e
.
wèsk
->
cmd¢
, sèã.wèsk->
ôt
);

133 
	`CU_ASSERT_EQUAL
(
	`iscsi_out_queue_Àngth
(
sd
->
iscsi_˘x
), 1);

135 
	`loggög
(
LOG_VERBOSE
, "dispatching out queue...");

136 (
uöt32_t
)
	`iscsi_out_queue_Àngth
(
sd
->
iscsi_˘x
) > 0) {

137 
pﬁlfd
 
pfd
;

139 
pfd
.
fd
 = 
	`iscsi_gë_fd
(
sd
->
iscsi_˘x
);

140 
pfd
.
evíts
 = 
POLLOUT
;

142 
ªt
 = 
	`pﬁl
(&
pfd
, 1, 1000);

143 
	`CU_ASSERT_NOT_EQUAL
(
ªt
, -1);

145 
ªt
 = 
	`iscsi_£rvi˚
(
sd
->
iscsi_˘x
, 
pfd
.
ªvíts
);

146 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

148 
	`loggög
(
LOG_VERBOSE
, "dispatched");

153 
ªt
 = 
	`iscsi_èsk_mgmt_async
(
sd
->
iscsi_˘x
,

154 
°©e
.
wèsk
->
lun
, 
ISCSI_TM_LUN_RESET
,

156 
ã°_async_ª£t_cb
, &
°©e
);

157 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

158 
	`CU_ASSERT_EQUAL
(
ªc⁄√˘_suc˚eded
, 1);

159 i‡(!
ªc⁄√˘_suc˚eded
)

160 
out
;

162 
	`loggög
(
LOG_VERBOSE
, "LU RESET queued");

169 
	`loggög
(
LOG_VERBOSE
, "dispatchingÑesetánd handlingÑesponses...");

170 
timeout_£c
 = 
	`ã°_gë_˛ock_£c
() + 5;

171 
	`ã°_gë_˛ock_£c
(Ë<
timeout_£c
) {

172 
pﬁlfd
 
pfd
;

174 
pfd
.
fd
 = 
	`iscsi_gë_fd
(
sd
->
iscsi_˘x
);

175 
pfd
.
evíts
 = 
	`iscsi_which_evíts
(
sd
->
iscsi_˘x
);

177 
ªt
 = 
	`pﬁl
(&
pfd
, 1, 1000);

178 
	`CU_ASSERT_NOT_EQUAL
(
ªt
, -1);

180 
ªt
 = 
	`iscsi_£rvi˚
(
sd
->
iscsi_˘x
, 
pfd
.
ªvíts
);

181 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

183 i‡(
°©e
.
ª£t_ok
 == 1) {

184 
	`loggög
(
LOG_VERBOSE
, "receivedállÉxpectedÑesponses");

189 
	`loggög
(
LOG_VERBOSE
, "%d IOs completed, %dÑesets successful",

190 
°©e
.
wr_good
, sèã.
ª£t_ok
);

192 i‡(
°©e
.
ª£t_ok
 == 1) {

197 
	`CU_ASSERT_EQUAL
(
°©e
.
wr_ˇn˚Œed
, 0);

199 
	`CU_FAIL
("unexpected WRITE/RESET state");

202 
out
:

203 
	`scsi_‰ì_scsi_èsk
(
°©e
.
wèsk
);

206 
	`iscsi_logout_sync
(
sd
->
iscsi_˘x
);

207 
	`iscsi_de°roy_c⁄ãxt
(
sd
->
iscsi_˘x
);

208 
sd
->
iscsi_˘x
 = 
NULL
;

209 
	}
}

	@test-tool/test_async_read.c

18 
	~<°dio.h
>

19 
	~<sig«l.h
>

20 
	~<pﬁl.h
>

22 
	~<CUnô/CUnô.h
>

24 
	~"iscsi.h
"

25 
	~"scsi-lowÀvñ.h
"

26 
	~"iscsi-suµ‹t.h
"

27 
	~"iscsi-ã°-cu.h
"

28 
	~"iscsi-mu…ù©h.h
"

30 
	sã°s_async_ªad_°©e
 {

31 
uöt32_t
 
	mdi•©ched
;

32 
uöt32_t
 
	mcom∂ëed
;

33 
uöt32_t
 
	m¥ev_cmd¢
;

37 
ã°_async_ªad_cb
(
iscsi_c⁄ãxt
 *
iscsi
 
__©åibuã__
((
unu£d
)),

38 
°©us
, *
comm™d_d©a
, *
¥iv©e_d©a
)

40 
scsi_èsk
 *
	g©ask
 = 
comm™d_d©a
;

41 
ã°s_async_ªad_°©e
 *
	g°©e
 = 
¥iv©e_d©a
;

43 
	g°©e
->
	gcom∂ëed
++;

44 
loggög
(
LOG_VERBOSE
, "READ10 completed: %d of %d (CmdSN=%d)",

45 
°©e
->
com∂ëed
, sèã->
di•©ched
, 
©ask
->
cmd¢
);

46 
CU_ASSERT_NOT_EQUAL
(
°©us
, 
SCSI_STATUS_CHECK_CONDITION
);

48 i‡((
	g°©e
->
	gcom∂ëed
 > 1Ë&& (
	g©ask
->
	gcmd¢
 !
°©e
->
¥ev_cmd¢
 + 1)) {

49 
loggög
(
LOG_VERBOSE
,

51 
©ask
->
cmd¢
, 
°©e
->
¥ev_cmd¢
);

53 
	g°©e
->
	g¥ev_cmd¢
 = 
©ask
->
cmd¢
;

55 
scsi_‰ì_scsi_èsk
(
©ask
);

59 
	$ã°_async_ªad
()

61 
i
, 
ªt
;

62 
ã°s_async_ªad_°©e
 
°©e
 = { 0, 0, 0 };

63 c⁄° 
blocksize
 = 512;

64 c⁄° 
blocks_≥r_io
 = 8;

65 c⁄° 
num_ios
 = 1000;

67 *
buf
 = 
	`ˇŒoc
(
blocksize
 * 
blocks_≥r_io
, 
num_ios
);

69 
	`CU_ASSERT_NOT_EQUAL
(
buf
, 
NULL
);

70 i‡(!
buf
)

71 
out
;

73 
CHECK_FOR_DATALOSS
;

74 
CHECK_FOR_SBC
;

75 i‡(
sd
->
iscsi_˘x
 =
NULL
) {

76 
	`CU_PASS
("[SKIPPED] Non-iSCSI");

77 
out
;

80 i‡(
maximum_å™s„r_Àngth


81 && (
maximum_å™s„r_Àngth
 < (
blocks_≥r_io
 * 
num_ios
))) {

82 
	`CU_PASS
("[SKIPPED] deviceÅoo small forásync_readÅest");

83 
out
;

86 
i
 = 0; i < 
num_ios
; i++) {

87 
uöt32_t
 
lba
 = 
i
 * 
blocks_≥r_io
;

88 
scsi_èsk
 *
©ask
;

90 
©ask
 = 
	`scsi_cdb_ªad10
(
lba
, 
blocks_≥r_io
 * 
blocksize
,

91 
blocksize
, 0, 0, 0, 0, 0);

92 
	`CU_ASSERT_PTR_NOT_NULL_FATAL
(
©ask
);

94 
ªt
 = 
	`scsi_èsk_add_d©a_ö_buf„r
(
©ask
,

95 
blocks_≥r_io
 * 
blocksize
,

96 &
buf
[
lba
 * 
blocksize
]);

97 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

99 
ªt
 = 
	`iscsi_scsi_comm™d_async
(
sd
->
iscsi_˘x
, sd->
iscsi_lun
,

100 
©ask
, 
ã°_async_ªad_cb
, 
NULL
,

101 &
°©e
);

102 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

104 
°©e
.
di•©ched
++;

105 
	`loggög
(
LOG_VERBOSE
, "READ10 dispatched: %d of %d (cmdsn=%d)",

106 
°©e
.
di•©ched
, 
num_ios
, 
©ask
->
cmd¢
);

109 
°©e
.
com∂ëed
 < sèã.
di•©ched
) {

110 
pﬁlfd
 
pfd
;

112 
pfd
.
fd
 = 
	`iscsi_gë_fd
(
sd
->
iscsi_˘x
);

113 
pfd
.
evíts
 = 
	`iscsi_which_evíts
(
sd
->
iscsi_˘x
);

115 
ªt
 = 
	`pﬁl
(&
pfd
, 1, -1);

116 
	`CU_ASSERT_NOT_EQUAL
(
ªt
, -1);

118 
ªt
 = 
	`iscsi_£rvi˚
(
sd
->
iscsi_˘x
, 
pfd
.
ªvíts
);

119 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

122 
out
:

123 
	`‰ì
(
buf
);

124 
	}
}

	@test-tool/test_async_write.c

18 
	~<°dio.h
>

19 
	~<sig«l.h
>

20 
	~<pﬁl.h
>

22 
	~<CUnô/CUnô.h
>

24 
	~"iscsi.h
"

25 
	~"scsi-lowÀvñ.h
"

26 
	~"iscsi-suµ‹t.h
"

27 
	~"iscsi-ã°-cu.h
"

29 
	sã°s_async_wrôe_°©e
 {

30 
uöt32_t
 
	mdi•©ched
;

31 
uöt32_t
 
	mcom∂ëed
;

32 
uöt32_t
 
	m¥ev_cmd¢
;

36 
ã°_async_wrôe_cb
(
iscsi_c⁄ãxt
 *
iscsi
 
__©åibuã__
((
unu£d
)),

37 
°©us
, *
comm™d_d©a
, *
¥iv©e_d©a
)

39 
scsi_èsk
 *
	g©ask
 = 
comm™d_d©a
;

40 
ã°s_async_wrôe_°©e
 *
	g°©e
 = 
¥iv©e_d©a
;

42 
	g°©e
->
	gcom∂ëed
++;

43 
loggög
(
LOG_VERBOSE
, "WRITE10 completed: %d of %d (CmdSN=%d)",

44 
°©e
->
com∂ëed
, sèã->
di•©ched
, 
©ask
->
cmd¢
);

45 
CU_ASSERT_NOT_EQUAL
(
°©us
, 
SCSI_STATUS_CHECK_CONDITION
);

47 i‡((
	g°©e
->
	gcom∂ëed
 > 1Ë&& (
	g©ask
->
	gcmd¢
 !
°©e
->
¥ev_cmd¢
 + 1)) {

48 
loggög
(
LOG_VERBOSE
,

50 
©ask
->
cmd¢
, 
°©e
->
¥ev_cmd¢
);

52 
	g°©e
->
	g¥ev_cmd¢
 = 
©ask
->
cmd¢
;

54 
scsi_‰ì_scsi_èsk
(
©ask
);

58 
	$ã°_async_wrôe
()

60 
i
, 
ªt
;

61 
ã°s_async_wrôe_°©e
 
°©e
 = { 0, 0, 0 };

62 
blocksize
 = 512;

63 
blocks_≥r_io
 = 8;

64 
num_ios
 = 1000;

66 
buf
[
blocksize
 * 
blocks_≥r_io
];

68 
CHECK_FOR_DATALOSS
;

69 
CHECK_FOR_SBC
;

70 i‡(
sd
->
iscsi_˘x
 =
NULL
) {

71 
	`CU_PASS
("[SKIPPED] Non-iSCSI");

75 i‡(
maximum_å™s„r_Àngth


76 && (
maximum_å™s„r_Àngth
 < (
blocks_≥r_io
 * 
num_ios
))) {

77 
	`CU_PASS
("[SKIPPED] deviceÅoo small forásync_writeÅest");

81 
	`mem£t
(
buf
, 0, 
blocksize
 * 
blocks_≥r_io
);

83 
i
 = 0; i < 
num_ios
; i++) {

84 
uöt32_t
 
lba
 = 
i
 * 
blocks_≥r_io
;

85 
scsi_èsk
 *
©ask
;

87 
©ask
 = 
	`scsi_cdb_wrôe10
(
lba
, 
blocks_≥r_io
 * 
blocksize
,

88 
blocksize
, 0, 0, 0, 0, 0);

89 
	`CU_ASSERT_PTR_NOT_NULL_FATAL
(
©ask
);

91 
ªt
 = 
	`scsi_èsk_add_d©a_out_buf„r
(
©ask
,

92 
blocks_≥r_io
 * 
blocksize
,

93 
buf
);

94 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

96 
ªt
 = 
	`iscsi_scsi_comm™d_async
(
sd
->
iscsi_˘x
, sd->
iscsi_lun
,

97 
©ask
, 
ã°_async_wrôe_cb
, 
NULL
,

98 &
°©e
);

99 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

101 
°©e
.
di•©ched
++;

102 
	`loggög
(
LOG_VERBOSE
, "WRITE10 dispatched: %d of %d (cmdsn=%d)",

103 
°©e
.
di•©ched
, 
num_ios
, 
©ask
->
cmd¢
);

106 
°©e
.
com∂ëed
 < sèã.
di•©ched
) {

107 
pﬁlfd
 
pfd
;

109 
pfd
.
fd
 = 
	`iscsi_gë_fd
(
sd
->
iscsi_˘x
);

110 
pfd
.
evíts
 = 
	`iscsi_which_evíts
(
sd
->
iscsi_˘x
);

112 
ªt
 = 
	`pﬁl
(&
pfd
, 1, -1);

113 
	`CU_ASSERT_NOT_EQUAL
(
ªt
, -1);

115 
ªt
 = 
	`iscsi_£rvi˚
(
sd
->
iscsi_˘x
, 
pfd
.
ªvíts
);

116 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

118 
	}
}

	@test-tool/test_compareandwrite_dpofua.c

19 
	~<°dio.h
>

20 
	~<°dlib.h
>

21 
	~<°rög.h
>

23 
	~<CUnô/CUnô.h
>

25 
	~"iscsi.h
"

26 
	~"scsi-lowÀvñ.h
"

27 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_com∑ª™dwrôe_dpofua
()

32 
ªt
, 
dpofua
, 
ußge_d©a_dpofua
;

33 
scsi_èsk
 *
ms_èsk
 = 
NULL
;

34 
scsi_mode_£n£
 *
ms
;

35 
scsi_èsk
 *
rso_èsk
 = 
NULL
;

36 
scsi_ªp‹t_suµ‹ãd_›_codes_⁄e_comm™d
 *
rsoc
;

38 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

39 
	`loggög
(
LOG_VERBOSE
, "Test COMPAREANDWRITE DPO/FUA flags");

41 
CHECK_FOR_SBC
;

42 
CHECK_FOR_DATALOSS
;

44 
	`loggög
(
LOG_VERBOSE
, "ReadÅhe DPOFUA flag from mode sense data");

45 
	`MODESENSE6
(
sd
, &
ms_èsk
, 0, 
SCSI_MODESENSE_PC_CURRENT
,

46 
SCSI_MODEPAGE_RETURN_ALL_PAGES
, 0, 255,

47 
EXPECT_STATUS_GOOD
);

49 
	`loggög
(
LOG_VERBOSE
, "[SUCCESS] Mode senseÑeturned status GOOD");

50 
ms
 = 
	`scsi_d©aö_unm¨shÆl
(
ms_èsk
);

51 
dpofua
 = 
ms
 && (ms->
devi˚_•ecific_∑ømëî
 & 0x10);

52 
	`scsi_‰ì_scsi_èsk
(
ms_èsk
);

54 
	`loggög
(
LOG_VERBOSE
, "ReadÅhe first block");

55 
ªt
 = 
	`ªad10
(
sd
, 
NULL
, 0, 
block_size
,

56 
block_size
, 0, 0, 0, 0, 0, 
s¸©ch
,

57 
EXPECT_STATUS_GOOD
);

58 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

59 i‡(
ªt
 == 0)

60 
	`mem˝y
(
s¸©ch
 + 
block_size
, scratch, block_size);

62 
	`mem£t
(
s¸©ch
, 0xa6, 2 * 
block_size
);

64 i‡(
dpofua
) {

65 
	`loggög
(
LOG_VERBOSE
, "DPOFUA flag is set. Device shouldállow "

68 
	`loggög
(
LOG_VERBOSE
, "DPOFUA flag is clear. Device should fail "

72 
	`loggög
(
LOG_VERBOSE
, "Test COMPAREANDWRITE with DPO==1");

73 i‡(
dpofua
) {

74 
	`COMPAREANDWRITE
(
sd
, 0, 
s¸©ch
, 2 * 
block_size
,

75 
block_size
, 0, 1, 0, 0,

76 
EXPECT_STATUS_GOOD
);

78 
	`COMPAREANDWRITE
(
sd
, 0, 
s¸©ch
, 2 * 
block_size
,

79 
block_size
, 0, 1, 0, 0,

80 
EXPECT_INVALID_FIELD_IN_CDB
);

83 
	`loggög
(
LOG_VERBOSE
, "Test COMPAREANDWRITE with FUA==1");

84 i‡(
dpofua
) {

85 
	`COMPAREANDWRITE
(
sd
, 0, 
s¸©ch
, 2 * 
block_size
,

86 
block_size
, 0, 0, 1, 0,

87 
EXPECT_STATUS_GOOD
);

89 
	`COMPAREANDWRITE
(
sd
, 0, 
s¸©ch
, 2 * 
block_size
,

90 
block_size
, 0, 0, 1, 0,

91 
EXPECT_INVALID_FIELD_IN_CDB
);

94 
	`loggög
(
LOG_VERBOSE
, "Test COMPAREANDWRITE with DPO==1 FUA==1");

95 i‡(
dpofua
) {

96 
	`COMPAREANDWRITE
(
sd
, 0, 
s¸©ch
, 2 * 
block_size
,

97 
block_size
, 0, 1, 1, 0,

98 
EXPECT_STATUS_GOOD
);

100 
	`COMPAREANDWRITE
(
sd
, 0, 
s¸©ch
, 2 * 
block_size
,

101 
block_size
, 0, 1, 1, 0,

102 
EXPECT_INVALID_FIELD_IN_CDB
);

105 
	`loggög
(
LOG_VERBOSE
, "Try fetching REPORT_SUPPORTED_OPCODES "

107 
	`REPORT_SUPPORTED_OPCODES
(
sd
, &
rso_èsk
,

108 0, 
SCSI_REPORT_SUPPORTING_OPCODE
,

109 
SCSI_OPCODE_COMPARE_AND_WRITE
,

112 
EXPECT_STATUS_GOOD
);

113 
	`loggög
(
LOG_VERBOSE
, "UnmarshallÅhe DATA-IN buffer");

114 
rsoc
 = 
	`scsi_d©aö_unm¨shÆl
(
rso_èsk
);

115 
	`CU_ASSERT_PTR_NOT_NULL_FATAL
(
rsoc
);

117 
ußge_d©a_dpofua
 = 
rsoc
->
cdb_ußge_d©a
[1] & 0x18;

118 i‡(
dpofua
) {

119 
	`loggög
(
LOG_VERBOSE
, "DPOFUA is set. VerifyÅhe "

121 i‡(!
ußge_d©a_dpofua
) {

122 
	`loggög
(
LOG_NORMAL
, "[FAILED] DpoFuaÇot set "

124 
	`CU_FAIL
("DpoFuaÇot set in CDB_USAGE_DATE");

127 
	`loggög
(
LOG_VERBOSE
, "DPOFUA is clear. VerifyÅhe "

129 i‡(
ußge_d©a_dpofua
) {

130 
	`loggög
(
LOG_NORMAL
, "[FAILED] DpoFuaÇot clear "

132 
	`CU_FAIL
("DpoFuaÇot clear in CDB_USAGE_DATE");

136 
	`scsi_‰ì_scsi_èsk
(
rso_èsk
);

137 
	}
}

	@test-tool/test_compareandwrite_invalid_dataout_size.c

19 
	~<°dio.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"iscsi-¥iv©e.h
"

25 
	~"scsi-lowÀvñ.h
"

26 
	~"iscsi-suµ‹t.h
"

27 
	~"iscsi-ã°-cu.h
"

30 
	g√w_é
;

32 
	$my_iscsi_queue_pdu
(
iscsi_c⁄ãxt
 *
iscsi
 
_U_
, 
iscsi_pdu
 *
pdu
 _U_)

34 i‡(
pdu
->
outd©a
.
d©a
[0] !
ISCSI_PDU_SCSI_REQUEST
) {

37 
√w_é
) {

40 
pdu
->
outd©a
.
d©a
[32 + 13] = 1;

44 
pdu
->
outd©a
.
d©a
[32 + 13] = 3;

48 
	}
}

51 
	$ã°_com∑ª™dwrôe_övÆid_d©aout_size
()

53 
CHECK_FOR_DATALOSS
;

54 
CHECK_FOR_THIN_PROVISIONING
;

55 
CHECK_FOR_LBPPB_GT_1
;

56 
CHECK_FOR_SBC
;

58 
loˇl_iscsi_queue_pdu
 = 
my_iscsi_queue_pdu
;

60 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

61 
	`loggög
(
LOG_VERBOSE
, "TestÅhat COMPAREANDWRITE fails for invalid "

63 
	`mem£t
(
s¸©ch
, 0xa6, 2 * 
block_size
);

66 
	`loggög
(
LOG_VERBOSE
, "CheckÅoo small DataOut");

67 
	`loggög
(
LOG_VERBOSE
, "COMPAREANDWRITE with DataOut==%zd (4 blocks) "

68 "™d TL =1 ", 4 * 
block_size
);

70 
√w_é
 = 1;

71 
	`COMPAREANDWRITE
(
sd
, 0,

72 
s¸©ch
, 4 * 
block_size
,

73 
block_size
, 0, 0, 0, 0,

74 
EXPECT_STATUS_GENERIC_BAD
);

76 
	`loggög
(
LOG_VERBOSE
, "CheckÅooÜarge DataOut");

77 
	`loggög
(
LOG_VERBOSE
, "COMPAREANDWRITE with DataOut==%zd (4 blocks) "

78 "™d TL =3 ", 4 * 
block_size
);

80 
√w_é
 = 2;

81 
	`COMPAREANDWRITE
(
sd
, 0,

82 
s¸©ch
, 4 * 
block_size
,

83 
block_size
, 0, 0, 0, 0,

84 
EXPECT_STATUS_GENERIC_BAD
);

86 
	}
}

	@test-tool/test_compareandwrite_miscompare.c

19 
	~<°dio.h
>

20 
	~<öây≥s.h
>

21 
	~<°dlib.h
>

23 
	~<CUnô/CUnô.h
>

25 
	~"iscsi.h
"

26 
	~"scsi-lowÀvñ.h
"

27 
	~"iscsi-suµ‹t.h
"

28 
	~"iscsi-ã°-cu.h
"

32 
	$ã°_com∑ª™dwrôe_miscom∑ª
()

34 
i
, 
n
;

35 
j
;

36 
maxbl
;

38 
CHECK_FOR_DATALOSS
;

39 
CHECK_FOR_SBC
;

41 i‡(
öq_bl
 && inq_bl->
max_cmp
) {

42 
maxbl
 = 
öq_bl
->
max_cmp
;

45 
maxbl
 = 256;

48 
n
 = 256;

49 i‡(
n
 + 0U > 
num_blocks
)

50 
n
 = 
num_blocks
;

52 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

53 
	`loggög
(
LOG_VERBOSE
, "Test COMPARE_AND_WRITE of 1-%d blocksátÅhe "

55 
n
);

56 
i
 = 1; i <
n
; i++) {

57 
	`loggög
(
LOG_VERBOSE
, "Wrôê%d block†o‡'A'áàLBA:0", 
i
);

58 
	`mem£t
(
s¸©ch
, 'A', 2 * 
i
 * 
block_size
);

59 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

62 
	`WRITE16
(
sd
, 0, 
i
 * 
block_size
,

63 
block_size
, 0, 0, 0, 0, 0, 
s¸©ch
,

64 
EXPECT_STATUS_GOOD
);

66 
	`loggög
(
LOG_VERBOSE
, "Change byte 27 fromÅheÉndÅo 'C' soÅhat it doesÇot match.");

67 
s¸©ch
[
i
 * 
block_size
 - 27] = 'C';

69 i‡(
i
 > 
maxbl
) {

70 
	`loggög
(
LOG_VERBOSE
, "Number of blocks %d is greaterÅhan "

73 
i
, 
maxbl
);

74 
	`COMPAREANDWRITE
(
sd
, 0,

75 
s¸©ch
, 2 * 
i
 * 
block_size
,

76 
block_size
, 0, 0, 0, 0,

77 
EXPECT_INVALID_FIELD_IN_CDB
);

81 
	`mem£t
(
s¸©ch
 + 
i
 * 
block_size
, 'B', i * block_size);

83 
	`loggög
(
LOG_VERBOSE
, "Overwrite %d blocks with 'B' "

84 "© LBA:0 (i‡theyáŒ c⁄èö 'A')", 
i
);

85 
	`COMPAREANDWRITE
(
sd
, 0,

86 
s¸©ch
, 2 * 
i
 * 
block_size
, block_size,

88 
EXPECT_MISCOMPARE
);

90 
	`loggög
(
LOG_VERBOSE
, "Read %d blocksát LBA:0ánd verify "

91 "theyáª stû»unch™gedá†'A'", 
i
);

92 
	`READ16
(
sd
, 
NULL
, 0, 
i
 * 
block_size
,

93 
block_size
, 0, 0, 0, 0, 0, 
s¸©ch
,

94 
EXPECT_STATUS_GOOD
);

96 
j
 = 0; j < 
i
 * 
block_size
; j++) {

97 i‡(
s¸©ch
[
j
] != 'A') {

98 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Data changed "

100 
	`CU_FAIL
("Block was writtenÅo");

107 
	`loggög
(
LOG_VERBOSE
, "Test COMPARE_AND_WRITE of 1-%d blocksátÅhe "

108 "íd o‡thêLUN", 
n
);

109 
i
 = 1; i <
n
; i++) {

110 
	`loggög
(
LOG_VERBOSE
, "Wrôê%d block†o‡'A'áàLBA:%" 
PRIu64
,

111 
i
, 
num_blocks
 - i);

112 
	`mem£t
(
s¸©ch
, 'A', 2 * 
i
 * 
block_size
);

113 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

116 
	`WRITE16
(
sd
, 
num_blocks
 - 
i
, i * 
block_size
,

117 
block_size
, 0, 0, 0, 0, 0, 
s¸©ch
,

118 
EXPECT_STATUS_GOOD
);

120 
	`loggög
(
LOG_VERBOSE
, "Change byte 27 fromÅheÉndÅo 'C' soÅhat it doesÇot match.");

121 
s¸©ch
[
i
 * 
block_size
 - 27] = 'C';

124 i‡(
i
 > 
maxbl
) {

125 
	`loggög
(
LOG_VERBOSE
, "Number of blocks %d is greaterÅhan "

128 
i
, 
maxbl
);

129 
	`COMPAREANDWRITE
(
sd
, 0,

130 
s¸©ch
, 2 * 
i
 * 
block_size
,

131 
block_size
, 0, 0, 0, 0,

132 
EXPECT_INVALID_FIELD_IN_CDB
);

135 
	`mem£t
(
s¸©ch
 + 
i
 * 
block_size
, 'B', i * block_size);

137 
	`loggög
(
LOG_VERBOSE
, "Overwrite %d blocks with 'B' "

138 "© LBA:%" 
PRIu64
 " (ifÅheyáll contain 'A')",

139 
i
, 
num_blocks
 - i);

140 
	`COMPAREANDWRITE
(
sd
, 
num_blocks
 - 
i
,

141 
s¸©ch
, 2 * 
i
 * 
block_size
, block_size,

143 
EXPECT_MISCOMPARE
);

145 
	`loggög
(
LOG_VERBOSE
, "Ród %d block†© LBA:%" 
PRIu64


147 
i
, 
num_blocks
 - i);

148 
	`READ16
(
sd
, 
NULL
, 
num_blocks
 - 
i
, i * 
block_size
,

149 
block_size
, 0, 0, 0, 0, 0, 
s¸©ch
,

150 
EXPECT_STATUS_GOOD
);

152 
j
 = 0; j < 
i
 * 
block_size
; j++) {

153 i‡(
s¸©ch
[
j
] != 'A') {

154 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Data changed "

156 
	`CU_FAIL
("Block was writtenÅo");

161 
	}
}

	@test-tool/test_compareandwrite_simple.c

19 
	~<°dio.h
>

20 
	~<öây≥s.h
>

21 
	~<°dlib.h
>

23 
	~<CUnô/CUnô.h
>

25 
	~"iscsi.h
"

26 
	~"scsi-lowÀvñ.h
"

27 
	~"iscsi-suµ‹t.h
"

28 
	~"iscsi-ã°-cu.h
"

32 
	$ã°_com∑ª™dwrôe_sim∂e
()

34 
i
, 
n
;

35 
j
;

36 
maxbl
;

38 
CHECK_FOR_DATALOSS
;

39 
CHECK_FOR_SBC
;

41 i‡(
öq_bl
 && inq_bl->
max_cmp
) {

42 
maxbl
 = 
öq_bl
->
max_cmp
;

45 
maxbl
 = 256;

48 
n
 = 256;

49 i‡(
n
 + 0U > 
num_blocks
)

50 
n
 = 
num_blocks
;

51 i‡(
maxbl
 + 0U > 
num_blocks
)

52 
maxbl
 = 
num_blocks
;

54 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

55 
	`loggög
(
LOG_VERBOSE
, "Test COMPARE_AND_WRITE of 1-%d blocksátÅhe "

56 "°¨ào‡thêLUN", 
n
);

57 
i
 = 1; i <
n
; i++) {

58 
	`loggög
(
LOG_VERBOSE
, "Wrôê%d block†o‡'A'áàLBA:0", 
i
);

59 
	`mem£t
(
s¸©ch
, 'A', 2 * 
i
 * 
block_size
);

60 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

63 
	`WRITE16
(
sd
, 0, 
i
 * 
block_size
,

64 
block_size
, 0, 0, 0, 0, 0, 
s¸©ch
,

65 
EXPECT_STATUS_GOOD
);

67 i‡(
i
 > 
maxbl
) {

68 
	`loggög
(
LOG_VERBOSE
, "Number of blocks %d is greaterÅhan "

71 
i
, 
maxbl
);

72 
	`COMPAREANDWRITE
(
sd
, 0,

73 
s¸©ch
, 2 * 
i
 * 
block_size
,

74 
block_size
, 0, 0, 0, 0,

75 
EXPECT_INVALID_FIELD_IN_CDB
);

79 
	`mem£t
(
s¸©ch
 + 
i
 * 
block_size
, 'B', i * block_size);

81 
	`loggög
(
LOG_VERBOSE
, "Overwrite %d blocks with 'B' "

82 "© LBA:0 (i‡theyáŒ c⁄èö 'A')", 
i
);

83 
	`COMPAREANDWRITE
(
sd
, 0,

84 
s¸©ch
, 2 * 
i
 * 
block_size
, block_size,

86 
EXPECT_STATUS_GOOD
);

88 
	`loggög
(
LOG_VERBOSE
, "Read %d blocksát LBA:0ánd verify "

89 "theyáªáŒ 'B'", 
i
);

90 
	`READ16
(
sd
, 
NULL
, 0, 
i
 * 
block_size
,

91 
block_size
, 0, 0, 0, 0, 0, 
s¸©ch
,

92 
EXPECT_STATUS_GOOD
);

94 
j
 = 0; j < 
i
 * 
block_size
; j++) {

95 i‡(
s¸©ch
[
j
] != 'B') {

96 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Data didÇot "

98 
j
, 
s¸©ch
[j]);

99 
	`CU_FAIL
("Block wasÇot written correctly");

106 
	`loggög
(
LOG_VERBOSE
, "Test COMPARE_AND_WRITE of 1-%d blocksátÅhe "

107 "íd o‡thêLUN", 
n
);

108 
i
 = 1; i <
n
; i++) {

109 
	`loggög
(
LOG_VERBOSE
, "Wrôê%d block†o‡'A'áàLBA:%" 
PRIu64
,

110 
i
, 
num_blocks
 - i);

111 
	`mem£t
(
s¸©ch
, 'A', 2 * 
i
 * 
block_size
);

112 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

115 
	`WRITE16
(
sd
, 
num_blocks
 - 
i
, i * 
block_size
,

116 
block_size
, 0, 0, 0, 0, 0, 
s¸©ch
,

117 
EXPECT_STATUS_GOOD
);

119 i‡(
i
 > 
maxbl
) {

120 
	`loggög
(
LOG_VERBOSE
, "Number of blocks %d is greaterÅhan "

123 
i
, 
maxbl
);

124 
	`COMPAREANDWRITE
(
sd
, 
num_blocks
 - 
i
,

125 
s¸©ch
, 2 * 
i
 * 
block_size
,

126 
block_size
, 0, 0, 0, 0,

127 
EXPECT_INVALID_FIELD_IN_CDB
);

130 
	`mem£t
(
s¸©ch
 + 
i
 * 
block_size
, 'B', i * block_size);

132 
	`loggög
(
LOG_VERBOSE
, "Overwrite %d blocks with 'B' "

133 "© LBA:%" 
PRIu64
 " (ifÅheyáll contain 'A')",

134 
i
, 
num_blocks
 - i);

135 
	`COMPAREANDWRITE
(
sd
, 
num_blocks
 - 
i
,

136 
s¸©ch
, 2 * 
i
 * 
block_size
, block_size,

138 
EXPECT_STATUS_GOOD
);

140 
	`loggög
(
LOG_VERBOSE
, "Ród %d block†© LBA:%" 
PRIu64


142 
i
, 
num_blocks
 - i);

143 
	`READ16
(
sd
, 
NULL
, 
num_blocks
 - 
i
, i * 
block_size
,

144 
block_size
, 0, 0, 0, 0, 0, 
s¸©ch
,

145 
EXPECT_STATUS_GOOD
);

147 
j
 = 0; j < 
i
 * 
block_size
; j++) {

148 i‡(
s¸©ch
[
j
] != 'B') {

149 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Data didÇot "

151 
j
, 
s¸©ch
[j]);

152 
	`CU_FAIL
("Block wasÇot written correctly");

157 
	}
}

	@test-tool/test_compareandwrite_unwritten.c

20 
	~<°dio.h
>

21 
	~<öây≥s.h
>

22 
	~<°dlib.h
>

24 
	~<CUnô/CUnô.h
>

26 
	~"iscsi.h
"

27 
	~"scsi-lowÀvñ.h
"

28 
	~"iscsi-suµ‹t.h
"

29 
	~"iscsi-ã°-cu.h
"

33 
	$ã°_com∑ª™dwrôe_unwrôãn
()

35 
i
, 
n
;

37 
CHECK_FOR_DATALOSS
;

38 
CHECK_FOR_SBC
;

40 
n
 = 256;

41 i‡(
n
 + 0U > 
num_blocks
)

42 
n
 = 
num_blocks
;

44 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

45 
	`loggög
(
LOG_VERBOSE
, "Test COMPARE_AND_WRITE of 1-%d blocksátÅhe "

46 "°¨ào‡thêLUN, 1 blockáà®time", 
n
);

47 
i
 = 1; i <
n
; i++) {

48 
ˇw_ªt
;

49 
ªad_buf
[
block_size
];

52 
	`mem£t
(
s¸©ch
, '%', 
block_size
);

53 
	`mem£t
(
s¸©ch
 + 
block_size
, 'B', block_size);

55 
ˇw_ªt
 = 
	`com∑ª™dwrôe
(
sd
, 
i
, 
s¸©ch
, 2 * 
block_size
,

56 
block_size
,

58 
EXPECT_MISCOMPARE
);

59 i‡(
ˇw_ªt
 == -2) {

60 
	`CU_PASS
("[SKIPPED] COMPARE AND WRITEÇot supported");

63 
	`READ16
(
sd
, 
NULL
, 
i
, 
block_size
,

64 
block_size
, 0, 0, 0, 0, 0, 
ªad_buf
,

65 
EXPECT_STATUS_GOOD
);

67 i‡(
ˇw_ªt
 == 0) {

69 
	`CU_ASSERT_NOT_EQUAL
(
	`memcmp
(
ªad_buf
, 
s¸©ch
,

70 
block_size
), 0);

78 
	`CU_ASSERT_EQUAL
(
	`memcmp
(
ªad_buf
, 
s¸©ch
 + 
block_size
,

79 
block_size
), 0);

82 
	}
}

	@test-tool/test_extendedcopy_descr_limits.c

19 
	~<°dio.h
>

20 
	~<°dlib.h
>

21 
	~<°rög.h
>

22 
	~<°dlib.h
>

24 
	~<CUnô/CUnô.h
>

26 
	~"iscsi.h
"

27 
	~"scsi-lowÀvñ.h
"

28 
	~"iscsi-ã°-cu.h
"

29 
	~"iscsi-¥iv©e.h
"

31 
	$öô_xc›y_des¸
(*
buf
, 
off£t
, 
num_tgt_desc
,

32 
num_£g_desc
, *
tgt_desc_Àn
, *
£g_desc_Àn
)

34 
i
;

38 
i
 = 0; i < 
num_tgt_desc
; i++)

39 
off£t
 +
	`p›uœã_tgt_desc
(
buf
+off£t, 
IDENT_DESCR_TGT_DESCR
,

40 
LU_ID_TYPE_LUN
, 0, 0, 0, 0, 
sd
);

41 *
tgt_desc_Àn
 = 
off£t
 - 
XCOPY_DESC_OFFSET
;

45 
i
 = 0; i < 
num_£g_desc
; i++)

46 
off£t
 +
	`p›uœã_£g_desc_b2b
(
buf
+offset, 0, 0, 0, 0,

47 2048, 0, 
num_blocks
 - 2048);

48 *
£g_desc_Àn
 = 
off£t
 - 
XCOPY_DESC_OFFSET
 - *
tgt_desc_Àn
;

50  
off£t
;

51 
	}
}

54 
	$ã°_exãndedc›y_des¸_limôs
()

56 
scsi_èsk
 *
edl_èsk
;

57 
iscsi_d©a
 
d©a
;

58 *
xc›ybuf
;

59 
scsi_c›y_ªsu…s_›_∑øms
 *
›p
 = 
NULL
;

60 
tgt_desc_Àn
 = 0, 
£g_desc_Àn
 = 0, 
£g_desc_cou¡
;

61 
Æloc_Àn
;

63 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

64 
	`loggög
(
LOG_VERBOSE
, "Test EXTENDED COPY descriptorÜimits");

66 
CHECK_FOR_DATALOSS
;

68 
	`loggög
(
LOG_VERBOSE
, "Issue RECEIVE COPY RESULTS (OPERATING PARAMS)");

69 
	`RECEIVE_COPY_RESULTS
(&
edl_èsk
, 
sd
, 
SCSI_COPY_RESULTS_OP_PARAMS
, 0,

70 (**)&
›p
, 
EXPECT_STATUS_GOOD
);

72 
	`CU_ASSERT_NOT_EQUAL
(
›p
, 
NULL
);

73 i‡(!
›p
)

78 
Æloc_Àn
 = 
XCOPY_DESC_OFFSET
 +

79 (
›p
->
max_èrgë_desc_cou¡
+1) *

80 
	`gë_desc_Àn
(
IDENT_DESCR_TGT_DESCR
) +

81 (
›p
->
max_£gmít_desc_cou¡
+1) *

82 
	`gë_desc_Àn
(
BLK_TO_BLK_SEG_DESCR
);

83 
Æloc_Àn
 = 
	`MAX
◊Œoc_Àn, (
XCOPY_DESC_OFFSET


84 + 
›p
->
max_desc_li°_Àngth


85 + 
	`gë_desc_Àn
(
BLK_TO_BLK_SEG_DESCR
)));

86 
d©a
.d©®
	`mÆloc
(
Æloc_Àn
);

87 
xc›ybuf
 = 
d©a
.data;

88 
	`mem£t
(
xc›ybuf
, 0, 
Æloc_Àn
);

90 
	`loggög
(
LOG_VERBOSE
,

92 
d©a
.
size
 = 
	`öô_xc›y_des¸
(
xc›ybuf
, 
XCOPY_DESC_OFFSET
,

93 (
›p
->
max_èrgë_desc_cou¡
+1), 1,

94 &
tgt_desc_Àn
, &
£g_desc_Àn
);

95 
	`p›uœã_∑øm_hódî
(
xc›ybuf
, 1, 0, 0, 0,

96 
tgt_desc_Àn
, 
£g_desc_Àn
, 0);

97 
	`EXTENDEDCOPY
(
sd
, &
d©a
, 
EXPECT_TOO_MANY_DESCR
);

99 
	`loggög
(
LOG_VERBOSE
,

101 
	`mem£t
(
xc›ybuf
, 0, 
Æloc_Àn
);

102 
d©a
.
size
 = 
	`öô_xc›y_des¸
(
xc›ybuf
, 
XCOPY_DESC_OFFSET
, 1,

103 (
›p
->
max_£gmít_desc_cou¡
+1),

104 &
tgt_desc_Àn
, &
£g_desc_Àn
);

105 
	`p›uœã_∑øm_hódî
(
xc›ybuf
, 2, 0, 0, 0,

106 
tgt_desc_Àn
, 
£g_desc_Àn
, 0);

107 
	`EXTENDEDCOPY
(
sd
, &
d©a
, 
EXPECT_TOO_MANY_DESCR
);

109 
	`loggög
(
LOG_VERBOSE
,

111 
	`mem£t
(
xc›ybuf
, 0, 
Æloc_Àn
);

112 
tgt_desc_Àn
 = (
›p
->
max_èrgë_desc_cou¡
 + 1)

113 * 
	`gë_desc_Àn
(
IDENT_DESCR_TGT_DESCR
);

115 
£g_desc_Àn
 = 
Æloc_Àn
 - 
XCOPY_DESC_OFFSET
 - 
tgt_desc_Àn
;

116 
£g_desc_cou¡
 = 
£g_desc_Àn
 / 
	`gë_desc_Àn
(
BLK_TO_BLK_SEG_DESCR
);

117 
d©a
.
size
 = 
	`öô_xc›y_des¸
(
xc›ybuf
, 
XCOPY_DESC_OFFSET
,

118 (
›p
->
max_èrgë_desc_cou¡
+1),

119 
£g_desc_cou¡
,

120 &
tgt_desc_Àn
, &
£g_desc_Àn
);

121 
	`p›uœã_∑øm_hódî
(
xc›ybuf
, 3, 0, 0, 0,

122 
tgt_desc_Àn
, 
£g_desc_Àn
, 0);

123 
	`EXTENDEDCOPY
(
sd
, &
d©a
, 
EXPECT_PARAM_LIST_LEN_ERR
);

125 
	`scsi_‰ì_scsi_èsk
(
edl_èsk
);

126 
	`‰ì
(
xc›ybuf
);

127 
	}
}

	@test-tool/test_extendedcopy_descr_type.c

19 
	~<°dio.h
>

20 
	~<°dlib.h
>

21 
	~<°rög.h
>

22 
	~<°dlib.h
>

24 
	~<CUnô/CUnô.h
>

26 
	~"iscsi.h
"

27 
	~"scsi-lowÀvñ.h
"

28 
	~"iscsi-ã°-cu.h
"

30 
	$öô_xc›ybuf
(*
buf
, 
tgt_desc_ty≥
, 
£g_desc_ty≥
,

31 *
tgt_desc_Àn
, *
£g_desc_Àn
)

33 
off£t
 = 
XCOPY_DESC_OFFSET
;

35 
off£t
 +
	`p›uœã_tgt_desc
(
buf
+off£t, 
tgt_desc_ty≥
, 
LU_ID_TYPE_LUN
,

36 0, 0, 0, 0, 
sd
);

37 *
tgt_desc_Àn
 = 
off£t
 - 
XCOPY_DESC_OFFSET
;

38 i‡(
£g_desc_ty≥
 =
BLK_TO_BLK_SEG_DESCR
)

39 
off£t
 +
	`p›uœã_£g_desc_b2b
(
buf
+offset, 0, 0, 0, 0, 2048, 0,

40 
num_blocks
 - 2048);

42 
off£t
 +
	`p›uœã_£g_desc_hdr
(
buf
+off£t, 
£g_desc_ty≥
,

44 *
£g_desc_Àn
 = 
off£t
 - 
XCOPY_DESC_OFFSET
 - *
tgt_desc_Àn
;

46  
off£t
;

47 
	}
}

50 
	$ã°_exãndedc›y_des¸_ty≥
()

52 
tgt_desc_Àn
 = 0, 
£g_desc_Àn
 = 0, 
Æloc_Àn
;

53 
iscsi_d©a
 
d©a
;

54 *
xc›ybuf
;

56 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

57 
	`loggög
(
LOG_VERBOSE
,

60 
CHECK_FOR_DATALOSS
;

62 
Æloc_Àn
 = 
XCOPY_DESC_OFFSET
 +

63 
	`gë_desc_Àn
(
IDENT_DESCR_TGT_DESCR
) +

64 
	`gë_desc_Àn
(
BLK_TO_BLK_SEG_DESCR
);

65 
d©a
.d©®
	`Æloˇ
(
Æloc_Àn
);

66 
xc›ybuf
 = 
d©a
.data;

67 
	`mem£t
(
xc›ybuf
, 0, 
Æloc_Àn
);

69 
	`loggög
(
LOG_VERBOSE
,

71 
d©a
.
size
 = 
	`öô_xc›ybuf
(
xc›ybuf
, 0xE0, 
BLK_TO_BLK_SEG_DESCR
,

72 &
tgt_desc_Àn
, &
£g_desc_Àn
);

73 
	`p›uœã_∑øm_hódî
(
xc›ybuf
, 1, 0, 0, 0,

74 
tgt_desc_Àn
, 
£g_desc_Àn
, 0);

76 
	`EXTENDEDCOPY
(
sd
, &
d©a
, 
EXPECT_UNSUPP_DESCR_CODE
);

78 
	`loggög
(
LOG_VERBOSE
, "Send Stream-to-Stream Copy segment descriptor");

79 
	`mem£t
(
xc›ybuf
, 0, 
Æloc_Àn
);

80 
d©a
.
size
 = 
	`öô_xc›ybuf
(
xc›ybuf
, 
IDENT_DESCR_TGT_DESCR
,

81 
STRM_TO_STRM_SEG_DESCR
,

82 &
tgt_desc_Àn
, &
£g_desc_Àn
);

83 
	`p›uœã_∑øm_hódî
(
xc›ybuf
, 1, 0, 0, 0,

84 
tgt_desc_Àn
, 
£g_desc_Àn
, 0);

86 
	`EXTENDEDCOPY
(
sd
, &
d©a
, 
EXPECT_UNSUPP_DESCR_CODE
);

87 
	}
}

	@test-tool/test_extendedcopy_param.c

19 
	~<°dio.h
>

20 
	~<°dlib.h
>

21 
	~<°rög.h
>

22 
	~<°dlib.h
>

24 
	~<CUnô/CUnô.h
>

26 
	~"iscsi.h
"

27 
	~"scsi-lowÀvñ.h
"

28 
	~"iscsi-ã°-cu.h
"

31 
	$ã°_exãndedc›y_∑øm
()

33 
tgt_desc_Àn
 = 0, 
£g_desc_Àn
 = 0, 
off£t
 = 
XCOPY_DESC_OFFSET
;

34 
iscsi_d©a
 
d©a
;

35 *
xc›ybuf
;

37 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

38 
	`loggög
(
LOG_VERBOSE
, "Test EXTENDED COPYÖarameterÜistÜength");

40 
CHECK_FOR_DATALOSS
;

42 
d©a
.
size
 = 
XCOPY_DESC_OFFSET
 +

43 
	`gë_desc_Àn
(
IDENT_DESCR_TGT_DESCR
) +

44 
	`gë_desc_Àn
(
BLK_TO_BLK_SEG_DESCR
);

45 
d©a
.d©®
	`Æloˇ
(d©a.
size
);

46 
xc›ybuf
 = 
d©a
.data;

47 
	`mem£t
(
xc›ybuf
, 0, 
d©a
.
size
);

49 
off£t
 +
	`p›uœã_tgt_desc
(
xc›ybuf
+off£t, 
IDENT_DESCR_TGT_DESCR
,

50 
LU_ID_TYPE_LUN
, 0, 0, 0, 0, 
sd
);

51 
tgt_desc_Àn
 = 
off£t
 - 
XCOPY_DESC_OFFSET
;

53 
off£t
 +
	`p›uœã_£g_desc_b2b
(
xc›ybuf
+offset, 0, 0, 0, 0,

54 2048, 0, 
num_blocks
 - 2048);

55 
£g_desc_Àn
 = 
off£t
 - 
XCOPY_DESC_OFFSET
 - 
tgt_desc_Àn
;

57 
	`p›uœã_∑øm_hódî
(
xc›ybuf
, 1, 0, 0, 0,

58 
tgt_desc_Àn
, 
£g_desc_Àn
, 0);

60 
	`loggög
(
LOG_VERBOSE
,

62 
d©a
.
size
 = 
XCOPY_DESC_OFFSET
 +

63 
	`gë_desc_Àn
(
IDENT_DESCR_TGT_DESCR
) - 1;

64 
	`EXTENDEDCOPY
(
sd
, &
d©a
, 
EXPECT_PARAM_LIST_LEN_ERR
);

66 
	`loggög
(
LOG_VERBOSE
,

68 
d©a
.
size
 = 
XCOPY_DESC_OFFSET
 +

69 
	`gë_desc_Àn
(
IDENT_DESCR_TGT_DESCR
) +

70 
	`gë_desc_Àn
(
BLK_TO_BLK_SEG_DESCR
) - 1;

71 
	`EXTENDEDCOPY
(
sd
, &
d©a
, 
EXPECT_PARAM_LIST_LEN_ERR
);

73 
	`loggög
(
LOG_VERBOSE
, "TestÖarameterÜistÜength = 0");

74 
d©a
.
size
 = 0;

75 
	`EXTENDEDCOPY
(
sd
, &
d©a
, 
EXPECT_STATUS_GOOD
);

76 
	}
}

	@test-tool/test_extendedcopy_simple.c

19 
	~<°dio.h
>

20 
	~<°dlib.h
>

21 
	~<°rög.h
>

22 
	~<°dlib.h
>

24 
	~<CUnô/CUnô.h
>

26 
	~"iscsi.h
"

27 
	~"scsi-lowÀvñ.h
"

28 
	~"iscsi-ã°-cu.h
"

31 
	$ã°_exãndedc›y_sim∂e
()

33 
tgt_desc_Àn
 = 0, 
£g_desc_Àn
 = 0, 
off£t
 = 
XCOPY_DESC_OFFSET
;

34 
iscsi_d©a
 
d©a
;

35 *
xc›ybuf
;

36 
c›õd_blocks
;

37 *
buf1
;

38 *
buf2
;

41 
c›õd_blocks
 = 
num_blocks
 / 2;

42 i‡(
c›õd_blocks
 > 2048)

43 
c›õd_blocks
 = 2048;

44 
buf1
 = 
	`mÆloc
(
c›õd_blocks
 * 
block_size
);

45 
buf2
 = 
	`mÆloc
(
c›õd_blocks
 * 
block_size
);

47 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

48 
	`loggög
(
LOG_VERBOSE
,

50 
c›õd_blocks
);

52 
CHECK_FOR_DATALOSS
;

54 
	`loggög
(
LOG_VERBOSE
, "Wrôê%u block†o‡'A'áàLBA:0", 
c›õd_blocks
);

55 
	`mem£t
(
buf1
, 'A', 
c›õd_blocks
 * 
block_size
);

56 
	`WRITE16
(
sd
, 0, 
c›õd_blocks
 * 
block_size
, block_size, 0, 0, 0, 0, 0,

57 
buf1
, 
EXPECT_STATUS_GOOD
);

59 
d©a
.
size
 = 
XCOPY_DESC_OFFSET
 +

60 
	`gë_desc_Àn
(
IDENT_DESCR_TGT_DESCR
) +

61 
	`gë_desc_Àn
(
BLK_TO_BLK_SEG_DESCR
);

62 
d©a
.d©®
	`Æloˇ
(d©a.
size
);

63 
xc›ybuf
 = 
d©a
.data;

64 
	`mem£t
(
xc›ybuf
, 0, 
d©a
.
size
);

67 
off£t
 +
	`p›uœã_tgt_desc
(
xc›ybuf
+off£t, 
IDENT_DESCR_TGT_DESCR
,

68 
LU_ID_TYPE_LUN
, 0, 0, 0, 0, 
sd
);

69 
tgt_desc_Àn
 = 
off£t
 - 
XCOPY_DESC_OFFSET
;

72 
off£t
 +
	`p›uœã_£g_desc_b2b
(
xc›ybuf
+offset, 0, 0, 0, 0,

73 
c›õd_blocks
, 0, 
num_blocks
 - copied_blocks);

74 
£g_desc_Àn
 = 
off£t
 - 
XCOPY_DESC_OFFSET
 - 
tgt_desc_Àn
;

77 
	`p›uœã_∑øm_hódî
(
xc›ybuf
, 1, 0, 
LIST_ID_USAGE_DISCARD
, 0,

78 
tgt_desc_Àn
, 
£g_desc_Àn
, 0);

80 
	`EXTENDEDCOPY
(
sd
, &
d©a
, 
EXPECT_STATUS_GOOD
);

82 
	`loggög
(
LOG_VERBOSE
, "Read %u blocks fromÉnd ofÅhe LUN",

83 
c›õd_blocks
);

84 
	`READ16
(
sd
, 
NULL
, 
num_blocks
 - 
c›õd_blocks
, c›õd_block†* 
block_size
,

85 
block_size
, 0, 0, 0, 0, 0, 
buf2
,

86 
EXPECT_STATUS_GOOD
);

88 i‡(
	`memcmp
(
buf1
, 
buf2
, 
c›õd_blocks
 * 
block_size
)) {

89 
	`CU_FAIL
("Blocks wereÇot copied correctly");

92 
	`‰ì
(
buf1
);

93 
	`‰ì
(
buf2
);

94 
	}
}

	@test-tool/test_extendedcopy_validate_seg_descr.c

19 
	~<°dio.h
>

20 
	~<°dlib.h
>

21 
	~<°rög.h
>

22 
	~<°dlib.h
>

24 
	~<CUnô/CUnô.h
>

26 
	~"iscsi.h
"

27 
	~"scsi-lowÀvñ.h
"

28 
	~"iscsi-ã°-cu.h
"

31 
	$ã°_exãndedc›y_vÆid©e_£g_des¸
()

33 
tgt_desc_Àn
 = 0, 
£g_desc_Àn
 = 0, 
off£t
 = 
XCOPY_DESC_OFFSET
;

34 
iscsi_d©a
 
d©a
;

35 *
xc›ybuf
;

37 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

38 
	`loggög
(
LOG_VERBOSE
, "Test EXTENDED COPY segment descriptor fields");

40 
CHECK_FOR_DATALOSS
;

42 
d©a
.
size
 = 
XCOPY_DESC_OFFSET
 +

43 
	`gë_desc_Àn
(
IDENT_DESCR_TGT_DESCR
) +

44 
	`gë_desc_Àn
(
BLK_TO_BLK_SEG_DESCR
);

45 
d©a
.d©®
	`Æloˇ
(d©a.
size
);

46 
xc›ybuf
 = 
d©a
.data;

47 
	`mem£t
(
xc›ybuf
, 0, 
d©a
.
size
);

49 
	`loggög
(
LOG_VERBOSE
, "Send invalidÅarget descriptor index");

50 
off£t
 +
	`p›uœã_tgt_desc
(
xc›ybuf
+off£t, 
IDENT_DESCR_TGT_DESCR
,

51 
LU_ID_TYPE_LUN
, 0, 0, 0, 0, 
sd
);

52 
tgt_desc_Àn
 = 
off£t
 - 
XCOPY_DESC_OFFSET
;

54 
off£t
 +
	`p›uœã_£g_desc_b2b
(
xc›ybuf
+offset, 0, 0, 0, 1,

55 2048, 0, 
num_blocks
 - 2048);

56 
£g_desc_Àn
 = 
off£t
 - 
XCOPY_DESC_OFFSET
 - 
tgt_desc_Àn
;

57 
	`p›uœã_∑øm_hódî
(
xc›ybuf
, 1, 0, 0, 0,

58 
tgt_desc_Àn
, 
£g_desc_Àn
, 0);

60 
	`EXTENDEDCOPY
(
sd
, &
d©a
, 
EXPECT_COPY_ABORTED
);

62 
	`loggög
(
LOG_VERBOSE
,

64 
	`mem£t
(
xc›ybuf
, 0, 
d©a
.
size
);

65 
off£t
 = 
XCOPY_DESC_OFFSET
;

66 
off£t
 +
	`p›uœã_tgt_desc
(
xc›ybuf
+off£t, 
IDENT_DESCR_TGT_DESCR
,

67 
LU_ID_TYPE_LUN
, 0, 0, 0, 0, 
sd
);

68 
tgt_desc_Àn
 = 
off£t
 - 
XCOPY_DESC_OFFSET
;

70 
off£t
 +
	`p›uœã_£g_desc_b2b
(
xc›ybuf
+offset, 0, 0, 0, 0,

71 2048, 0, 
num_blocks
 - 1);

72 
£g_desc_Àn
 = 
off£t
 - 
XCOPY_DESC_OFFSET
 - 
tgt_desc_Àn
;

73 
	`p›uœã_∑øm_hódî
(
xc›ybuf
, 1, 0, 0, 0,

74 
tgt_desc_Àn
, 
£g_desc_Àn
, 0);

76 
	`EXTENDEDCOPY
(
sd
, &
d©a
, 
EXPECT_COPY_ABORTED
);

77 
	}
}

	@test-tool/test_extendedcopy_validate_tgt_descr.c

19 
	~<°dio.h
>

20 
	~<°dlib.h
>

21 
	~<°rög.h
>

22 
	~<°dlib.h
>

24 
	~<CUnô/CUnô.h
>

26 
	~"iscsi.h
"

27 
	~"scsi-lowÀvñ.h
"

28 
	~"iscsi-ã°-cu.h
"

31 
	$ã°_exãndedc›y_vÆid©e_tgt_des¸
()

33 
tgt_desc_Àn
 = 0, 
£g_desc_Àn
 = 0, 
off£t
 = 
XCOPY_DESC_OFFSET
;

34 
ªt
;

35 
scsi_öquúy_°™d¨d
 *
°d_öq
;

36 
iscsi_d©a
 
d©a
;

37 *
xc›ybuf
;

39 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

40 
	`loggög
(
LOG_VERBOSE
, "Test EXTENDED COPYÅarget descriptor fields");

42 
CHECK_FOR_DATALOSS
;

44 
ªt
 = 
	`öquúy
(
sd
, &
èsk
, 0, 0, 260,

45 
EXPECT_STATUS_GOOD
);

46 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

47 
°d_öq
 = 
	`scsi_d©aö_unm¨shÆl
(
èsk
);

48 
	`CU_ASSERT_NOT_EQUAL
(
°d_öq
, 
NULL
);

50 
d©a
.
size
 = 
XCOPY_DESC_OFFSET
 +

51 
	`gë_desc_Àn
(
IDENT_DESCR_TGT_DESCR
) +

52 
	`gë_desc_Àn
(
BLK_TO_BLK_SEG_DESCR
);

53 
d©a
.d©®
	`Æloˇ
(d©a.
size
);

54 
xc›ybuf
 = 
d©a
.data;

55 
	`mem£t
(
xc›ybuf
, 0, 
d©a
.
size
);

57 
	`loggög
(
LOG_VERBOSE
, "Unsupported LU_ID TYPE");

59 
off£t
 +
	`p›uœã_tgt_desc
(
xc›ybuf
+off£t, 
IDENT_DESCR_TGT_DESCR
,

60 
LU_ID_TYPE_RSVD
, 0, 0, 0, 0, 
sd
);

61 
tgt_desc_Àn
 = 
off£t
 - 
XCOPY_DESC_OFFSET
;

62 
off£t
 +
	`p›uœã_£g_desc_b2b
(
xc›ybuf
+offset, 0, 0, 0, 0,

63 2048, 0, 
num_blocks
 - 2048);

64 
£g_desc_Àn
 = 
off£t
 - 
XCOPY_DESC_OFFSET
 - 
tgt_desc_Àn
;

65 
	`p›uœã_∑øm_hódî
(
xc›ybuf
, 1, 0, 0, 0,

66 
tgt_desc_Àn
, 
£g_desc_Àn
, 0);

68 i‡(
°d_öq
->
vîsi⁄
 >= 6) {

70 
	`EXTENDEDCOPY
(
sd
, &
d©a
, 
EXPECT_STATUS_GOOD
);

73 
	`EXTENDEDCOPY
(
sd
, &
d©a
, 
EXPECT_INVALID_FIELD_IN_CDB
);

76 i‡(
°d_öq
->
vîsi⁄
 >= 6) {

78 
	`CU_PASS
("[SKIPPED] Target is SPC-4+. Skipping NUL bitÅest");

81 
	`loggög
(
LOG_VERBOSE
, "Test NUL bit inÅarget descriptor");

83 
	`mem£t
(
xc›ybuf
, 0, 
d©a
.
size
);

84 
off£t
 = 
XCOPY_DESC_OFFSET
;

85 
off£t
 +
	`p›uœã_tgt_desc
(
xc›ybuf
+off£t, 
IDENT_DESCR_TGT_DESCR
,

86 
LU_ID_TYPE_LUN
, 1, 0, 0, 0, 
sd
);

87 
tgt_desc_Àn
 = 
off£t
 - 
XCOPY_DESC_OFFSET
;

88 
off£t
 +
	`p›uœã_£g_desc_b2b
(
xc›ybuf
+offset, 0, 0, 0, 0,

89 2048, 0, 
num_blocks
 - 2048);

90 
£g_desc_Àn
 = 
off£t
 - 
XCOPY_DESC_OFFSET
 - 
tgt_desc_Àn
;

91 
	`p›uœã_∑øm_hódî
(
xc›ybuf
, 1, 0, 0, 0,

92 
tgt_desc_Àn
, 
£g_desc_Àn
, 0);

94 
	`EXTENDEDCOPY
(
sd
, &
d©a
, 
EXPECT_COPY_ABORTED
);

95 
	}
}

	@test-tool/test_get_lba_status_beyond_eol.c

19 
	~<°dio.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-suµ‹t.h
"

26 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_gë_lba_°©us_bey⁄d_eﬁ
()

32 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

33 
	`loggög
(
LOG_VERBOSE
, "Test GETLBASTATUS one block beyondÅheÉnd ofÅhe LUN");

35 
	`GETLBASTATUS
(
sd
, 
NULL
, 
num_blocks
 + 1, 24,

36 
EXPECT_LBA_OOB
);

38 
	`loggög
(
LOG_VERBOSE
, "Test GETLBASTATUSát LBA 2^63");

39 
	`GETLBASTATUS
(
sd
, 
NULL
, 0x8000000000000000ULL, 24,

40 
EXPECT_LBA_OOB
);

42 
	`loggög
(
LOG_VERBOSE
, "Test GETLBASTATUSát LBA -1");

43 
	`GETLBASTATUS
(
sd
, 
NULL
, 0xffffffffffffffffULL, 24,

44 
EXPECT_LBA_OOB
);

45 
	}
}

	@test-tool/test_get_lba_status_simple.c

19 
	~<°dio.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-suµ‹t.h
"

26 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_gë_lba_°©us_sim∂e
()

32 
i
;

34 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

35 
	`loggög
(
LOG_VERBOSE
, "Test GETLBASTATUS of 1-256 blocksátÅhe start ofÅhe LUN");

36 
i
 = 1; i <= 256; i++) {

37 
	`GETLBASTATUS
(
sd
, 
NULL
, 
i
, 24,

38 
EXPECT_STATUS_GOOD
);

41 
	`loggög
(
LOG_VERBOSE
, "Test GETLBASTATUS of 1-256 blocksátÅheÉnd ofÅhe LUN");

42 
i
 = 1; i <= 256; i++) {

43 
	`GETLBASTATUS
(
sd
, 
NULL
, 
num_blocks
 - 
i
, 24,

44 
EXPECT_STATUS_GOOD
);

46 
	}
}

	@test-tool/test_get_lba_status_unmap_single.c

19 
	~<°dio.h
>

21 
	~<CUnô/CUnô.h
>

22 
	~<öây≥s.h
>

24 
	~"iscsi.h
"

25 
	~"scsi-lowÀvñ.h
"

26 
	~"iscsi-suµ‹t.h
"

27 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_gë_lba_°©us_unm≠_sögÀ
()

32 
uöt64_t
 
i
;

33 
unm≠_li°
 
li°
[1];

34 
scsi_èsk
 *
t
 = 
NULL
;

35 
scsi_gë_lba_°©us
 *
lbas
 = 
NULL
;

36 
scsi_lba_°©us_des¸ùt‹
 *
lbasd
 = 
NULL
;

38 
CHECK_FOR_DATALOSS
;

39 
CHECK_FOR_THIN_PROVISIONING
;

40 
CHECK_FOR_LBPU
;

42 
	`mem£t
(
s¸©ch
, 'A', (256 + 
lbµb
 + 1Ë* 
block_size
);

44 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

45 
	`loggög
(
LOG_VERBOSE
, "Test GETLBASTATUS forá single unmapped block "

47 
	`loggög
(
LOG_VERBOSE
, "We have %dÜogical blocksÖerÖhysical block",

48 
lbµb
);

50 
	`loggög
(
LOG_VERBOSE
, "WriteÅhe first %i blocks withá known "

51 "∑âî¿™dÅhu†m≠Åhêblocks", 256 + 
lbµb
);

52 
	`WRITE10
(
sd
, 0, (256 + 
lbµb
Ë* 
block_size
,

53 
block_size
, 0, 0, 0, 0, 0, 
s¸©ch
,

54 
EXPECT_STATUS_GOOD
);

56 
i
 = 0; i + 
lbµb
 <= 256; i +=Übppb) {

57 
	`loggög
(
LOG_VERBOSE
, "Unmapá singleÖhysical blockát LBA:%"

58 
PRIu64
 " (numbî o‡logiˇ»blocks: %d)", 
i
, 
lbµb
);

59 
li°
[0].
lba
 = 
i
;

60 
li°
[0].
num
 = 
lbµb
;

61 
	`UNMAP
(
sd
, 0, 
li°
, 1,

62 
EXPECT_STATUS_GOOD
);

64 
	`loggög
(
LOG_VERBOSE
, "ReadÅhe status ofÅhe blockát LBA:%"

65 
PRIu64
, 
i
);

66 
	`GETLBASTATUS
(
sd
, 
NULL
, 
i
, 24,

67 
EXPECT_STATUS_GOOD
);

69 
	`loggög
(
LOG_VERBOSE
, "ReadÅhe status ofÅhe blockát LBA:%"

70 
PRIu64
, 
i
 + 
lbµb
);

71 
	`GETLBASTATUS
(
sd
, &
t
, 
i
 + 
lbµb
, 24,

72 
EXPECT_STATUS_GOOD
);

73 i‡(
t
 =
NULL
) {

74 
	`CU_FAIL
("[FAILED] GETLBASTATUSÅask is NULL");

77 
lbas
 = 
	`scsi_d©aö_unm¨shÆl
(
t
);

78 i‡(
lbas
 =
NULL
) {

79 
	`CU_FAIL
("[FAILED] GETLBASTATUS command: failed "

81 
	`scsi_‰ì_scsi_èsk
(
t
);

84 
lbasd
 = &
lbas
->
des¸ùt‹s
[0];

85 i‡(
lbasd
->
lba
 !
i
 + 
lbµb
) {

86 
	`CU_FAIL
("[FAILED] GETLBASTATUS command: "

89 
	`scsi_‰ì_scsi_èsk
(
t
);

92 i‡(
lbasd
->
¥ovisi⁄ög
 !
SCSI_PROVISIONING_TYPE_MAPPED
) {

93 
	`CU_FAIL
("[FAILED] LBA should be mapped but isn't");

96 
	`scsi_‰ì_scsi_èsk
(
t
);

99 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

100 
	`loggög
(
LOG_VERBOSE
, "Test GETLBASTATUS forá singleÑange of 1-255 "

102 
i
 = 
lbµb
; i +Übppb <= 256; i +=Übppb) {

103 
	`loggög
(
LOG_VERBOSE
, "WriteÅhe first %i blocks withá known "

104 "∑âî¿™dÅhu†m≠Åhêblocks", (256 + 
lbµb
));

105 
	`WRITE10
(
sd
, 0, (256 + 
lbµb
Ë* 
block_size
,

106 
block_size
, 0, 0, 0, 0, 0, 
s¸©ch
,

107 
EXPECT_STATUS_GOOD
);

109 
	`loggög
(
LOG_VERBOSE
, "Unm≠ %" 
PRIu64
 " block†© LBA 0", 
i
);

110 
li°
[0].
lba
 = 0;

111 
li°
[0].
num
 = 
i
;

112 
	`UNMAP
(
sd
, 0, 
li°
, 1,

113 
EXPECT_STATUS_GOOD
);

115 
	`loggög
(
LOG_VERBOSE
, "ReadÅhe status ofÅhe blockát LBA:0");

117 
	`GETLBASTATUS
(
sd
, 
NULL
, 0, 24,

118 
EXPECT_STATUS_GOOD
);

120 
	`loggög
(
LOG_VERBOSE
, "RódÅhê°©u†o‡thêblockáàLBA:%" 
PRIu64
, 
i
 + 1);

121 
	`GETLBASTATUS
(
sd
, &
t
, 
i
 + 1, 24,

122 
EXPECT_STATUS_GOOD
);

123 i‡(
t
 =
NULL
) {

124 
	`CU_FAIL
("[FAILED] GETLBASTATUSÅask is NULL");

127 
lbas
 = 
	`scsi_d©aö_unm¨shÆl
(
t
);

128 i‡(
lbas
 =
NULL
) {

129 
	`CU_FAIL
("[FAILED] GETLBASTATUS command: failed "

131 
	`scsi_‰ì_scsi_èsk
(
t
);

134 
lbasd
 = &
lbas
->
des¸ùt‹s
[0];

135 i‡(
lbasd
->
lba
 !
i
 + 
lbµb
) {

136 
	`CU_FAIL
("[FAILED] GETLBASTATUS command: "

139 
	`scsi_‰ì_scsi_èsk
(
t
);

142 i‡(
lbasd
->
¥ovisi⁄ög
 !
SCSI_PROVISIONING_TYPE_MAPPED
) {

143 
	`CU_FAIL
("[FAILED] LBA should be mapped but isn't");

146 
	`scsi_‰ì_scsi_èsk
(
t
);

148 
	}
}

	@test-tool/test_inquiry_alloc_length.c

19 
	~<°dio.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-suµ‹t.h
"

26 
	~"iscsi-ã°-cu.h
"

29 
	$ã°_öquúy_Æloc_Àngth
()

31 
ªt
, 
i
;

32 
scsi_öquúy_°™d¨d
 *
°d_öq
;

33 
scsi_èsk
 *
èsk2
 = 
NULL
;

35 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

36 
	`loggög
(
LOG_VERBOSE
, "Test ofÅhe INQUIRYállocationÜength");

38 
	`loggög
(
LOG_VERBOSE
, "Verify we canÑead standard INQUIRYÖage withállocÜength from 5-255");

39 
i
 = 5; i < 256 ; i++) {

40 i‡(
èsk
 !
NULL
) {

41 
	`scsi_‰ì_scsi_èsk
(
èsk
);

42 
èsk
 = 
NULL
;

44 
ªt
 = 
	`öquúy
(
sd
, &
èsk
, 0, 0, 
i
,

45 
EXPECT_STATUS_GOOD
);

46 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

48 
	`loggög
(
LOG_VERBOSE
, "Verify we gotátÜeast 36 bytes of data whenÑeading withállocÜength 255");

49 
	`CU_ASSERT
(
èsk
->
d©aö
.
size
 >= 36);

51 
	`loggög
(
LOG_VERBOSE
, "Verify we can unmarshallÅhe DATA-IN buffer");

52 
°d_öq
 = 
	`scsi_d©aö_unm¨shÆl
(
èsk
);

53 
	`CU_ASSERT_NOT_EQUAL
(
°d_öq
, 
NULL
);

54 i‡(
°d_öq
 =
NULL
) {

55 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo unmarshall DATA-IN "

60 
	`loggög
(
LOG_VERBOSE
, "VerifyÖeripheral-qualifier is 0");

61 
	`CU_ASSERT_EQUAL
(
°d_öq
->
quÆifõr
, 0);

70 
	`loggög
(
LOG_VERBOSE
, "If version is SPC-3 orÜater INQUIRY supports 16-bitállocationÜengths");

71 
°d_öq
->
vîsi⁄
) {

76 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] This device doesÇot claim "

78 
	`CU_PASS
("[SKIPPED] Not SPC-3 orÜater");

79 
föished
;

82 
	`scsi_‰ì_scsi_èsk
(
èsk
);

83 
èsk
 = 
NULL
;

85 
	`loggög
(
LOG_VERBOSE
, "Version is SPC-3 orÜater. Read INQUIRY data using 16-bitállocationÜength");

86 
	`loggög
(
LOG_VERBOSE
, "Read INQUIRY data withállocationÜength 511 (low order byte is 0xff)");

87 
ªt
 = 
	`öquúy
(
sd
, &
èsk
, 0, 0, 511,

88 
EXPECT_STATUS_GOOD
);

89 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

91 
	`loggög
(
LOG_VERBOSE
, "Read INQUIRY data withállocationÜength 512 (low order byte is 0x00)");

92 
ªt
 = 
	`öquúy
(
sd
, &
èsk2
, 0, 0, 512,

93 
EXPECT_STATUS_GOOD
);

94 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

96 
	`loggög
(
LOG_VERBOSE
, "INQUIRY data should beÅhe same whenállocationÜength is 511ánd 512 bytes");

97 
ªt
 = 
èsk
->
d©aö
.
size
 !
èsk2
->datain.size;

98 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

99 
ªt
 = 
	`memcmp
(
èsk
->
d©aö
.
d©a
, 
èsk2
->d©aö.d©a,Åask->d©aö.
size
);

100 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

103 
föished
:

104 i‡(
èsk
 !
NULL
) {

105 
	`scsi_‰ì_scsi_èsk
(
èsk
);

106 
èsk
 = 
NULL
;

108 i‡(
èsk2
 !
NULL
) {

109 
	`scsi_‰ì_scsi_èsk
(
èsk2
);

110 
èsk2
 = 
NULL
;

112 
	}
}

	@test-tool/test_inquiry_block_limits.c

19 
	~<°dio.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-suµ‹t.h
"

26 
	~"iscsi-ã°-cu.h
"

28 
	$check_lbp
(*
suµ‹ts_lbp
)

30 *
suµ‹ts_lbp
 = 0;

32 
CHECK_FOR_THIN_PROVISIONING
;

34 *
suµ‹ts_lbp
 = 1;

35 
	}
}

38 
	$ã°_öquúy_block_limôs
()

40 
suµ‹ts_lbp
, 
ªt
;

41 
scsi_öquúy_block_limôs
 *
bl
;

42 
scsi_èsk
 *
bl_èsk
 = 
NULL
;

43 
scsi_öquúy_logiˇl_block_¥ovisi⁄ög
 *
lbp
 = 
NULL
;

44 
scsi_èsk
 *
lbp_èsk
 = 
NULL
;

46 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

47 
	`loggög
(
LOG_VERBOSE
, "Test ofÅhe INQUIRY Block Limits");

49 
CHECK_FOR_SBC
;

51 
	`loggög
(
LOG_VERBOSE
, "Block device. VerifyÅhat we canÑead Block "

53 
ªt
 = 
	`öquúy
(
sd
, &
bl_èsk
,

54 1, 
SCSI_INQUIRY_PAGECODE_BLOCK_LIMITS
, 255,

55 
EXPECT_STATUS_GOOD
);

56 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

57 i‡(
ªt
 != 0) {

58 
	`loggög
(
LOG_NORMAL
, "[FAILURE] failedÅo send inquiry.");

59 
föished
;

62 
bl
 = 
	`scsi_d©aö_unm¨shÆl
(
bl_èsk
);

63 i‡(
bl
 =
NULL
) {

64 
	`loggög
(
LOG_NORMAL
, "[FAILURE] failedÅo unmarshall inquiry "

66 
	`CU_FAIL
("[FAILURE] failedÅo unmarshall inquiry "

68 
föished
;

71 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅhe PageLength matches up withÅhe "

73 
	`CU_ASSERT_EQUAL
(
bl_èsk
->
d©aö
.
size
, bl_èsk->d©aö.
d©a
[3] + 4);

74 i‡(
bl_èsk
->
d©aö
.
size
 !bl_èsk->d©aö.
d©a
[3] + 4) {

75 
	`loggög
(
LOG_NORMAL
, "[FAILURE] Invalid PageLengthÑeturned. "

77 
bl_èsk
->
d©aö
.
d©a
[3], bl_èsk->d©aö.
size
 - 4);

79 
	`loggög
(
LOG_VERBOSE
, "[SUCCESS] PageLength matches DataIn "

83 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅhe PageLength matches SCSI-level.");

85 i‡(
sbc3_suµ‹t
) {

86 
	`loggög
(
LOG_VERBOSE
, "Device claims SBC-3. VerifyÅhat " "page size is >= 60");

88 
	`loggög
(
LOG_VERBOSE
, "Device isÇot SBC-3. VerifyÅhat "

93 i‡(
bl_èsk
->
d©aö
.
d©a
[3] == 8) {

94 i‡(
sbc3_suµ‹t
) {

95 
	`loggög
(
LOG_NORMAL
, "[FAILURE] Invalid PageLength "

98 
	`CU_FAIL
("[FAILED] InvalidÖagelengthÑeturned. "

101 } i‡(
bl_èsk
->
d©aö
.
size
 >= 60) {

102 i‡(!
sbc3_suµ‹t
) {

103 
	`loggög
(
LOG_NORMAL
, "[WARNING] SBC-3Öagelength "

106 
	`CU_FAIL
("[WARNING] SBC-3Öagelength "

112 i‡(
bl_èsk
->
d©aö
.
d©a
[3] != 0x3c) {

113 
föished
;

116 
	`check_lbp
(&
suµ‹ts_lbp
);

117 i‡(!
suµ‹ts_lbp
)

118 
föished
;

124 
	`loggög
(
LOG_VERBOSE
, "TryÑeadingÅheÜogical blockÖrovisioning VPD");

125 
ªt
 = 
	`öquúy
(
sd
, &
lbp_èsk
,

126 1, 
SCSI_INQUIRY_PAGECODE_LOGICAL_BLOCK_PROVISIONING
, 255,

127 
EXPECT_STATUS_GOOD
);

128 i‡(
ªt
 == 0) {

129 
lbp
 = 
	`scsi_d©aö_unm¨shÆl
(
lbp_èsk
);

130 i‡(
lbp
 =
NULL
) {

131 
	`loggög
(
LOG_NORMAL
, "[FAILURE] failedÅo unmarshall "

136 i‡(
lbp
 &&Übp->
lbpu
) {

144 
	`loggög
(
LOG_VERBOSE
, "Device claims UNMAP support via LBPU");

145 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhat MAXIMUM UNMAP LBA COUNT is "

147 
	`CU_ASSERT_NOT_EQUAL
(
bl
->
max_unm≠
, 0);

149 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhat MAXIMUM UNMAP LBA COUNT is "

151 
	`CU_ASSERT_EQUAL
(
bl
->
max_unm≠
 >(1U << 
rc16
->
lbµbe
), 1);

153 i‡(
bl
->
max_unm≠
 != 0xffffffff) {

154 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhat MAXIMUM UNMAP LBA "

156 
	`CU_ASSERT_TRUE
(
bl
->
max_unm≠
 <= 1024*1024);

159 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhat MAXIMUM UNMAP BLOCK "

161 
	`CU_ASSERT_NOT_EQUAL
(
bl
->
max_unm≠_bdc
, 0);

162 i‡(
bl
->
max_unm≠_bdc
 != 0xffffffff) {

163 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhat MAXIMUM UNMAP "

165 
	`CU_ASSERT_TRUE
(
bl
->
max_unm≠_bdc
 <= 1024*1024);

168 
	`loggög
(
LOG_VERBOSE
, "Device doesÇot claim UNMAP support via "

170 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhat MAXIMUM UNMAP LBA COUNT is "

172 
	`CU_ASSERT_EQUAL
(
bl
->
max_unm≠
, 0);

174 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhat MAXIMUM UNMAP BLOCK "

176 
	`CU_ASSERT_EQUAL
(
bl
->
max_unm≠_bdc
, 0);

181 
föished
:

182 
	`scsi_‰ì_scsi_èsk
(
bl_èsk
);

183 
	`scsi_‰ì_scsi_èsk
(
lbp_èsk
);

184 
	}
}

	@test-tool/test_inquiry_evpd.c

19 
	~<°dio.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-suµ‹t.h
"

26 
	~"iscsi-ã°-cu.h
"

29 
	$ã°_öquúy_evpd
()

31 
ªt
;

33 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

34 
	`loggög
(
LOG_VERBOSE
, "Test ofÅhe INQUIRY EVPD bit");

36 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhat INQUIRY with EVPD==0ánd PC!=0 isánÉrror");

37 
ªt
 = 
	`öquúy
(
sd
, 
NULL
, 0, 1, 256,

38 
EXPECT_INVALID_FIELD_IN_CDB
);

39 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

40 
	}
}

	@test-tool/test_inquiry_mandatory_vpd_sbc.c

19 
	~<°dio.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-suµ‹t.h
"

26 
	~"iscsi-ã°-cu.h
"

29 
	$ã°_öquúy_m™d©‹y_vpd_sbc
()

31 
ªt
;

33 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

34 
	`loggög
(
LOG_VERBOSE
, "Test INQUIRY support for mandatory SBC VPD");

36 
CHECK_FOR_SBC
;

39 
	`loggög
(
LOG_VERBOSE
, "SUPPORTED_VPD_PAGES is mandatory for SBC devices. Verify we canÑead it.");

40 
ªt
 = 
	`öquúy
(
sd
, 
NULL
,

41 1, 
SCSI_INQUIRY_PAGECODE_SUPPORTED_VPD_PAGES
, 255,

42 
EXPECT_STATUS_GOOD
);

43 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

45 
	`loggög
(
LOG_VERBOSE
, "DEVICE_IDENTIFICATION is mandatory for SBC devices. Verify we canÑead it.");

46 
ªt
 = 
	`öquúy
(
sd
, 
NULL
,

47 1, 
SCSI_INQUIRY_PAGECODE_DEVICE_IDENTIFICATION
, 255,

48 
EXPECT_STATUS_GOOD
);

49 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

50 
	}
}

	@test-tool/test_inquiry_standard.c

19 
	~<°dio.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-suµ‹t.h
"

26 
	~"iscsi-ã°-cu.h
"

29 
	$ã°_öquúy_°™d¨d
()

31 
ªt
, 
i
;

32 
scsi_öquúy_°™d¨d
 *
°d_öq
;

34 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

35 
	`loggög
(
LOG_VERBOSE
, "Test ofÅhe standard INQUIRYÖage");

37 
	`loggög
(
LOG_VERBOSE
, "Verify we canÑead standard INQUIRYÖage");

39 
ªt
 = 
	`öquúy
(
sd
, &
èsk
, 0, 0, 260,

40 
EXPECT_STATUS_GOOD
);

41 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

43 
	`loggög
(
LOG_VERBOSE
, "Verify we gotátÜeast 36 bytes of data");

44 
	`CU_ASSERT
(
èsk
->
d©aö
.
size
 >= 36);

46 
	`loggög
(
LOG_VERBOSE
, "Verify we can unmarshallÅhe DATA-IN buffer");

47 
°d_öq
 = 
	`scsi_d©aö_unm¨shÆl
(
èsk
);

48 
	`CU_ASSERT_NOT_EQUAL
(
°d_öq
, 
NULL
);

49 i‡(
°d_öq
 =
NULL
) {

50 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo unmarshall DATA-IN "

55 
	`loggög
(
LOG_VERBOSE
, "VerifyÖeripheral-qualifier is 0");

56 
	`CU_ASSERT_EQUAL
(
°d_öq
->
quÆifõr
, 0);

58 
	`loggög
(
LOG_VERBOSE
, "Verify version field isÉither 0x4, 0x5 or 0x6");

59 
°d_öq
->
vîsi⁄
) {

61 
	`loggög
(
LOG_NORMAL
, "[WARNING] Standard INQUIRY data claims "

71 
	`loggög
(
LOG_NORMAL
, "[FAILED] Invalid version in standard "

73 "0x4,0x4,0x6áª vÆid.", 
°d_öq
->
vîsi⁄
);

74 
	`CU_FAIL
("Invalid version in INQUIRY data");

77 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesponse-data-format is 2 "

79 i‡(
°d_öq
->
ª•⁄£_d©a_f‹m©
 != 2) {

80 
	`loggög
(
LOG_NORMAL
, "[FAILED] Response data format is "

82 
°d_öq
->
ª•⁄£_d©a_f‹m©
);

84 
	`CU_ASSERT_EQUAL
(
°d_öq
->
ª•⁄£_d©a_f‹m©
, 2);

86 
	`loggög
(
LOG_VERBOSE
, "Verifyádditional-length is correct");

87 i‡(
°d_öq
->
addôi⁄Æ_Àngth
 > 
èsk
->
d©aö
.
size
 - 5) {

88 
	`loggög
(
LOG_NORMAL
, "[FAILED] BadádditionalÜength "

90 
èsk
->
d©aö
.
size
 - 5,

91 
°d_öq
->
addôi⁄Æ_Àngth
);

92 
	`loggög
(
LOG_NORMAL
, "[FAILED] AdditionalÜengthÖoints "

94 
	`CU_FAIL
("AdditionalÜengthÖoints beyondÉnd of data");

96 i‡(
°d_öq
->
addôi⁄Æ_Àngth
 < 
èsk
->
d©aö
.
size
 - 5) {

97 
	`loggög
(
LOG_NORMAL
, "[WARNING] BadádditionalÜength "

99 
èsk
->
d©aö
.
size
 - 5,

100 
°d_öq
->
addôi⁄Æ_Àngth
);

101 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatállÖadding data is 0");

102 
i
 = 
°d_öq
->
addôi⁄Æ_Àngth
 + 6; i < 
èsk
->
d©aö
.
size
; i++) {

103 i‡(!
èsk
->
d©aö
.
d©a
[
i
])

105 
	`loggög
(
LOG_NORMAL
, "[FAILED] Padding data isÇot zero."

107 
	`CU_FAIL
("Padding data isÇot zero. Leaking data?");

111 
	`loggög
(
LOG_VERBOSE
, "Verify VENDOR_IDENTIFICATION is in ASCII");

112 
i
 = 8; i < 16; i++) {

114 i‡(
èsk
->
d©aö
.
d©a
[
i
] == 0) {

117 i‡(
èsk
->
d©aö
.
d©a
[
i
] >= 0x20 &&Åask->datain.data[i] <= 0x7e) {

121 
	`loggög
(
LOG_NORMAL
, "[FAILED] VENDOR_IDENTIFICATION contains "

123 
	`CU_FAIL
("Invalid characters in VENDOR_IDENTIFICATION");

127 
	`loggög
(
LOG_VERBOSE
, "Verify PRODUCT_IDENTIFICATION is in ASCII");

128 
i
 = 16; i < 32; i++) {

130 i‡(
èsk
->
d©aö
.
d©a
[
i
] == 0) {

133 i‡(
èsk
->
d©aö
.
d©a
[
i
] >= 0x20 &&Åask->datain.data[i] <= 0x7e) {

137 
	`loggög
(
LOG_NORMAL
, "[FAILED] PRODUCT_IDENTIFICATION contains "

139 
	`CU_FAIL
("Invalid characters in PRODUCT_IDENTIFICATION");

143 
	`loggög
(
LOG_VERBOSE
, "Verify PRODUCT_REVISION_LEVEL is in ASCII");

144 
i
 = 32; i < 36; i++) {

146 i‡(
èsk
->
d©aö
.
d©a
[
i
] == 0) {

149 i‡(
èsk
->
d©aö
.
d©a
[
i
] >= 0x20 &&Åask->datain.data[i] <= 0x7e) {

153 
	`loggög
(
LOG_NORMAL
, "[FAILED] PRODUCT_REVISON_LEVEL contains "

155 
	`CU_FAIL
("Invalid characters in PRODUCT_REVISON_LEVEL");

159 
	`loggög
(
LOG_VERBOSE
, "Verify AERC is clear in SPC-3ándÜater");

160 i‡(
èsk
->
d©aö
.
d©a
[3] & 0x80 && 
°d_öq
->
vîsi⁄
 >= 5) {

161 
	`loggög
(
LOG_NORMAL
, "[FAILED] AERC is set butÅhis device "

163 
	`CU_FAIL
("AERC is set but SPC-3+ is claimed");

166 
	`loggög
(
LOG_VERBOSE
, "Verify TRMTSK is clear in SPC-2ándÜater");

167 i‡(
èsk
->
d©aö
.
d©a
[3] & 0x40 && 
°d_öq
->
vîsi⁄
 >= 4) {

168 
	`loggög
(
LOG_NORMAL
, "[FAILED] TRMTSK is set butÅhis device "

170 
	`CU_FAIL
("TRMTSK is set but SPC-2+ is claimed");

173 i‡(
èsk
 !
NULL
) {

174 
	`scsi_‰ì_scsi_èsk
(
èsk
);

175 
èsk
 = 
NULL
;

177 
	}
}

	@test-tool/test_inquiry_supported_vpd.c

19 
	~<°dio.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-suµ‹t.h
"

26 
	~"iscsi-ã°-cu.h
"

29 
	$ã°_öquúy_suµ‹ãd_vpd
()

31 
ªt
, 
i
;

32 
scsi_öquúy_suµ‹ãd_∑ges
 *
sup_öq
;

34 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

35 
	`loggög
(
LOG_VERBOSE
, "Test INQUIRY supported VPDÖages");

37 
	`loggög
(
LOG_VERBOSE
, "Verify we canÑeadÅhe SUPPORTED VPDÖage");

38 
ªt
 = 
	`öquúy
(
sd
, &
èsk
,

39 1, 
SCSI_INQUIRY_PAGECODE_SUPPORTED_VPD_PAGES
, 255,

40 
EXPECT_STATUS_GOOD
);

41 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

43 
	`loggög
(
LOG_VERBOSE
, "Verify we gotátÜeast 4 bytes of data");

44 
	`CU_ASSERT
(
èsk
->
d©aö
.
size
 >= 4);

46 
	`loggög
(
LOG_VERBOSE
, "Verify we can unmarshallÅhe DATA-IN buffer");

47 
sup_öq
 = 
	`scsi_d©aö_unm¨shÆl
(
èsk
);

48 
	`CU_ASSERT_NOT_EQUAL
(
sup_öq
, 
NULL
);

49 i‡(
sup_öq
 =
NULL
) {

50 
	`loggög
(
LOG_NORMAL
, "[FAILED] FailedÅo unmarshall DATA-IN "

55 
	`loggög
(
LOG_VERBOSE
, "Verify weÑeadállÅhe supportedÖages");

56 
i
 = 0; i < 
sup_öq
->
num_∑ges
; i++) {

57 
	`loggög
(
LOG_VERBOSE
, "Verify we canÑeadÖage 0x%02x",

58 
sup_öq
->
∑ges
[
i
]);

60 
ªt
 = 
	`öquúy
(
sd
, 
NULL
, 1, 
sup_öq
->
∑ges
[
i
], 255,

61 
EXPECT_STATUS_GOOD
);

62 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

65 i‡(
èsk
 !
NULL
) {

66 
	`scsi_‰ì_scsi_èsk
(
èsk
);

67 
èsk
 = 
NULL
;

69 
	}
}

	@test-tool/test_inquiry_version_descriptors.c

19 
	~<°dio.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-suµ‹t.h
"

26 
	~"iscsi-ã°-cu.h
"

29 
	$ã°_öquúy_vîsi⁄_des¸ùt‹s
()

31 
i
, 
˛aimed_ok
;

33 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

34 
	`loggög
(
LOG_VERBOSE
, "Test ofÅhe INQUIRY version descriptors");

36 
öq
->
devi˚_ty≥
) {

37 
SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_DIRECT_ACCESS
:

38 
	`loggög
(
LOG_VERBOSE
, "Device isá block device");

40 
	`loggög
(
LOG_VERBOSE
, "Verify it claim some version of SPC");

41 
˛aimed_ok
 = 0;

42 
i
 = 0; i < 8; i++) {

43 
öq
->
vîsi⁄_des¸ùt‹
[
i
]) {

44 
SCSI_VERSION_DESCRIPTOR_SPC
:

45 
SCSI_VERSION_DESCRIPTOR_SPC_ANSI_INCITS_301_1997
:

46 
SCSI_VERSION_DESCRIPTOR_SPC_T10_0995_D_R11A
:

47 
SCSI_VERSION_DESCRIPTOR_SPC_2
:

48 
SCSI_VERSION_DESCRIPTOR_SPC_2_ISO_IEC_14776_452
:

49 
SCSI_VERSION_DESCRIPTOR_SPC_2_ANSI_INCITS_351_2001
:

50 
SCSI_VERSION_DESCRIPTOR_SPC_2_T10_1236_D_R20
:

51 
SCSI_VERSION_DESCRIPTOR_SPC_2_T10_1236_D_R12
:

52 
SCSI_VERSION_DESCRIPTOR_SPC_2_T10_1236_D_R18
:

53 
SCSI_VERSION_DESCRIPTOR_SPC_2_T10_1236_D_R19
:

54 
SCSI_VERSION_DESCRIPTOR_SPC_3
:

55 
SCSI_VERSION_DESCRIPTOR_SPC_3_ISO_IEC_14776_453
:

56 
SCSI_VERSION_DESCRIPTOR_SPC_3_ANSI_INCITS_408_2005
:

57 
SCSI_VERSION_DESCRIPTOR_SPC_3_T10_1416_D_R7
:

58 
SCSI_VERSION_DESCRIPTOR_SPC_3_T10_1416_D_R21
:

59 
SCSI_VERSION_DESCRIPTOR_SPC_3_T10_1416_D_R22
:

60 
SCSI_VERSION_DESCRIPTOR_SPC_3_T10_1416_D_R23
:

61 
SCSI_VERSION_DESCRIPTOR_SPC_4
:

62 
SCSI_VERSION_DESCRIPTOR_SPC_4_T10_1731_D_R16
:

63 
SCSI_VERSION_DESCRIPTOR_SPC_4_T10_1731_D_R18
:

64 
SCSI_VERSION_DESCRIPTOR_SPC_4_T10_1731_D_R23
:

65 
˛aimed_ok
 = 1;

69 i‡(
˛aimed_ok
 == 0) {

70 
	`loggög
(
LOG_NORMAL
, "[WARNING] Block device "

73 
	`loggög
(
LOG_VERBOSE
, "[SUCCESS] Block device "

77 
	`loggög
(
LOG_VERBOSE
, "Verify it claim some version of SBC");

78 
˛aimed_ok
 = 0;

79 
i
 = 0; i < 8; i++) {

80 
öq
->
vîsi⁄_des¸ùt‹
[
i
]) {

81 
SCSI_VERSION_DESCRIPTOR_SBC
:

82 
SCSI_VERSION_DESCRIPTOR_SBC_ANSI_INCITS_306_1998
:

83 
SCSI_VERSION_DESCRIPTOR_SBC_T10_0996_D_R08C
:

84 
SCSI_VERSION_DESCRIPTOR_SBC_2
:

85 
SCSI_VERSION_DESCRIPTOR_SBC_2_ISO_IEC_14776_322
:

86 
SCSI_VERSION_DESCRIPTOR_SBC_2_ANSI_INCITS_405_2005
:

87 
SCSI_VERSION_DESCRIPTOR_SBC_2_T10_1417_D_R16
:

88 
SCSI_VERSION_DESCRIPTOR_SBC_2_T10_1417_D_R5A
:

89 
SCSI_VERSION_DESCRIPTOR_SBC_2_T10_1417_D_R15
:

90 
SCSI_VERSION_DESCRIPTOR_SBC_3
:

91 
˛aimed_ok
 = 1;

95 i‡(
˛aimed_ok
 == 0) {

96 
	`loggög
(
LOG_NORMAL
, "[WARNING] Block device "

99 
	`loggög
(
LOG_VERBOSE
, "[SUCCESS] Block device "

104 
	`loggög
(
LOG_VERBOSE
, "No version descriptorÅests for device"

105 "Åy≥ %d yë.", 
öq
->
devi˚_ty≥
);

107 
	}
}

	@test-tool/test_iscsi_cmdsn_toohigh.c

19 
	~<°dio.h
>

20 
	~<¨∑/öë.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"iscsi-¥iv©e.h
"

25 
	~"scsi-lowÀvñ.h
"

26 
	~"iscsi-ã°-cu.h
"

28 
	gch™ge_cmd¢
;

30 
	$my_iscsi_queue_pdu
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_pdu
 *
pdu
)

32 
ch™ge_cmd¢
) {

35 
	`scsi_£t_uöt32
(&
pdu
->
outd©a
.
d©a
[24], 
iscsi
->
maxcmd¢
 + 1);

39 
iscsi
->
cmd¢
 = iscsi->
expcmd¢
;

43 
ch™ge_cmd¢
 = 0;

45 
	}
}

47 
	$ã°_iscsi_cmd¢_toohigh
()

49 
ªt
;

51 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

52 
	`loggög
(
LOG_VERBOSE
, "Test sending invalid iSCSI CMDSN");

53 
	`loggög
(
LOG_VERBOSE
, "CMDSN MUST be inÅheÑange EXPCMDSNánd MAXCMDSN");

55 i‡(
sd
->
iscsi_˘x
 =
NULL
) {

56 c⁄° *
îr
 = "[SKIPPED] ThisÅest is "

58 
	`loggög
(
LOG_NORMAL
, "%s", 
îr
);

59 
	`CU_PASS
(
îr
);

63 
	`loggög
(
LOG_VERBOSE
, "RFC3720:3.2.2.1 CMDSN > MAXCMDSN must be silently ignored byÅheÅarget");

64 
	`loggög
(
LOG_VERBOSE
, "Sendá TESTUNITREADY with CMDSN == MAXCMDSN+1. Should be ignored byÅheÅarget.");

66 
sd
->
iscsi_˘x
->
u£_immedüã_d©a
 = 
ISCSI_IMMEDIATE_DATA_NO
;

67 
sd
->
iscsi_˘x
->
èrgë_max_ªcv_d©a_£gmít_Àngth
 = 
block_size
;

68 
loˇl_iscsi_queue_pdu
 = 
my_iscsi_queue_pdu
;

69 
ch™ge_cmd¢
 = 1;

73 
	`iscsi_£t_nﬂut‹ec⁄√˘
(
sd
->
iscsi_˘x
, 1);

74 
	`iscsi_£t_timeout
(
sd
->
iscsi_˘x
, 3);

76 
ªt
 = 
	`ã°unôªady
(
sd
,

77 
EXPECT_STATUS_TIMEOUT
);

78 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

79 i‡(
ªt
 == 0) {

80 
	`loggög
(
LOG_VERBOSE
, "[SUCCESS] We didÇotÑeceiveáÑeply");

82 
	`loggög
(
LOG_VERBOSE
, "[FAILURE] We gotáÑesponse fromÅheÅarget but SMDSN was outside ofÅhe window.");

86 
	`iscsi_£t_nﬂut‹ec⁄√˘
(
sd
->
iscsi_˘x
, 0);

87 
	`loggög
(
LOG_VERBOSE
, "Sendá TESTUNITREADY with CMDSN == EXPCMDSN. should workágain");

88 
	`TESTUNITREADY
(
sd
,

89 
EXPECT_STATUS_GOOD
);

90 
	}
}

	@test-tool/test_iscsi_cmdsn_toolow.c

19 
	~<°dio.h
>

20 
	~<¨∑/öë.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"iscsi-¥iv©e.h
"

25 
	~"scsi-lowÀvñ.h
"

26 
	~"iscsi-ã°-cu.h
"

28 
	gch™ge_cmd¢
;

30 
	$my_iscsi_queue_pdu
(
iscsi_c⁄ãxt
 *
iscsi
, 
iscsi_pdu
 *
pdu
)

32 
ch™ge_cmd¢
) {

35 
	`scsi_£t_uöt32
(&
pdu
->
outd©a
.
d©a
[24], 
iscsi
->
expcmd¢
 - 1);

39 
iscsi
->
cmd¢
 = iscsi->
expcmd¢
;

43 
ch™ge_cmd¢
 = 0;

45 
	}
}

47 
	$ã°_iscsi_cmd¢_toﬁow
()

49 
ªt
;

51 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

52 
	`loggög
(
LOG_VERBOSE
, "Test sending invalid iSCSI CMDSN");

53 
	`loggög
(
LOG_VERBOSE
, "CMDSN MUST be inÅheÑange EXPCMDSNánd MAXCMDSN");

55 i‡(
sd
->
iscsi_˘x
 =
NULL
) {

56 c⁄° *
îr
 = "[SKIPPED] ThisÅest is "

58 
	`loggög
(
LOG_NORMAL
, "%s", 
îr
);

59 
	`CU_PASS
(
îr
);

63 
	`loggög
(
LOG_VERBOSE
, "RFC3720:3.2.2.1 CMDSN < EXPCMDSN must be silently ignored byÅheÅarget");

64 
	`loggög
(
LOG_VERBOSE
, "Sendá TESTUNITREADY with CMDSN == EXPCMDSN-1. Should be ignored byÅheÅarget.");

66 
sd
->
iscsi_˘x
->
u£_immedüã_d©a
 = 
ISCSI_IMMEDIATE_DATA_NO
;

67 
sd
->
iscsi_˘x
->
èrgë_max_ªcv_d©a_£gmít_Àngth
 = 
block_size
;

68 
loˇl_iscsi_queue_pdu
 = 
my_iscsi_queue_pdu
;

69 
ch™ge_cmd¢
 = 1;

73 
	`iscsi_£t_nﬂut‹ec⁄√˘
(
sd
->
iscsi_˘x
, 1);

74 
	`iscsi_£t_timeout
(
sd
->
iscsi_˘x
, 3);

76 
ªt
 = 
	`ã°unôªady
(
sd
,

77 
EXPECT_STATUS_TIMEOUT
);

78 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

79 i‡(
ªt
 == 0) {

80 
	`loggög
(
LOG_VERBOSE
, "[SUCCESS] We didÇotÑeceiveáÑeply");

82 
	`loggög
(
LOG_VERBOSE
, "[FAILURE] We gotáÑesponse fromÅheÅarget but SMDSN was outside ofÅhe window.");

87 
	`iscsi_£t_nﬂut‹ec⁄√˘
(
sd
->
iscsi_˘x
, 0);

88 
	`loggög
(
LOG_VERBOSE
, "Sendá TESTUNITREADY with CMDSN == EXPCMDSN. should workágain");

89 
	`TESTUNITREADY
(
sd
,

90 
EXPECT_STATUS_GOOD
);

91 
	}
}

	@test-tool/test_iscsi_datasn_invalid.c

19 
	~<°dio.h
>

20 
	~<¨∑/öë.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"iscsi-¥iv©e.h
"

25 
	~"scsi-lowÀvñ.h
"

26 
	~"iscsi-ã°-cu.h
"

28 
	gch™ge_d©a¢
;

30 
	$my_iscsi_queue_pdu
(
iscsi_c⁄ãxt
 *
iscsi
 
_U_
, 
iscsi_pdu
 *
pdu
 _U_)

32 
uöt32_t
 
d©a¢
;

34 i‡(
pdu
->
outd©a
.
d©a
[0] !
ISCSI_PDU_DATA_OUT
) {

37 
ch™ge_d©a¢
) {

40 
	`scsi_£t_uöt32
(&
pdu
->
outd©a
.
d©a
[36], 0);

44 
	`scsi_£t_uöt32
(&
pdu
->
outd©a
.
d©a
[36], 27);

48 
	`scsi_£t_uöt32
(&
pdu
->
outd©a
.
d©a
[36], -1);

52 
d©a¢
 = 
	`scsi_gë_uöt32
(&
pdu
->
outd©a
.
d©a
[36]);

53 
	`scsi_£t_uöt32
(&
pdu
->
outd©a
.
d©a
[36], 1 - 
d©a¢
);

57 
	}
}

59 
	$ã°_iscsi_d©a¢_övÆid
()

61 
ªt
;

63 
CHECK_FOR_DATALOSS
;

65 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

66 
	`loggög
(
LOG_VERBOSE
, "Test sending invalid iSCSI DataSN");

68 i‡(
sd
->
iscsi_˘x
 =
NULL
) {

69 c⁄° *
îr
 = "[SKIPPED] ThisÅest is "

71 
	`loggög
(
LOG_NORMAL
, "%s", 
îr
);

72 
	`CU_PASS
(
îr
);

76 
	`loggög
(
LOG_VERBOSE
, "SendÅwo Data-Out PDU's with DataSN==0. Should fail.");

77 
ch™ge_d©a¢
 = 1;

79 
sd
->
iscsi_˘x
->
u£_immedüã_d©a
 = 
ISCSI_IMMEDIATE_DATA_NO
;

80 
sd
->
iscsi_˘x
->
èrgë_max_ªcv_d©a_£gmít_Àngth
 = 
block_size
;

81 
loˇl_iscsi_queue_pdu
 = 
my_iscsi_queue_pdu
;

82 
	`iscsi_£t_nﬂut‹ec⁄√˘
(
sd
->
iscsi_˘x
, 1);

83 
	`iscsi_£t_timeout
(
sd
->
iscsi_˘x
, 3);

85 
	`mem£t
(
s¸©ch
, 0xa6, 2 * 
block_size
);

87 
ªt
 = 
	`wrôe10
(
sd
, 100, 2 * 
block_size
,

88 
block_size
, 0, 0, 0, 0, 0, 
s¸©ch
,

89 
EXPECT_STATUS_GOOD
);

90 i‡(
ªt
 == -2) {

91 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITE10 isÇot implemented.");

92 
	`CU_PASS
("WRITE10 isÇot implemented.");

93 
loˇl_iscsi_queue_pdu
 = 
NULL
;

96 
	`CU_ASSERT_NOT_EQUAL
(
ªt
, 0);

98 
	`iscsi_£t_nﬂut‹ec⁄√˘
(
sd
->
iscsi_˘x
, 0);

101 
	`loggög
(
LOG_VERBOSE
, "Send Data-Out PDU with DataSN==27. Should fail");

102 
ch™ge_d©a¢
 = 2;

104 
sd
->
iscsi_˘x
->
u£_immedüã_d©a
 = 
ISCSI_IMMEDIATE_DATA_NO
;

105 
sd
->
iscsi_˘x
->
èrgë_max_ªcv_d©a_£gmít_Àngth
 = 
block_size
;

106 
loˇl_iscsi_queue_pdu
 = 
my_iscsi_queue_pdu
;

107 
	`iscsi_£t_nﬂut‹ec⁄√˘
(
sd
->
iscsi_˘x
, 1);

108 
	`iscsi_£t_timeout
(
sd
->
iscsi_˘x
, 3);

110 
ªt
 = 
	`wrôe10
(
sd
, 100, 
block_size
,

111 
block_size
, 0, 0, 0, 0, 0, 
s¸©ch
,

112 
EXPECT_STATUS_GOOD
);

113 i‡(
ªt
 == -2) {

114 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITE10 isÇot implemented.");

115 
	`CU_PASS
("WRITE10 isÇot implemented.");

116 
loˇl_iscsi_queue_pdu
 = 
NULL
;

119 
	`CU_ASSERT_NOT_EQUAL
(
ªt
, 0);

121 
	`iscsi_£t_nﬂut‹ec⁄√˘
(
sd
->
iscsi_˘x
, 0);

124 
	`loggög
(
LOG_VERBOSE
, "Send Data-Out PDU with DataSN==-1. Should fail");

125 
ch™ge_d©a¢
 = 3;

127 
sd
->
iscsi_˘x
->
u£_immedüã_d©a
 = 
ISCSI_IMMEDIATE_DATA_NO
;

128 
sd
->
iscsi_˘x
->
èrgë_max_ªcv_d©a_£gmít_Àngth
 = 
block_size
;

129 
loˇl_iscsi_queue_pdu
 = 
my_iscsi_queue_pdu
;

130 
	`iscsi_£t_nﬂut‹ec⁄√˘
(
sd
->
iscsi_˘x
, 1);

131 
	`iscsi_£t_timeout
(
sd
->
iscsi_˘x
, 3);

133 
ªt
 = 
	`wrôe10
(
sd
, 100, 
block_size
,

134 
block_size
, 0, 0, 0, 0, 0, 
s¸©ch
,

135 
EXPECT_STATUS_GOOD
);

136 i‡(
ªt
 == -2) {

137 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITE10 isÇot implemented.");

138 
	`CU_PASS
("WRITE10 isÇot implemented.");

139 
loˇl_iscsi_queue_pdu
 = 
NULL
;

142 
	`CU_ASSERT_NOT_EQUAL
(
ªt
, 0);

144 
	`iscsi_£t_nﬂut‹ec⁄√˘
(
sd
->
iscsi_˘x
, 0);

148 
	`loggög
(
LOG_VERBOSE
, "Send Data-Out PDU's inÑeverse order (DataSN == 1,0). Should fail");

149 
ch™ge_d©a¢
 = 4;

151 
sd
->
iscsi_˘x
->
u£_immedüã_d©a
 = 
ISCSI_IMMEDIATE_DATA_NO
;

152 
sd
->
iscsi_˘x
->
èrgë_max_ªcv_d©a_£gmít_Àngth
 = 
block_size
;

153 
loˇl_iscsi_queue_pdu
 = 
my_iscsi_queue_pdu
;

154 
	`iscsi_£t_nﬂut‹ec⁄√˘
(
sd
->
iscsi_˘x
, 1);

155 
	`iscsi_£t_timeout
(
sd
->
iscsi_˘x
, 3);

157 
ªt
 = 
	`wrôe10
(
sd
, 100, 2 * 
block_size
,

158 
block_size
, 0, 0, 0, 0, 0, 
s¸©ch
,

159 
EXPECT_STATUS_GOOD
);

160 i‡(
ªt
 == -2) {

161 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITE10 isÇot implemented.");

162 
	`CU_PASS
("WRITE10 isÇot implemented.");

163 
loˇl_iscsi_queue_pdu
 = 
NULL
;

166 
	`CU_ASSERT_NOT_EQUAL
(
ªt
, 0);

168 
loˇl_iscsi_queue_pdu
 = 
NULL
;

169 
	`iscsi_£t_nﬂut‹ec⁄√˘
(
sd
->
iscsi_˘x
, 0);

170 
	}
}

	@test-tool/test_mandatory_sbc.c

19 
	~<°dio.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-suµ‹t.h
"

26 
	~"iscsi-ã°-cu.h
"

29 
	$ã°_m™d©‹y_sbc
()

31 
ªt
;

35 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

36 
	`loggög
(
LOG_VERBOSE
, "Test support foráll mandatory opcodes on SBC devices");

38 
CHECK_FOR_SBC
;

40 
	`loggög
(
LOG_VERBOSE
, "Test INQUIRY.");

41 
ªt
 = 
	`öquúy
(
sd
, 
NULL
, 0, 0, 255,

42 
EXPECT_STATUS_GOOD
);

43 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

45 
	`loggög
(
LOG_VERBOSE
, "Test READCAPACITY10.");

46 
ªt
 = 
	`ªadˇ∑côy10
(
sd
, 
NULL
, 0, 0,

47 
EXPECT_STATUS_GOOD
);

48 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

50 i‡(
sbc3_suµ‹t
) {

51 
	`loggög
(
LOG_VERBOSE
, "Test READCAPACITY16. The device claims SBC-3 support.");

52 
ªt
 = 
	`ªadˇ∑côy16
(
sd
, 
NULL
, 15,

53 
EXPECT_STATUS_GOOD
);

54 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

57 
	`loggög
(
LOG_VERBOSE
, "Test READ10.");

58 
ªt
 = 
	`ªad10
(
sd
, 
NULL
, 0, 
block_size
, block_size,

59 0, 0, 0, 0, 0, 
NULL
,

60 
EXPECT_STATUS_GOOD
);

61 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

63 i‡(
sbc3_suµ‹t
) {

64 
	`loggög
(
LOG_VERBOSE
, "Test READ16.Åhe device claims SBC-3 support.");

65 
ªt
 = 
	`ªad16
(
sd
, 
NULL
, 0, 
block_size
, block_size,

66 0, 0, 0, 0, 0, 
NULL
,

67 
EXPECT_STATUS_GOOD
);

68 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

71 
	`loggög
(
LOG_VERBOSE
, "Test TESTUNITREADY.");

72 
ªt
 = 
	`ã°unôªady
(
sd
,

73 
EXPECT_STATUS_GOOD
);

74 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

75 
	}
}

	@test-tool/test_modesense6_all_pages.c

19 
	~<°dio.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-suµ‹t.h
"

26 
	~"iscsi-ã°-cu.h
"

29 
	$ã°_mode£n£6_Æl_∑ges
()

31 
scsi_mode_£n£
 *
ms
;

32 
scsi_èsk
 *
ms_èsk
 = 
NULL
;

34 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

35 
	`loggög
(
LOG_VERBOSE
, "Test of MODESENSE6 AllPages");

38 
	`loggög
(
LOG_VERBOSE
, "Send MODESENSE6 commandÅo fetch AllPages");

39 
	`MODESENSE6
(
sd
, &
ms_èsk
, 0, 
SCSI_MODESENSE_PC_CURRENT
,

40 
SCSI_MODEPAGE_RETURN_ALL_PAGES
, 0, 255,

41 
EXPECT_STATUS_GOOD
);

42 
	`loggög
(
LOG_VERBOSE
, "[SUCCESS] All Pages fetched.");

44 
	`loggög
(
LOG_VERBOSE
, "TryÅo unmarshallÅhe DATA-IN buffer.");

45 
ms
 = 
	`scsi_d©aö_unm¨shÆl
(
ms_èsk
);

46 i‡(
ms
 =
NULL
) {

47 
	`loggög
(
LOG_VERBOSE
, "[FAILED] failedÅo unmarshall mode sense "

49 
	`CU_FAIL
("[FAILED] FailedÅo unmarshallÅhe data-in buffer.");

50 
	`scsi_‰ì_scsi_èsk
(
ms_èsk
);

53 
	`loggög
(
LOG_VERBOSE
, "[SUCCESS] Unmarshalling successful.");

56 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhat mode dataÜength is >= 3");

57 i‡(
ms
->
mode_d©a_Àngth
 >= 3) {

58 
	`loggög
(
LOG_VERBOSE
, "[SUCCESS] Mode dataÜength is >= 3");

60 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Mode dataÜength is < 3");

62 
	`CU_ASSERT_TRUE
(
ms
->
mode_d©a_Àngth
 >= 3);

65 
	`scsi_‰ì_scsi_èsk
(
ms_èsk
);

66 
	}
}

	@test-tool/test_modesense6_control.c

19 
	~<°dio.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-suµ‹t.h
"

26 
	~"iscsi-ã°-cu.h
"

29 
	$ã°_mode£n£6_c⁄åﬁ
()

31 
scsi_mode_£n£
 *
ms
;

32 
scsi_mode_∑ge
 *
≠_∑ge
;

33 
scsi_mode_∑ge
 *
˘_∑ge
;

34 
scsi_èsk
 *
≠_èsk
 = 
NULL
;

35 
scsi_èsk
 *
˘_èsk
 = 
NULL
;

37 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

38 
	`loggög
(
LOG_VERBOSE
, "Test of MODESENSE6 CONTROLÖage");

40 
	`loggög
(
LOG_VERBOSE
, "FetchÅhe CONTROLÖage via AllPages");

41 
	`loggög
(
LOG_VERBOSE
, "Send MODESENSE6 commandÅo fetch AllPages");

42 
	`MODESENSE6
(
sd
, &
≠_èsk
, 0, 
SCSI_MODESENSE_PC_CURRENT
,

43 
SCSI_MODEPAGE_RETURN_ALL_PAGES
, 0, 255,

44 
EXPECT_STATUS_GOOD
);

46 
	`loggög
(
LOG_VERBOSE
, "[SUCCESS] All Pages fetched.");

49 
	`loggög
(
LOG_VERBOSE
, "TryÅo unmarshallÅhe DATA-IN buffer.");

50 
ms
 = 
	`scsi_d©aö_unm¨shÆl
(
≠_èsk
);

51 i‡(
ms
 =
NULL
) {

52 
	`loggög
(
LOG_NORMAL
, "[FAILED] failedÅo unmarshall mode sense "

54 
	`CU_FAIL
("[FAILED] FailedÅo unmarshallÅhe data-in buffer.");

55 
föished
;

57 
	`loggög
(
LOG_VERBOSE
, "[SUCCESS] Unmarshalling successful.");

60 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhat mode dataÜength is >= 3");

61 i‡(
ms
->
mode_d©a_Àngth
 >= 3) {

62 
	`loggög
(
LOG_VERBOSE
, "[SUCCESS] Mode dataÜength is >= 3");

64 
	`loggög
(
LOG_NORMAL
, "[FAILED] Mode dataÜength is < 3");

66 
	`CU_ASSERT_TRUE
(
ms
->
mode_d©a_Àngth
 >= 3);

68 
≠_∑ge
 = 
ms
->
∑ges
;áp_∑ge;áp_∑gê≠_∑ge->
√xt
) {

69 i‡(
≠_∑ge
->
∑ge_code
 =
SCSI_MODEPAGE_CONTROL
 &&

70 
≠_∑ge
->
•f
 == 0) {

74 if(
≠_∑ge
 =
NULL
) {

75 
	`loggög
(
LOG_NORMAL
, "[WARNING] CONTROLÖage wasÇotÑeturned "

81 
	`loggög
(
LOG_VERBOSE
, "FetchÅhe CONTROLÖage directly");

82 
	`loggög
(
LOG_VERBOSE
, "Send MODESENSE6 commandÅo fetch CONTROL");

83 
	`MODESENSE6
(
sd
, &
˘_èsk
, 0, 
SCSI_MODESENSE_PC_CURRENT
,

84 
SCSI_MODEPAGE_CONTROL
, 0, 255,

85 
EXPECT_STATUS_GOOD
);

86 
	`loggög
(
LOG_VERBOSE
, "[SUCCESS] CONTROLÖage fetched.");

88 
	`loggög
(
LOG_VERBOSE
, "TryÅo unmarshallÅhe DATA-IN buffer.");

89 
ms
 = 
	`scsi_d©aö_unm¨shÆl
(
˘_èsk
);

90 i‡(
ms
 =
NULL
) {

91 
	`loggög
(
LOG_NORMAL
, "[FAILED] failedÅo unmarshall mode sense "

93 
	`CU_FAIL
("[FAILED] FailedÅo unmarshallÅhe data-in buffer.");

94 
föished
;

96 
	`loggög
(
LOG_VERBOSE
, "[SUCCESS] Unmarshalling successful.");

98 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhat mode dataÜength is >= 3");

99 i‡(
ms
->
mode_d©a_Àngth
 >= 3) {

100 
	`loggög
(
LOG_VERBOSE
, "[SUCCESS] Mode dataÜength is >= 3");

102 
	`loggög
(
LOG_NORMAL
, "[FAILED] Mode dataÜength is < 3");

104 
	`CU_ASSERT_TRUE
(
ms
->
mode_d©a_Àngth
 >= 3);

106 
˘_∑ge
 = 
ms
->
∑ges
; ct_∑ge; ct_∑gê˘_∑ge->
√xt
) {

107 i‡(
˘_∑ge
->
∑ge_code
 =
SCSI_MODEPAGE_CONTROL
) {

111 if(
˘_∑ge
 =
NULL
) {

112 
	`loggög
(
LOG_NORMAL
, "[WARNING] CONTROLÖage wasÇotÑeturned."

116 i‡(
≠_∑ge
 =
NULL
 && 
˘_∑ge
 != NULL) {

117 
	`loggög
(
LOG_NORMAL
, "[FAILED] CONTROLÖage wasÇotÑeturned "

119 
	`CU_FAIL
("[FAILED] CONTROLÖage is missing from AllPages");

120 
föished
;

123 i‡(
≠_∑ge
 !
NULL
 && 
˘_∑ge
 == NULL) {

124 
	`loggög
(
LOG_NORMAL
, "[FAILED] CONTROLÖage is onlyávailable "

126 
	`CU_FAIL
("[FAILED] CONTROLÖage is missing");

127 
föished
;

130 i‡(
˘_∑ge
 =
NULL
) {

131 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] CONTROLÖage isÇot "

133 
	`CU_PASS
("CONTROLÖage isÇot implemented.");

134 
föished
;

137 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅheÅwoÖagesáre identical.");

139 
	`loggög
(
LOG_VERBOSE
, "Check TST field");

140 
	`CU_ASSERT_EQUAL
(
˘_∑ge
->
c⁄åﬁ
.
t°
, 
≠_∑ge
->control.tst);

141 
	`loggög
(
LOG_VERBOSE
, "Check TMF_ONLY field");

142 
	`CU_ASSERT_EQUAL
(
˘_∑ge
->
c⁄åﬁ
.
tmf_⁄ly
, 
≠_∑ge
->control.tmf_only);

143 
	`loggög
(
LOG_VERBOSE
, "Check dpicz field");

144 
	`CU_ASSERT_EQUAL
(
˘_∑ge
->
c⁄åﬁ
.
dpicz
, 
≠_∑ge
->control.dpicz);

145 
	`loggög
(
LOG_VERBOSE
, "Check d_sense field");

146 
	`CU_ASSERT_EQUAL
(
˘_∑ge
->
c⁄åﬁ
.
d_£n£
, 
≠_∑ge
->control.d_sense);

147 
	`loggög
(
LOG_VERBOSE
, "Check gltsd field");

148 
	`CU_ASSERT_EQUAL
(
˘_∑ge
->
c⁄åﬁ
.
g…sd
, 
≠_∑ge
->control.gltsd);

149 
	`loggög
(
LOG_VERBOSE
, "CheckÑlec field");

150 
	`CU_ASSERT_EQUAL
(
˘_∑ge
->
c⁄åﬁ
.
æec
, 
≠_∑ge
->control.rlec);

151 
	`loggög
(
LOG_VERBOSE
, "Check queue_algorithm_modifier field");

152 
	`CU_ASSERT_EQUAL
(
˘_∑ge
->
c⁄åﬁ
.
queue_Æg‹ôhm_modifõr
,

153 
≠_∑ge
->
c⁄åﬁ
.
queue_Æg‹ôhm_modifõr
);

154 
	`loggög
(
LOG_VERBOSE
, "CheckÇuar field");

155 
	`CU_ASSERT_EQUAL
(
˘_∑ge
->
c⁄åﬁ
.
nu¨
, 
≠_∑ge
->control.nuar);

156 
	`loggög
(
LOG_VERBOSE
, "Check qerr field");

157 
	`CU_ASSERT_EQUAL
(
˘_∑ge
->
c⁄åﬁ
.
qîr
, 
≠_∑ge
->control.qerr);

158 
	`loggög
(
LOG_VERBOSE
, "Check vs field");

159 
	`CU_ASSERT_EQUAL
(
˘_∑ge
->
c⁄åﬁ
.
vs
, 
≠_∑ge
->control.vs);

160 
	`loggög
(
LOG_VERBOSE
, "CheckÑac field");

161 
	`CU_ASSERT_EQUAL
(
˘_∑ge
->
c⁄åﬁ
.
øc
, 
≠_∑ge
->control.rac);

162 
	`loggög
(
LOG_VERBOSE
, "Check ua_intlck_ctrl field");

163 
	`CU_ASSERT_EQUAL
(
˘_∑ge
->
c⁄åﬁ
.
ua_öéck_˘æ
,

164 
≠_∑ge
->
c⁄åﬁ
.
ua_öéck_˘æ
);

165 
	`loggög
(
LOG_VERBOSE
, "Check swp field");

166 
	`CU_ASSERT_EQUAL
(
˘_∑ge
->
c⁄åﬁ
.
swp
, 
≠_∑ge
->control.swp);

167 
	`loggög
(
LOG_VERBOSE
, "Checkáto field");

168 
	`CU_ASSERT_EQUAL
(
˘_∑ge
->
c⁄åﬁ
.
©o
, 
≠_∑ge
->control.ato);

169 
	`loggög
(
LOG_VERBOSE
, "CheckÅas field");

170 
	`CU_ASSERT_EQUAL
(
˘_∑ge
->
c⁄åﬁ
.
ès
, 
≠_∑ge
->control.tas);

171 
	`loggög
(
LOG_VERBOSE
, "Checkátmpe field");

172 
	`CU_ASSERT_EQUAL
(
˘_∑ge
->
c⁄åﬁ
.
©m≥
, 
≠_∑ge
->control.atmpe);

173 
	`loggög
(
LOG_VERBOSE
, "CheckÑwwp field");

174 
	`CU_ASSERT_EQUAL
(
˘_∑ge
->
c⁄åﬁ
.
rwwp
, 
≠_∑ge
->control.rwwp);

175 
	`loggög
(
LOG_VERBOSE
, "Checkáutoload_mode field");

176 
	`CU_ASSERT_EQUAL
(
˘_∑ge
->
c⁄åﬁ
.
autﬁﬂd_mode
,

177 
≠_∑ge
->
c⁄åﬁ
.
autﬁﬂd_mode
);

178 
	`loggög
(
LOG_VERBOSE
, "Check busy_timeout_period field");

179 
	`CU_ASSERT_EQUAL
(
˘_∑ge
->
c⁄åﬁ
.
busy_timeout_≥riod
,

180 
≠_∑ge
->
c⁄åﬁ
.
busy_timeout_≥riod
);

181 
	`loggög
(
LOG_VERBOSE
, "CheckÉxtended_selftest_completion_time field");

182 
	`CU_ASSERT_EQUAL
(
˘_∑ge
->
c⁄åﬁ
.
exãnded_£l·e°_com∂ëi⁄_time
,

183 
≠_∑ge
->
c⁄åﬁ
.
exãnded_£l·e°_com∂ëi⁄_time
);

186 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅhe valuesáre sane.");

187 
	`loggög
(
LOG_VERBOSE
, "CheckÅhat TST is 0 or 1.");

188 i‡(
˘_∑ge
->
c⁄åﬁ
.
t°
 > 1) {

189 
	`loggög
(
LOG_NORMAL
, "[FAILED] TST value is invalid. Must be "

190 "0, 1 buàwa†%d", 
˘_∑ge
->
c⁄åﬁ
.
t°
);

191 
	`CU_FAIL
("[FAILED] TST is invalid.");

193 
	`loggög
(
LOG_VERBOSE
, "CheckÅhat QUEUE_ALGORITHM_MODIFIER is "

195 i‡(
˘_∑ge
->
c⁄åﬁ
.
queue_Æg‹ôhm_modifõr
 > 1 &&

196 
˘_∑ge
->
c⁄åﬁ
.
queue_Æg‹ôhm_modifõr
 < 8) {

197 
	`loggög
(
LOG_NORMAL
, "[FAILED] QUEUE_ALGORITHM_MODIFIER value "

199 
˘_∑ge
->
c⁄åﬁ
.
queue_Æg‹ôhm_modifõr
);

200 
	`CU_FAIL
("[FAILED] QUEUE_ALGORITHM_MODIFIER is invalid.");

203 
	`loggög
(
LOG_VERBOSE
, "CheckÅhat QERR isÇot 2");

204 i‡(
˘_∑ge
->
c⁄åﬁ
.
qîr
 == 2) {

205 
	`loggög
(
LOG_NORMAL
, "[FAILED] QERR value "

207 
	`CU_FAIL
("[FAILED] QERR is invalid.");

210 
	`loggög
(
LOG_VERBOSE
, "CheckÅhat UA_INTLCK_CTRL isÇot 1");

211 i‡(
˘_∑ge
->
c⁄åﬁ
.
ua_öéck_˘æ
 == 1) {

212 
	`loggög
(
LOG_NORMAL
, "[FAILED] UA_INTLCK_CTRL value "

214 
	`CU_FAIL
("[FAILED] UA_INTLCK_CTRL is invalid.");

217 
	`loggög
(
LOG_VERBOSE
, "CheckÅhat AUTOLOAD is 0, 1 or 2");

218 i‡(
˘_∑ge
->
c⁄åﬁ
.
autﬁﬂd_mode
 > 2) {

219 
	`loggög
(
LOG_NORMAL
, "[FAILED] AUTOLOAD value "

221 
˘_∑ge
->
c⁄åﬁ
.
autﬁﬂd_mode
);

222 
	`CU_FAIL
("[FAILED] AUTOLOAD is invalid.");

225 
	`loggög
(
LOG_VERBOSE
, "CheckÅhat BUSY_TIMEOUT_PERIOD is specified");

226 i‡(
˘_∑ge
->
c⁄åﬁ
.
busy_timeout_≥riod
 == 0) {

227 
	`loggög
(
LOG_NORMAL
, "[WARNING] BUSY_TIMEOUT_PERIOD is "

233 
föished
:

234 i‡(
≠_èsk
 !
NULL
) {

235 
	`scsi_‰ì_scsi_èsk
(
≠_èsk
);

237 i‡(
˘_èsk
 !
NULL
) {

238 
	`scsi_‰ì_scsi_èsk
(
˘_èsk
);

240 
	}
}

	@test-tool/test_modesense6_control_d_sense.c

19 
	~<°dio.h
>

20 
	~<°dlib.h
>

22 
	~<CUnô/CUnô.h
>

24 
	~"iscsi.h
"

25 
	~"scsi-lowÀvñ.h
"

26 
	~"iscsi-suµ‹t.h
"

27 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_mode£n£6_c⁄åﬁ_d_£n£
()

32 
scsi_èsk
 *
ms_èsk
 = 
NULL
;

33 
scsi_èsk
 *
r16_èsk
 = 
NULL
;

34 
scsi_mode_£n£
 *
ms
;

35 
scsi_mode_∑ge
 *
∑ge
;

36 
ªt
;

38 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

39 
	`loggög
(
LOG_VERBOSE
, "Test of MODESENSE6 CONTROL D_SENSE flag");

41 
	`loggög
(
LOG_VERBOSE
, "ReadÅhe CONTROLÖage fromÅhe device");

42 
ªt
 = 
	`mode£n£6
(
sd
, &
ms_èsk
, 0, 
SCSI_MODESENSE_PC_CURRENT
,

43 
SCSI_MODEPAGE_CONTROL
, 0, 255,

44 
EXPECT_STATUS_GOOD
);

45 i‡(
ªt
 != 0) {

46 
	`loggög
(
LOG_NORMAL
,"[WARNING] CouldÇotÑead "

48 
föished
;

50 
	`loggög
(
LOG_VERBOSE
, "[SUCCESS] CONTROLÖage fetched.");

52 
	`loggög
(
LOG_VERBOSE
, "TryÅo unmarshallÅhe DATA-IN buffer.");

53 
ms
 = 
	`scsi_d©aö_unm¨shÆl
(
ms_èsk
);

54 i‡(
ms
 =
NULL
) {

55 
	`loggög
(
LOG_NORMAL
, "[FAILED] failedÅo unmarshall mode sense "

57 
	`CU_FAIL
("[FAILED] FailedÅo unmarshallÅhe data-in buffer.");

58 
föished
;

60 
	`loggög
(
LOG_VERBOSE
, "[SUCCESS] Unmarshalling successful.");

61 
∑ge
 = 
ms
->
∑ges
;Öage;Öagê∑ge->
√xt
) {

62 i‡(
∑ge
->
∑ge_code
 =
SCSI_MODEPAGE_CONTROL
) {

66 if(
∑ge
 =
NULL
) {

67 
	`loggög
(
LOG_NORMAL
, "[WARNING] CONTROLÖage wasÇotÑeturned."

69 
	`CU_PASS
("[SKIPPED] CONTROLÖageÇotÑeported");

70 
föished
;

72 
	`loggög
(
LOG_VERBOSE
, "Sendá READ16Åhat will fail so we can check "

74 
	`READ16
(
sd
, &
r16_èsk
, 0xffffffffffffffffLL, 
block_size
, block_size, 0,

75 0, 0, 0, 0, 
NULL
,

76 
EXPECT_LBA_OOB
);

78 i‡(
∑ge
->
c⁄åﬁ
.
d_£n£
) {

79 
	`loggög
(
LOG_VERBOSE
, "D_SENSE is set, verifyÅhat sense format "

82 
	`loggög
(
LOG_VERBOSE
, "D_SENSE is clear, verifyÅhat sense format "

85 
r16_èsk
->
£n£
.
îr‹_ty≥
) {

86 
SCSI_SENSE_DESCRIPTOR_CURRENT
:

87 
SCSI_SENSE_DESCRIPTOR_DEFERRED_ERRORS
:

88 i‡(!
∑ge
->
c⁄åﬁ
.
d_£n£
) {

89 
	`loggög
(
LOG_NORMAL
, "[FAILED] D_SENSE is set but "

91 
	`CU_FAIL
("[FAILED] WrongÅype of sense formatÑeturned");

92 
föished
;

95 
SCSI_SENSE_FIXED_CURRENT
:

96 
SCSI_SENSE_FIXED_DEFERRED_ERRORS
:

97 i‡(
∑ge
->
c⁄åﬁ
.
d_£n£
) {

98 
	`loggög
(
LOG_NORMAL
, "[FAILED] D_SENSE is cleat but "

100 
	`CU_FAIL
("[FAILED] WrongÅype of sense formatÑeturned");

101 
föished
;

107 
föished
:

108 i‡(
ms_èsk
 !
NULL
) {

109 
	`scsi_‰ì_scsi_èsk
(
ms_èsk
);

111 i‡(
r16_èsk
 !
NULL
) {

112 
	`scsi_‰ì_scsi_èsk
(
r16_èsk
);

114 
	}
}

	@test-tool/test_modesense6_control_swp.c

19 
	~<°dio.h
>

20 
	~<°dlib.h
>

22 
	~<CUnô/CUnô.h
>

24 
	~"iscsi.h
"

25 
	~"scsi-lowÀvñ.h
"

26 
	~"iscsi-suµ‹t.h
"

27 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_mode£n£6_c⁄åﬁ_swp
()

32 
scsi_èsk
 *
ms_èsk
 = 
NULL
;

33 
scsi_mode_£n£
 *
ms
;

34 
scsi_mode_∑ge
 *
∑ge
;

35 
ªt
;

37 
CHECK_FOR_DATALOSS
;

38 
CHECK_FOR_SBC
;

40 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

41 
	`loggög
(
LOG_VERBOSE
, "Test of MODESENSE6 CONTROL SWP flag");

43 
	`loggög
(
LOG_VERBOSE
, "Set SWPÅoÉnable writeÖrotect");

44 
ªt
 = 
	`£t_swp
(
sd
);

45 i‡(
ªt
 == -2) {

46 
	`CU_PASS
("[SKIPPED] Target doesÇot support changing SWP");

49 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

50 i‡(
ªt
) {

51 
föished
;

54 
	`loggög
(
LOG_VERBOSE
, "ReadÅhe CONTROLÖage back fromÅhe device");

55 
	`MODESENSE6
(
sd
, &
ms_èsk
, 0, 
SCSI_MODESENSE_PC_CURRENT
,

56 
SCSI_MODEPAGE_CONTROL
, 0, 255,

57 
EXPECT_STATUS_GOOD
);

58 
	`loggög
(
LOG_VERBOSE
, "[SUCCESS] CONTROLÖage fetched.");

60 
	`loggög
(
LOG_VERBOSE
, "TryÅo unmarshallÅhe DATA-IN buffer.");

61 
ms
 = 
	`scsi_d©aö_unm¨shÆl
(
ms_èsk
);

62 i‡(
ms
 =
NULL
) {

63 
	`loggög
(
LOG_NORMAL
, "[FAILED] failedÅo unmarshall mode sense "

65 
	`CU_FAIL
("[FAILED] FailedÅo unmarshallÅhe data-in buffer.");

66 
föished
;

68 
	`loggög
(
LOG_VERBOSE
, "[SUCCESS] Unmarshalling successful.");

69 
∑ge
 = 
ms
->
∑ges
;Öage;Öagê∑ge->
√xt
) {

70 i‡(
∑ge
->
∑ge_code
 =
SCSI_MODEPAGE_CONTROL
) {

74 if(
∑ge
 =
NULL
) {

75 
	`loggög
(
LOG_NORMAL
, "[WARNING] CONTROLÖage wasÇotÑeturned."

79 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅhe SWP bit is set");

80 i‡(
∑ge
->
c⁄åﬁ
.
swp
 == 0) {

81 
	`loggög
(
LOG_NORMAL
, "[FAILED] SWP bit isÇot set");

82 
	`CU_FAIL
("[FAILED] SWP isÇot set");

83 
föished
;

85 
	`loggög
(
LOG_VERBOSE
, "[SUCCESS] SWP was set successfully");

88 
	`loggög
(
LOG_VERBOSE
, "Readá block fromÅheÇow Read-Only device");

89 
	`READ10
(
sd
, 
NULL
, 0, 
block_size
, block_size, 0, 0, 0, 0, 0, 
s¸©ch
,

90 
EXPECT_STATUS_GOOD
);

92 
	`loggög
(
LOG_VERBOSE
, "TryÅo writeá blockÅoÅhe Read-Only device");

93 
	`WRITE10
(
sd
, 0, 
block_size
, block_size, 0, 0, 0, 0, 0, 
s¸©ch
,

94 
EXPECT_WRITE_PROTECTED
);

96 
föished
:

97 i‡(
ms_èsk
 !
NULL
) {

98 
	`scsi_‰ì_scsi_èsk
(
ms_èsk
);

100 
	`loggög
(
LOG_VERBOSE
, "Clear SWPÅo disable writeÖrotect");

101 
	`˛ór_swp
(
sd
);

102 
	}
}

	@test-tool/test_modesense6_residuals.c

19 
	~<°dio.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-suµ‹t.h
"

26 
	~"iscsi-ã°-cu.h
"

29 
	$ã°_mode£n£6_ªsiduÆs
()

31 
scsi_èsk
 *
ms_èsk
 = 
NULL
;

33 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

34 
	`loggög
(
LOG_VERBOSE
, "Test of MODESENSE6 Residuals");

36 
	`loggög
(
LOG_VERBOSE
, "MODESENSE6 command shouldÇotÑesult inány "

40 
	`loggög
(
LOG_VERBOSE
, "Tryá MODESENSE6 command with 4 bytes of "

42 
	`MODESENSE6
(
sd
, &
ms_èsk
, 0, 
SCSI_MODESENSE_PC_CURRENT
,

43 
SCSI_MODEPAGE_RETURN_ALL_PAGES
, 0, 4,

44 
EXPECT_STATUS_GOOD
);

46 
	`loggög
(
LOG_VERBOSE
, "[SUCCESS] All Pages fetched.");

48 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhat we gotát most 4 bytes of DATA-IN");

49 i‡(
ms_èsk
->
d©aö
.
size
 > 4) {

50 
	`loggög
(
LOG_NORMAL
, "[FAILED] got moreÅhan 4 bytes of "

53 
	`loggög
(
LOG_VERBOSE
, "[SUCCESS] <= 4 bytes of DATA-IN "

56 
	`CU_ASSERT_TRUE
(
ms_èsk
->
d©aö
.
size
 <= 4);

59 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesidual overflow flagÇot set");

60 i‡(
ms_èsk
->
ªsiduÆ_°©us
 =
SCSI_RESIDUAL_OVERFLOW
) {

61 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target setÑesidual "

64 
	`CU_ASSERT_NOT_EQUAL
(
ms_èsk
->
ªsiduÆ_°©us
, 
SCSI_RESIDUAL_OVERFLOW
);

68 
	`loggög
(
LOG_VERBOSE
, "Tryá MODESENSE6 command with 255 bytes of "

70 
	`scsi_‰ì_scsi_èsk
(
ms_èsk
);

71 
	`MODESENSE6
(
sd
, &
ms_èsk
, 0, 
SCSI_MODESENSE_PC_CURRENT
,

72 
SCSI_MODEPAGE_RETURN_ALL_PAGES
, 0, 255,

73 
EXPECT_STATUS_GOOD
);

74 
	`loggög
(
LOG_VERBOSE
, "[SUCCESS] All Pages fetched.");

76 i‡(
ms_èsk
->
d©aö
.
size
 == 255) {

77 
	`loggög
(
LOG_VERBOSE
, "We gotáll 255 bytes of data back "

80 i‡(
ms_èsk
->
ªsiduÆ_°©us
 =
SCSI_RESIDUAL_UNDERFLOW
) {

81 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target setÑesidual "

84 
	`loggög
(
LOG_VERBOSE
, "[SUCCESS] Residual underflow "

87 
	`CU_ASSERT_NOT_EQUAL
(
ms_èsk
->
ªsiduÆ_°©us
,

88 
SCSI_RESIDUAL_UNDERFLOW
);

90 
	`loggög
(
LOG_VERBOSE
, "We gotÜessÅhanÅheÑequested 255 bytes "

93 i‡(
ms_èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_UNDERFLOW
) {

94 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot set "

97 
	`loggög
(
LOG_VERBOSE
, "[SUCCESS] Residual underflow "

100 
	`CU_ASSERT_EQUAL
(
ms_èsk
->
ªsiduÆ_°©us
,

101 
SCSI_RESIDUAL_UNDERFLOW
);

104 
	`scsi_‰ì_scsi_èsk
(
ms_èsk
);

105 
	}
}

	@test-tool/test_multipathio_async_caw.c

18 
	~<°dio.h
>

19 
	~<sig«l.h
>

20 
	~<pﬁl.h
>

22 
	~<CUnô/CUnô.h
>

24 
	~"iscsi.h
"

25 
	~"scsi-lowÀvñ.h
"

26 
	~"iscsi-suµ‹t.h
"

27 
	~"iscsi-ã°-cu.h
"

28 
	~"iscsi-mu…ù©h.h
"

30 
	sã°_mpio_async_ˇw_°©e
 {

31 
uöt32_t
 
	mdi•©ched
;

32 
uöt32_t
 
	mcom∂ëed
;

33 
uöt32_t
 
	mmism©ches
;

37 
ã°_mpio_async_ˇw_cb
(
iscsi_c⁄ãxt
 *
iscsi
 
__©åibuã__
((
unu£d
)),

38 
°©us
, *
comm™d_d©a
, *
¥iv©e_d©a
)

40 
scsi_èsk
 *
	g©ask
 = 
comm™d_d©a
;

41 
ã°_mpio_async_ˇw_°©e
 *
	g°©e
 = 
¥iv©e_d©a
;

43 
	g°©e
->
	gcom∂ëed
++;

44 i‡(
	g°©us
 =
SCSI_STATUS_CHECK_CONDITION
) {

45 
CU_ASSERT_EQUAL
(
©ask
->
£n£
.
key
, 
SCSI_SENSE_MISCOMPARE
);

46 
CU_ASSERT_EQUAL
(
©ask
->
£n£
.
ascq
,

47 
SCSI_SENSE_ASCQ_MISCOMPARE_DURING_VERIFY
);

48 
	g°©e
->
	gmism©ches
++;

49 
loggög
(
LOG_VERBOSE
, "COMPARE_AND_WRITE mismatch: %d of %d "

51 
°©e
->
com∂ëed
, sèã->
di•©ched
, 
©ask
->
cmd¢
);

54 
loggög
(
LOG_VERBOSE
, "COMPARE_AND_WRITE success: %d of %d "

56 
°©e
->
com∂ëed
, sèã->
di•©ched
, 
©ask
->
cmd¢
);

59 
scsi_‰ì_scsi_èsk
(
©ask
);

63 
	$ã°_mpio_async_ˇw_öô_bufs
(*
cmp_buf
, *
wr_buf
,

64 
blocksize
, 
num_mp_sds
)

66 
sd_i
;

85 
sd_i
 = 0; sd_ò< 
num_mp_sds
; sd_i++) {

86 
wr_vÆ
;

87 
cmp_vÆ
 = 
sd_i
;

89 i‡(
sd_i
 =
num_mp_sds
 - 1) {

90 
wr_vÆ
 = 0;

92 
wr_vÆ
 = 
sd_i
 + 1;

95 
	`mem£t
(&
cmp_buf
[
sd_i
 * 
blocksize
], 
cmp_vÆ
, blocksize);

96 
	`mem£t
(&
wr_buf
[
sd_i
 * 
blocksize
], 
wr_vÆ
, blocksize);

98 
	}
}

101 
	$ã°_mpio_async_ˇw
()

103 
i
, 
ªt
;

104 
sd_i
;

105 
ã°_mpio_async_ˇw_°©e
 
°©e
 = { 0, 0, 0 };

106 
blocksize
 = 512;

107 
num_ios
 = 1000;

108 
uöt32_t
 
lba
 = 0;

109 
cmp_buf
[
blocksize
 * 
mp_num_sds
];

110 
wr_buf
[
blocksize
 * 
mp_num_sds
];

112 
CHECK_FOR_DATALOSS
;

113 
CHECK_FOR_SBC
;

114 
	`MPATH_SKIP_IF_UNAVAILABLE
(
mp_sds
, 
mp_num_sds
);

115 
	`MPATH_SKIP_UNLESS_ISCSI
(
mp_sds
, 
mp_num_sds
);

118 
	`mem£t
(
wr_buf
, 0, 
block_size
);

119 
	`WRITESAME10
(
mp_sds
[0], 0, 
block_size
, 1, 0, 0, 0, 0, 
wr_buf
,

120 
EXPECT_STATUS_GOOD
);

122 
	`ã°_mpio_async_ˇw_öô_bufs
(
cmp_buf
, 
wr_buf
, 
blocksize
, 
mp_num_sds
);

124 
i
 = 0; i < 
num_ios
; i++) {

126 
sd_i
 = 0; sd_ò< 
mp_num_sds
; sd_i++) {

127 
scsi_èsk
 *
©ask
;

128 
buf_off
 = 
sd_i
 * 
blocksize
;

130 
©ask
 = 
	`scsi_cdb_com∑ª™dwrôe
(
lba
, 
blocksize
 * 2,

131 
blocksize
,

133 
	`CU_ASSERT_PTR_NOT_NULL_FATAL
(
©ask
);

136 
ªt
 = 
	`scsi_èsk_add_d©a_out_buf„r
(
©ask
,

137 
blocksize
,

138 &
cmp_buf
[
buf_off
]);

139 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

141 
ªt
 = 
	`scsi_èsk_add_d©a_out_buf„r
(
©ask
,

142 
blocksize
,

143 &
wr_buf
[
buf_off
]);

144 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

146 
ªt
 = 
	`iscsi_scsi_comm™d_async
(
mp_sds
[
sd_i
]->
iscsi_˘x
,

147 
mp_sds
[
sd_i
]->
iscsi_lun
,

148 
©ask
,

149 
ã°_mpio_async_ˇw_cb
,

150 
NULL
, &
°©e
);

151 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

153 
°©e
.
di•©ched
++;

154 
	`loggög
(
LOG_VERBOSE
, "COMPARE_AND_WRITE dispatched: "

156 
°©e
.
di•©ched
, 
num_ios
, 
©ask
->
cmd¢
);

160 
°©e
.
com∂ëed
 < sèã.
di•©ched
) {

161 
pﬁlfd
 
pfd
[
mp_num_sds
];

163 
sd_i
 = 0; sd_ò< 
mp_num_sds
; sd_i++) {

164 
pfd
[
sd_i
].
fd
 = 
	`iscsi_gë_fd
(
mp_sds
[sd_i]->
iscsi_˘x
);

165 
pfd
[
sd_i
].
evíts


166 
	`iscsi_which_evíts
(
mp_sds
[
sd_i
]->
iscsi_˘x
);

169 
ªt
 = 
	`pﬁl
(
pfd
, 
mp_num_sds
, -1);

170 
	`CU_ASSERT_NOT_EQUAL
(
ªt
, -1);

172 
sd_i
 = 0; sd_ò< 
mp_num_sds
; sd_i++) {

173 i‡(!
pfd
[
sd_i
].
ªvíts
) {

176 
ªt
 = 
	`iscsi_£rvi˚
(
mp_sds
[
sd_i
]->
iscsi_˘x
,

177 
pfd
[
sd_i
].
ªvíts
);

178 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

182 
	`loggög
(
LOG_VERBOSE
, "[OK] All %d COMPARE_AND_WRITE IOs complete, with "

183 "%d mism©ch”s)", 
°©e
.
com∂ëed
, sèã.
mism©ches
);

184 
	}
}

	@test-tool/test_multipathio_compareandwrite.c

20 
	~<°dio.h
>

21 
	~<öây≥s.h
>

22 
	~<°dlib.h
>

24 
	~<CUnô/CUnô.h
>

26 
	~"iscsi.h
"

27 
	~"scsi-lowÀvñ.h
"

28 
	~"iscsi-suµ‹t.h
"

29 
	~"iscsi-ã°-cu.h
"

30 
	~"iscsi-mu…ù©h.h
"

33 
	$ã°_mu…ù©hio_com∑ª™dwrôe
()

35 
io_bl
 = 1;

36 
∑th
;

37 
i
, 
n
, 
ªt
;

38 
maxbl
;

40 
CHECK_FOR_DATALOSS
;

41 
CHECK_FOR_SBC
;

42 
	`MPATH_SKIP_IF_UNAVAILABLE
(
mp_sds
, 
mp_num_sds
);

44 i‡(
öq_bl
) {

45 
maxbl
 = 
öq_bl
->
max_cmp
;

48 
maxbl
 = 256;

50 i‡(
maxbl
 < 
io_bl
) {

51 
	`CU_PASS
("[SKIPPED] MAXIMUM_COMPARE_AND_WRITE_LENGTHÅoo small");

55 
n
 = 256;

56 i‡(
n
 + 0U > 
num_blocks
)

57 
n
 = 
num_blocks
;

59 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

60 
	`loggög
(
LOG_VERBOSE
, "Initialising dataÖriorÅo COMPARE_AND_WRITE");

62 
	`mem£t
(
s¸©ch
, 0, 
io_bl
 * 
block_size
);

63 
ªt
 = 
	`wrôeßme10
(
mp_sds
[0], 0,

64 
block_size
, 256, 0, 0, 0, 0, 
s¸©ch
,

65 
EXPECT_STATUS_GOOD
);

66 i‡(
ªt
 == -2) {

67 
	`CU_PASS
("[SKIPPED] Target doesÇot support WRITESAME10. SkippingÅest");

70 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

72 
	`loggög
(
LOG_VERBOSE
, "Test multipath COMPARE_AND_WRITE");

73 
i
 = 0; i <
n
; i++) {

75 
∑th
 = 0;Ö©h < 
mp_num_sds
;Öath++) {

76 
	`loggög
(
LOG_VERBOSE
,

78 
∑th
,Öath + 1,Öath);

81 
	`mem£t
(
s¸©ch
, 
∑th
, 
io_bl
 * 
block_size
);

83 
	`mem£t
(
s¸©ch
 + 
io_bl
 * 
block_size
, 
∑th
 + 1,

84 
io_bl
 * 
block_size
);

85 
	`COMPAREANDWRITE
(
mp_sds
[
∑th
], 
i
,

86 
s¸©ch
, 2 * 
io_bl
 * 
block_size
,

87 
block_size
, 0, 0, 0, 0,

88 
EXPECT_STATUS_GOOD
);

90 
	`loggög
(
LOG_VERBOSE
,

92 
∑th
,Öath + 1);

94 
	`COMPAREANDWRITE
(
mp_sds
[
∑th
], 
i
,

95 
s¸©ch
, 2 * 
io_bl
 * 
block_size
,

96 
block_size
, 0, 0, 0, 0,

97 
EXPECT_MISCOMPARE
);

100 
	}
}

	@test-tool/test_multipathio_reset.c

20 
	~<°dio.h
>

21 
	~<°dlib.h
>

23 
	~<CUnô/CUnô.h
>

25 
	~"iscsi.h
"

26 
	~"scsi-lowÀvñ.h
"

27 
	~"iscsi-suµ‹t.h
"

28 
	~"iscsi-ã°-cu.h
"

29 
	~"iscsi-mu…ù©h.h
"

32 
	$ã°_mu…ù©hio_ª£t
()

34 
ª£t_∑th
;

36 
CHECK_FOR_DATALOSS
;

37 
CHECK_FOR_SBC
;

38 
	`MPATH_SKIP_IF_UNAVAILABLE
(
mp_sds
, 
mp_num_sds
);

39 
	`MPATH_SKIP_UNLESS_ISCSI
(
mp_sds
, 
mp_num_sds
);

41 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

43 
ª£t_∑th
 = 0;Ñe£t_∑th < 
mp_num_sds
;Ñeset_path++) {

44 
num_uas
;

45 
ªt
;

46 
tur_∑th
;

47 
scsi_devi˚
 *
ª£t_sd
 = 
mp_sds
[
ª£t_∑th
];

49 
	`loggög
(
LOG_VERBOSE
, "Awaiting good TUR");

50 
ªt
 = 
	`ã°_iscsi_tur_u¡û_good
(
ª£t_sd
, &
num_uas
);

51 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

53 
	`loggög
(
LOG_VERBOSE
,

54 "Te° mu…ù©h LUN Re£àusögÖ©h %d", 
ª£t_∑th
);

56 
ªt
 = 
	`iscsi_èsk_mgmt_lun_ª£t_sync
(
ª£t_sd
->
iscsi_˘x
,

57 
ª£t_sd
->
iscsi_lun
);

58 i‡(
ªt
 != 0) {

59 
	`loggög
(
LOG_NORMAL
, "LUNÑeset failed. %s",

60 
	`iscsi_gë_îr‹
(
ª£t_sd
->
iscsi_˘x
));

62 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

65 
tur_∑th
 = 0;Åur_∑th < 
mp_num_sds
;Åur_path++) {

66 
	`loggög
(
LOG_VERBOSE
, "check for LUÑeset unit "

67 "©ã¡i⁄ vü TUR o¿∑th %d", 
tur_∑th
);

68 
ªt
 = 
	`ã°_iscsi_tur_u¡û_good
(
mp_sds
[
tur_∑th
], &
num_uas
);

69 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

70 
	`CU_ASSERT_NOT_EQUAL
(
num_uas
, 0);

73 
	}
}

	@test-tool/test_multipathio_simple.c

20 
	~<°dio.h
>

21 
	~<°dlib.h
>

23 
	~<CUnô/CUnô.h
>

25 
	~"iscsi.h
"

26 
	~"scsi-lowÀvñ.h
"

27 
	~"iscsi-suµ‹t.h
"

28 
	~"iscsi-ã°-cu.h
"

29 
	~"iscsi-mu…ù©h.h
"

32 
	$ã°_mu…ù©hio_sim∂e
()

34 
wrôe_∑th
;

35 *
wrôe_buf
 = 
	`Æloˇ
(256 * 
block_size
);

36 *
ªad_buf
 = 
	`Æloˇ
(256 * 
block_size
);

37 
ªt
;

39 
CHECK_FOR_DATALOSS
;

40 
CHECK_FOR_SBC
;

41 
	`MPATH_SKIP_IF_UNAVAILABLE
(
mp_sds
, 
mp_num_sds
);

43 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

44 
	`mem£t
(
wrôe_buf
, 0xa6, 256 * 
block_size
);

46 
wrôe_∑th
 = 0; wrôe_∑th < 
mp_num_sds
; write_path++) {

47 
i
;

48 
ªad_∑th
;

51 
ªad_∑th
 = (
wrôe_∑th
 + 1Ë% 
mp_num_sds
;

53 
	`loggög
(
LOG_VERBOSE
,

55 "∑th %d", 
wrôe_∑th
);

57 
i
 = 1; i <= 256; i++) {

58 i‡(
maximum_å™s„r_Àngth


59 && 
maximum_å™s„r_Àngth
 < 
i
) {

62 
ªt
 = 
	`WRITE10
(
mp_sds
[
wrôe_∑th
], 0, 
i
 * 
block_size
,

63 
block_size
, 0, 0, 0, 0, 0, 
wrôe_buf
,

64 
EXPECT_STATUS_GOOD
);

65 i‡(
ªt
 < 0)

67 
ªt
 = 
	`READ10
(
mp_sds
[
ªad_∑th
], 
NULL
, 0, 
i
 * 
block_size
,

68 
block_size
, 0, 0, 0, 0, 0, 
ªad_buf
,

69 
EXPECT_STATUS_GOOD
);

70 i‡(
ªt
 < 0)

73 
ªt
 = 
	`memcmp
(
wrôe_buf
, 
ªad_buf
, 
i
 * 
block_size
);

74 
	`CU_ASSERT_EQUAL
(0, 
ªt
);

78 
	}
}

	@test-tool/test_nomedia_sbc.c

19 
	~<°dio.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-suµ‹t.h
"

26 
	~"iscsi-ã°-cu.h
"

29 
	$ã°_synchr⁄izeˇche10
()

31 
	`loggög
(
LOG_VERBOSE
, "Test SYNCHRONIZECACHE10 when medium isÉjected.");

32 
	`SYNCHRONIZECACHE10
(
sd
, 0, 1, 1, 1,

33 
EXPECT_NO_MEDIUM
);

34 
	}
}

37 
	$ã°_synchr⁄izeˇche16
()

39 
	`loggög
(
LOG_VERBOSE
, "Test SYNCHRONIZECACHE16 when medium isÉjected.");

40 
	`SYNCHRONIZECACHE16
(
sd
, 0, 1, 1, 1,

41 
EXPECT_NO_MEDIUM
);

42 
	}
}

45 
	$ã°_ªad10
()

47 
	`loggög
(
LOG_VERBOSE
, "Test READ10 when medium isÉjected.");

48 
	`READ10
(
sd
, 
NULL
, 0, 
block_size
, block_size, 0, 0, 0, 0, 0, NULL,

49 
EXPECT_NO_MEDIUM
);

50 
	}
}

53 
	$ã°_ªad12
()

55 
	`loggög
(
LOG_VERBOSE
, "Test READ12 when medium isÉjected.");

56 
	`READ12
(
sd
, 
NULL
, 0, 
block_size
, block_size, 0, 0, 0, 0, 0, NULL,

57 
EXPECT_NO_MEDIUM
);

58 
	}
}

61 
	$ã°_ªad16
()

63 
	`loggög
(
LOG_VERBOSE
, "Test READ16 when medium isÉjected.");

64 
	`READ16
(
sd
, 
NULL
, 0, 
block_size
, block_size, 0, 0, 0, 0, 0, NULL,

65 
EXPECT_NO_MEDIUM
);

66 
	}
}

69 
	$ã°_wrôe10
()

71 
	`loggög
(
LOG_VERBOSE
, "Test WRITE10 when medium isÉjected.");

72 
	`WRITE10
(
sd
, 0, 
block_size
, block_size, 0, 0, 0, 0, 0, 
s¸©ch
,

73 
EXPECT_NO_MEDIUM
);

74 
	}
}

77 
	$ã°_wrôe12
()

79 
	`loggög
(
LOG_VERBOSE
, "Test WRITE12 when medium isÉjected.");

80 
	`WRITE12
(
sd
, 0, 
block_size
, block_size, 0, 0, 0, 0, 0, 
s¸©ch
,

81 
EXPECT_NO_MEDIUM
);

82 
	}
}

85 
	$ã°_wrôe16
()

87 
	`loggög
(
LOG_VERBOSE
, "Test WRITE16 when medium isÉjected.");

88 
	`WRITE16
(
sd
, 0, 
block_size
, block_size, 0, 0, 0, 0, 0, 
s¸©ch
,

89 
EXPECT_NO_MEDIUM
);

90 
	}
}

93 
	$ã°_wrôevîify10
()

95 
	`loggög
(
LOG_VERBOSE
, "Test WRITEVERIFY10 when medium isÉjected.");

96 
	`WRITEVERIFY10
(
sd
, 0, 
block_size
, block_size, 0, 0, 1, 0, 
s¸©ch
,

97 
EXPECT_NO_MEDIUM
);

98 
	}
}

101 
	$ã°_wrôevîify12
()

103 
	`loggög
(
LOG_VERBOSE
, "Test WRITEVERIFY12 when medium isÉjected.");

104 
	`WRITEVERIFY12
(
sd
, 0, 
block_size
, block_size, 0, 0, 1, 0, 
s¸©ch
,

105 
EXPECT_NO_MEDIUM
);

106 
	}
}

109 
	$ã°_wrôevîify16
()

111 
	`loggög
(
LOG_VERBOSE
, "Test WRITEVERIFY16 when medium isÉjected.");

112 
	`WRITEVERIFY16
(
sd
, 0, 
block_size
, block_size, 0, 0, 1, 0, 
s¸©ch
,

113 
EXPECT_NO_MEDIUM
);

114 
	}
}

117 
	$ã°_vîify10
()

119 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY10 when medium isÉjected.");

120 
	`VERIFY10
(
sd
, 0, 
block_size
, block_size, 0, 0, 1, 
s¸©ch
,

121 
EXPECT_NO_MEDIUM
);

122 
	}
}

124 
	$ã°_vîify12
()

126 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY12 when medium isÉjected.");

127 
	`VERIFY12
(
sd
, 0, 
block_size
, block_size, 0, 0, 1, 
s¸©ch
,

128 
EXPECT_NO_MEDIUM
);

129 
	}
}

131 
	$ã°_vîify16
()

133 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY16 when medium isÉjected.");

134 
	`VERIFY16
(
sd
, 0, 
block_size
, block_size, 0, 0, 1, 
s¸©ch
,

135 
EXPECT_NO_MEDIUM
);

136 
	}
}

139 
	$ã°_gëlba°©us
()

141 
	`loggög
(
LOG_VERBOSE
, "Test GET_LBA_STATUS when medium isÉjected.");

142 
	`GETLBASTATUS
(
sd
, 
NULL
, 0, 24,

143 
EXPECT_NO_MEDIUM
);

144 
	}
}

147 
	$ã°_¥e„tch10
()

149 
	`loggög
(
LOG_VERBOSE
, "Test PREFETCH10 when medium isÉjected.");

150 
	`PREFETCH10
(
sd
, 0, 1, 1, 0,

151 
EXPECT_NO_MEDIUM
);

152 
	}
}

155 
	$ã°_¥e„tch16
()

157 
	`loggög
(
LOG_VERBOSE
, "Test PREFETCH16 when medium isÉjected.");

158 
	`PREFETCH16
(
sd
, 0, 1, 1, 0,

159 
EXPECT_NO_MEDIUM
);

160 
	}
}

163 
	$ã°_‹wrôe
()

165 
	`loggög
(
LOG_VERBOSE
, "Test ORWRITE when medium isÉjected.");

166 
	`ORWRITE
(
sd
, 0, 
block_size
, block_size, 0, 0, 0, 0, 0, 
s¸©ch
,

167 
EXPECT_NO_MEDIUM
);

168 
	}
}

171 
	$ã°_com∑ª™dwrôe
()

173 
	`loggög
(
LOG_VERBOSE
, "Test COMPAREANDWRITE when medium isÉjected.");

174 
	`COMPAREANDWRITE
(
sd
, 0, 
s¸©ch
, 2 * 
block_size
, block_size, 0, 0, 0, 0,

175 
EXPECT_NO_MEDIUM
);

176 
	}
}

179 
	$ã°_wrôeßme10
()

181 
	`loggög
(
LOG_VERBOSE
, "Test WRITESAME10 when medium isÉjected.");

182 
	`WRITESAME10
(
sd
, 0, 
block_size
, 1, 0, 0, 0, 0, 
s¸©ch
,

183 
EXPECT_NO_MEDIUM
);

184 
	}
}

187 
	$ã°_wrôeßme16
()

189 
	`loggög
(
LOG_VERBOSE
, "Test WRITESAME16 when medium isÉjected.");

190 
	`WRITESAME16
(
sd
, 0, 
block_size
, 1, 0, 0, 0, 0, 
s¸©ch
,

191 
EXPECT_NO_MEDIUM
);

192 
	}
}

195 
	$ã°_unm≠
()

197 
unm≠_li°
 
li°
[1];

199 
	`loggög
(
LOG_VERBOSE
, "Test UNMAP when medium isÉjected.");

200 
li°
[0].
lba
 = 0;

201 
li°
[0].
num
 = 
lbµb
;

202 
	`UNMAP
(
sd
, 0, 
li°
, 1,

203 
EXPECT_NO_MEDIUM
);

204 
	}
}

207 
	$ã°_ªadˇ∑côy10
()

209 
	`loggög
(
LOG_VERBOSE
, "Test READCAPACITY10 when medium isÉjected.");

210 
	`READCAPACITY10
(
sd
, 
NULL
, 0, 0,

211 
EXPECT_NO_MEDIUM
);

212 
	}
}

215 
	$ã°_ªadˇ∑côy16
()

217 
	`loggög
(
LOG_VERBOSE
, "Test READCAPACITY16 when medium isÉjected.");

218 
	`READCAPACITY16
(
sd
, 
NULL
, 15,

219 
EXPECT_NO_MEDIUM
);

220 
	}
}

223 
	$ã°_nomedü_sbc
()

225 
CHECK_FOR_SBC
;

227 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

228 
	`loggög
(
LOG_VERBOSE
, "TestÅhat Medium commands fail when medium isÉjected on SBC devices");

230 i‡(!
öq
->
rmb
) {

231 
	`loggög
(
LOG_VERBOSE
, "[SKIPPED] LUN isÇotÑemovable. "

236 
	`loggög
(
LOG_VERBOSE
, "EjectÅhe medium.");

237 
	`STARTSTOPUNIT
(
sd
, 1, 0, 0, 0, 1, 0,

238 
EXPECT_STATUS_GOOD
);

240 
	`loggög
(
LOG_VERBOSE
, "Test TESTUNITREADY when medium isÉjected.");

241 
	`TESTUNITREADY
(
sd
,

242 
EXPECT_NO_MEDIUM
);

244 
	`ã°_synchr⁄izeˇche10
();

245 
	`ã°_synchr⁄izeˇche16
();

246 
	`ã°_ªad10
();

247 
	`ã°_ªad12
();

248 
	`ã°_ªad16
();

249 
	`ã°_ªadˇ∑côy10
();

250 
	`ã°_ªadˇ∑côy16
();

251 
	`ã°_vîify10
();

252 
	`ã°_vîify12
();

253 
	`ã°_vîify16
();

254 
	`ã°_gëlba°©us
();

255 
	`ã°_¥e„tch10
();

256 
	`ã°_¥e„tch16
();

258 i‡(!
d©a_loss
) {

259 
	`loggög
(
LOG_VERBOSE
, "[SKIPPING] Dataloss flagÇot set. SkippingÅest for WRITE commands");

260 
föished
;

263 
	`ã°_com∑ª™dwrôe
();

264 
	`ã°_‹wrôe
();

265 
	`ã°_unm≠
();

266 
	`ã°_wrôe10
();

267 
	`ã°_wrôe12
();

268 
	`ã°_wrôe16
();

269 
	`ã°_wrôeßme10
();

270 
	`ã°_wrôeßme16
();

271 
	`ã°_wrôevîify10
();

272 
	`ã°_wrôevîify12
();

273 
	`ã°_wrôevîify16
();

275 
föished
:

276 
	`loggög
(
LOG_VERBOSE
, "LoadÅhe mediumágain.");

277 
	`STARTSTOPUNIT
(
sd
, 1, 0, 0, 0, 1, 1,

278 
EXPECT_STATUS_GOOD
);

279 
	}
}

	@test-tool/test_orwrite_0blocks.c

19 
	~<°dio.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-ã°-cu.h
"

28 
	$ã°_‹wrôe_0blocks
()

30 
CHECK_FOR_DATALOSS
;

31 
CHECK_FOR_SBC
;

33 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

34 
	`loggög
(
LOG_VERBOSE
, "Test ORWRITE 0-blocksát LBA==0");

35 
	`ORWRITE
(
sd
, 0, 0, 
block_size
, 0, 0, 0, 0, 0, 
NULL
,

36 
EXPECT_STATUS_GOOD
);

38 
	`loggög
(
LOG_VERBOSE
, "Test ORWRITE 0-blocks one blockÖastÉnd-of-LUN");

39 
	`ORWRITE
(
sd
, 
num_blocks
 + 1, 0, 
block_size
, 0, 0, 0, 0, 0, 
NULL
,

40 
EXPECT_LBA_OOB
);

42 
	`loggög
(
LOG_VERBOSE
, "Test ORWRITE 0-blocksát LBA==2^63");

43 
	`ORWRITE
(
sd
, 0x8000000000000000ULL, 0, 
block_size
, 0, 0, 0, 0, 0, 
NULL
,

44 
EXPECT_LBA_OOB
);

46 
	`loggög
(
LOG_VERBOSE
, "Test ORWRITE 0-blocksát LBA==-1");

47 
	`ORWRITE
(
sd
, -1, 0, 
block_size
, 0, 0, 0, 0, 0, 
NULL
,

48 
EXPECT_LBA_OOB
);

49 
	}
}

	@test-tool/test_orwrite_beyond_eol.c

19 
	~<°dio.h
>

20 
	~<°dlib.h
>

22 
	~<CUnô/CUnô.h
>

24 
	~"iscsi.h
"

25 
	~"scsi-lowÀvñ.h
"

26 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_‹wrôe_bey⁄d_eﬁ
()

32 
i
;

34 
CHECK_FOR_DATALOSS
;

35 
CHECK_FOR_SBC
;

37 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

38 
	`loggög
(
LOG_VERBOSE
, "Test ORWRITE 1-256 blocks one block beyondÅheÉnd");

39 
	`mem£t
(
s¸©ch
, 0xa6, 256 * 
block_size
);

40 
i
 = 1; i <= 256; i++) {

41 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

44 
	`ORWRITE
(
sd
, 
num_blocks
 + 1 - 
i
,

45 
i
 * 
block_size
, block_size, 0, 0, 0, 0, 0, 
s¸©ch
,

46 
EXPECT_LBA_OOB
);

50 
	`loggög
(
LOG_VERBOSE
, "Test ORWRITE 1-256 blocksát LBA==2^63");

51 
i
 = 1; i <= 256; i++) {

52 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

55 
	`ORWRITE
(
sd
, 0x8000000000000000ULL, 
i
 * 
block_size
, block_size,

56 0, 0, 0, 0, 0, 
s¸©ch
,

57 
EXPECT_LBA_OOB
);

61 
	`loggög
(
LOG_VERBOSE
, "Test ORWRITE 1-256 blocksát LBA==-1");

62 
i
 = 1; i <= 256; i++) {

63 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

66 
	`ORWRITE
(
sd
, -1, 
i
 * 
block_size
, block_size,

67 0, 0, 0, 0, 0, 
s¸©ch
,

68 
EXPECT_LBA_OOB
);

72 
	`loggög
(
LOG_VERBOSE
, "Test ORWRITE 2-256 blocksáll but one block beyondÅheÉnd");

73 
i
 = 2; i <= 256; i++) {

74 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

77 
	`ORWRITE
(
sd
, 
num_blocks
 - 1, 
i
 * 
block_size
, block_size,

78 0, 0, 0, 0, 0, 
s¸©ch
,

79 
EXPECT_LBA_OOB
);

81 
	}
}

	@test-tool/test_orwrite_dpofua.c

19 
	~<°dio.h
>

20 
	~<°dlib.h
>

21 
	~<°rög.h
>

23 
	~<CUnô/CUnô.h
>

25 
	~"iscsi.h
"

26 
	~"scsi-lowÀvñ.h
"

27 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_‹wrôe_dpofua
()

32 
dpofua
, 
ußge_d©a_dpofua
;

33 
scsi_èsk
 *
ms_èsk
 = 
NULL
;

34 
scsi_mode_£n£
 *
ms
;

35 
scsi_èsk
 *
rso_èsk
 = 
NULL
;

36 
scsi_ªp‹t_suµ‹ãd_›_codes_⁄e_comm™d
 *
rsoc
;

38 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

39 
	`loggög
(
LOG_VERBOSE
, "Test ORWRITE DPO/FUA flags");

41 
CHECK_FOR_SBC
;

42 
CHECK_FOR_DATALOSS
;

44 
	`loggög
(
LOG_VERBOSE
, "ReadÅhe DPOFUA flag from mode sense data");

45 
	`MODESENSE6
(
sd
, &
ms_èsk
, 0, 
SCSI_MODESENSE_PC_CURRENT
,

46 
SCSI_MODEPAGE_RETURN_ALL_PAGES
, 0, 255,

47 
EXPECT_STATUS_GOOD
);

49 
	`loggög
(
LOG_VERBOSE
, "[SUCCESS] Mode senseÑeturned status GOOD");

50 
ms
 = 
	`scsi_d©aö_unm¨shÆl
(
ms_èsk
);

51 
dpofua
 = 
ms
 && (ms->
devi˚_•ecific_∑ømëî
 & 0x10);

52 
	`scsi_‰ì_scsi_èsk
(
ms_èsk
);

54 i‡(
dpofua
) {

55 
	`loggög
(
LOG_VERBOSE
, "DPOFUA flag is set. Device shouldállow "

58 
	`loggög
(
LOG_VERBOSE
, "DPOFUA flag is clear. Device should fail "

62 
	`loggög
(
LOG_VERBOSE
, "Test ORWRITE with DPO==1");

63 
	`mem£t
(
s¸©ch
, 0xa6, 
block_size
);

64 i‡(
dpofua
) {

65 
	`ORWRITE
(
sd
, 0, 
block_size
, block_size, 0, 1, 0, 0, 0, 
s¸©ch
,

66 
EXPECT_STATUS_GOOD
);

68 
	`ORWRITE
(
sd
, 0, 
block_size
, block_size, 0, 1, 0, 0, 0, 
s¸©ch
,

69 
EXPECT_INVALID_FIELD_IN_CDB
);

72 
	`loggög
(
LOG_VERBOSE
, "Test ORWRITE with FUA==1");

73 i‡(
dpofua
) {

74 
	`ORWRITE
(
sd
, 0, 
block_size
, block_size, 0, 0, 1, 0, 0, 
s¸©ch
,

75 
EXPECT_STATUS_GOOD
);

77 
	`ORWRITE
(
sd
, 0, 
block_size
, block_size, 0, 0, 1, 0, 0, 
s¸©ch
,

78 
EXPECT_INVALID_FIELD_IN_CDB
);

81 
	`loggög
(
LOG_VERBOSE
, "Test ORWRITE with DPO==1 FUA==1");

82 i‡(
dpofua
) {

83 
	`ORWRITE
(
sd
, 0, 
block_size
, block_size, 0, 1, 1, 0, 0, 
s¸©ch
,

84 
EXPECT_STATUS_GOOD
);

86 
	`ORWRITE
(
sd
, 0, 
block_size
, block_size, 0, 1, 1, 0, 0, 
s¸©ch
,

87 
EXPECT_INVALID_FIELD_IN_CDB
);

90 
	`loggög
(
LOG_VERBOSE
, "Try fetching REPORT_SUPPORTED_OPCODES "

92 
	`REPORT_SUPPORTED_OPCODES
(
sd
, &
rso_èsk
,

93 0, 
SCSI_REPORT_SUPPORTING_OPCODE
,

94 
SCSI_OPCODE_ORWRITE
,

97 
EXPECT_STATUS_GOOD
);

98 
	`loggög
(
LOG_VERBOSE
, "UnmarshallÅhe DATA-IN buffer");

99 
rsoc
 = 
	`scsi_d©aö_unm¨shÆl
(
rso_èsk
);

100 
	`CU_ASSERT_PTR_NOT_NULL_FATAL
(
rsoc
);

102 
ußge_d©a_dpofua
 = 
rsoc
->
cdb_ußge_d©a
[1] & 0x18;

103 i‡(
dpofua
) {

104 
	`loggög
(
LOG_VERBOSE
, "DPOFUA is set. VerifyÅhe "

106 i‡(!
ußge_d©a_dpofua
) {

107 
	`loggög
(
LOG_NORMAL
, "[FAILED] DpoFuaÇot set "

109 
	`CU_FAIL
("DpoFuaÇot set in CDB_USAGE_DATE");

112 
	`loggög
(
LOG_VERBOSE
, "DPOFUA is clear. VerifyÅhe "

114 i‡(
ußge_d©a_dpofua
) {

115 
	`loggög
(
LOG_NORMAL
, "[FAILED] DpoFuaÇot clear "

117 
	`CU_FAIL
("DpoFuaÇot clear in CDB_USAGE_DATE");

121 
	`scsi_‰ì_scsi_èsk
(
rso_èsk
);

122 
	}
}

	@test-tool/test_orwrite_simple.c

19 
	~<°dio.h
>

20 
	~<°dlib.h
>

22 
	~<CUnô/CUnô.h
>

24 
	~"iscsi.h
"

25 
	~"scsi-lowÀvñ.h
"

26 
	~"iscsi-suµ‹t.h
"

27 
	~"iscsi-ã°-cu.h
"

31 
	$ã°_‹wrôe_sim∂e
()

33 
i
;

35 
CHECK_FOR_DATALOSS
;

36 
CHECK_FOR_SBC
;

38 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

39 
	`loggög
(
LOG_VERBOSE
, "Test ORWRITE of 1-256 blocksátÅhe start ofÅhe LUN");

40 
	`mem£t
(
s¸©ch
, 0xa6, 256 * 
block_size
);

41 
i
 = 1; i <= 256; i++) {

42 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

45 
	`ORWRITE
(
sd
, 0, 
i
 * 
block_size
,

46 
block_size
, 0, 0, 0, 0, 0, 
s¸©ch
,

47 
EXPECT_STATUS_GOOD
);

50 
	`loggög
(
LOG_VERBOSE
, "Test ORWRITE of 1-256 blocksátÅheÉnd ofÅhe LUN");

51 
i
 = 1; i <= 256; i++) {

52 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

55 
	`ORWRITE
(
sd
, 
num_blocks
 - 
i
, i * 
block_size
, block_size,

56 0, 0, 0, 0, 0, 
s¸©ch
,

57 
EXPECT_STATUS_GOOD
);

59 
	}
}

	@test-tool/test_orwrite_verify.c

19 
	~<°dio.h
>

20 
	~<°rög.h
>

21 
	~<°dlib.h
>

23 
	~<CUnô/CUnô.h
>

25 
	~"iscsi.h
"

26 
	~"scsi-lowÀvñ.h
"

27 
	~"iscsi-suµ‹t.h
"

28 
	~"iscsi-ã°-cu.h
"

32 
	$ã°_‹wrôe_vîify
()

34 
i
, 
ªt
;

35 *
buf
 = &
s¸©ch
[0];

36 *
ªadbuf
 = &
s¸©ch
[256 * 
block_size
];

39 
CHECK_FOR_DATALOSS
;

40 
CHECK_FOR_SBC
;

42 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

43 
	`loggög
(
LOG_VERBOSE
, "Test ORWRITE of 1-256 blocksátÅhe start ofÅhe LUN");

44 
i
 = 1; i <= 256; i++) {

45 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

49 
	`loggög
(
LOG_VERBOSE
, "Wrôê%d block†o‡Æl-zîo", 
i
);

50 
	`mem£t
(
buf
, 0, 
block_size
 * 
i
);

51 
ªt
 = 
	`wrôe10
(
sd
, 0, 
i
 * 
block_size
,

52 
block_size
, 0, 0, 0, 0, 0, 
buf
,

53 
EXPECT_STATUS_GOOD
);

54 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

56 
	`loggög
(
LOG_VERBOSE
, "OrWrôê%d block†wôh 0xa5", 
i
);

57 
	`mem£t
(
buf
, 0xa5, 
block_size
 * 
i
);

58 
	`ORWRITE
(
sd
, 0, 
i
 * 
block_size
,

59 
block_size
, 0, 0, 0, 0, 0, 
buf
,

60 
EXPECT_STATUS_GOOD
);

62 
	`loggög
(
LOG_VERBOSE
, "Ród %d block†back", 
i
);

63 
	`READ10
(
sd
, 
NULL
, 0, 
i
 * 
block_size
,

64 
block_size
, 0, 0, 0, 0, 0, 
ªadbuf
,

65 
EXPECT_STATUS_GOOD
);

67 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅhe blocksáreáll 0xa5");

68 
ªt
 = 
	`memcmp
(
buf
, 
ªadbuf
, 
block_size
 * 
i
);

69 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

71 
	`loggög
(
LOG_VERBOSE
, "OrWrôê%d block†wôh 0x5a", 
i
);

72 
	`mem£t
(
buf
, 0x5a, 
block_size
 * 
i
);

73 
	`ORWRITE
(
sd
, 0, 
i
 * 
block_size
,

74 
block_size
, 0, 0, 0, 0, 0, 
buf
,

75 
EXPECT_STATUS_GOOD
);

77 
	`loggög
(
LOG_VERBOSE
, "Ród %d block†back", 
i
);

78 
	`READ10
(
sd
, 
NULL
, 0, 
i
 * 
block_size
,

79 
block_size
, 0, 0, 0, 0, 0, 
ªadbuf
,

80 
EXPECT_STATUS_GOOD
);

82 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅhe blocksáreáll 0xff");

83 
	`mem£t
(
buf
, 0xff, 
block_size
 * 
i
);

84 
ªt
 = 
	`memcmp
(
buf
, 
ªadbuf
, 
block_size
 * 
i
);

85 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

88 
	`loggög
(
LOG_VERBOSE
, "Test ORWRITE of 1-256 blocksátÅheÉnd ofÅhe LUN");

89 
i
 = 1; i <= 256; i++) {

90 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

94 
	`loggög
(
LOG_VERBOSE
, "Wrôê%d block†o‡Æl-zîo", 
i
);

95 
	`mem£t
(
buf
, 0, 
block_size
 * 
i
);

96 
	`WRITE16
(
sd
, 
num_blocks
 - 
i
, i * 
block_size
,

97 
block_size
, 0, 0, 0, 0, 0, 
buf
,

98 
EXPECT_STATUS_GOOD
);

100 
	`loggög
(
LOG_VERBOSE
, "OrWrôê%d block†wôh 0xa5", 
i
);

101 
	`mem£t
(
buf
, 0xa5, 
block_size
 * 
i
);

102 
	`ORWRITE
(
sd
, 
num_blocks
 - 
i
, i * 
block_size
,

103 
block_size
, 0, 0, 0, 0, 0, 
buf
,

104 
EXPECT_STATUS_GOOD
);

106 
	`loggög
(
LOG_VERBOSE
, "Ród %d block†back", 
i
);

107 
	`READ16
(
sd
, 
NULL
, 
num_blocks
 - 
i
, i * 
block_size
,

108 
block_size
, 0, 0, 0, 0, 0, 
ªadbuf
,

109 
EXPECT_STATUS_GOOD
);

111 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅhe blocksáreáll 0xa5");

112 
ªt
 = 
	`memcmp
(
buf
, 
ªadbuf
, 
block_size
 * 
i
);

113 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

115 
	`loggög
(
LOG_VERBOSE
, "OrWrôê%d block†wôh 0x5a", 
i
);

116 
	`mem£t
(
buf
, 0x5a, 
block_size
 * 
i
);

117 
	`ORWRITE
(
sd
, 
num_blocks
 - 
i
, i * 
block_size
,

118 
block_size
, 0, 0, 0, 0, 0, 
buf
,

119 
EXPECT_STATUS_GOOD
);

121 
	`loggög
(
LOG_VERBOSE
, "Ród %d block†back", 
i
);

122 
	`READ16
(
sd
, 
NULL
, 
num_blocks
 - 
i
, i * 
block_size
,

123 
block_size
, 0, 0, 0, 0, 0, 
ªadbuf
,

124 
EXPECT_STATUS_GOOD
);

126 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅhe blocksáreáll 0xff");

127 
	`mem£t
(
buf
, 0xff, 
block_size
 * 
i
);

128 
ªt
 = 
	`memcmp
(
buf
, 
ªadbuf
, 
block_size
 * 
i
);

129 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

131 
	}
}

	@test-tool/test_orwrite_wrprotect.c

19 
	~<°dio.h
>

20 
	~<°dlib.h
>

21 
	~<°rög.h
>

22 
	~<°dlib.h
>

24 
	~<CUnô/CUnô.h
>

26 
	~"iscsi.h
"

27 
	~"scsi-lowÀvñ.h
"

28 
	~"iscsi-ã°-cu.h
"

31 
	$ã°_‹wrôe_wΩrŸe˘
()

33 
i
;

38 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

39 
	`loggög
(
LOG_VERBOSE
, "Test ORWRITE withÇon-zero WRPROTECT");

41 
CHECK_FOR_DATALOSS
;

42 
CHECK_FOR_SBC
;

44 
	`mem£t
(
s¸©ch
, 0xa6, 
block_size
);

45 i‡(!
öq
->
¥Ÿe˘
 || (
rc16
 !
NULL
 && !rc16->
¥Ÿ_í
)) {

46 
	`loggög
(
LOG_VERBOSE
, "Device doesÇot support/useÖrotection information. All commands should fail.");

47 
i
 = 1; i < 8; i++) {

48 
	`ORWRITE
(
sd
, 0, 
block_size
,

49 
block_size
, 
i
, 0, 0, 0, 0, 
s¸©ch
,

50 
EXPECT_INVALID_FIELD_IN_CDB
);

55 
	`loggög
(
LOG_NORMAL
, "NoÅests for devicesÅhat supportÖrotection information yet.");

56 
	}
}

	@test-tool/test_prefetch10_0blocks.c

19 
	~<°dio.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-ã°-cu.h
"

28 
	$ã°_¥e„tch10_0blocks
()

30 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

31 
	`loggög
(
LOG_VERBOSE
, "Test PREFETCH10 0-blocksát LBA==0");

33 
	`PREFETCH10
(
sd
, 0, 0, 0, 0,

34 
EXPECT_STATUS_GOOD
);

36 i‡(
num_blocks
 > 0x80000000) {

37 
	`CU_PASS
("[SKIPPED] LUN isÅoo big");

41 
	`loggög
(
LOG_VERBOSE
, "Test PREFETCH10 0-blocks one blockÖastÉnd-of-LUN");

42 
	`PREFETCH10
(
sd
, 
num_blocks
 + 1, 0, 0, 0,

43 
EXPECT_LBA_OOB
);

45 
	`loggög
(
LOG_VERBOSE
, "Test PREFETCH10 0-blocksát LBA==2^31");

46 
	`PREFETCH10
(
sd
, 0x80000000, 0, 0, 0,

47 
EXPECT_LBA_OOB
);

49 
	`loggög
(
LOG_VERBOSE
, "Test PREFETCH10 0-blocksát LBA==-1");

50 
	`PREFETCH10
(
sd
, -1, 0, 0, 0,

51 
EXPECT_LBA_OOB
);

52 
	}
}

	@test-tool/test_prefetch10_beyond_eol.c

19 
	~<°dio.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-ã°-cu.h
"

29 
	$ã°_¥e„tch10_bey⁄d_eﬁ
()

31 
i
;

33 i‡(
num_blocks
 >= 0x80000000) {

34 
	`CU_PASS
("LUN isÅoo big forÑead-beyond-eolÅests with PREFETCH10. SkippingÅest.\n");

38 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

39 
	`loggög
(
LOG_VERBOSE
, "Test PREFETCH10 1-256 blocks one block beyondÅheÉnd");

40 
i
 = 1; i <= 256; i++) {

41 
	`PREFETCH10
(
sd
, 
num_blocks
 + 1 - 
i
, i, 0, 0,

42 
EXPECT_LBA_OOB
);

45 
	`loggög
(
LOG_VERBOSE
, "Test PREFETCH10 1-256 blocksát LBA==2^31");

46 
i
 = 1; i <= 256; i++) {

47 
	`PREFETCH10
(
sd
, 0x80000000, 
i
, 0, 0,

48 
EXPECT_LBA_OOB
);

51 
	`loggög
(
LOG_VERBOSE
, "Test PREFETCH10 1-256 blocksát LBA==-1");

52 
i
 = 1; i <= 256; i++) {

53 
	`PREFETCH10
(
sd
, -1, 
i
, 0, 0,

54 
EXPECT_LBA_OOB
);

57 
	`loggög
(
LOG_VERBOSE
, "Test PREFETCH10 2-256 blocksáll but one block beyondÅheÉnd");

58 
i
 = 2; i <= 256; i++) {

59 
	`PREFETCH10
(
sd
, 
num_blocks
 - 1, 
i
, 0, 0,

60 
EXPECT_LBA_OOB
);

62 
	}
}

	@test-tool/test_prefetch10_flags.c

19 
	~<°dio.h
>

20 
	~<°dlib.h
>

21 
	~<°rög.h
>

23 
	~<CUnô/CUnô.h
>

25 
	~"iscsi.h
"

26 
	~"scsi-lowÀvñ.h
"

27 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_¥e„tch10_Êags
()

32 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

33 
	`loggög
(
LOG_VERBOSE
, "Test PREFETCH10 flags");

35 
	`loggög
(
LOG_VERBOSE
, "Test PREFETCH10 with IMMED==1");

36 
	`PREFETCH10
(
sd
, 0, 1, 1, 0,

37 
EXPECT_STATUS_GOOD
);

39 
	`loggög
(
LOG_VERBOSE
, "Test PREFETCH10 with GROUP==3");

40 
	`PREFETCH10
(
sd
, 0, 1, 0, 3,

41 
EXPECT_STATUS_GOOD
);

43 
	`loggög
(
LOG_VERBOSE
, "Test PREFETCH10 with IMMED=1ánd GROUP==3");

44 
	`PREFETCH10
(
sd
, 0, 1, 1, 3,

45 
EXPECT_STATUS_GOOD
);

46 
	}
}

	@test-tool/test_prefetch10_simple.c

19 
	~<°dio.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-suµ‹t.h
"

26 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_¥e„tch10_sim∂e
()

32 
i
;

34 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

35 
	`loggög
(
LOG_VERBOSE
, "Test PREFETCH10 of 1-256 blocksátÅhe start ofÅhe LUN");

36 
i
 = 1; i <= 256; i++) {

37 
	`PREFETCH10
(
sd
, 0, 
i
, 0, 0,

38 
EXPECT_STATUS_GOOD
);

42 
	`loggög
(
LOG_VERBOSE
, "Test PREFETCH10 of 1-256 blocksátÅheÉnd ofÅhe LUN");

43 
i
 = 1; i <= 256; i++) {

44 
	`PREFETCH10
(
sd
, 
num_blocks
 - 
i
, i, 0, 0,

45 
EXPECT_STATUS_GOOD
);

47 
	}
}

	@test-tool/test_prefetch16_0blocks.c

19 
	~<°dio.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-ã°-cu.h
"

28 
	$ã°_¥e„tch16_0blocks
()

30 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

31 
	`loggög
(
LOG_VERBOSE
, "Test PREFETCH16 0-blocksát LBA==0");

33 
	`PREFETCH16
(
sd
, 0, 0, 0, 0,

34 
EXPECT_STATUS_GOOD
);

36 
	`loggög
(
LOG_VERBOSE
, "Test PREFETCH16 0-blocks one blockÖastÉnd-of-LUN");

37 
	`PREFETCH16
(
sd
, 
num_blocks
 + 1, 0, 0, 0,

38 
EXPECT_LBA_OOB
);

40 
	`loggög
(
LOG_VERBOSE
, "Test PREFETCH16 0-blocksát LBA==2^63");

41 
	`PREFETCH16
(
sd
, 0x8000000000000000ULL, 0, 0, 0,

42 
EXPECT_LBA_OOB
);

44 
	`loggög
(
LOG_VERBOSE
, "Test PREFETCH16 0-blocksát LBA==-1");

45 
	`PREFETCH16
(
sd
, -1, 0, 0, 0,

46 
EXPECT_LBA_OOB
);

47 
	}
}

	@test-tool/test_prefetch16_beyond_eol.c

19 
	~<°dio.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-ã°-cu.h
"

29 
	$ã°_¥e„tch16_bey⁄d_eﬁ
()

31 
i
;

33 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

34 
	`loggög
(
LOG_VERBOSE
, "Test PREFETCH16 1-256 blocks one block beyondÅheÉnd");

35 
i
 = 1; i <= 256; i++) {

36 
	`PREFETCH16
(
sd
, 
num_blocks
 + 1 - 
i
, i, 0, 0,

37 
EXPECT_LBA_OOB
);

40 
	`loggög
(
LOG_VERBOSE
, "Test PREFETCH16 1-256 blocksát LBA==2^63");

41 
i
 = 1; i <= 256; i++) {

42 
	`PREFETCH16
(
sd
, 0x8000000000000000ULL, 
i
, 0, 0,

43 
EXPECT_LBA_OOB
);

46 
	`loggög
(
LOG_VERBOSE
, "Test PREFETCH16 1-256 blocksát LBA==-1");

47 
i
 = 1; i <= 256; i++) {

48 
	`PREFETCH16
(
sd
, -1, 
i
, 0, 0,

49 
EXPECT_LBA_OOB
);

52 
	`loggög
(
LOG_VERBOSE
, "Test PREFETCH16 2-256 blocksáll but one block beyondÅheÉnd");

53 
i
 = 2; i <= 256; i++) {

54 
	`PREFETCH16
(
sd
, 
num_blocks
 - 1, 
i
, 0, 0,

55 
EXPECT_LBA_OOB
);

57 
	}
}

	@test-tool/test_prefetch16_flags.c

19 
	~<°dio.h
>

20 
	~<°dlib.h
>

21 
	~<°rög.h
>

23 
	~<CUnô/CUnô.h
>

25 
	~"iscsi.h
"

26 
	~"scsi-lowÀvñ.h
"

27 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_¥e„tch16_Êags
()

32 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

33 
	`loggög
(
LOG_VERBOSE
, "Test PREFETCH16 flags");

35 
	`loggög
(
LOG_VERBOSE
, "Test PREFETCH16 with IMMED==1");

36 
	`PREFETCH16
(
sd
, 0, 1, 1, 0,

37 
EXPECT_STATUS_GOOD
);

39 
	`loggög
(
LOG_VERBOSE
, "Test PREFETCH16 with GROUP==3");

40 
	`PREFETCH16
(
sd
, 0, 1, 0, 3,

41 
EXPECT_STATUS_GOOD
);

43 
	`loggög
(
LOG_VERBOSE
, "Test PREFETCH16 with IMMED=1ánd GROUP==3");

44 
	`PREFETCH16
(
sd
, 0, 1, 1, 3,

45 
EXPECT_STATUS_GOOD
);

46 
	}
}

	@test-tool/test_prefetch16_simple.c

19 
	~<°dio.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-suµ‹t.h
"

26 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_¥e„tch16_sim∂e
()

32 
i
;

34 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

35 
	`loggög
(
LOG_VERBOSE
, "Test PREFETCH16 of 1-256 blocksátÅhe start ofÅhe LUN");

36 
i
 = 1; i <= 256; i++) {

37 
	`PREFETCH16
(
sd
, 0, 
i
, 0, 0,

38 
EXPECT_STATUS_GOOD
);

42 
	`loggög
(
LOG_VERBOSE
, "Test PREFETCH16 of 1-256 blocksátÅheÉnd ofÅhe LUN");

43 
i
 = 1; i <= 256; i++) {

44 
	`PREFETCH16
(
sd
, 
num_blocks
 - 
i
, i, 0, 0,

45 
EXPECT_STATUS_GOOD
);

47 
	}
}

	@test-tool/test_preventallow_2_itnexuses.c

19 
	~<°dio.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-suµ‹t.h
"

26 
	~"iscsi-ã°-cu.h
"

27 
	~"iscsi-mu…ù©h.h
"

30 
	$ã°_¥evíèŒow_2_ô√xu£s
()

32 
ªt
;

33 
scsi_devi˚
 *
sd2
;

35 
CHECK_FOR_SBC
;

36 
CHECK_FOR_REMOVABLE
;

38 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

39 
	`loggög
(
LOG_VERBOSE
, "TestÅhat PREVENT MEDIUM REMOVALáre seen on otherÇexusesás well");

41 i‡(
sd
->
iscsi_˘x
 =
NULL
) {

42 c⁄° *
îr
 = "[SKIPPED] This PREVENTALLOWÅest is "

44 
	`loggög
(
LOG_NORMAL
, "%s", 
îr
);

45 
	`CU_PASS
(
îr
);

49 
	`loggög
(
LOG_VERBOSE
, "SetÅhe PREVENT flag");

50 
	`PREVENTALLOW
(
sd
, 1);

52 
	`loggög
(
LOG_VERBOSE
, "TryÅoÉjectÅhe medium");

53 
	`STARTSTOPUNIT
(
sd
, 0, 0, 0, 0, 1, 0,

54 
EXPECT_REMOVAL_PREVENTED
);

56 
	`loggög
(
LOG_VERBOSE
, "Verify we can stilláccessÅhe media.");

57 
	`TESTUNITREADY
(
sd
,

58 
EXPECT_STATUS_GOOD
);

60 
	`loggög
(
LOG_VERBOSE
, "Createá second connectionÅoÅheÅarget");

61 
ªt
 = 
	`m∑th_sd2_gë_‹_˛⁄e
(
sd
, &
sd2
);

62 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

63 i‡(
ªt
 < 0)

66 
	`loggög
(
LOG_VERBOSE
, "TryÅoÉjectÅhe medium onÅhe second connection");

67 
	`STARTSTOPUNIT
(
sd2
, 0, 0, 0, 0, 1, 0,

68 
EXPECT_REMOVAL_PREVENTED
);

70 
	`loggög
(
LOG_VERBOSE
, "LogoutÅhe second connection fromÅarget");

71 
	`m∑th_sd2_put
(
sd2
);

73 
	`loggög
(
LOG_VERBOSE
, "Clear PREVENTándÜoad medium in caseÅarget failed");

74 
	`loggög
(
LOG_VERBOSE
, "Test we can clear PREVENT flag");

75 
	`PREVENTALLOW
(
sd
, 0);

77 
	`loggög
(
LOG_VERBOSE
, "LoadÅhe medium");

78 
	`STARTSTOPUNIT
(
sd
, 0, 0, 0, 0, 1, 1,

79 
EXPECT_STATUS_GOOD
);

80 
	}
}

	@test-tool/test_preventallow_cold_reset.c

19 
	~<°dio.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-suµ‹t.h
"

26 
	~"iscsi-ã°-cu.h
"

29 
	$ã°_¥evíèŒow_cﬁd_ª£t
()

31 
ªt
;

33 
CHECK_FOR_SBC
;

34 
CHECK_FOR_REMOVABLE
;

36 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

37 
	`loggög
(
LOG_VERBOSE
, "TestÅhat Target Warm Reset clears PREVENT MEDIUM REMOVAL");

39 i‡(
sd
->
iscsi_˘x
 =
NULL
) {

40 c⁄° *
îr
 = "[SKIPPED] This PREVENTALLOWÅest is "

42 
	`loggög
(
LOG_NORMAL
, "%s", 
îr
);

43 
	`CU_PASS
(
îr
);

47 
	`loggög
(
LOG_VERBOSE
, "SetÅhe PREVENT flag");

48 
	`PREVENTALLOW
(
sd
, 1);

50 
	`loggög
(
LOG_VERBOSE
, "TryÅoÉjectÅhe medium");

51 
	`STARTSTOPUNIT
(
sd
, 0, 0, 0, 0, 1, 0,

52 
EXPECT_REMOVAL_PREVENTED
);

54 
	`loggög
(
LOG_VERBOSE
, "Verify we can stilláccessÅhe media.");

55 
	`TESTUNITREADY
(
sd
,

56 
EXPECT_STATUS_GOOD
);

58 
	`loggög
(
LOG_VERBOSE
, "Perform coldÑeset onÅarget");

59 
ªt
 = 
	`iscsi_èsk_mgmt_èrgë_cﬁd_ª£t_sync
(
sd
->
iscsi_˘x
);

60 i‡(
ªt
 != 0) {

61 c⁄° *
îr
 = "[SKIPPED] Task Management function"

63 
	`loggög
(
LOG_NORMAL
, "%s", 
îr
);

64 
	`CU_PASS
(
îr
);

68 
	`loggög
(
LOG_VERBOSE
, "Wait untiláll unitáttentions clear");

69 
	`ã°unôªady
(
sd
, 
EXPECT_STATUS_GOOD
) != 0)

72 
	`loggög
(
LOG_VERBOSE
, "TryÅoÉjectÅhe medium");

73 
	`STARTSTOPUNIT
(
sd
, 0, 0, 0, 0, 1, 0,

74 
EXPECT_STATUS_GOOD
);

76 
	`loggög
(
LOG_VERBOSE
, "Verify we canÇotáccessÅhe media.");

77 
	`TESTUNITREADY
(
sd
,

78 
EXPECT_NO_MEDIUM
);

80 
	`loggög
(
LOG_VERBOSE
, "LoadÅhe medium");

81 
	`STARTSTOPUNIT
(
sd
, 0, 0, 0, 0, 1, 0,

82 
EXPECT_STATUS_GOOD
);

84 
	`loggög
(
LOG_VERBOSE
, "Clear PREVENTándÜoad medium in caseÅarget failed");

85 
	`loggög
(
LOG_VERBOSE
, "Test we can clear PREVENT flag");

86 
	`PREVENTALLOW
(
sd
, 0);

88 
	`loggög
(
LOG_VERBOSE
, "LoadÅhe medium");

89 
	`STARTSTOPUNIT
(
sd
, 0, 0, 0, 0, 1, 1,

90 
EXPECT_STATUS_GOOD
);

91 
	}
}

	@test-tool/test_preventallow_eject.c

19 
	~<°dio.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-suµ‹t.h
"

26 
	~"iscsi-ã°-cu.h
"

29 
	$ã°_¥evíèŒow_eje˘
()

31 
CHECK_FOR_SBC
;

32 
CHECK_FOR_REMOVABLE
;

34 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

35 
	`loggög
(
LOG_VERBOSE
, "TestÅhat we canÇotÉject medium when PREVENT isáctive");

37 
	`loggög
(
LOG_VERBOSE
, "SetÅhe PREVENT flag");

38 
	`PREVENTALLOW
(
sd
, 1);

40 
	`loggög
(
LOG_VERBOSE
, "TryÅoÉjectÅhe medium");

41 
	`STARTSTOPUNIT
(
sd
, 0, 0, 0, 0, 1, 0,

42 
EXPECT_REMOVAL_PREVENTED
);

44 
	`loggög
(
LOG_VERBOSE
, "Verify we can stilláccessÅhe media.");

45 
	`TESTUNITREADY
(
sd
,

46 
EXPECT_STATUS_GOOD
);

48 
	`loggög
(
LOG_VERBOSE
, "Test we can clear PREVENT flag");

49 
	`PREVENTALLOW
(
sd
, 0);

51 
	`loggög
(
LOG_VERBOSE
, "TryÅoÉjectÅhe medium");

52 
	`STARTSTOPUNIT
(
sd
, 0, 0, 0, 0, 1, 0,

53 
EXPECT_STATUS_GOOD
);

55 
	`loggög
(
LOG_VERBOSE
, "Verify we canÇotáccessÅhe media.");

56 
	`TESTUNITREADY
(
sd
,

57 
EXPECT_NO_MEDIUM
);

59 
	`loggög
(
LOG_VERBOSE
, "SetÅhe PREVENT flag");

60 
	`PREVENTALLOW
(
sd
, 1);

62 
	`loggög
(
LOG_VERBOSE
, "TryÅoÜoadÅhe medium");

63 
	`STARTSTOPUNIT
(
sd
, 0, 0, 0, 0, 1, 1,

64 
EXPECT_REMOVAL_PREVENTED
);

66 
	`loggög
(
LOG_VERBOSE
, "Clear PREVENT flag");

67 
	`PREVENTALLOW
(
sd
, 0);

69 
	`loggög
(
LOG_VERBOSE
, "LoadÅhe mediumágain");

70 
	`STARTSTOPUNIT
(
sd
, 0, 0, 0, 0, 1, 1,

71 
EXPECT_STATUS_GOOD
);

72 
	}
}

	@test-tool/test_preventallow_itnexus_loss.c

19 
	~<°dio.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-suµ‹t.h
"

26 
	~"iscsi-ã°-cu.h
"

29 
	$ã°_¥evíèŒow_ô√xus_loss
()

31 
CHECK_FOR_SBC
;

32 
CHECK_FOR_REMOVABLE
;

34 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

35 
	`loggög
(
LOG_VERBOSE
, "TestÅhat IT-NexusÜoss clears PREVENT MEDIUM REMOVAL");

37 i‡(
sd
->
iscsi_˘x
 =
NULL
) {

38 c⁄° *
îr
 = "[SKIPPED] This PREVENTALLOWÅest is "

40 
	`loggög
(
LOG_NORMAL
, "%s", 
îr
);

41 
	`CU_PASS
(
îr
);

45 
	`loggög
(
LOG_VERBOSE
, "SetÅhe PREVENT flag");

46 
	`PREVENTALLOW
(
sd
, 1);

48 
	`loggög
(
LOG_VERBOSE
, "TryÅoÉjectÅhe medium");

49 
	`STARTSTOPUNIT
(
sd
, 0, 0, 0, 0, 1, 0,

50 
EXPECT_REMOVAL_PREVENTED
);

52 
	`loggög
(
LOG_VERBOSE
, "Verify we can stilláccessÅhe media.");

53 
	`TESTUNITREADY
(
sd
,

54 
EXPECT_STATUS_GOOD
);

56 
	`loggög
(
LOG_VERBOSE
, "Disconnect fromÅheÅarget.");

57 
	`iscsi_de°roy_c⁄ãxt
(
sd
->
iscsi_˘x
);

59 
	`loggög
(
LOG_VERBOSE
, "ReconnectÅoÅarget");

60 
sd
->
iscsi_˘x
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹«me1
, sd->
iscsi_uæ
, &sd->
iscsi_lun
);

61 i‡(
sd
->
iscsi_˘x
 =
NULL
) {

62 
	`loggög
(
LOG_VERBOSE
, "FailedÅoÜoginÅoÅarget");

66 
	`loggög
(
LOG_VERBOSE
, "TryÅoÉjectÅhe medium");

67 
	`STARTSTOPUNIT
(
sd
, 0, 0, 0, 0, 1, 0,

68 
EXPECT_STATUS_GOOD
);

70 
	`loggög
(
LOG_VERBOSE
, "Verify we canÇotáccessÅhe media.");

71 
	`TESTUNITREADY
(
sd
,

72 
EXPECT_NO_MEDIUM
);

74 
	`loggög
(
LOG_VERBOSE
, "LoadÅhe medium");

75 
	`STARTSTOPUNIT
(
sd
, 0, 0, 0, 0, 1, 0,

76 
EXPECT_STATUS_GOOD
);

78 
	`loggög
(
LOG_VERBOSE
, "Clear PREVENTándÜoad medium in caseÅarget failed");

79 
	`loggög
(
LOG_VERBOSE
, "Test we can clear PREVENT flag");

80 
	`PREVENTALLOW
(
sd
, 0);

82 
	`loggög
(
LOG_VERBOSE
, "LoadÅhe medium");

83 
	`STARTSTOPUNIT
(
sd
, 0, 0, 0, 0, 1, 1,

84 
EXPECT_STATUS_GOOD
);

85 
	}
}

	@test-tool/test_preventallow_logout.c

19 
	~<°dio.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-suµ‹t.h
"

26 
	~"iscsi-ã°-cu.h
"

29 
	$ã°_¥evíèŒow_logout
()

31 
CHECK_FOR_SBC
;

32 
CHECK_FOR_REMOVABLE
;

34 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

35 
	`loggög
(
LOG_VERBOSE
, "TestÅhat LogoutÜoss clears PREVENT MEDIUM REMOVAL");

37 i‡(
sd
->
iscsi_˘x
 =
NULL
) {

38 c⁄° *
îr
 = "[SKIPPED] This PREVENTALLOWÅest is "

40 
	`loggög
(
LOG_NORMAL
, "%s", 
îr
);

41 
	`CU_PASS
(
îr
);

45 
	`loggög
(
LOG_VERBOSE
, "SetÅhe PREVENT flag");

46 
	`PREVENTALLOW
(
sd
, 1);

48 
	`loggög
(
LOG_VERBOSE
, "TryÅoÉjectÅhe medium");

49 
	`STARTSTOPUNIT
(
sd
, 0, 0, 0, 0, 1, 0,

50 
EXPECT_REMOVAL_PREVENTED
);

52 
	`loggög
(
LOG_VERBOSE
, "Verify we can stilláccessÅhe media.");

53 
	`TESTUNITREADY
(
sd
,

54 
EXPECT_STATUS_GOOD
);

56 
	`loggög
(
LOG_VERBOSE
, "Logout fromÅarget");

57 
	`iscsi_logout_sync
(
sd
->
iscsi_˘x
);

58 
	`iscsi_de°roy_c⁄ãxt
(
sd
->
iscsi_˘x
);

60 
	`loggög
(
LOG_VERBOSE
, "ReloginÅoÅarget");

61 
sd
->
iscsi_˘x
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹«me1
, sd->
iscsi_uæ
, &sd->
iscsi_lun
);

62 i‡(
sd
->
iscsi_˘x
 =
NULL
) {

63 
	`loggög
(
LOG_VERBOSE
, "FailedÅoÜoginÅoÅarget");

67 
	`loggög
(
LOG_VERBOSE
, "TryÅoÉjectÅhe medium");

68 
	`STARTSTOPUNIT
(
sd
, 0, 0, 0, 0, 1, 0,

69 
EXPECT_STATUS_GOOD
);

71 
	`loggög
(
LOG_VERBOSE
, "Verify we canÇotáccessÅhe media.");

72 
	`TESTUNITREADY
(
sd
,

73 
EXPECT_NO_MEDIUM
);

75 
	`loggög
(
LOG_VERBOSE
, "LoadÅhe medium");

76 
	`STARTSTOPUNIT
(
sd
, 0, 0, 0, 0, 1, 0,

77 
EXPECT_STATUS_GOOD
);

79 
	`loggög
(
LOG_VERBOSE
, "Clear PREVENTándÜoad medium in caseÅarget failed");

80 
	`loggög
(
LOG_VERBOSE
, "Test we can clear PREVENT flag");

81 
	`PREVENTALLOW
(
sd
, 0);

83 
	`loggög
(
LOG_VERBOSE
, "LoadÅhe medium");

84 
	`STARTSTOPUNIT
(
sd
, 0, 0, 0, 0, 1, 1,

85 
EXPECT_STATUS_GOOD
);

86 
	}
}

	@test-tool/test_preventallow_lun_reset.c

19 
	~<°dio.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-suµ‹t.h
"

26 
	~"iscsi-ã°-cu.h
"

29 
	$ã°_¥evíèŒow_lun_ª£t
()

31 
ªt
;

33 
CHECK_FOR_SBC
;

34 
CHECK_FOR_REMOVABLE
;

36 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

37 
	`loggög
(
LOG_VERBOSE
, "TestÅhat Target Warm Reset clears PREVENT MEDIUM REMOVAL");

39 i‡(
sd
->
iscsi_˘x
 =
NULL
) {

40 c⁄° *
îr
 = "[SKIPPED] This PREVENTALLOWÅest is "

42 
	`loggög
(
LOG_NORMAL
, "%s", 
îr
);

43 
	`CU_PASS
(
îr
);

47 
	`loggög
(
LOG_VERBOSE
, "SetÅhe PREVENT flag");

48 
	`PREVENTALLOW
(
sd
, 1);

50 
	`loggög
(
LOG_VERBOSE
, "TryÅoÉjectÅhe medium");

51 
	`STARTSTOPUNIT
(
sd
, 0, 0, 0, 0, 1, 0,

52 
EXPECT_REMOVAL_PREVENTED
);

54 
	`loggög
(
LOG_VERBOSE
, "Verify we can stilláccessÅhe media.");

55 
	`TESTUNITREADY
(
sd
,

56 
EXPECT_STATUS_GOOD
);

58 
	`loggög
(
LOG_VERBOSE
, "Perform LUNÑeset onÅarget");

59 
ªt
 = 
	`iscsi_èsk_mgmt_lun_ª£t_sync
(
sd
->
iscsi_˘x
, sd->
iscsi_lun
);

60 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

61 
	`loggög
(
LOG_VERBOSE
, "Wait untiláll unitáttentions clear");

62 
	`ã°unôªady
(
sd
, 
EXPECT_STATUS_GOOD
) != 0)

66 
	`loggög
(
LOG_VERBOSE
, "TryÅoÉjectÅhe medium");

67 
	`STARTSTOPUNIT
(
sd
, 0, 0, 0, 0, 1, 0,

68 
EXPECT_STATUS_GOOD
);

70 
	`loggög
(
LOG_VERBOSE
, "Verify we canÇotáccessÅhe media.");

71 
	`TESTUNITREADY
(
sd
,

72 
EXPECT_NO_MEDIUM
);

74 
	`loggög
(
LOG_VERBOSE
, "LoadÅhe medium");

75 
	`STARTSTOPUNIT
(
sd
, 0, 0, 0, 0, 1, 0,

76 
EXPECT_STATUS_GOOD
);

78 
	`loggög
(
LOG_VERBOSE
, "Clear PREVENTándÜoad medium in caseÅarget failed");

79 
	`loggög
(
LOG_VERBOSE
, "Test we can clear PREVENT flag");

80 
	`PREVENTALLOW
(
sd
, 0);

82 
	`loggög
(
LOG_VERBOSE
, "LoadÅhe medium");

83 
	`STARTSTOPUNIT
(
sd
, 0, 0, 0, 0, 1, 1,

84 
EXPECT_STATUS_GOOD
);

85 
	}
}

	@test-tool/test_preventallow_simple.c

19 
	~<°dio.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-suµ‹t.h
"

26 
	~"iscsi-ã°-cu.h
"

29 
	$ã°_¥evíèŒow_sim∂e
()

31 
CHECK_FOR_SBC
;

32 
CHECK_FOR_REMOVABLE
;

34 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

35 
	`loggög
(
LOG_VERBOSE
, "Test PREVENTALLOW basics");

37 
	`loggög
(
LOG_VERBOSE
, "Test we can set PREVENT flag");

38 
	`PREVENTALLOW
(
sd
, 1);

40 
	`loggög
(
LOG_VERBOSE
, "Test we can clear PREVENT flag");

41 
	`PREVENTALLOW
(
sd
, 0);

42 
	}
}

	@test-tool/test_preventallow_warm_reset.c

19 
	~<°dio.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-suµ‹t.h
"

26 
	~"iscsi-ã°-cu.h
"

29 
	$ã°_¥evíèŒow_w¨m_ª£t
()

31 
ªt
;

33 
CHECK_FOR_SBC
;

34 
CHECK_FOR_REMOVABLE
;

36 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

37 
	`loggög
(
LOG_VERBOSE
, "TestÅhat Target Warm Reset clears PREVENT MEDIUM REMOVAL");

39 i‡(
sd
->
iscsi_˘x
 =
NULL
) {

40 c⁄° *
îr
 = "[SKIPPED] This PREVENTALLOWÅest is "

42 
	`loggög
(
LOG_NORMAL
, "%s", 
îr
);

43 
	`CU_PASS
(
îr
);

47 
	`loggög
(
LOG_VERBOSE
, "SetÅhe PREVENT flag");

48 
	`PREVENTALLOW
(
sd
, 1);

50 
	`loggög
(
LOG_VERBOSE
, "TryÅoÉjectÅhe medium");

51 
	`STARTSTOPUNIT
(
sd
, 0, 0, 0, 0, 1, 0,

52 
EXPECT_REMOVAL_PREVENTED
);

54 
	`loggög
(
LOG_VERBOSE
, "Verify we can stilláccessÅhe media.");

55 
	`TESTUNITREADY
(
sd
,

56 
EXPECT_STATUS_GOOD
);

58 
	`loggög
(
LOG_VERBOSE
, "Perform warmÑeset onÅarget");

59 
ªt
 = 
	`iscsi_èsk_mgmt_èrgë_w¨m_ª£t_sync
(
sd
->
iscsi_˘x
);

60 i‡(
ªt
 != 0) {

61 c⁄° *
îr
 = "[SKIPPED] Task Management function"

63 
	`loggög
(
LOG_NORMAL
, "%s", 
îr
);

64 
	`CU_PASS
(
îr
);

68 
	`loggög
(
LOG_VERBOSE
, "Wait untiláll unitáttentions clear");

69 
	`ã°unôªady
(
sd
, 
EXPECT_STATUS_GOOD
) != 0)

73 
	`loggög
(
LOG_VERBOSE
, "TryÅoÉjectÅhe medium");

74 
	`STARTSTOPUNIT
(
sd
, 0, 0, 0, 0, 1, 0,

75 
EXPECT_STATUS_GOOD
);

77 
	`loggög
(
LOG_VERBOSE
, "Verify we canÇotáccessÅhe media.");

78 
	`TESTUNITREADY
(
sd
,

79 
EXPECT_NO_MEDIUM
);

81 
	`loggög
(
LOG_VERBOSE
, "LoadÅhe medium");

82 
	`STARTSTOPUNIT
(
sd
, 0, 0, 0, 0, 1, 0,

83 
EXPECT_STATUS_GOOD
);

85 
	`loggög
(
LOG_VERBOSE
, "Clear PREVENTándÜoad medium in caseÅarget failed");

86 
	`loggög
(
LOG_VERBOSE
, "Test we can clear PREVENT flag");

87 
	`PREVENTALLOW
(
sd
, 0);

89 
	`loggög
(
LOG_VERBOSE
, "LoadÅhe medium");

90 
	`STARTSTOPUNIT
(
sd
, 0, 0, 0, 0, 1, 1,

91 
EXPECT_STATUS_GOOD
);

92 
	}
}

	@test-tool/test_prin_read_keys_simple.c

19 
	~<°dio.h
>

20 
	~<¨∑/öë.h
>

22 
	~<CUnô/CUnô.h
>

24 
	~"iscsi.h
"

25 
	~"scsi-lowÀvñ.h
"

26 
	~"iscsi-suµ‹t.h
"

27 
	~"iscsi-ã°-cu.h
"

31 
	$ã°_¥ö_ªad_keys_sim∂e
()

33 
ªt
 = 0;

34 
Æ
;

37 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

38 
	`loggög
(
LOG_VERBOSE
, "Test Persistent Reserve IN READ_KEYS works.");

40 
ªt
 = 
	`¥ö_ªad_keys
(
sd
, &
èsk
, 
NULL
, 16384);

41 i‡(
ªt
 == -2) {

42 
	`CU_PASS
("PERSISTENT RESERVE IN isÇot implemented.");

45 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

47 
	`loggög
(
LOG_VERBOSE
, "Test DATA-IN isátÜeast 8 bytes.");

48 i‡(
èsk
->
d©aö
.
size
 < 8) {

49 
	`loggög
(
LOG_NORMAL
,

54 
	`loggög
(
LOG_VERBOSE
, "Test ADDITIONAL_LENGTH matches DATA_IN size.");

55 
Æ
 = 
	`scsi_gë_uöt32
(&
èsk
->
d©aö
.
d©a
[4]);

56 i‡(
Æ
 !
èsk
->
d©aö
.
size
 - 8) {

57 
	`loggög
(
LOG_NORMAL
,

59 
Æ
, 
èsk
->
d©aö
.
size
 - 8);

62 
	}
}

	@test-tool/test_prin_read_keys_truncate.c

20 
	~<°dio.h
>

21 
	~<¨∑/öë.h
>

23 
	~<CUnô/CUnô.h
>

25 
	~"iscsi.h
"

26 
	~"scsi-lowÀvñ.h
"

27 
	~"iscsi-suµ‹t.h
"

28 
	~"iscsi-ã°-cu.h
"

32 
	$ã°_¥ö_ªad_keys_åunˇã
()

34 c⁄° 
key
 = 
	`ønd_key
();

35 
scsi_≥rsi°ít_ª£rve_ö_ªad_keys
 *
rk
 = 
NULL
;

36 
ªt
;

38 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

39 
	`loggög
(
LOG_VERBOSE
, "Test Persistent Reserve IN READ_KEYS works when "

42 
ªt
 = 
	`¥out_ªgi°î_™d_ign‹e
(
sd
, 
key
);

43 i‡(
ªt
 == -2) {

44 
	`CU_PASS
("PERSISTENT RESERVE OUT isÇot implemented.");

47 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

53 
ªt
 = 
	`¥ö_ªad_keys
(
sd
, &
èsk
, &
rk
, 8);

54 i‡(
ªt
 == -2) {

55 
	`CU_PASS
("PERSISTENT RESERVE IN isÇot implemented.");

56 
	`¥out_ªgi°î_key
(
sd
, 0, 
key
);

59 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

61 i‡(
rk
) {

68 
	`CU_ASSERT_NOT_EQUAL
(
rk
->
addôi⁄Æ_Àngth
, 0);

70 
	`CU_ASSERT_EQUAL
(
rk
->
num_keys
, 0);

74 
ªt
 = 
	`¥out_ªgi°î_key
(
sd
, 0, 
key
);

75 
	`CU_ASSERT_EQUAL
(0, 
ªt
);

76 
	}
}

	@test-tool/test_prin_report_caps.c

19 
	~<°dio.h
>

20 
	~<¨∑/öë.h
>

22 
	~<CUnô/CUnô.h
>

24 
	~"iscsi.h
"

25 
	~"scsi-lowÀvñ.h
"

26 
	~"iscsi-suµ‹t.h
"

27 
	~"iscsi-ã°-cu.h
"

29 
	sã°_¥ö_ªp‹t_ˇps_ty≥s
 {

30 
scsi_≥rsi°ít_ª£rv©i⁄_ty≥_mask
 
	mmask
;

31 
scsi_≥rsi°ít_out_ty≥
 
	m›
;

32 } 
	gªp‹t_ˇps_ty≥s_¨øy
[] = {

33 { 
SCSI_PR_TYPE_MASK_WR_EX_AR
,

34 
SCSI_PERSISTENT_RESERVE_TYPE_WRITE_EXCLUSIVE_ALL_REGISTRANTS
 },

35 { 
SCSI_PR_TYPE_MASK_EX_AC_RO
,

36 
SCSI_PERSISTENT_RESERVE_TYPE_EXCLUSIVE_ACCESS_REGISTRANTS_ONLY
 },

37 { 
SCSI_PR_TYPE_MASK_WR_EX_RO
,

38 
SCSI_PERSISTENT_RESERVE_TYPE_WRITE_EXCLUSIVE_REGISTRANTS_ONLY
 },

39 { 
SCSI_PR_TYPE_MASK_EX_AC
,

40 
SCSI_PERSISTENT_RESERVE_TYPE_EXCLUSIVE_ACCESS
 },

41 { 
SCSI_PR_TYPE_MASK_WR_EX
,

42 
SCSI_PERSISTENT_RESERVE_TYPE_WRITE_EXCLUSIVE
 },

43 { 
SCSI_PR_TYPE_MASK_EX_AC_AR
,

44 
SCSI_PERSISTENT_RESERVE_TYPE_EXCLUSIVE_ACCESS_ALL_REGISTRANTS
 },

49 
	$ã°_¥ö_ªp‹t_ˇps_sim∂e
()

51 
ªt
 = 0;

52 c⁄° 
key
 = 
	`ønd_key
();

53 
scsi_èsk
 *
tsk
;

54 
scsi_≥rsi°ít_ª£rve_ö_ªp‹t_ˇ∑bûôõs
 *
rˇps
 = 
NULL
;

55 
ã°_¥ö_ªp‹t_ˇps_ty≥s
 *
ty≥
;

57 
CHECK_FOR_DATALOSS
;

59 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

60 
	`loggög
(
LOG_VERBOSE
,

64 
ªt
 = 
	`¥out_ªgi°î_™d_ign‹e
(
sd
, 
key
);

65 i‡(
ªt
 == -2) {

66 
	`CU_PASS
("PERSISTENT RESERVE OUT isÇot implemented.");

69 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

71 
ªt
 = 
	`¥ö_ªp‹t_ˇps
(
sd
, &
tsk
, &
rˇps
);

72 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

73 
	`CU_ASSERT_NOT_EQUAL
(
rˇps
, 
NULL
);

75 i‡(!
rˇps
)

78 
	`loggög
(
LOG_VERBOSE
,

80 
	`CU_ASSERT_EQUAL
(
rˇps
->
Àngth
, 8);

81 
	`CU_ASSERT_TRUE
(
rˇps
->
Ælow_comm™ds
 <= 5);

82 
	`CU_ASSERT_EQUAL
(
rˇps
->
≥rsi°ít_ª£rv©i⁄_ty≥_mask


83 & ~
SCSI_PR_TYPE_MASK_ALL
, 0);

85 
ty≥
 = &
ªp‹t_ˇps_ty≥s_¨øy
[0];Åy≥->
mask
 != 0;Åype++) {

86 i‡(!(
rˇps
->
≥rsi°ít_ª£rv©i⁄_ty≥_mask
 & 
ty≥
->
mask
)) {

87 
	`loggög
(
LOG_NORMAL
,

89 
ty≥
->
›
);

93 
	`loggög
(
LOG_VERBOSE
,

95 
ty≥
->
›
);

98 
ªt
 = 
	`¥out_ª£rve
(
sd
, 
key
, 
ty≥
->
›
);

99 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

102 
ªt
 = 
	`¥ö_vîify_ª£rved_as
(
sd
,

103 
	`¥_ty≥_is_Æl_ªgi°ø¡s
(
ty≥
->
›
Ë? 0 : 
key
,

104 
ty≥
->
›
);

105 
	`CU_ASSERT_EQUAL
(0, 
ªt
);

108 
ªt
 = 
	`¥out_ªÀa£
(
sd
, 
key
, 
ty≥
->
›
);

109 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

112 
	`scsi_‰ì_scsi_èsk
(
tsk
);

113 
rˇps
 = 
NULL
;

116 
ªt
 = 
	`¥out_ªgi°î_key
(
sd
, 0, 
key
);

117 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

118 
	}
}

	@test-tool/test_prin_serviceaction_range.c

19 
	~<°dio.h
>

20 
	~<¨∑/öë.h
>

22 
	~<CUnô/CUnô.h
>

24 
	~"iscsi.h
"

25 
	~"scsi-lowÀvñ.h
"

26 
	~"iscsi-suµ‹t.h
"

27 
	~"iscsi-ã°-cu.h
"

31 
	$ã°_¥ö_£rvi˚a˘i⁄_ønge
()

33 
ªt
 = 0;

34 
i
;

37 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

38 
	`loggög
(
LOG_VERBOSE
, "Test Persistent Reserve IN ServiceactionÑange.");

41 
ªt
 = 
	`¥ö_ªad_keys
(
sd
, &
èsk
, 
NULL
, 16384);

42 i‡(
ªt
 == -2) {

43 
	`CU_PASS
("PERSISTENT RESERVE IN isÇot implemented.");

46 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

49 
i
 = 0; i < 4; i++) {

50 
ªt
 = 
	`¥ö_èsk
(
sd
, 
i
, 1);

51 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

55 
i
 = 4; i < 0x20; i++) {

56 
ªt
 = 
	`¥ö_èsk
(
sd
, 
i
, 0);

57 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

59 
	}
}

	@test-tool/test_prout_clear_simple.c

19 
	~<°dio.h
>

20 
	~<¨∑/öë.h
>

22 
	~<CUnô/CUnô.h
>

24 
	~"iscsi.h
"

25 
	~"scsi-lowÀvñ.h
"

26 
	~"iscsi-suµ‹t.h
"

27 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_¥out_˛ór_sim∂e
()

32 
ªt
 = 0;

33 
uöt32_t
 
ﬁd_gí
;

34 c⁄° 
key
 = 
	`ønd_key
();

35 
scsi_èsk
 *
tsk
;

36 
scsi_≥rsi°ít_ª£rve_ö_ªad_keys
 *
rk
 = 
NULL
;

38 
CHECK_FOR_DATALOSS
;

40 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

41 
	`loggög
(
LOG_VERBOSE
, "Test Persistent Reserve OUT CLEAR works.");

44 
ªt
 = 
	`¥out_ªgi°î_™d_ign‹e
(
sd
, 
key
);

45 i‡(
ªt
 == -2) {

46 
	`CU_PASS
("PERSISTENT RESERVE OUT isÇot implemented.");

49 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

51 
ªt
 = 
	`¥ö_ªad_keys
(
sd
, &
tsk
, &
rk
, 16384);

52 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

53 
	`CU_ASSERT_NOT_EQUAL
(
rk
, 
NULL
);

54 i‡(!
rk
)

55 
out
;

57 
	`CU_ASSERT_NOT_EQUAL
(
rk
->
num_keys
, 0);

59 
ﬁd_gí
 = 
rk
->
¥gíî©i⁄
;

61 
	`scsi_‰ì_scsi_èsk
(
tsk
);

62 
rk
 = 
NULL
;

65 
ªt
 = 
	`¥out_ª£rve
(
sd
, 
key
,

66 
SCSI_PERSISTENT_RESERVE_TYPE_EXCLUSIVE_ACCESS
);

67 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

70 
ªt
 = 
	`¥ö_vîify_ª£rved_as
(
sd
, 
key
,

71 
SCSI_PERSISTENT_RESERVE_TYPE_EXCLUSIVE_ACCESS
);

72 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

75 
ªt
 = 
	`¥out_˛ór
(
sd
, 
key
);

76 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

78 
ªt
 = 
	`¥ö_vîify_nŸ_ª£rved
(
sd
);

79 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

81 
ªt
 = 
	`¥ö_ªad_keys
(
sd
, &
tsk
, &
rk
, 16384);

82 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

83 
	`CU_ASSERT_NOT_EQUAL
(
rk
, 
NULL
);

84 i‡(!
rk
)

85 
out
;

87 
	`CU_ASSERT_EQUAL
(
rk
->
num_keys
, 0);

89 
	`CU_ASSERT_EQUAL
(
rk
->
¥gíî©i⁄
, 
ﬁd_gí
 + 1);

91 
out
:

92 
	`scsi_‰ì_scsi_èsk
(
tsk
);

93 
rk
 = 
NULL
;

94 
	}
}

	@test-tool/test_prout_preempt.c

19 
	~<°dio.h
>

20 
	~<¨∑/öë.h
>

22 
	~<CUnô/CUnô.h
>

24 
	~"iscsi.h
"

25 
	~"scsi-lowÀvñ.h
"

26 
	~"iscsi-suµ‹t.h
"

27 
	~"iscsi-ã°-cu.h
"

28 
	~"iscsi-mu…ù©h.h
"

31 
	$ã°_¥out_¥ìm±_rm_ªg
()

33 
ªt
 = 0;

34 c⁄° 
k1
 = 
	`ønd_key
();

35 c⁄° 
k2
 = 
	`ønd_key
();

36 
scsi_devi˚
 *
sd2
;

37 
scsi_èsk
 *
tsk
;

38 
uöt32_t
 
ﬁd_gí
;

39 
num_uas
;

40 
scsi_≥rsi°ít_ª£rve_ö_ªad_keys
 *
rk
;

42 
CHECK_FOR_DATALOSS
;

44 i‡(
sd
->
iscsi_˘x
 =
NULL
) {

45 c⁄° *
îr
 = "[SKIPPED] This PERSISTENT RESERVEÅest is "

47 
	`loggög
(
LOG_NORMAL
, "%s", 
îr
);

48 
	`CU_PASS
(
îr
);

52 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

53 
	`loggög
(
LOG_VERBOSE
, "Test Persistent Reserve IN PREEMPT works.");

55 
ªt
 = 
	`¥out_ªgi°î_™d_ign‹e
(
sd
, 
k1
);

56 i‡(
ªt
 == -2) {

57 
	`CU_PASS
("PERSISTENT RESERVE OUT isÇot implemented.");

60 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

63 
ªt
 = 
	`¥out_˛ór
(
sd
, 
k1
);

64 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

67 
ªt
 = 
	`¥out_ªgi°î_™d_ign‹e
(
sd
, 
k1
);

68 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

70 
ªt
 = 
	`m∑th_sd2_gë_‹_˛⁄e
(
sd
, &
sd2
);

71 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

73 i‡(
ªt
 < 0)

77 
ªt
 = 
	`¥out_ªgi°î_™d_ign‹e
(
sd2
, 
k2
);

78 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

81 
ªt
 = 
	`¥ö_ªad_keys
(
sd
, &
tsk
, &
rk
, 16384);

82 
	`CU_ASSERT_EQUAL_FATAL
(
ªt
, 0);

84 
	`CU_ASSERT_EQUAL
(
rk
->
num_keys
, 2);

86 
ﬁd_gí
 = 
rk
->
¥gíî©i⁄
;

88 
	`scsi_‰ì_scsi_èsk
(
tsk
);

89 
rk
 = 
NULL
;

92 
ªt
 = 
	`¥out_¥ìm±
(
sd2
, 
k1
, 
k2
,

93 
SCSI_PERSISTENT_RESERVE_TYPE_EXCLUSIVE_ACCESS
);

94 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

97 
ªt
 = 
	`ã°_iscsi_tur_u¡û_good
(
sd
, &
num_uas
);

98 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

99 
ªt
 = 
	`ã°_iscsi_tur_u¡û_good
(
sd2
, &
num_uas
);

100 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

102 
ªt
 = 
	`¥ö_ªad_keys
(
sd
, &
tsk
, &
rk
, 16384);

103 
	`CU_ASSERT_EQUAL_FATAL
(
ªt
, 0);

105 
	`CU_ASSERT_EQUAL
(
rk
->
num_keys
, 1);

107 
	`CU_ASSERT_EQUAL
(
rk
->
¥gíî©i⁄
, 
ﬁd_gí
 + 1);

109 
	`CU_ASSERT_EQUAL
(
rk
->
keys
[0], 
k2
);

112 
ªt
 = 
	`¥out_ªgi°î_key
(
sd2
, 0, 
k2
);

113 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

114 
	}
}

	@test-tool/test_prout_register_simple.c

19 
	~<°dio.h
>

20 
	~<¨∑/öë.h
>

22 
	~<CUnô/CUnô.h
>

24 
	~"iscsi.h
"

25 
	~"scsi-lowÀvñ.h
"

26 
	~"iscsi-suµ‹t.h
"

27 
	~"iscsi-ã°-cu.h
"

31 
	$ã°_¥out_ªgi°î_sim∂e
()

33 c⁄° 
key
 = 
	`ønd_key
();

34 
ªt
 = 0;

37 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

38 
	`loggög
(
LOG_VERBOSE
, "Test Persistent Reserve IN REGISTER works.");

41 
ªt
 = 
	`¥out_ªgi°î_™d_ign‹e
(
sd
, 
key
);

42 i‡(
ªt
 == -2) {

43 
	`CU_PASS
("PERSISTENT RESERVE OUT isÇot implemented.");

46 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

49 
ªt
 = 
	`¥ö_vîify_key_¥e£n˚
(
sd
, 
key
, 1);

50 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

53 
ªt
 = 
	`¥out_ªªgi°î_key_Áûs
(
sd
, 
key
+1);

54 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

57 
ªt
 = 
	`¥out_ªgi°î_key
(
sd
, 0, 
key
);

58 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

61 
ªt
 = 
	`¥ö_vîify_key_¥e£n˚
(
sd
, 
key
, 0);

62 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

63 
	}
}

	@test-tool/test_prout_reserve_access.c

19 
	~<°dio.h
>

20 
	~<¨∑/öë.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-ã°-cu.h
"

26 
	~"iscsi-mu…ù©h.h
"

29 
	$vîify_≥rsi°ít_ª£rve_ac˚ss
(
scsi_devi˚
 *
sd1
, scsi_devi˚ *
sd2
,

30 c⁄° 
scsi_≥rsi°ít_out_ty≥
 
¥_ty≥
,

31 
ªg_i2_ˇn_ªad
,

32 
ªg_i2_ˇn_wrôe
,

33 
uƒeg_i2_ˇn_ªad
,

34 
uƒeg_i2_ˇn_wrôe
)

36 
ªt
;

37 c⁄° 
key
 = 
	`ønd_key
();

38 c⁄° 
key2
 = 
	`ønd_key
();

41 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

42 
	`loggög
(
LOG_VERBOSE
,

44 
	`scsi_¥_ty≥_°r
(
¥_ty≥
));

47 (Ë
	`ã°unôªady_˛ór_ua
(
sd1
);

48 (Ë
	`ã°unôªady_˛ór_ua
(
sd2
);

51 
ªt
 = 
	`¥out_ªgi°î_™d_ign‹e
(
sd1
, 
key
);

52 i‡(
ªt
 == -2) {

53 
	`CU_PASS
("PERSISTENT RESERVE OUT isÇot implemented.");

56 
	`CU_ASSERT_EQUAL
(0, 
ªt
);

57 
ªt
 = 
	`¥out_ªgi°î_™d_ign‹e
(
sd2
, 
key2
);

58 
	`CU_ASSERT_EQUAL
(0, 
ªt
);

61 
ªt
 = 
	`¥out_ª£rve
(
sd1
, 
key
, 
¥_ty≥
);

62 
	`CU_ASSERT_EQUAL
(0, 
ªt
);

65 
ªt
 = 
	`¥ö_vîify_ª£rved_as
(
sd1
,

66 
	`¥_ty≥_is_Æl_ªgi°ø¡s
(
¥_ty≥
Ë? 0 : 
key
,

67 
¥_ty≥
);

68 
	`CU_ASSERT_EQUAL
(0, 
ªt
);

70 
	`CU_ASSERT_PTR_NOT_NULL_FATAL
(
s¸©ch
);

73 
ªt
 = 
	`vîify_ªad_w‹ks
(
sd1
, 
s¸©ch
);

74 
	`CU_ASSERT_EQUAL
(0, 
ªt
);

77 
ªt
 = 
	`vîify_wrôe_w‹ks
(
sd1
, 
s¸©ch
);

78 
	`CU_ASSERT_EQUAL
(0, 
ªt
);

81 i‡(
ªg_i2_ˇn_ªad
)

82 
ªt
 = 
	`vîify_ªad_w‹ks
(
sd2
, 
s¸©ch
);

84 
ªt
 = 
	`vîify_ªad_Áûs
(
sd2
, 
s¸©ch
);

85 
	`CU_ASSERT_EQUAL
(0, 
ªt
);

88 i‡(
ªg_i2_ˇn_wrôe
)

89 
ªt
 = 
	`vîify_wrôe_w‹ks
(
sd2
, 
s¸©ch
);

91 
ªt
 = 
	`vîify_wrôe_Áûs
(
sd2
, 
s¸©ch
);

92 
	`CU_ASSERT_EQUAL
(0, 
ªt
);

95 
ªt
 = 
	`¥out_ªgi°î_key
(
sd2
, 0, 
key2
);

96 
	`CU_ASSERT_EQUAL
(0, 
ªt
);

99 i‡(
uƒeg_i2_ˇn_ªad
)

100 
ªt
 = 
	`vîify_ªad_w‹ks
(
sd2
, 
s¸©ch
);

102 
ªt
 = 
	`vîify_ªad_Áûs
(
sd2
, 
s¸©ch
);

103 
	`CU_ASSERT_EQUAL
(0, 
ªt
);

106 i‡(
uƒeg_i2_ˇn_wrôe
)

107 
ªt
 = 
	`vîify_wrôe_w‹ks
(
sd2
, 
s¸©ch
);

109 
ªt
 = 
	`vîify_wrôe_Áûs
(
sd2
, 
s¸©ch
);

110 
	`CU_ASSERT_EQUAL
(0, 
ªt
);

113 
ªt
 = 
	`¥out_ªÀa£
(
sd1
, 
key
, 
¥_ty≥
);

114 
	`CU_ASSERT_EQUAL
(0, 
ªt
);

117 
ªt
 = 
	`¥out_ªgi°î_key
(
sd1
, 0, 
key
);

118 
	`CU_ASSERT_EQUAL
(0, 
ªt
);

119 
	}
}

122 
	$ã°_¥out_ª£rve_ac˚ss_ó
()

124 
scsi_devi˚
 *
sd2
;

125 
ªt
;

127 i‡(
sd
->
iscsi_˘x
 =
NULL
) {

128 c⁄° *
îr
 = "[SKIPPED] This PERSISTENT RESERVEÅest is "

130 
	`loggög
(
LOG_NORMAL
, "%s", 
îr
);

131 
	`CU_PASS
(
îr
);

135 
ªt
 = 
	`m∑th_sd2_gë_‹_˛⁄e
(
sd
, &
sd2
);

136 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

137 i‡(
ªt
 < 0)

139 
	`vîify_≥rsi°ít_ª£rve_ac˚ss
(
sd
, 
sd2
,

140 
SCSI_PERSISTENT_RESERVE_TYPE_EXCLUSIVE_ACCESS
,

142 
	`m∑th_sd2_put
(
sd2
);

143 
	}
}

146 
	$ã°_¥out_ª£rve_ac˚ss_we
()

148 
scsi_devi˚
 *
sd2
;

149 
ªt
;

151 i‡(
sd
->
iscsi_˘x
 =
NULL
) {

152 c⁄° *
îr
 = "[SKIPPED] This PERSISTENT RESERVEÅest is "

154 
	`loggög
(
LOG_NORMAL
, "%s", 
îr
);

155 
	`CU_PASS
(
îr
);

159 
ªt
 = 
	`m∑th_sd2_gë_‹_˛⁄e
(
sd
, &
sd2
);

160 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

161 i‡(
ªt
 < 0)

163 
	`vîify_≥rsi°ít_ª£rve_ac˚ss
(
sd
, 
sd2
,

164 
SCSI_PERSISTENT_RESERVE_TYPE_WRITE_EXCLUSIVE
,

166 
	`m∑th_sd2_put
(
sd2
);

167 
	}
}

170 
	$ã°_¥out_ª£rve_ac˚ss_óro
()

172 
scsi_devi˚
 *
sd2
;

173 
ªt
;

175 i‡(
sd
->
iscsi_˘x
 =
NULL
) {

176 c⁄° *
îr
 = "[SKIPPED] This PERSISTENT RESERVEÅest is "

178 
	`loggög
(
LOG_NORMAL
, "%s", 
îr
);

179 
	`CU_PASS
(
îr
);

183 
ªt
 = 
	`m∑th_sd2_gë_‹_˛⁄e
(
sd
, &
sd2
);

184 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

185 i‡(
ªt
 < 0)

187 
	`vîify_≥rsi°ít_ª£rve_ac˚ss
(
sd
, 
sd2
,

188 
SCSI_PERSISTENT_RESERVE_TYPE_EXCLUSIVE_ACCESS_REGISTRANTS_ONLY
,

190 
	`m∑th_sd2_put
(
sd2
);

191 
	}
}

194 
	$ã°_¥out_ª£rve_ac˚ss_wîo
()

196 
scsi_devi˚
 *
sd2
;

197 
ªt
;

199 i‡(
sd
->
iscsi_˘x
 =
NULL
) {

200 c⁄° *
îr
 = "[SKIPPED] This PERSISTENT RESERVEÅest is "

202 
	`loggög
(
LOG_NORMAL
, "%s", 
îr
);

203 
	`CU_PASS
(
îr
);

207 
ªt
 = 
	`m∑th_sd2_gë_‹_˛⁄e
(
sd
, &
sd2
);

208 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

209 i‡(
ªt
 < 0)

211 
	`vîify_≥rsi°ít_ª£rve_ac˚ss
(
sd
, 
sd2
,

212 
SCSI_PERSISTENT_RESERVE_TYPE_WRITE_EXCLUSIVE_REGISTRANTS_ONLY
,

214 
	`m∑th_sd2_put
(
sd2
);

215 
	}
}

218 
	$ã°_¥out_ª£rve_ac˚ss_ó¨
()

220 
scsi_devi˚
 *
sd2
;

221 
ªt
;

223 i‡(
sd
->
iscsi_˘x
 =
NULL
) {

224 c⁄° *
îr
 = "[SKIPPED] This PERSISTENT RESERVEÅest is "

226 
	`loggög
(
LOG_NORMAL
, "%s", 
îr
);

227 
	`CU_PASS
(
îr
);

231 
ªt
 = 
	`m∑th_sd2_gë_‹_˛⁄e
(
sd
, &
sd2
);

232 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

233 i‡(
ªt
 < 0)

235 
	`vîify_≥rsi°ít_ª£rve_ac˚ss
(
sd
, 
sd2
,

236 
SCSI_PERSISTENT_RESERVE_TYPE_EXCLUSIVE_ACCESS_ALL_REGISTRANTS
,

238 
	`m∑th_sd2_put
(
sd2
);

239 
	}
}

242 
	$ã°_¥out_ª£rve_ac˚ss_wór
()

244 
scsi_devi˚
 *
sd2
;

245 
ªt
;

247 i‡(
sd
->
iscsi_˘x
 =
NULL
) {

248 c⁄° *
îr
 = "[SKIPPED] This PERSISTENT RESERVEÅest is "

250 
	`loggög
(
LOG_NORMAL
, "%s", 
îr
);

251 
	`CU_PASS
(
îr
);

255 
ªt
 = 
	`m∑th_sd2_gë_‹_˛⁄e
(
sd
, &
sd2
);

256 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

257 i‡(
ªt
 < 0)

259 
	`vîify_≥rsi°ít_ª£rve_ac˚ss
(
sd
, 
sd2
,

260 
SCSI_PERSISTENT_RESERVE_TYPE_WRITE_EXCLUSIVE_ALL_REGISTRANTS
,

262 
	`m∑th_sd2_put
(
sd2
);

263 
	}
}

	@test-tool/test_prout_reserve_ownership.c

19 
	~<°dio.h
>

20 
	~<¨∑/öë.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-ã°-cu.h
"

26 
	~"iscsi-mu…ù©h.h
"

29 
	$vîify_≥rsi°ít_ª£rve_ow√rshù
(
scsi_devi˚
 *
sd1
, scsi_devi˚ *
sd2
,

30 c⁄° 
scsi_≥rsi°ít_out_ty≥
 
¥_ty≥
,

31 
ªsvn_is_sh¨ed
)

33 
ªt
;

34 c⁄° 
key1
 = 
	`ønd_key
();

35 c⁄° 
key2
 = 
	`ønd_key
();

38 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

39 
	`loggög
(
LOG_VERBOSE
,

41 
	`scsi_¥_ty≥_°r
(
¥_ty≥
));

44 (Ë
	`ã°unôªady_˛ór_ua
(
sd1
);

45 (Ë
	`ã°unôªady_˛ór_ua
(
sd2
);

48 
ªt
 = 
	`¥out_ªgi°î_™d_ign‹e
(
sd1
, 
key1
);

49 i‡(
ªt
 == -2) {

50 
	`CU_PASS
("PERSISTENT RESERVE OUT isÇot implemented.");

53 
	`CU_ASSERT_EQUAL
(0, 
ªt
);

54 
ªt
 = 
	`¥out_ªgi°î_™d_ign‹e
(
sd2
, 
key2
);

55 
	`CU_ASSERT_EQUAL
(0, 
ªt
);

58 
ªt
 = 
	`¥out_ª£rve
(
sd1
, 
key1
, 
¥_ty≥
);

59 
	`CU_ASSERT_EQUAL
(0, 
ªt
);

62 
ªt
 = 
	`¥ö_vîify_ª£rved_as
(
sd1
,

63 
	`¥_ty≥_is_Æl_ªgi°ø¡s
(
¥_ty≥
Ë? 0 : 
key1
,

64 
¥_ty≥
);

65 
	`CU_ASSERT_EQUAL
(0, 
ªt
);

68 
ªt
 = 
	`¥out_ªgi°î_key
(
sd1
, 0, 
key1
);

69 
	`CU_ASSERT_EQUAL
(0, 
ªt
);

72 i‡(
ªsvn_is_sh¨ed
) {

74 
ªt
 = 
	`¥ö_vîify_ª£rved_as
(
sd1
,

75 
	`¥_ty≥_is_Æl_ªgi°ø¡s
(
¥_ty≥
Ë? 0 : 
key1
,

76 
¥_ty≥
);

77 
	`CU_ASSERT_EQUAL
(0, 
ªt
);

80 
ªt
 = 
	`¥out_ªÀa£
(
sd2
, 
key2
, 
¥_ty≥
);

81 
	`CU_ASSERT_EQUAL
(0, 
ªt
);

84 
ªt
 = 
	`¥ö_vîify_nŸ_ª£rved
(
sd1
);

85 
	`CU_ASSERT_EQUAL
(0, 
ªt
);

88 (Ë
	`ã°unôªady_˛ór_ua
(
sd2
);

92 
ªt
 = 
	`¥out_ªgi°î_key
(
sd2
, 0, 
key2
);

93 
	`CU_ASSERT_EQUAL
(0, 
ªt
);

94 
	}
}

97 
	$ã°_¥out_ª£rve_ow√rshù_ó
()

99 
scsi_devi˚
 *
sd2
;

100 
ªt
;

102 i‡(
sd
->
iscsi_˘x
 =
NULL
) {

103 c⁄° *
îr
 = "[SKIPPED] This PERSISTENT RESERVEÅest is "

105 
	`loggög
(
LOG_NORMAL
, "%s", 
îr
);

106 
	`CU_PASS
(
îr
);

110 
ªt
 = 
	`m∑th_sd2_gë_‹_˛⁄e
(
sd
, &
sd2
);

111 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

112 i‡(
ªt
 < 0)

114 
	`vîify_≥rsi°ít_ª£rve_ow√rshù
(
sd
, 
sd2
,

115 
SCSI_PERSISTENT_RESERVE_TYPE_EXCLUSIVE_ACCESS
, 0);

116 
	`m∑th_sd2_put
(
sd2
);

117 
	}
}

120 
	$ã°_¥out_ª£rve_ow√rshù_we
()

122 
scsi_devi˚
 *
sd2
;

123 
ªt
;

125 i‡(
sd
->
iscsi_˘x
 =
NULL
) {

126 c⁄° *
îr
 = "[SKIPPED] This PERSISTENT RESERVEÅest is "

128 
	`loggög
(
LOG_NORMAL
, "%s", 
îr
);

129 
	`CU_PASS
(
îr
);

133 
ªt
 = 
	`m∑th_sd2_gë_‹_˛⁄e
(
sd
, &
sd2
);

134 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

135 i‡(
ªt
 < 0)

137 
	`vîify_≥rsi°ít_ª£rve_ow√rshù
(
sd
, 
sd2
,

138 
SCSI_PERSISTENT_RESERVE_TYPE_WRITE_EXCLUSIVE
, 0);

139 
	`m∑th_sd2_put
(
sd2
);

140 
	}
}

143 
	$ã°_¥out_ª£rve_ow√rshù_óro
()

145 
scsi_devi˚
 *
sd2
;

146 
ªt
;

148 i‡(
sd
->
iscsi_˘x
 =
NULL
) {

149 c⁄° *
îr
 = "[SKIPPED] This PERSISTENT RESERVEÅest is "

151 
	`loggög
(
LOG_NORMAL
, "%s", 
îr
);

152 
	`CU_PASS
(
îr
);

156 
ªt
 = 
	`m∑th_sd2_gë_‹_˛⁄e
(
sd
, &
sd2
);

157 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

158 i‡(
ªt
 < 0)

160 
	`vîify_≥rsi°ít_ª£rve_ow√rshù
(
sd
, 
sd2
,

161 
SCSI_PERSISTENT_RESERVE_TYPE_EXCLUSIVE_ACCESS_REGISTRANTS_ONLY
, 0);

162 
	`m∑th_sd2_put
(
sd2
);

163 
	}
}

166 
	$ã°_¥out_ª£rve_ow√rshù_wîo
()

168 
scsi_devi˚
 *
sd2
;

169 
ªt
;

171 i‡(
sd
->
iscsi_˘x
 =
NULL
) {

172 c⁄° *
îr
 = "[SKIPPED] This PERSISTENT RESERVEÅest is "

174 
	`loggög
(
LOG_NORMAL
, "%s", 
îr
);

175 
	`CU_PASS
(
îr
);

179 
ªt
 = 
	`m∑th_sd2_gë_‹_˛⁄e
(
sd
, &
sd2
);

180 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

181 i‡(
ªt
 < 0)

183 
	`vîify_≥rsi°ít_ª£rve_ow√rshù
(
sd
, 
sd2
,

184 
SCSI_PERSISTENT_RESERVE_TYPE_WRITE_EXCLUSIVE_REGISTRANTS_ONLY
, 0);

185 
	`m∑th_sd2_put
(
sd2
);

186 
	}
}

189 
	$ã°_¥out_ª£rve_ow√rshù_ó¨
()

191 
scsi_devi˚
 *
sd2
;

192 
ªt
;

194 i‡(
sd
->
iscsi_˘x
 =
NULL
) {

195 c⁄° *
îr
 = "[SKIPPED] This PERSISTENT RESERVEÅest is "

197 
	`loggög
(
LOG_NORMAL
, "%s", 
îr
);

198 
	`CU_PASS
(
îr
);

202 
ªt
 = 
	`m∑th_sd2_gë_‹_˛⁄e
(
sd
, &
sd2
);

203 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

204 i‡(
ªt
 < 0)

206 
	`vîify_≥rsi°ít_ª£rve_ow√rshù
(
sd
, 
sd2
,

207 
SCSI_PERSISTENT_RESERVE_TYPE_EXCLUSIVE_ACCESS_ALL_REGISTRANTS
, 1);

208 
	`m∑th_sd2_put
(
sd2
);

209 
	}
}

212 
	$ã°_¥out_ª£rve_ow√rshù_wór
()

214 
scsi_devi˚
 *
sd2
;

215 
ªt
;

217 i‡(
sd
->
iscsi_˘x
 =
NULL
) {

218 c⁄° *
îr
 = "[SKIPPED] This PERSISTENT RESERVEÅest is "

220 
	`loggög
(
LOG_NORMAL
, "%s", 
îr
);

221 
	`CU_PASS
(
îr
);

225 
ªt
 = 
	`m∑th_sd2_gë_‹_˛⁄e
(
sd
, &
sd2
);

226 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

227 i‡(
ªt
 < 0)

229 
	`vîify_≥rsi°ít_ª£rve_ow√rshù
(
sd
, 
sd2
,

230 
SCSI_PERSISTENT_RESERVE_TYPE_WRITE_EXCLUSIVE_ALL_REGISTRANTS
, 1);

231 
	`m∑th_sd2_put
(
sd2
);

232 
	}
}

	@test-tool/test_prout_reserve_simple.c

19 
	~<°dio.h
>

20 
	~<¨∑/öë.h
>

22 
	~<CUnô/CUnô.h
>

24 
	~"iscsi.h
"

25 
	~"scsi-lowÀvñ.h
"

26 
	~"iscsi-suµ‹t.h
"

27 
	~"iscsi-ã°-cu.h
"

33 
scsi_≥rsi°ít_out_ty≥
 
	g¥_ty≥s_to_ã°
[] = {

34 
SCSI_PERSISTENT_RESERVE_TYPE_WRITE_EXCLUSIVE
,

35 
SCSI_PERSISTENT_RESERVE_TYPE_EXCLUSIVE_ACCESS
,

36 
SCSI_PERSISTENT_RESERVE_TYPE_WRITE_EXCLUSIVE_REGISTRANTS_ONLY
,

37 
SCSI_PERSISTENT_RESERVE_TYPE_EXCLUSIVE_ACCESS_REGISTRANTS_ONLY
,

38 
SCSI_PERSISTENT_RESERVE_TYPE_WRITE_EXCLUSIVE_ALL_REGISTRANTS
,

39 
SCSI_PERSISTENT_RESERVE_TYPE_EXCLUSIVE_ACCESS_ALL_REGISTRANTS
,

45 
	$ã°_¥out_ª£rve_sim∂e
()

47 
ªt
 = 0;

48 
i
;

49 c⁄° 
key
 = 
	`ønd_key
();

52 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

53 
	`loggög
(
LOG_VERBOSE
, "Test Persistent Reserve IN RESERVE works.");

56 
ªt
 = 
	`¥out_ªgi°î_™d_ign‹e
(
sd
, 
key
);

57 i‡(
ªt
 == -2) {

58 
	`CU_PASS
("PERSISTENT RESERVE OUT isÇot implemented.");

61 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

64 
i
 = 0; 
¥_ty≥s_to_ã°
[i] != 0; i++) {

65 
scsi_≥rsi°ít_out_ty≥
 
¥_ty≥
 = 
¥_ty≥s_to_ã°
[
i
];

68 
ªt
 = 
	`¥out_ª£rve
(
sd
, 
key
, 
¥_ty≥
);

69 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

72 
ªt
 = 
	`¥ö_vîify_ª£rved_as
(
sd
,

73 
	`¥_ty≥_is_Æl_ªgi°ø¡s
(
¥_ty≥
Ë? 0 : 
key
,

74 
¥_ty≥
);

75 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

78 
ªt
 = 
	`¥out_ªÀa£
(
sd
, 
key
, 
¥_ty≥
);

79 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

83 
ªt
 = 
	`¥out_ªgi°î_key
(
sd
, 0, 
key
);

84 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

86 
	}
}

	@test-tool/test_read10_0blocks.c

19 
	~<°dio.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-ã°-cu.h
"

28 
	$ã°_ªad10_0blocks
()

30 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

31 
	`loggög
(
LOG_VERBOSE
, "Test READ10 0-blocksát LBA==0");

33 
	`READ10
(
sd
, 
NULL
, 0, 0, 
block_size
, 0, 0, 0, 0, 0, NULL,

34 
EXPECT_STATUS_GOOD
);

36 i‡(
num_blocks
 > 0x80000000) {

37 
	`CU_PASS
("[SKIPPED] LUN isÅoo big");

41 
	`loggög
(
LOG_VERBOSE
, "Test READ10 0-blocks one blockÖastÉnd-of-LUN");

42 
	`READ10
(
sd
, 
NULL
, 
num_blocks
 + 1, 0, 
block_size
, 0, 0, 0, 0, 0, NULL,

43 
EXPECT_LBA_OOB
);

45 
	`loggög
(
LOG_VERBOSE
, "Test READ10 0-blocksát LBA==2^31");

46 
	`READ10
(
sd
, 
NULL
, 0x80000000, 0, 
block_size
, 0, 0, 0, 0, 0, NULL,

47 
EXPECT_LBA_OOB
);

49 
	`loggög
(
LOG_VERBOSE
, "Test READ10 0-blocksát LBA==-1");

50 
	`READ10
(
sd
, 
NULL
, -1, 0, 
block_size
, 0, 0, 0, 0, 0, NULL,

51 
EXPECT_LBA_OOB
);

52 
	}
}

	@test-tool/test_read10_beyond_eol.c

19 
	~<°dio.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-ã°-cu.h
"

29 
	$ã°_ªad10_bey⁄d_eﬁ
()

31 
i
;

33 i‡(
num_blocks
 >= 0x80000000) {

34 
	`CU_PASS
("LUN isÅoo big forÑead-beyond-eolÅests with READ10. SkippingÅest.\n");

38 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

39 
	`loggög
(
LOG_VERBOSE
, "Test READ10 1-256 blocks one block beyondÅheÉnd");

40 
i
 = 1; i <= 256; i++) {

41 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

44 
	`READ10
(
sd
, 
NULL
, 
num_blocks
 + 1 - 
i
,

45 
i
 * 
block_size
, block_size, 0, 0, 0, 0, 0, 
NULL
,

46 
EXPECT_LBA_OOB
);

49 
	`loggög
(
LOG_VERBOSE
, "Test READ10 1-256 blocksát LBA==2^31");

50 
i
 = 1; i <= 256; i++) {

51 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

54 
	`READ10
(
sd
, 
NULL
, 0x80000000,

55 
i
 * 
block_size
, block_size, 0, 0, 0, 0, 0, 
NULL
,

56 
EXPECT_LBA_OOB
);

59 
	`loggög
(
LOG_VERBOSE
, "Test READ10 1-256 blocksát LBA==-1");

60 
i
 = 1; i <= 256; i++) {

61 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

64 
	`READ10
(
sd
, 
NULL
, -1, 
i
 * 
block_size
,

65 
block_size
, 0, 0, 0, 0, 0, 
NULL
,

66 
EXPECT_LBA_OOB
);

69 
	`loggög
(
LOG_VERBOSE
, "Test READ10 2-256 blocksáll but one block beyondÅheÉnd");

70 
i
 = 2; i <= 256; i++) {

71 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

74 
	`READ10
(
sd
, 
NULL
, 
num_blocks
 - 1,

75 
i
 * 
block_size
, block_size, 0, 0, 0, 0, 0, 
NULL
,

76 
EXPECT_LBA_OOB
);

78 
	}
}

	@test-tool/test_read10_dpofua.c

19 
	~<°dio.h
>

20 
	~<°dlib.h
>

21 
	~<°rög.h
>

23 
	~<CUnô/CUnô.h
>

25 
	~"iscsi.h
"

26 
	~"scsi-lowÀvñ.h
"

27 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_ªad10_dpofua
()

32 
dpofua
, 
ußge_d©a_dpofua
;

33 
scsi_èsk
 *
ms_èsk
 = 
NULL
;

34 
scsi_mode_£n£
 *
ms
;

35 
scsi_èsk
 *
rso_èsk
 = 
NULL
;

36 
scsi_ªp‹t_suµ‹ãd_›_codes_⁄e_comm™d
 *
rsoc
;

38 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

39 
	`loggög
(
LOG_VERBOSE
, "Test READ10 DPO/FUA flags");

41 
CHECK_FOR_SBC
;

43 
	`loggög
(
LOG_VERBOSE
, "ReadÅhe DPOFUA flag from mode sense data");

44 
	`MODESENSE6
(
sd
, &
ms_èsk
, 0, 
SCSI_MODESENSE_PC_CURRENT
,

45 
SCSI_MODEPAGE_RETURN_ALL_PAGES
, 0, 255,

46 
EXPECT_STATUS_GOOD
);

48 
	`loggög
(
LOG_VERBOSE
, "[SUCCESS] Mode senseÑeturned status GOOD");

49 
ms
 = 
	`scsi_d©aö_unm¨shÆl
(
ms_èsk
);

50 
dpofua
 = 
ms
 && (ms->
devi˚_•ecific_∑ømëî
 & 0x10);

51 
	`scsi_‰ì_scsi_èsk
(
ms_èsk
);

53 i‡(
dpofua
) {

54 
	`loggög
(
LOG_VERBOSE
, "DPOFUA flag is set. Device shouldállow "

57 
	`loggög
(
LOG_VERBOSE
, "DPOFUA flag is clear. Device should fail "

61 
	`loggög
(
LOG_VERBOSE
, "Test READ10 with DPO==1");

62 i‡(
dpofua
) {

63 
	`READ10
(
sd
, 
NULL
, 0,

64 
block_size
, block_size, 0, 1, 0, 0, 0, 
NULL
,

65 
EXPECT_STATUS_GOOD
);

67 
	`READ10
(
sd
, 
NULL
, 0,

68 
block_size
, block_size, 0, 1, 0, 0, 0, 
NULL
,

69 
EXPECT_INVALID_FIELD_IN_CDB
);

72 
	`loggög
(
LOG_VERBOSE
, "Test READ10 with FUA==1");

73 i‡(
dpofua
) {

74 
	`READ10
(
sd
, 
NULL
, 0,

75 
block_size
, block_size, 0, 0, 1, 0, 0, 
NULL
,

76 
EXPECT_STATUS_GOOD
);

78 
	`READ10
(
sd
, 
NULL
, 0,

79 
block_size
, block_size, 0, 0, 1, 0, 0, 
NULL
,

80 
EXPECT_INVALID_FIELD_IN_CDB
);

83 
	`loggög
(
LOG_VERBOSE
, "Test READ10 with DPO==1 FUA==1");

84 i‡(
dpofua
) {

85 
	`READ10
(
sd
, 
NULL
, 0,

86 
block_size
, block_size, 0, 1, 1, 0, 0, 
NULL
,

87 
EXPECT_STATUS_GOOD
);

89 
	`READ10
(
sd
, 
NULL
, 0,

90 
block_size
, block_size, 0, 1, 1, 0, 0, 
NULL
,

91 
EXPECT_INVALID_FIELD_IN_CDB
);

95 
	`loggög
(
LOG_VERBOSE
, "Try fetching REPORT_SUPPORTED_OPCODES "

97 
	`REPORT_SUPPORTED_OPCODES
(
sd
, &
rso_èsk
,

98 0, 
SCSI_REPORT_SUPPORTING_OPCODE
,

99 
SCSI_OPCODE_READ10
,

102 
EXPECT_STATUS_GOOD
);

103 
	`loggög
(
LOG_VERBOSE
, "UnmarshallÅhe DATA-IN buffer");

104 
rsoc
 = 
	`scsi_d©aö_unm¨shÆl
(
rso_èsk
);

105 
	`CU_ASSERT_PTR_NOT_NULL_FATAL
(
rsoc
);

107 
ußge_d©a_dpofua
 = 
rsoc
->
cdb_ußge_d©a
[1] & 0x18;

108 i‡(
dpofua
) {

109 
	`loggög
(
LOG_VERBOSE
, "DPOFUA is set. VerifyÅhe "

111 i‡(!
ußge_d©a_dpofua
) {

112 
	`loggög
(
LOG_NORMAL
, "[FAILED] DpoFuaÇot set "

114 
	`CU_FAIL
("DpoFuaÇot set in CDB_USAGE_DATE");

117 
	`loggög
(
LOG_VERBOSE
, "DPOFUA is clear. VerifyÅhe "

119 i‡(
ußge_d©a_dpofua
) {

120 
	`loggög
(
LOG_NORMAL
, "[FAILED] DpoFuaÇot clear "

122 
	`CU_FAIL
("DpoFuaÇot clear in CDB_USAGE_DATE");

126 
	`scsi_‰ì_scsi_èsk
(
rso_èsk
);

127 
	}
}

	@test-tool/test_read10_invalid.c

19 
	~<°dio.h
>

20 
	~<°dlib.h
>

21 
	~<°rög.h
>

22 
	~<°dlib.h
>

24 
	~<CUnô/CUnô.h
>

26 
	~"iscsi.h
"

27 
	~"iscsi-¥iv©e.h
"

28 
	~"scsi-lowÀvñ.h
"

29 
	~"iscsi-ã°-cu.h
"

33 
	$ã°_ªad10_övÆid
()

35 
iscsi_d©a
 
d©a
;

36 
scsi_èsk
 *
èsk_ªt
;

38 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

39 
	`loggög
(
LOG_VERBOSE
, "Test invalid READ10 commands");

40 
	`loggög
(
LOG_VERBOSE
, "Block sizêi†%zu", 
block_size
);

42 i‡(
sd
->
iscsi_˘x
 =
NULL
) {

43 c⁄° *
îr
 = "[SKIPPED] This READ10Åest is only "

45 
	`loggög
(
LOG_NORMAL
, "%s", 
îr
);

46 
	`CU_PASS
(
îr
);

51 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

52 
	`CU_ASSERT_PTR_NOT_NULL_FATAL
(
èsk
);

54 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

55 
èsk
->
cdb
[0] = 
SCSI_OPCODE_READ10
;

56 
èsk
->
cdb
[8] = 1;

57 
èsk
->
cdb_size
 = 10;

58 
èsk
->
x„r_dú
 = 
SCSI_XFER_READ
;

59 
èsk
->
expx„æí
 = 0;

65 
	`iscsi_£t_nﬂut‹ec⁄√˘
(
sd
->
iscsi_˘x
, 1);

68 
	`loggög
(
LOG_VERBOSE
, "TryÑeading one block but with iSCSIÉxpectedÅransferÜength==0");

70 
èsk_ªt
 = 
	`iscsi_scsi_comm™d_sync
(
sd
->
iscsi_˘x
, sd->
iscsi_lun
, 
èsk
, 
NULL
);

71 
	`CU_ASSERT_PTR_NOT_NULL_FATAL
(
èsk_ªt
);

72 
	`CU_ASSERT_NOT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_CANCELLED
);

74 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅheÅargetÑeturned SUCCESS");

75 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

76 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturnedÉrror %s",

77 
	`iscsi_gë_îr‹
(
sd
->
iscsi_˘x
));

79 
	`CU_ASSERT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_GOOD
);

81 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesidual overflow flag is set");

82 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_OVERFLOW
) {

83 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot setÑesidual "

86 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ_°©us
, 
SCSI_RESIDUAL_OVERFLOW
);

88 
	`loggög
(
LOG_VERBOSE
, "Verify we got %zu bytes ofÑesidual overflow",

89 
block_size
);

90 i‡(
èsk
->
ªsiduÆ
 !
block_size
) {

91 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot set correct "

93 
block_size
, 
èsk
->
ªsiduÆ
);

95 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ
, 
block_size
);

96 
	`scsi_‰ì_scsi_èsk
(
èsk
);

97 
èsk
 = 
NULL
;

100 
	`iscsi_£t_nﬂut‹ec⁄√˘
(
sd
->
iscsi_˘x
, 0);

103 
	`loggög
(
LOG_VERBOSE
, "TryÑeading one block but with iSCSIÉxpectedÅransferÜength==10000");

104 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

105 
	`CU_ASSERT_PTR_NOT_NULL_FATAL
(
èsk
);

107 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

108 
èsk
->
cdb
[0] = 
SCSI_OPCODE_READ10
;

109 
èsk
->
cdb
[8] = 1;

110 
èsk
->
cdb_size
 = 10;

111 
èsk
->
x„r_dú
 = 
SCSI_XFER_READ
;

112 
èsk
->
expx„æí
 = 10000;

114 
èsk_ªt
 = 
	`iscsi_scsi_comm™d_sync
(
sd
->
iscsi_˘x
, sd->
iscsi_lun
, 
èsk
, 
NULL
);

115 
	`CU_ASSERT_PTR_NOT_NULL_FATAL
(
èsk_ªt
);

117 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅheÅargetÑeturned SUCCESS");

118 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

119 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturnedÉrror %s",

120 
	`iscsi_gë_îr‹
(
sd
->
iscsi_˘x
));

122 
	`CU_ASSERT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_GOOD
);

124 
	`loggög
(
LOG_VERBOSE
, "Verify we gotá whole block back fromÅheÅarget");

125 
	`CU_ASSERT_EQUAL
(
èsk
->
d©aö
.
size
, ()
block_size
);

127 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesidual underflow flag is set");

128 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_UNDERFLOW
) {

129 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot setÑesidual "

132 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ_°©us
, 
SCSI_RESIDUAL_UNDERFLOW
);

134 
	`loggög
(
LOG_VERBOSE
, "Verify we got %zu bytes ofÑesidual underflow",

135 10000 - 
block_size
);

136 i‡(
èsk
->
ªsiduÆ
 !10000 - 
block_size
) {

137 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot set correct "

139 10000 - 
block_size
, 
èsk
->
ªsiduÆ
);

141 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ
, 10000 - 
block_size
);

142 
	`scsi_‰ì_scsi_èsk
(
èsk
);

143 
èsk
 = 
NULL
;

147 
	`loggög
(
LOG_VERBOSE
, "TryÑeading one block but with iSCSIÉxpectedÅransferÜength==200");

148 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

149 
	`CU_ASSERT_PTR_NOT_NULL_FATAL
(
èsk
);

151 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

152 
èsk
->
cdb
[0] = 
SCSI_OPCODE_READ10
;

153 
èsk
->
cdb
[8] = 1;

154 
èsk
->
cdb_size
 = 10;

155 
èsk
->
x„r_dú
 = 
SCSI_XFER_READ
;

156 
èsk
->
expx„æí
 = 200;

158 
èsk_ªt
 = 
	`iscsi_scsi_comm™d_sync
(
sd
->
iscsi_˘x
, sd->
iscsi_lun
, 
èsk
, 
NULL
);

159 
	`CU_ASSERT_PTR_NOT_NULL_FATAL
(
èsk_ªt
);

161 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅheÅargetÑeturned SUCCESS");

162 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

163 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturnedÉrror %s",

164 
	`iscsi_gë_îr‹
(
sd
->
iscsi_˘x
));

166 
	`CU_ASSERT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_GOOD
);

168 
	`loggög
(
LOG_VERBOSE
, "Verify we got 200 bytes back fromÅheÅarget");

169 
	`CU_ASSERT_EQUAL
(
èsk
->
d©aö
.
size
, 200);

171 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesidual overflow flag is set");

172 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_OVERFLOW
) {

173 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot setÑesidual "

176 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ_°©us
, 
SCSI_RESIDUAL_OVERFLOW
);

178 
	`loggög
(
LOG_VERBOSE
, "Verify we got %zu bytes ofÑesidual overflow",

179 
block_size
 - 200);

180 i‡(
èsk
->
ªsiduÆ
 !
block_size
 - 200) {

181 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot set correct "

183 
block_size
 - 200, 
èsk
->
ªsiduÆ
);

185 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ
, 
block_size
 - 200);

187 
	`scsi_‰ì_scsi_èsk
(
èsk
);

188 
èsk
 = 
NULL
;

192 
	`loggög
(
LOG_VERBOSE
, "TryÑeadingÅwo blocks but iSCSIÉxpected "

193 "å™s„∏Àngth==%zu (==⁄êblock)", 
block_size
);

194 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

195 
	`CU_ASSERT_PTR_NOT_NULL_FATAL
(
èsk
);

197 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

198 
èsk
->
cdb
[0] = 
SCSI_OPCODE_READ10
;

199 
èsk
->
cdb
[8] = 2;

200 
èsk
->
cdb_size
 = 10;

201 
èsk
->
x„r_dú
 = 
SCSI_XFER_READ
;

202 
èsk
->
expx„æí
 = 
block_size
;

204 
èsk_ªt
 = 
	`iscsi_scsi_comm™d_sync
(
sd
->
iscsi_˘x
, sd->
iscsi_lun
, 
èsk
, 
NULL
);

205 
	`CU_ASSERT_PTR_NOT_NULL_FATAL
(
èsk_ªt
);

207 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅheÅargetÑeturned SUCCESS");

208 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

209 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturnedÉrror %s",

210 
	`iscsi_gë_îr‹
(
sd
->
iscsi_˘x
));

212 
	`CU_ASSERT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_GOOD
);

214 
	`loggög
(
LOG_VERBOSE
, "Verify we got one whole block back fromÅheÅarget");

215 
	`CU_ASSERT_EQUAL
(
èsk
->
d©aö
.
size
, ()
block_size
);

217 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesidual overflow flag is set");

218 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_OVERFLOW
) {

219 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot setÑesidual "

222 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ_°©us
, 
SCSI_RESIDUAL_OVERFLOW
);

224 
	`loggög
(
LOG_VERBOSE
, "Verify we got one block ofÑesidual overflow");

225 i‡(
èsk
->
ªsiduÆ
 !
block_size
) {

226 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot set correct "

228 
block_size
, 
èsk
->
ªsiduÆ
);

230 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ
, 
block_size
);

232 
	`scsi_‰ì_scsi_èsk
(
èsk
);

233 
èsk
 = 
NULL
;

237 
	`loggög
(
LOG_VERBOSE
, "Try READ10 for one block but flag itásá write onÅhe iSCSIÜayer.");

238 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

239 
	`CU_ASSERT_PTR_NOT_NULL_FATAL
(
èsk
);

241 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

242 
èsk
->
cdb
[0] = 
SCSI_OPCODE_READ10
;

243 
èsk
->
cdb
[8] = 1;

244 
èsk
->
cdb_size
 = 10;

245 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

246 
èsk
->
expx„æí
 = 
block_size
;

248 
	`mem£t
(
s¸©ch
, 0xa6, 
block_size
);

249 
d©a
.
size
 = 
block_size
;

250 
d©a
.d©®(*)
s¸©ch
;

252 
	`iscsi_£t_nﬂut‹ec⁄√˘
(
sd
->
iscsi_˘x
, 1);

253 
	`iscsi_£t_timeout
(
sd
->
iscsi_˘x
, 3);

254 
èsk_ªt
 = 
	`iscsi_scsi_comm™d_sync
(
sd
->
iscsi_˘x
, sd->
iscsi_lun
, 
èsk
, &
d©a
);

255 
	`iscsi_£t_nﬂut‹ec⁄√˘
(
sd
->
iscsi_˘x
, 0);

256 
	`CU_ASSERT_PTR_NOT_NULL_FATAL
(
èsk_ªt
);

258 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅheÅargetÑeturned SUCCESS");

259 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

260 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturnedÉrror %s",

261 
	`iscsi_gë_îr‹
(
sd
->
iscsi_˘x
));

263 
	`CU_ASSERT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_GOOD
);

264 
	`scsi_‰ì_scsi_èsk
(
èsk
);

265 
èsk
 = 
NULL
;

267 
	}
}

	@test-tool/test_read10_rdprotect.c

19 
	~<°dio.h
>

20 
	~<°dlib.h
>

21 
	~<°rög.h
>

23 
	~<CUnô/CUnô.h
>

25 
	~"iscsi.h
"

26 
	~"scsi-lowÀvñ.h
"

27 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_ªad10_rd¥Ÿe˘
()

32 
i
;

37 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

38 
	`loggög
(
LOG_VERBOSE
, "Test READ10 withÇon-zero RDPROTECT");

40 
CHECK_FOR_SBC
;

42 i‡(!
öq
->
¥Ÿe˘
 || (
rc16
 !
NULL
 && !rc16->
¥Ÿ_í
)) {

43 
	`loggög
(
LOG_VERBOSE
, "Device doesÇot support/useÖrotection information. All commands should fail.");

44 
i
 = 1; i < 8; i++) {

45 
	`READ10
(
sd
, 
NULL
, 0, 
block_size
, block_size,

46 
i
, 0, 0, 0, 0, 
NULL
,

47 
EXPECT_INVALID_FIELD_IN_CDB
);

52 
	`loggög
(
LOG_NORMAL
, "NoÅests for devicesÅhat supportÖrotection information yet.");

53 
	}
}

	@test-tool/test_read10_residuals.c

23 
	~<°dio.h
>

24 
	~<°dlib.h
>

25 
	~<°rög.h
>

27 
	~<CUnô/CUnô.h
>

29 
	~"iscsi.h
"

30 
	~"iscsi-¥iv©e.h
"

31 
	~"scsi-lowÀvñ.h
"

32 
	~"iscsi-ã°-cu.h
"

36 
	$ã°_ªad10_ªsiduÆs
()

38 
scsi_èsk
 *
èsk_ªt
;

40 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

41 
	`loggög
(
LOG_VERBOSE
, "Test READ10 commands withÑesiduals");

42 
	`loggög
(
LOG_VERBOSE
, "Block sizêi†%zu", 
block_size
);

44 i‡(
sd
->
iscsi_˘x
 =
NULL
) {

45 c⁄° *
îr
 = "[SKIPPED] This READ10Åest is only "

47 
	`loggög
(
LOG_NORMAL
, "%s", 
îr
);

48 
	`CU_PASS
(
îr
);

53 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

54 
	`CU_ASSERT_PTR_NOT_NULL_FATAL
(
èsk
);

56 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

57 
èsk
->
cdb
[0] = 
SCSI_OPCODE_READ10
;

58 
èsk
->
cdb
[8] = 1;

59 
èsk
->
cdb_size
 = 10;

60 
èsk
->
x„r_dú
 = 
SCSI_XFER_READ
;

61 
èsk
->
expx„æí
 = 0;

67 
	`iscsi_£t_nﬂut‹ec⁄√˘
(
sd
->
iscsi_˘x
, 1);

70 
	`loggög
(
LOG_VERBOSE
, "TryÑeading one block but with iSCSIÉxpectedÅransferÜength==0");

72 
èsk_ªt
 = 
	`iscsi_scsi_comm™d_sync
(
sd
->
iscsi_˘x
, sd->
iscsi_lun
, 
èsk
, 
NULL
);

73 
	`CU_ASSERT_PTR_NOT_NULL_FATAL
(
èsk_ªt
);

74 
	`CU_ASSERT_NOT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_CANCELLED
);

76 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅheÅargetÑeturned SUCCESS");

77 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

78 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturnedÉrror %s",

79 
	`iscsi_gë_îr‹
(
sd
->
iscsi_˘x
));

81 
	`CU_ASSERT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_GOOD
);

83 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesidual overflow flag is set");

84 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_OVERFLOW
) {

85 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot setÑesidual "

88 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ_°©us
, 
SCSI_RESIDUAL_OVERFLOW
);

90 
	`loggög
(
LOG_VERBOSE
, "Verify we got %zu bytes ofÑesidual overflow",

91 
block_size
);

92 i‡(
èsk
->
ªsiduÆ
 !
block_size
) {

93 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot set correct "

95 
block_size
, 
èsk
->
ªsiduÆ
);

97 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ
, 
block_size
);

98 
	`scsi_‰ì_scsi_èsk
(
èsk
);

99 
èsk
 = 
NULL
;

102 
	`iscsi_£t_nﬂut‹ec⁄√˘
(
sd
->
iscsi_˘x
, 0);

105 
	`loggög
(
LOG_VERBOSE
, "TryÑeading one block but with iSCSIÉxpectedÅransferÜength==10000");

106 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

107 
	`CU_ASSERT_PTR_NOT_NULL_FATAL
(
èsk
);

109 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

110 
èsk
->
cdb
[0] = 
SCSI_OPCODE_READ10
;

111 
èsk
->
cdb
[8] = 1;

112 
èsk
->
cdb_size
 = 10;

113 
èsk
->
x„r_dú
 = 
SCSI_XFER_READ
;

114 
èsk
->
expx„æí
 = 10000;

116 
èsk_ªt
 = 
	`iscsi_scsi_comm™d_sync
(
sd
->
iscsi_˘x
, sd->
iscsi_lun
, 
èsk
, 
NULL
);

117 
	`CU_ASSERT_PTR_NOT_NULL_FATAL
(
èsk_ªt
);

119 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅheÅargetÑeturned SUCCESS");

120 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

121 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturnedÉrror %s",

122 
	`iscsi_gë_îr‹
(
sd
->
iscsi_˘x
));

124 
	`CU_ASSERT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_GOOD
);

126 
	`loggög
(
LOG_VERBOSE
, "Verify we got one whole block back fromÅheÅarget");

127 i‡(
èsk
->
d©aö
.
size
 !()
block_size
) {

128 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturned %u bytes "

130 
èsk
->
d©aö
.
size
,
block_size
);

132 
	`CU_ASSERT_EQUAL
(
èsk
->
d©aö
.
size
, ()
block_size
);

134 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesidual underflow flag is set");

135 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_UNDERFLOW
) {

136 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot setÑesidual "

139 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ_°©us
, 
SCSI_RESIDUAL_UNDERFLOW
);

141 
	`loggög
(
LOG_VERBOSE
, "Verify we got %zu bytes ofÑesidual underflow",

142 10000 - 
block_size
);

143 i‡(
èsk
->
ªsiduÆ
 !10000 - 
block_size
) {

144 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot set correct "

146 10000 - 
block_size
, 
èsk
->
ªsiduÆ
);

148 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ
, 10000 - 
block_size
);

149 
	`scsi_‰ì_scsi_èsk
(
èsk
);

150 
èsk
 = 
NULL
;

153 
	`loggög
(
LOG_VERBOSE
, "TryÑeading one block but with iSCSIÉxpectedÅransferÜength==200");

154 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

155 
	`CU_ASSERT_PTR_NOT_NULL_FATAL
(
èsk
);

157 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

158 
èsk
->
cdb
[0] = 
SCSI_OPCODE_READ10
;

159 
èsk
->
cdb
[8] = 1;

160 
èsk
->
cdb_size
 = 10;

161 
èsk
->
x„r_dú
 = 
SCSI_XFER_READ
;

162 
èsk
->
expx„æí
 = 200;

164 
èsk_ªt
 = 
	`iscsi_scsi_comm™d_sync
(
sd
->
iscsi_˘x
, sd->
iscsi_lun
, 
èsk
, 
NULL
);

165 
	`CU_ASSERT_PTR_NOT_NULL_FATAL
(
èsk_ªt
);

167 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅheÅargetÑeturned SUCCESS");

168 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

169 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturnedÉrror %s",

170 
	`iscsi_gë_îr‹
(
sd
->
iscsi_˘x
));

172 
	`CU_ASSERT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_GOOD
);

174 
	`loggög
(
LOG_VERBOSE
, "Verify we got 200 bytes back fromÅheÅarget");

175 
	`CU_ASSERT_EQUAL
(
èsk
->
d©aö
.
size
, 200);

177 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesidual overflow flag is set");

178 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_OVERFLOW
) {

179 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot setÑesidual "

182 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ_°©us
, 
SCSI_RESIDUAL_OVERFLOW
);

184 
	`loggög
(
LOG_VERBOSE
, "Verify we got %zu bytes ofÑesidual overflow",

185 
block_size
 - 200);

186 i‡(
èsk
->
ªsiduÆ
 !
block_size
 - 200) {

187 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot set correct "

189 
block_size
 - 200, 
èsk
->
ªsiduÆ
);

191 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ
, 
block_size
 - 200);

193 
	`scsi_‰ì_scsi_èsk
(
èsk
);

194 
èsk
 = 
NULL
;

198 
	`loggög
(
LOG_VERBOSE
, "TryÑeadingÅwo blocks but iSCSIÉxpected "

199 "å™s„∏Àngth==%zu (==⁄êblock)", 
block_size
);

200 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

201 
	`CU_ASSERT_PTR_NOT_NULL_FATAL
(
èsk
);

203 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

204 
èsk
->
cdb
[0] = 
SCSI_OPCODE_READ10
;

205 
èsk
->
cdb
[8] = 2;

206 
èsk
->
cdb_size
 = 10;

207 
èsk
->
x„r_dú
 = 
SCSI_XFER_READ
;

208 
èsk
->
expx„æí
 = 
block_size
;

210 
èsk_ªt
 = 
	`iscsi_scsi_comm™d_sync
(
sd
->
iscsi_˘x
, sd->
iscsi_lun
, 
èsk
, 
NULL
);

211 
	`CU_ASSERT_PTR_NOT_NULL_FATAL
(
èsk_ªt
);

213 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅheÅargetÑeturned SUCCESS");

214 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

215 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturnedÉrror %s",

216 
	`iscsi_gë_îr‹
(
sd
->
iscsi_˘x
));

218 
	`CU_ASSERT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_GOOD
);

220 
	`loggög
(
LOG_VERBOSE
, "Verify we got one whole block back fromÅheÅarget");

221 
	`CU_ASSERT_EQUAL
(
èsk
->
d©aö
.
size
, ()
block_size
);

223 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesidual overflow flag is set");

224 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_OVERFLOW
) {

225 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot setÑesidual "

228 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ_°©us
, 
SCSI_RESIDUAL_OVERFLOW
);

230 
	`loggög
(
LOG_VERBOSE
, "Verify we got one block ofÑesidual overflow");

231 i‡(
èsk
->
ªsiduÆ
 !
block_size
) {

232 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot set correct "

234 
block_size
, 
èsk
->
ªsiduÆ
);

236 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ
, 
block_size
);

238 
	`scsi_‰ì_scsi_èsk
(
èsk
);

239 
èsk
 = 
NULL
;

240 
	}
}

	@test-tool/test_read10_simple.c

19 
	~<°dio.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-suµ‹t.h
"

26 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_ªad10_sim∂e
()

32 
i
;

34 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

35 
	`loggög
(
LOG_VERBOSE
, "Test READ10 of 1-256 blocksátÅhe start ofÅhe LUN");

36 
i
 = 1; i <= 256; i++) {

37 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

40 
	`READ10
(
sd
, 
NULL
, 0, 
i
 * 
block_size
,

41 
block_size
, 0, 0, 0, 0, 0, 
NULL
,

42 
EXPECT_STATUS_GOOD
);

45 
	`loggög
(
LOG_VERBOSE
, "Test READ10 of 1-256 blocksátÅheÉnd ofÅhe LUN");

46 
i
 = 1; i <= 256; i++) {

47 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

50 
	`READ10
(
sd
, 
NULL
, 
num_blocks
 - 
i
,

51 
i
 * 
block_size
, block_size, 0, 0, 0, 0, 0, 
NULL
,

52 
EXPECT_STATUS_GOOD
);

54 
	}
}

	@test-tool/test_read12_0blocks.c

19 
	~<°dio.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-ã°-cu.h
"

28 
	$ã°_ªad12_0blocks
()

30 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

31 
	`loggög
(
LOG_VERBOSE
, "Test READ12 0-blocksát LBA==0");

32 
	`READ12
(
sd
, 
NULL
, 0, 0, 
block_size
, 0, 0, 0, 0, 0, NULL,

33 
EXPECT_STATUS_GOOD
);

35 i‡(
num_blocks
 > 0x80000000) {

36 
	`CU_PASS
("[SKIPPED] LUN isÅoo big");

40 
	`loggög
(
LOG_VERBOSE
, "Test READ12 0-blocks one blockÖastÉnd-of-LUN");

41 
	`READ12
(
sd
, 
NULL
, 
num_blocks
 + 1, 0, 
block_size
, 0, 0, 0, 0, 0, NULL,

42 
EXPECT_LBA_OOB
);

44 
	`loggög
(
LOG_VERBOSE
, "Test READ12 0-blocksát LBA==2^31");

45 
	`READ12
(
sd
, 
NULL
, 0x80000000, 0, 
block_size
, 0, 0, 0, 0, 0, NULL,

46 
EXPECT_LBA_OOB
);

48 
	`loggög
(
LOG_VERBOSE
, "Test READ12 0-blocksát LBA==-1");

49 
	`READ12
(
sd
, 
NULL
, -1, 0, 
block_size
, 0, 0, 0, 0, 0, NULL,

50 
EXPECT_LBA_OOB
);

51 
	}
}

	@test-tool/test_read12_beyond_eol.c

19 
	~<°dio.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-ã°-cu.h
"

29 
	$ã°_ªad12_bey⁄d_eﬁ
()

31 
i
;

33 i‡(
num_blocks
 >= 0x80000000) {

34 
	`CU_PASS
("LUN isÅoo big forÑead-beyond-eolÅests with READ12. SkippingÅest.\n");

38 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

39 
	`loggög
(
LOG_VERBOSE
, "Test READ12 1-256 blocks one block beyondÅheÉnd");

40 
i
 = 1; i <= 256; i++) {

41 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

44 
	`READ12
(
sd
, 
NULL
, 
num_blocks
 + 1 - 
i
,

45 
i
 * 
block_size
, block_size, 0, 0, 0, 0, 0, 
NULL
,

46 
EXPECT_LBA_OOB
);

49 
	`loggög
(
LOG_VERBOSE
, "Test READ12 1-256 blocksát LBA==2^31");

50 
i
 = 1; i <= 256; i++) {

51 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

54 
	`READ12
(
sd
, 
NULL
, 0x80000000,

55 
i
 * 
block_size
, block_size, 0, 0, 0, 0, 0, 
NULL
,

56 
EXPECT_LBA_OOB
);

59 
	`loggög
(
LOG_VERBOSE
, "Test READ12 1-256 blocksát LBA==-1");

60 
i
 = 1; i <= 256; i++) {

61 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

64 
	`READ12
(
sd
, 
NULL
, -1, 
i
 * 
block_size
,

65 
block_size
, 0, 0, 0, 0, 0, 
NULL
,

66 
EXPECT_LBA_OOB
);

69 
	`loggög
(
LOG_VERBOSE
, "Test READ12 2-256 blocksáll but one block beyondÅheÉnd");

70 
i
 = 2; i <= 256; i++) {

71 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

74 
	`READ12
(
sd
, 
NULL
, 
num_blocks
 - 1,

75 
i
 * 
block_size
, block_size, 0, 0, 0, 0, 0, 
NULL
,

76 
EXPECT_LBA_OOB
);

78 
	}
}

	@test-tool/test_read12_dpofua.c

19 
	~<°dio.h
>

20 
	~<°dlib.h
>

21 
	~<°rög.h
>

23 
	~<CUnô/CUnô.h
>

25 
	~"iscsi.h
"

26 
	~"scsi-lowÀvñ.h
"

27 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_ªad12_dpofua
()

32 
dpofua
, 
ußge_d©a_dpofua
;

33 
scsi_èsk
 *
ms_èsk
 = 
NULL
;

34 
scsi_mode_£n£
 *
ms
;

35 
scsi_èsk
 *
rso_èsk
 = 
NULL
;

36 
scsi_ªp‹t_suµ‹ãd_›_codes_⁄e_comm™d
 *
rsoc
;

38 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

39 
	`loggög
(
LOG_VERBOSE
, "Test READ12 DPO/FUA flags");

41 
CHECK_FOR_SBC
;

43 
	`loggög
(
LOG_VERBOSE
, "ReadÅhe DPOFUA flag from mode sense data");

44 
	`MODESENSE6
(
sd
, &
ms_èsk
, 0, 
SCSI_MODESENSE_PC_CURRENT
,

45 
SCSI_MODEPAGE_RETURN_ALL_PAGES
, 0, 255,

46 
EXPECT_STATUS_GOOD
);

48 
	`loggög
(
LOG_VERBOSE
, "[SUCCESS] Mode senseÑeturned status GOOD");

49 
ms
 = 
	`scsi_d©aö_unm¨shÆl
(
ms_èsk
);

50 
dpofua
 = 
ms
 && (ms->
devi˚_•ecific_∑ømëî
 & 0x10);

51 
	`scsi_‰ì_scsi_èsk
(
ms_èsk
);

53 i‡(
dpofua
) {

54 
	`loggög
(
LOG_VERBOSE
, "DPOFUA flag is set. Device shouldállow "

57 
	`loggög
(
LOG_VERBOSE
, "DPOFUA flag is clear. Device should fail "

61 
	`loggög
(
LOG_VERBOSE
, "Test READ12 with DPO==1");

62 i‡(
dpofua
) {

63 
	`READ12
(
sd
, 
NULL
, 0,

64 
block_size
, block_size, 0, 1, 0, 0, 0, 
NULL
,

65 
EXPECT_STATUS_GOOD
);

67 
	`READ12
(
sd
, 
NULL
, 0,

68 
block_size
, block_size, 0, 1, 0, 0, 0, 
NULL
,

69 
EXPECT_INVALID_FIELD_IN_CDB
);

72 
	`loggög
(
LOG_VERBOSE
, "Test READ12 with FUA==1");

73 i‡(
dpofua
) {

74 
	`READ12
(
sd
, 
NULL
, 0,

75 
block_size
, block_size, 0, 0, 1, 0, 0, 
NULL
,

76 
EXPECT_STATUS_GOOD
);

78 
	`READ12
(
sd
, 
NULL
, 0,

79 
block_size
, block_size, 0, 0, 1, 0, 0, 
NULL
,

80 
EXPECT_INVALID_FIELD_IN_CDB
);

83 
	`loggög
(
LOG_VERBOSE
, "Test READ12 with DPO==1 FUA==1");

84 i‡(
dpofua
) {

85 
	`READ12
(
sd
, 
NULL
, 0,

86 
block_size
, block_size, 0, 1, 1, 0, 0, 
NULL
,

87 
EXPECT_STATUS_GOOD
);

89 
	`READ12
(
sd
, 
NULL
, 0,

90 
block_size
, block_size, 0, 1, 1, 0, 0, 
NULL
,

91 
EXPECT_INVALID_FIELD_IN_CDB
);

94 
	`loggög
(
LOG_VERBOSE
, "Try fetching REPORT_SUPPORTED_OPCODES "

96 
	`REPORT_SUPPORTED_OPCODES
(
sd
, &
rso_èsk
,

97 0, 
SCSI_REPORT_SUPPORTING_OPCODE
,

98 
SCSI_OPCODE_READ12
,

101 
EXPECT_STATUS_GOOD
);

102 
	`loggög
(
LOG_VERBOSE
, "UnmarshallÅhe DATA-IN buffer");

103 
rsoc
 = 
	`scsi_d©aö_unm¨shÆl
(
rso_èsk
);

104 
	`CU_ASSERT_PTR_NOT_NULL_FATAL
(
rsoc
);

106 
ußge_d©a_dpofua
 = 
rsoc
->
cdb_ußge_d©a
[1] & 0x18;

107 i‡(
dpofua
) {

108 
	`loggög
(
LOG_VERBOSE
, "DPOFUA is set. VerifyÅhe "

110 i‡(!
ußge_d©a_dpofua
) {

111 
	`loggög
(
LOG_NORMAL
, "[FAILED] DpoFuaÇot set "

113 
	`CU_FAIL
("DpoFuaÇot set in CDB_USAGE_DATE");

116 
	`loggög
(
LOG_VERBOSE
, "DPOFUA is clear. VerifyÅhe "

118 i‡(
ußge_d©a_dpofua
) {

119 
	`loggög
(
LOG_NORMAL
, "[FAILED] DpoFuaÇot clear "

121 
	`CU_FAIL
("DpoFuaÇot clear in CDB_USAGE_DATE");

125 
	`scsi_‰ì_scsi_èsk
(
rso_èsk
);

126 
	}
}

	@test-tool/test_read12_rdprotect.c

19 
	~<°dio.h
>

20 
	~<°dlib.h
>

21 
	~<°rög.h
>

23 
	~<CUnô/CUnô.h
>

25 
	~"iscsi.h
"

26 
	~"scsi-lowÀvñ.h
"

27 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_ªad12_rd¥Ÿe˘
()

32 
i
;

37 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

38 
	`loggög
(
LOG_VERBOSE
, "Test READ12 withÇon-zero RDPROTECT");

40 
CHECK_FOR_SBC
;

42 i‡(!
öq
->
¥Ÿe˘
 || (
rc16
 !
NULL
 && !rc16->
¥Ÿ_í
)) {

43 
	`loggög
(
LOG_VERBOSE
, "Device doesÇot support/useÖrotection information. All commands should fail.");

44 
i
 = 1; i < 8; i++) {

45 
	`READ12
(
sd
, 
NULL
, 0, 
block_size
, block_size,

46 
i
, 0, 0, 0, 0, 
NULL
,

47 
EXPECT_INVALID_FIELD_IN_CDB
);

52 
	`loggög
(
LOG_NORMAL
, "NoÅests for devicesÅhat supportÖrotection information yet.");

53 
	}
}

	@test-tool/test_read12_residuals.c

19 
	~<°dio.h
>

20 
	~<°dlib.h
>

21 
	~<°rög.h
>

23 
	~<CUnô/CUnô.h
>

25 
	~"iscsi.h
"

26 
	~"iscsi-¥iv©e.h
"

27 
	~"scsi-lowÀvñ.h
"

28 
	~"iscsi-ã°-cu.h
"

32 
	$ã°_ªad12_ªsiduÆs
()

34 
scsi_èsk
 *
èsk_ªt
;

36 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

37 
	`loggög
(
LOG_VERBOSE
, "Test READ12 commands withÑesiduals");

38 
	`loggög
(
LOG_VERBOSE
, "Block sizêi†%zu", 
block_size
);

40 i‡(
sd
->
iscsi_˘x
 =
NULL
) {

41 c⁄° *
îr
 = "[SKIPPED] This READ12Åest is only "

43 
	`loggög
(
LOG_NORMAL
, "%s", 
îr
);

44 
	`CU_PASS
(
îr
);

48 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

49 
	`CU_ASSERT_PTR_NOT_NULL_FATAL
(
èsk
);

51 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

52 
èsk
->
cdb
[0] = 
SCSI_OPCODE_READ12
;

53 
èsk
->
cdb
[9] = 1;

54 
èsk
->
cdb_size
 = 12;

55 
èsk
->
x„r_dú
 = 
SCSI_XFER_READ
;

56 
èsk
->
expx„æí
 = 0;

62 
	`iscsi_£t_nﬂut‹ec⁄√˘
(
sd
->
iscsi_˘x
, 1);

65 
	`loggög
(
LOG_VERBOSE
, "TryÑeading one block but with iSCSIÉxpectedÅransferÜength==0");

67 
èsk_ªt
 = 
	`iscsi_scsi_comm™d_sync
(
sd
->
iscsi_˘x
, sd->
iscsi_lun
, 
èsk
, 
NULL
);

68 
	`CU_ASSERT_PTR_NOT_NULL_FATAL
(
èsk_ªt
);

69 
	`CU_ASSERT_NOT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_CANCELLED
);

71 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


72 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


73 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

74 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] READ12 isÇot implemented onÅhisÅarget.");

75 
	`CU_PASS
("READ12 isÇot implemented.");

78 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅheÅargetÑeturned SUCCESS");

79 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

80 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturnedÉrror %s",

81 
	`iscsi_gë_îr‹
(
sd
->
iscsi_˘x
));

83 
	`CU_ASSERT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_GOOD
);

85 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesidual overflow flag is set");

86 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_OVERFLOW
) {

87 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot setÑesidual "

90 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ_°©us
, 
SCSI_RESIDUAL_OVERFLOW
);

92 
	`loggög
(
LOG_VERBOSE
, "Verify we got %zu bytes ofÑesidual overflow",

93 
block_size
);

94 i‡(
èsk
->
ªsiduÆ
 !
block_size
) {

95 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot set correct "

97 
block_size
, 
èsk
->
ªsiduÆ
);

99 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ
, 
block_size
);

100 
	`scsi_‰ì_scsi_èsk
(
èsk
);

101 
èsk
 = 
NULL
;

104 
	`iscsi_£t_nﬂut‹ec⁄√˘
(
sd
->
iscsi_˘x
, 0);

107 
	`loggög
(
LOG_VERBOSE
, "TryÑeading one block but with iSCSIÉxpectedÅransferÜength==10000");

108 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

109 
	`CU_ASSERT_PTR_NOT_NULL_FATAL
(
èsk
);

111 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

112 
èsk
->
cdb
[0] = 
SCSI_OPCODE_READ12
;

113 
èsk
->
cdb
[9] = 1;

114 
èsk
->
cdb_size
 = 12;

115 
èsk
->
x„r_dú
 = 
SCSI_XFER_READ
;

116 
èsk
->
expx„æí
 = 10000;

118 
èsk_ªt
 = 
	`iscsi_scsi_comm™d_sync
(
sd
->
iscsi_˘x
, sd->
iscsi_lun
, 
èsk
, 
NULL
);

119 
	`CU_ASSERT_PTR_NOT_NULL_FATAL
(
èsk_ªt
);

121 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅheÅargetÑeturned SUCCESS");

122 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

123 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturnedÉrror %s",

124 
	`iscsi_gë_îr‹
(
sd
->
iscsi_˘x
));

126 
	`CU_ASSERT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_GOOD
);

128 
	`loggög
(
LOG_VERBOSE
, "Verify we got one whole block back fromÅheÅarget");

129 i‡(
èsk
->
d©aö
.
size
 !()
block_size
) {

130 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturned %u bytes "

132 
èsk
->
d©aö
.
size
,
block_size
);

134 
	`CU_ASSERT_EQUAL
(
èsk
->
d©aö
.
size
, ()
block_size
);

136 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesidual underflow flag is set");

137 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_UNDERFLOW
) {

138 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot setÑesidual "

141 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ_°©us
, 
SCSI_RESIDUAL_UNDERFLOW
);

143 
	`loggög
(
LOG_VERBOSE
, "Verify we got %zu bytes ofÑesidual underflow",

144 10000 - 
block_size
);

145 i‡(
èsk
->
ªsiduÆ
 !10000 - 
block_size
) {

146 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot set correct "

148 10000 - 
block_size
, 
èsk
->
ªsiduÆ
);

150 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ
, 10000 - 
block_size
);

151 
	`scsi_‰ì_scsi_èsk
(
èsk
);

152 
èsk
 = 
NULL
;

155 
	`loggög
(
LOG_VERBOSE
, "TryÑeading one block but with iSCSIÉxpectedÅransferÜength==200");

156 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

157 
	`CU_ASSERT_PTR_NOT_NULL_FATAL
(
èsk
);

159 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

160 
èsk
->
cdb
[0] = 
SCSI_OPCODE_READ12
;

161 
èsk
->
cdb
[9] = 1;

162 
èsk
->
cdb_size
 = 12;

163 
èsk
->
x„r_dú
 = 
SCSI_XFER_READ
;

164 
èsk
->
expx„æí
 = 200;

166 
èsk_ªt
 = 
	`iscsi_scsi_comm™d_sync
(
sd
->
iscsi_˘x
, sd->
iscsi_lun
, 
èsk
, 
NULL
);

167 
	`CU_ASSERT_PTR_NOT_NULL_FATAL
(
èsk_ªt
);

169 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅheÅargetÑeturned SUCCESS");

170 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

171 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturnedÉrror %s",

172 
	`iscsi_gë_îr‹
(
sd
->
iscsi_˘x
));

174 
	`CU_ASSERT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_GOOD
);

176 
	`loggög
(
LOG_VERBOSE
, "Verify we got 200 bytes back fromÅheÅarget");

177 
	`CU_ASSERT_EQUAL
(
èsk
->
d©aö
.
size
, 200);

179 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesidual overflow flag is set");

180 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_OVERFLOW
) {

181 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot setÑesidual "

184 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ_°©us
, 
SCSI_RESIDUAL_OVERFLOW
);

186 
	`loggög
(
LOG_VERBOSE
, "Verify we got %zu bytes ofÑesidual overflow",

187 
block_size
 - 200);

188 i‡(
èsk
->
ªsiduÆ
 !
block_size
 - 200) {

189 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot set correct "

191 
block_size
 - 200, 
èsk
->
ªsiduÆ
);

193 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ
, 
block_size
 - 200);

195 
	`scsi_‰ì_scsi_èsk
(
èsk
);

196 
èsk
 = 
NULL
;

200 
	`loggög
(
LOG_VERBOSE
, "TryÑeadingÅwo blocks but iSCSIÉxpected "

201 "å™s„∏Àngth==%zu (==⁄êblock)", 
block_size
);

202 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

203 
	`CU_ASSERT_PTR_NOT_NULL_FATAL
(
èsk
);

205 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

206 
èsk
->
cdb
[0] = 
SCSI_OPCODE_READ12
;

207 
èsk
->
cdb
[9] = 2;

208 
èsk
->
cdb_size
 = 12;

209 
èsk
->
x„r_dú
 = 
SCSI_XFER_READ
;

210 
èsk
->
expx„æí
 = 
block_size
;

212 
èsk_ªt
 = 
	`iscsi_scsi_comm™d_sync
(
sd
->
iscsi_˘x
, sd->
iscsi_lun
, 
èsk
, 
NULL
);

213 
	`CU_ASSERT_PTR_NOT_NULL_FATAL
(
èsk_ªt
);

215 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅheÅargetÑeturned SUCCESS");

216 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

217 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturnedÉrror %s",

218 
	`iscsi_gë_îr‹
(
sd
->
iscsi_˘x
));

220 
	`CU_ASSERT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_GOOD
);

222 
	`loggög
(
LOG_VERBOSE
, "Verify we got one whole block back fromÅheÅarget");

223 
	`CU_ASSERT_EQUAL
(
èsk
->
d©aö
.
size
, ()
block_size
);

225 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesidual overflow flag is set");

226 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_OVERFLOW
) {

227 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot setÑesidual "

230 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ_°©us
, 
SCSI_RESIDUAL_OVERFLOW
);

232 
	`loggög
(
LOG_VERBOSE
, "Verify we got one block ofÑesidual overflow");

233 i‡(
èsk
->
ªsiduÆ
 !
block_size
) {

234 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot set correct "

236 
block_size
, 
èsk
->
ªsiduÆ
);

238 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ
, 
block_size
);

240 
	`scsi_‰ì_scsi_èsk
(
èsk
);

241 
èsk
 = 
NULL
;

242 
	}
}

	@test-tool/test_read12_simple.c

19 
	~<°dio.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-suµ‹t.h
"

26 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_ªad12_sim∂e
()

32 
i
;

34 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

35 
	`loggög
(
LOG_VERBOSE
, "Test READ12 of 1-256 blocksátÅhe start ofÅhe LUN");

36 
i
 = 1; i <= 256; i++) {

37 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

40 
	`READ12
(
sd
, 
NULL
, 0, 
i
 * 
block_size
,

41 
block_size
, 0, 0, 0, 0, 0, 
NULL
,

42 
EXPECT_STATUS_GOOD
);

46 
	`loggög
(
LOG_VERBOSE
, "Test READ12 of 1-256 blocksátÅheÉnd ofÅhe LUN");

47 
i
 = 1; i <= 256; i++) {

48 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

51 
	`READ12
(
sd
, 
NULL
, 
num_blocks
 - 
i
,

52 
i
 * 
block_size
, block_size, 0, 0, 0, 0, 0, 
NULL
,

53 
EXPECT_STATUS_GOOD
);

55 
	}
}

	@test-tool/test_read16_0blocks.c

19 
	~<°dio.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-ã°-cu.h
"

28 
	$ã°_ªad16_0blocks
()

30 
CHECK_FOR_SBC
;

32 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

33 
	`loggög
(
LOG_VERBOSE
, "Test READ16 0-blocksát LBA==0");

34 
	`READ16
(
sd
, 
NULL
, 0, 0, 
block_size
, 0, 0, 0, 0, 0, NULL,

35 
EXPECT_STATUS_GOOD
);

37 
	`loggög
(
LOG_VERBOSE
, "Test READ16 0-blocks one blockÖastÉnd-of-LUN");

38 
	`READ16
(
sd
, 
NULL
, 
num_blocks
 + 1, 0, 
block_size
, 0, 0, 0, 0, 0, NULL,

39 
EXPECT_LBA_OOB
);

41 
	`loggög
(
LOG_VERBOSE
, "Test READ16 0-blocksát LBA==2^63");

42 
	`READ16
(
sd
, 
NULL
, 0x8000000000000000ULL, 0,

43 
block_size
, 0, 0, 0, 0, 0, 
NULL
,

44 
EXPECT_LBA_OOB
);

46 
	`loggög
(
LOG_VERBOSE
, "Test READ16 0-blocksát LBA==-1");

47 
	`READ16
(
sd
, 
NULL
, -1, 0, 
block_size
, 0, 0, 0, 0, 0, NULL,

48 
EXPECT_LBA_OOB
);

49 
	}
}

	@test-tool/test_read16_beyond_eol.c

19 
	~<°dio.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-ã°-cu.h
"

28 
	$ûog2
(
size_t
 
i
)

30 
j
 = -1;

32 
i
) {

33 
i
 >>= 1;

34 
j
++;

36  
j
;

37 
	}
}

40 
	$ã°_ªad16_bey⁄d_eﬁ
()

42 
i
;

44 
CHECK_FOR_SBC
;

46 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

47 
	`loggög
(
LOG_VERBOSE
, "Test READ16 1-256 blocks one block beyondÅheÉnd");

48 
i
 = 1; i <= 256; i++) {

49 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

52 
	`READ16
(
sd
, 
NULL
, 
num_blocks
 + 1 - 
i
,

53 
i
 * 
block_size
, block_size, 0, 0, 0, 0, 0, 
NULL
,

54 
EXPECT_LBA_OOB
);

57 
	`loggög
(
LOG_VERBOSE
, "Test READ16 1-256 blocksát LBA==2^63");

58 
i
 = 1; i <= 256; i++) {

59 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

62 
	`READ16
(
sd
, 
NULL
, 0x8000000000000000ULL,

63 
i
 * 
block_size
, block_size, 0, 0, 0, 0, 0, 
NULL
,

64 
EXPECT_LBA_OOB
);

67 
	`loggög
(
LOG_VERBOSE
, "Test READ16 1-256 blocksát LBA==2^%d",

68 64 - 
	`ûog2
(
block_size
));

69 
i
 = 1; i <= 256; i++) {

70 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

73 
	`READ16
(
sd
, 
NULL
, 1ULL << (64 - 
	`ûog2
(
block_size
)),

74 
i
 * 
block_size
, block_size, 0, 0, 0, 0, 0, 
NULL
,

75 
EXPECT_LBA_OOB
);

78 
	`loggög
(
LOG_VERBOSE
, "Test READ16 1-256 blocksát LBA==2^%d",

79 63 - 
	`ûog2
(
block_size
));

80 
i
 = 1; i <= 256; i++) {

81 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

84 
	`READ16
(
sd
, 
NULL
, 1ULL << (63 - 
	`ûog2
(
block_size
)),

85 
i
 * 
block_size
, block_size, 0, 0, 0, 0, 0, 
NULL
,

86 
EXPECT_LBA_OOB
);

89 
	`loggög
(
LOG_VERBOSE
, "Test READ16 1-256 blocksát LBA==-1");

90 
i
 = 1; i <= 256; i++) {

91 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

94 
	`READ16
(
sd
, 
NULL
, -1, 
i
 * 
block_size
,

95 
block_size
, 0, 0, 0, 0, 0, 
NULL
,

96 
EXPECT_LBA_OOB
);

99 
	`loggög
(
LOG_VERBOSE
, "Test READ16 2-256 blocksáll but one block beyondÅheÉnd");

100 
i
 = 2; i <= 256; i++) {

101 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

104 
	`READ16
(
sd
, 
NULL
, 
num_blocks
 - 1,

105 
i
 * 
block_size
, block_size, 0, 0, 0, 0, 0, 
NULL
,

106 
EXPECT_LBA_OOB
);

108 
	}
}

	@test-tool/test_read16_dpofua.c

19 
	~<°dio.h
>

20 
	~<°dlib.h
>

21 
	~<°rög.h
>

23 
	~<CUnô/CUnô.h
>

25 
	~"iscsi.h
"

26 
	~"scsi-lowÀvñ.h
"

27 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_ªad16_dpofua
()

32 
dpofua
, 
ußge_d©a_dpofua
;

33 
scsi_èsk
 *
ms_èsk
 = 
NULL
;

34 
scsi_mode_£n£
 *
ms
;

35 
scsi_èsk
 *
rso_èsk
 = 
NULL
;

36 
scsi_ªp‹t_suµ‹ãd_›_codes_⁄e_comm™d
 *
rsoc
;

38 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

39 
	`loggög
(
LOG_VERBOSE
, "Test READ16 DPO/FUA flags");

41 
CHECK_FOR_SBC
;

43 
	`loggög
(
LOG_VERBOSE
, "ReadÅhe DPOFUA flag from mode sense data");

44 
	`MODESENSE6
(
sd
, &
ms_èsk
, 0, 
SCSI_MODESENSE_PC_CURRENT
,

45 
SCSI_MODEPAGE_RETURN_ALL_PAGES
, 0, 255,

46 
EXPECT_STATUS_GOOD
);

48 
	`loggög
(
LOG_VERBOSE
, "[SUCCESS] Mode senseÑeturned status GOOD");

49 
ms
 = 
	`scsi_d©aö_unm¨shÆl
(
ms_èsk
);

50 
dpofua
 = 
ms
 && (ms->
devi˚_•ecific_∑ømëî
 & 0x10);

51 
	`scsi_‰ì_scsi_èsk
(
ms_èsk
);

53 i‡(
dpofua
) {

54 
	`loggög
(
LOG_VERBOSE
, "DPOFUA flag is set. Device shouldállow "

57 
	`loggög
(
LOG_VERBOSE
, "DPOFUA flag is clear. Device should fail "

61 
	`loggög
(
LOG_VERBOSE
, "Test READ16 with DPO==1");

62 i‡(
dpofua
) {

63 
	`READ16
(
sd
, 
NULL
, 0, 
block_size
, block_size, 0, 1, 0, 0, 0, NULL,

64 
EXPECT_STATUS_GOOD
);

66 
	`READ16
(
sd
, 
NULL
, 0, 
block_size
, block_size, 0, 1, 0, 0, 0, NULL,

67 
EXPECT_INVALID_FIELD_IN_CDB
);

70 
	`loggög
(
LOG_VERBOSE
, "Test READ16 with FUA==1");

71 i‡(
dpofua
) {

72 
	`READ16
(
sd
, 
NULL
, 0, 
block_size
, block_size, 0, 0, 1, 0, 0, NULL,

73 
EXPECT_STATUS_GOOD
);

75 
	`READ16
(
sd
, 
NULL
, 0, 
block_size
, block_size, 0, 0, 1, 0, 0, NULL,

76 
EXPECT_INVALID_FIELD_IN_CDB
);

79 
	`loggög
(
LOG_VERBOSE
, "Test READ16 with DPO==1 FUA==1");

80 i‡(
dpofua
) {

81 
	`READ16
(
sd
, 
NULL
, 0, 
block_size
, block_size, 0, 1, 1, 0, 0, NULL,

82 
EXPECT_STATUS_GOOD
);

84 
	`READ16
(
sd
, 
NULL
, 0, 
block_size
, block_size, 0, 1, 1, 0, 0, NULL,

85 
EXPECT_INVALID_FIELD_IN_CDB
);

88 
	`loggög
(
LOG_VERBOSE
, "Try fetching REPORT_SUPPORTED_OPCODES "

90 
	`REPORT_SUPPORTED_OPCODES
(
sd
, &
rso_èsk
,

91 0, 
SCSI_REPORT_SUPPORTING_OPCODE
,

92 
SCSI_OPCODE_READ16
,

95 
EXPECT_STATUS_GOOD
);

96 
	`loggög
(
LOG_VERBOSE
, "UnmarshallÅhe DATA-IN buffer");

97 
rsoc
 = 
	`scsi_d©aö_unm¨shÆl
(
rso_èsk
);

98 
	`CU_ASSERT_PTR_NOT_NULL_FATAL
(
rsoc
);

100 
ußge_d©a_dpofua
 = 
rsoc
->
cdb_ußge_d©a
[1] & 0x18;

101 i‡(
dpofua
) {

102 
	`loggög
(
LOG_VERBOSE
, "DPOFUA is set. VerifyÅhe "

104 i‡(!
ußge_d©a_dpofua
) {

105 
	`loggög
(
LOG_NORMAL
, "[FAILED] DpoFuaÇot set "

107 
	`CU_FAIL
("DpoFuaÇot set in CDB_USAGE_DATE");

110 
	`loggög
(
LOG_VERBOSE
, "DPOFUA is clear. VerifyÅhe "

112 i‡(
ußge_d©a_dpofua
) {

113 
	`loggög
(
LOG_NORMAL
, "[FAILED] DpoFuaÇot clear "

115 
	`CU_FAIL
("DpoFuaÇot clear in CDB_USAGE_DATE");

119 
	`scsi_‰ì_scsi_èsk
(
rso_èsk
);

120 
	}
}

	@test-tool/test_read16_rdprotect.c

19 
	~<°dio.h
>

20 
	~<°dlib.h
>

21 
	~<°rög.h
>

23 
	~<CUnô/CUnô.h
>

25 
	~"iscsi.h
"

26 
	~"scsi-lowÀvñ.h
"

27 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_ªad16_rd¥Ÿe˘
()

32 
i
;

37 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

38 
	`loggög
(
LOG_VERBOSE
, "Test READ16 withÇon-zero RDPROTECT");

40 
CHECK_FOR_SBC
;

42 i‡(!
öq
->
¥Ÿe˘
 || (
rc16
 !
NULL
 && !rc16->
¥Ÿ_í
)) {

43 
	`loggög
(
LOG_VERBOSE
, "Device doesÇot support/useÖrotection information. All commands should fail.");

44 
i
 = 1; i < 8; i++) {

45 
	`READ16
(
sd
, 
NULL
, 0, 
block_size
, block_size,

46 
i
, 0, 0, 0, 0, 
NULL
,

47 
EXPECT_INVALID_FIELD_IN_CDB
);

51 
	`loggög
(
LOG_NORMAL
, "NoÅests for devicesÅhat supportÖrotection information yet.");

52 
	}
}

	@test-tool/test_read16_residuals.c

19 
	~<°dio.h
>

20 
	~<°dlib.h
>

21 
	~<°rög.h
>

23 
	~<CUnô/CUnô.h
>

25 
	~"iscsi.h
"

26 
	~"iscsi-¥iv©e.h
"

27 
	~"scsi-lowÀvñ.h
"

28 
	~"iscsi-ã°-cu.h
"

32 
	$ã°_ªad16_ªsiduÆs
()

34 
scsi_èsk
 *
èsk_ªt
;

36 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

37 
	`loggög
(
LOG_VERBOSE
, "Test READ16 commands withÑesiduals");

38 
	`loggög
(
LOG_VERBOSE
, "Block sizêi†%zu", 
block_size
);

40 i‡(
sd
->
iscsi_˘x
 =
NULL
) {

41 c⁄° *
îr
 = "[SKIPPED] This READ16Åest is only "

43 
	`loggög
(
LOG_NORMAL
, "%s", 
îr
);

44 
	`CU_PASS
(
îr
);

48 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

49 
	`CU_ASSERT_PTR_NOT_NULL_FATAL
(
èsk
);

51 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

52 
èsk
->
cdb
[0] = 
SCSI_OPCODE_READ16
;

53 
èsk
->
cdb
[13] = 1;

54 
èsk
->
cdb_size
 = 16;

55 
èsk
->
x„r_dú
 = 
SCSI_XFER_READ
;

56 
èsk
->
expx„æí
 = 0;

62 
	`iscsi_£t_nﬂut‹ec⁄√˘
(
sd
->
iscsi_˘x
, 1);

65 
	`loggög
(
LOG_VERBOSE
, "TryÑeading one block but with iSCSIÉxpectedÅransferÜength==0");

67 
èsk_ªt
 = 
	`iscsi_scsi_comm™d_sync
(
sd
->
iscsi_˘x
, sd->
iscsi_lun
, 
èsk
, 
NULL
);

68 
	`CU_ASSERT_PTR_NOT_NULL_FATAL
(
èsk_ªt
);

69 
	`CU_ASSERT_NOT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_CANCELLED
);

71 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


72 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


73 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

74 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] READ16 isÇot implemented onÅhisÅargetánd it doesÇot claim SBC-3 support.");

75 
	`CU_PASS
("READ16 isÇot implementedándÇo SBC-3 support claimed.");

78 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅheÅargetÑeturned SUCCESS");

79 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

80 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturnedÉrror %s",

81 
	`iscsi_gë_îr‹
(
sd
->
iscsi_˘x
));

83 
	`CU_ASSERT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_GOOD
);

85 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesidual overflow flag is set");

86 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_OVERFLOW
) {

87 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot setÑesidual "

90 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ_°©us
, 
SCSI_RESIDUAL_OVERFLOW
);

92 
	`loggög
(
LOG_VERBOSE
, "Verify we got %zu bytes ofÑesidual overflow",

93 
block_size
);

94 i‡(
èsk
->
ªsiduÆ
 !
block_size
) {

95 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot set correct "

97 
block_size
, 
èsk
->
ªsiduÆ
);

99 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ
, 
block_size
);

100 
	`scsi_‰ì_scsi_èsk
(
èsk
);

101 
èsk
 = 
NULL
;

104 
	`iscsi_£t_nﬂut‹ec⁄√˘
(
sd
->
iscsi_˘x
, 0);

107 
	`loggög
(
LOG_VERBOSE
, "TryÑeading one block but with iSCSIÉxpectedÅransferÜength==10000");

108 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

109 
	`CU_ASSERT_PTR_NOT_NULL_FATAL
(
èsk
);

111 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

112 
èsk
->
cdb
[0] = 
SCSI_OPCODE_READ16
;

113 
èsk
->
cdb
[13] = 1;

114 
èsk
->
cdb_size
 = 16;

115 
èsk
->
x„r_dú
 = 
SCSI_XFER_READ
;

116 
èsk
->
expx„æí
 = 10000;

118 
èsk_ªt
 = 
	`iscsi_scsi_comm™d_sync
(
sd
->
iscsi_˘x
, sd->
iscsi_lun
, 
èsk
, 
NULL
);

119 
	`CU_ASSERT_PTR_NOT_NULL_FATAL
(
èsk_ªt
);

121 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅheÅargetÑeturned SUCCESS");

122 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

123 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturnedÉrror %s",

124 
	`iscsi_gë_îr‹
(
sd
->
iscsi_˘x
));

126 
	`CU_ASSERT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_GOOD
);

128 
	`loggög
(
LOG_VERBOSE
, "Verify we got one whole block back fromÅheÅarget");

129 i‡(
èsk
->
d©aö
.
size
 !()
block_size
) {

130 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturned %u bytes "

132 
èsk
->
d©aö
.
size
,
block_size
);

134 
	`CU_ASSERT_EQUAL
(
èsk
->
d©aö
.
size
, ()
block_size
);

136 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesidual underflow flag is set");

137 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_UNDERFLOW
) {

138 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot setÑesidual "

141 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ_°©us
, 
SCSI_RESIDUAL_UNDERFLOW
);

143 
	`loggög
(
LOG_VERBOSE
, "Verify we got %zu bytes ofÑesidual underflow",

144 10000 - 
block_size
);

145 i‡(
èsk
->
ªsiduÆ
 !10000 - 
block_size
) {

146 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot set correct "

148 10000 - 
block_size
, 
èsk
->
ªsiduÆ
);

150 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ
, 10000 - 
block_size
);

151 
	`scsi_‰ì_scsi_èsk
(
èsk
);

152 
èsk
 = 
NULL
;

155 
	`loggög
(
LOG_VERBOSE
, "TryÑeading one block but with iSCSIÉxpectedÅransferÜength==200");

156 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

157 
	`CU_ASSERT_PTR_NOT_NULL_FATAL
(
èsk
);

159 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

160 
èsk
->
cdb
[0] = 
SCSI_OPCODE_READ16
;

161 
èsk
->
cdb
[13] = 1;

162 
èsk
->
cdb_size
 = 16;

163 
èsk
->
x„r_dú
 = 
SCSI_XFER_READ
;

164 
èsk
->
expx„æí
 = 200;

166 
èsk_ªt
 = 
	`iscsi_scsi_comm™d_sync
(
sd
->
iscsi_˘x
, sd->
iscsi_lun
, 
èsk
, 
NULL
);

167 
	`CU_ASSERT_PTR_NOT_NULL_FATAL
(
èsk_ªt
);

169 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅheÅargetÑeturned SUCCESS");

170 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

171 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturnedÉrror %s",

172 
	`iscsi_gë_îr‹
(
sd
->
iscsi_˘x
));

174 
	`CU_ASSERT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_GOOD
);

176 
	`loggög
(
LOG_VERBOSE
, "Verify we got 200 bytes back fromÅheÅarget");

177 
	`CU_ASSERT_EQUAL
(
èsk
->
d©aö
.
size
, 200);

179 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesidual overflow flag is set");

180 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_OVERFLOW
) {

181 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot setÑesidual "

184 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ_°©us
, 
SCSI_RESIDUAL_OVERFLOW
);

186 
	`loggög
(
LOG_VERBOSE
, "Verify we got %zu bytes ofÑesidual overflow",

187 
block_size
 - 200);

188 i‡(
èsk
->
ªsiduÆ
 !
block_size
 - 200) {

189 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot set correct "

191 
block_size
 - 200, 
èsk
->
ªsiduÆ
);

193 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ
, 
block_size
 - 200);

195 
	`scsi_‰ì_scsi_èsk
(
èsk
);

196 
èsk
 = 
NULL
;

200 
	`loggög
(
LOG_VERBOSE
, "TryÑeadingÅwo blocks but iSCSIÉxpected "

201 "å™s„∏Àngth==%zu (==⁄êblock)", 
block_size
);

202 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

203 
	`CU_ASSERT_PTR_NOT_NULL_FATAL
(
èsk
);

205 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

206 
èsk
->
cdb
[0] = 
SCSI_OPCODE_READ16
;

207 
èsk
->
cdb
[13] = 2;

208 
èsk
->
cdb_size
 = 16;

209 
èsk
->
x„r_dú
 = 
SCSI_XFER_READ
;

210 
èsk
->
expx„æí
 = 
block_size
;

212 
èsk_ªt
 = 
	`iscsi_scsi_comm™d_sync
(
sd
->
iscsi_˘x
, sd->
iscsi_lun
, 
èsk
, 
NULL
);

213 
	`CU_ASSERT_PTR_NOT_NULL_FATAL
(
èsk_ªt
);

215 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅheÅargetÑeturned SUCCESS");

216 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

217 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturnedÉrror %s",

218 
	`iscsi_gë_îr‹
(
sd
->
iscsi_˘x
));

220 
	`CU_ASSERT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_GOOD
);

222 
	`loggög
(
LOG_VERBOSE
, "Verify we got one whole block back fromÅheÅarget");

223 
	`CU_ASSERT_EQUAL
(
èsk
->
d©aö
.
size
, ()
block_size
);

225 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesidual overflow flag is set");

226 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_OVERFLOW
) {

227 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot setÑesidual "

230 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ_°©us
, 
SCSI_RESIDUAL_OVERFLOW
);

232 
	`loggög
(
LOG_VERBOSE
, "Verify we got one block ofÑesidual overflow");

233 i‡(
èsk
->
ªsiduÆ
 !
block_size
) {

234 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot set correct "

236 
block_size
, 
èsk
->
ªsiduÆ
);

238 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ
, 
block_size
);

240 
	`scsi_‰ì_scsi_èsk
(
èsk
);

241 
èsk
 = 
NULL
;

242 
	}
}

	@test-tool/test_read16_simple.c

19 
	~<°dio.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-suµ‹t.h
"

26 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_ªad16_sim∂e
()

32 
i
;

34 
CHECK_FOR_SBC
;

36 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

37 
	`loggög
(
LOG_VERBOSE
, "Test READ16 of 1-256 blocksátÅhe start ofÅhe LUN");

38 
i
 = 1; i <= 256; i++) {

39 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

42 
	`READ16
(
sd
, 
NULL
, 0, 
i
 * 
block_size
,

43 
block_size
, 0, 0, 0, 0, 0, 
NULL
,

44 
EXPECT_STATUS_GOOD
);

48 
	`loggög
(
LOG_VERBOSE
, "Test READ16 of 1-256 blocksátÅheÉnd ofÅhe LUN");

49 
i
 = 1; i <= 256; i++) {

50 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

53 
	`READ16
(
sd
, 
NULL
, 
num_blocks
 - 
i
,

54 
i
 * 
block_size
, block_size, 0, 0, 0, 0, 0, 
NULL
,

55 
EXPECT_STATUS_GOOD
);

57 
	}
}

	@test-tool/test_read6_beyond_eol.c

19 
	~<°dio.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-ã°-cu.h
"

29 
	$ã°_ªad6_bey⁄d_eﬁ
()

31 
i
;

33 i‡(
num_blocks
 > 0x1fffff) {

34 
	`CU_PASS
("LUN isÅoo big forÑead-beyond-eolÅests with READ6. SkippingÅest.\n");

38 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

39 
	`loggög
(
LOG_VERBOSE
, "Test READ6 1-255 blocks one block beyondÅheÉnd");

40 
i
 = 1; i <255 && i + 0U <
num_blocks
 + 1; i++) {

41 
	`READ6
(
sd
, 
NULL
, 
num_blocks
 + 1 - 
i
,

42 
i
 * 
block_size
, block_size, 
NULL
,

43 
EXPECT_LBA_OOB
);

46 
	`loggög
(
LOG_VERBOSE
, "Test READ6 1-255 blocksát LBA==0x1fffff");

47 
i
 = 1; i <= 255; i++) {

48 
	`READ6
(
sd
, 
NULL
, 0x1fffff, 
i
 * 
block_size
, block_size, NULL,

49 
EXPECT_LBA_OOB
);

52 i‡(
num_blocks
 == 0) {

53 
	`CU_PASS
("LUN isÅoo small forÑead-beyond-eolÅests with READ6. SkippingÅest.\n");

57 
	`loggög
(
LOG_VERBOSE
, "Test READ6 2-255 blocksáll but one block beyondÅheÉnd");

58 
i
 = 2; i <= 255; i++) {

59 
	`READ6
(
sd
, 
NULL
, 
num_blocks
 - 1,

60 
i
 * 
block_size
, block_size, 
NULL
,

61 
EXPECT_LBA_OOB
);

63 
	}
}

	@test-tool/test_read6_simple.c

19 
	~<°dio.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-suµ‹t.h
"

26 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_ªad6_sim∂e
()

32 
i
;

34 
	`¥ötf
("Test READ6 of 1-255 blocksátÅhe start ofÅhe LUN");

35 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

36 
	`loggög
(
LOG_VERBOSE
, "Test READ6 of 1-255 blocksátÅhe start ofÅhe LUN");

37 
i
 = 1; i <= 255; i++) {

38 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

41 
	`READ6
(
sd
, 
NULL
, 0, 
i
 * 
block_size
, block_size, NULL,

42 
EXPECT_STATUS_GOOD
);

45 
	`loggög
(
LOG_VERBOSE
, "Test READ6 of 1-255 blocksátÅheÉnd ofÅhe LUN");

46 i‡(
num_blocks
 > 0x200000) {

47 
	`CU_PASS
("LUN isÅoo big forÑead-at-eolÅests with READ6. SkippingÅest.\n");

49 
i
 = 1; i <255 && i + 0U <
num_blocks
; i++) {

50 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

53 
	`READ6
(
sd
, 
NULL
, 
num_blocks
 - 
i
,

54 
i
 * 
block_size
, block_size, 
NULL
,

55 
EXPECT_STATUS_GOOD
);

60 i‡(
maximum_å™s„r_Àngth
 >= 256) {

61 
	`loggög
(
LOG_VERBOSE
, "TransferÜength == 0 means we wantÅo "

63 
	`READ6
(
sd
, &
èsk
, 0,

64 256 * 
block_size
, block_size, 
NULL
,

65 
EXPECT_STATUS_GOOD
);

66 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

67 
	`loggög
(
LOG_NORMAL
, "[FAILED] READ6 command: "

68 "Áûed wôh sí£. %s", 
sd
->
îr‹_°r
 );

70 
	`CU_ASSERT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_GOOD
);

72 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhat we did get 256 blocks of "

74 i‡(
èsk
->
d©aö
.
size
 =()(256 * 
block_size
)) {

75 
	`loggög
(
LOG_VERBOSE
, "[SUCCESS] TargetÑeturned 256 "

78 
	`loggög
(
LOG_NORMAL
, "[FAILED] Target didÇotÑeturn "

81 
	`CU_ASSERT_EQUAL
(
èsk
->
d©aö
.
size
, ()(256 * 
block_size
));

83 
	}
}

	@test-tool/test_readcapacity10_simple.c

19 
	~<°dio.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-suµ‹t.h
"

26 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_ªadˇ∑côy10_sim∂e
()

32 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

33 
	`loggög
(
LOG_VERBOSE
, "Test basic READCAPACITY10");

35 
	`READCAPACITY10
(
sd
, 
NULL
, 0, 0,

36 
EXPECT_STATUS_GOOD
);

37 
	}
}

	@test-tool/test_readcapacity16_alloclen.c

19 
	~<°dio.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-suµ‹t.h
"

26 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_ªadˇ∑côy16_Ælo˛í
()

32 
i
;

34 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

35 
	`loggög
(
LOG_VERBOSE
, "TestÅhat READCAPACITY16 withálloc_len 0-15 isÇotánÉrror");

37 
i
 = 0; i < 16; i++) {

38 
	`READCAPACITY16
(
sd
, 
NULL
, 
i
,

39 
EXPECT_STATUS_GOOD
);

41 
	}
}

	@test-tool/test_readcapacity16_protection.c

19 
	~<°dio.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-suµ‹t.h
"

26 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_ªadˇ∑côy16_¥Ÿe˘i⁄
()

32 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

33 
	`loggög
(
LOG_VERBOSE
, "Test READCAPACITY16 Protection Information");

35 
CHECK_FOR_SBC
;

37 i‡(
rc16
 =
NULL
) {

38 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] READCAPACITY16 isÇot implemented onÅhisÅarget.");

39 
	`CU_PASS
("READCAPACITY16 isÇot implemented.");

43 i‡(!
öq
->
¥Ÿe˘
) {

44 
	`loggög
(
LOG_VERBOSE
, "This device doesÇot support PI. "

48 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhat PROT_EN is 0");

49 i‡(
rc16
->
¥Ÿ_í
) {

50 
	`loggög
(
LOG_VERBOSE
, "[FAILED] PROT_EN is set but "

55 
	`loggög
(
LOG_VERBOSE
, "[SUCCESS] PROT_EN is 0");

57 
	`CU_ASSERT_EQUAL
(
rc16
->
¥Ÿ_í
, 0);

59 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhat P_TYPE is 0");

60 i‡(
rc16
->
p_ty≥
) {

61 
	`loggög
(
LOG_VERBOSE
, "[FAILED] P_TYPE isÇon-zero but "

66 
	`loggög
(
LOG_VERBOSE
, "[SUCCESS] P_TYPE is 0");

68 
	`CU_ASSERT_EQUAL
(
rc16
->
p_ty≥
, 0);

70 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhat P_I_EXP is 0");

71 i‡(
rc16
->
p_i_exp
) {

72 
	`loggög
(
LOG_VERBOSE
, "[FAILED] P_I_EXP isÇon-zero but "

77 
	`loggög
(
LOG_VERBOSE
, "[SUCCESS] P_I_EXP is 0");

79 
	`CU_ASSERT_EQUAL
(
rc16
->
p_i_exp
, 0);

84 
	`loggög
(
LOG_VERBOSE
, "This device supports PI. "

86 i‡(!
rc16
->
¥Ÿ_í
) {

87 
	`loggög
(
LOG_VERBOSE
, "Protection isÇotÉnabled. Verify "

90 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhat P_TYPE is 0");

91 i‡(
rc16
->
p_ty≥
) {

92 
	`loggög
(
LOG_VERBOSE
, "[FAILED] P_TYPE isÇon-zero but "

95 
	`loggög
(
LOG_VERBOSE
, "[SUCCESS] P_TYPE is 0");

97 
	`CU_ASSERT_EQUAL
(
rc16
->
p_ty≥
, 0);

99 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhat P_I_EXP is 0");

100 i‡(
rc16
->
p_i_exp
) {

101 
	`loggög
(
LOG_VERBOSE
, "[FAILED] P_I_EXP isÇon-zero but "

104 
	`loggög
(
LOG_VERBOSE
, "[SUCCESS] P_I_EXP is 0");

106 
	`CU_ASSERT_EQUAL
(
rc16
->
p_i_exp
, 0);

111 
	`loggög
(
LOG_VERBOSE
, "Protection isÉnabled. Verify "

113 
rc16
->
p_ty≥
) {

119 
	`loggög
(
LOG_VERBOSE
, "[FAILED] P_TYPE is invalid. Must be "

120 "0,1,2 buàwa†%d", 
rc16
->
p_ty≥
);

121 
	`CU_FAIL
("P_TYPE is invalid");

123 
	}
}

	@test-tool/test_readcapacity16_simple.c

19 
	~<°dio.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-suµ‹t.h
"

26 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_ªadˇ∑côy16_sim∂e
()

32 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

33 
	`loggög
(
LOG_VERBOSE
, "TestÅhat READCAPACITY16 works");

35 
	`READCAPACITY16
(
sd
, 
NULL
, 16,

36 
EXPECT_STATUS_GOOD
);

37 
	}
}

	@test-tool/test_readcapacity16_support.c

19 
	~<°dio.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-suµ‹t.h
"

26 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_ªadˇ∑côy16_suµ‹t
()

32 
ªt
;

34 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

35 
	`loggög
(
LOG_VERBOSE
, "TestÅhat READCAPACITY16 is supported on SBC3");

37 
ªt
 = 
	`ªadˇ∑côy16
(
sd
, 
NULL
, 15,

38 
EXPECT_STATUS_GOOD
);

39 i‡(
ªt
 == -2) {

40 i‡(
sbc3_suµ‹t
) {

41 
	`loggög
(
LOG_NORMAL
, "[FAILED] READCAPACITY16 isÇotávailable butÅhe device claims SBC-3 support.");

42 
	`CU_FAIL
("READCAPACITY16 failed butÅhe device claims SBC-3 support.");

44 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] READCAPACITY16 isÇot implemented onÅhisÅargetánd it doesÇot claim SBC-3 support.");

47 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

49 
	}
}

	@test-tool/test_readdefectdata10_simple.c

19 
	~<°dio.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-suµ‹t.h
"

26 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_ªadde„˘d©a10_sim∂e
()

32 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

33 
	`loggög
(
LOG_VERBOSE
, "Test basic READDEFECTDATA10");

35 
	`READDEFECTDATA10
(
sd
, 
NULL
, 0, 0, 0, 32,

36 
EXPECT_STATUS_GOOD
);

37 
	}
}

	@test-tool/test_readdefectdata12_simple.c

19 
	~<°dio.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-suµ‹t.h
"

26 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_ªadde„˘d©a12_sim∂e
()

32 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

33 
	`loggög
(
LOG_VERBOSE
, "Test basic READDEFECTDATA12");

35 
	`READDEFECTDATA12
(
sd
, 
NULL
, 0, 0, 0, 0, 32,

36 
EXPECT_STATUS_GOOD
);

37 
	}
}

	@test-tool/test_readonly_sbc.c

19 
	~<°dio.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-suµ‹t.h
"

26 
	~"iscsi-ã°-cu.h
"

29 
	$ã°_wrôe10
()

31 
	`loggög
(
LOG_VERBOSE
, "Test WRITE10 fails with WRITE_PROTECTED");

32 
	`mem£t
(
s¸©ch
, 0xa6, 
block_size
);

33 
	`WRITE10
(
sd
, 0, 
block_size
, block_size, 0, 0, 0, 0, 0, 
s¸©ch
,

34 
EXPECT_WRITE_PROTECTED
);

35 
	}
}

38 
	$ã°_wrôe12
()

40 
	`loggög
(
LOG_VERBOSE
, "Test WRITE12 fails with WRITE_PROTECTED");

41 
	`mem£t
(
s¸©ch
, 0xa6, 
block_size
);

42 
	`WRITE12
(
sd
, 0, 
block_size
, block_size, 0, 0, 0, 0, 0, 
s¸©ch
,

43 
EXPECT_WRITE_PROTECTED
);

44 
	}
}

47 
	$ã°_wrôe16
()

49 
	`loggög
(
LOG_VERBOSE
, "Test WRITE16 fails with WRITE_PROTECTED");

50 
	`mem£t
(
s¸©ch
, 0xa6, 
block_size
);

51 
	`WRITE16
(
sd
, 0, 
block_size
, block_size, 0, 0, 0, 0, 0, 
s¸©ch
,

52 
EXPECT_WRITE_PROTECTED
);

53 
	}
}

56 
	$ã°_wrôeßme10
()

58 
	`loggög
(
LOG_VERBOSE
, "Test WRITE_SAME10 fails with WRITE_PROTECTED");

59 
	`WRITESAME10
(
sd
, 0, 
block_size
, 1, 0, 0, 0, 0, 
s¸©ch
,

60 
EXPECT_WRITE_PROTECTED
);

62 
	`loggög
(
LOG_VERBOSE
, "Test WRITE_SAME10 UNMAP fails with "

64 
	`WRITESAME10
(
sd
, 0, 
block_size
, 1, 0, 1, 0, 0, 
NULL
,

65 
EXPECT_WRITE_PROTECTED
);

66 
	}
}

69 
	$ã°_wrôeßme16
()

71 
	`loggög
(
LOG_VERBOSE
, "Test WRITE_SAME16 fails with WRITE_PROTECTED");

72 
	`WRITESAME16
(
sd
, 0, 
block_size
, 1, 0, 0, 0, 0, 
s¸©ch
,

73 
EXPECT_WRITE_PROTECTED
);

75 
	`loggög
(
LOG_VERBOSE
, "Test WRITE_SAME16 UNMAP fails with "

77 
	`WRITESAME16
(
sd
, 0, 
block_size
, 1, 0, 1, 0, 0, 
NULL
,

78 
EXPECT_WRITE_PROTECTED
);

79 
	}
}

82 
	$ã°_wrôevîify10
()

84 
	`loggög
(
LOG_VERBOSE
, "Test WRITEVERIFY10 fails with WRITE_PROTECTED");

85 
	`WRITEVERIFY10
(
sd
, 0, 
block_size
, block_size, 0, 0, 1, 0, 
s¸©ch
,

86 
EXPECT_WRITE_PROTECTED
);

87 
	}
}

90 
	$ã°_wrôevîify12
()

92 
	`loggög
(
LOG_VERBOSE
, "Test WRITEVERIFY12 fails with WRITE_PROTECTED");

93 
	`WRITEVERIFY12
(
sd
, 0, 
block_size
, block_size, 0, 0, 1, 0, 
s¸©ch
,

94 
EXPECT_WRITE_PROTECTED
);

95 
	}
}

98 
	$ã°_wrôevîify16
()

100 
	`loggög
(
LOG_VERBOSE
, "Test WRITEVERIFY16 fails with WRITE_PROTECTED");

101 
	`WRITEVERIFY16
(
sd
, 0, 
block_size
, block_size, 0, 0, 1, 0, 
s¸©ch
,

102 
EXPECT_WRITE_PROTECTED
);

103 
	}
}

106 
	$ã°_‹wrôe
()

108 
	`loggög
(
LOG_VERBOSE
, "Test ORWRITE fails with WRITE_PROTECTED");

109 
	`ORWRITE
(
sd
, 0, 
block_size
, block_size, 0, 0, 0, 0, 0, 
s¸©ch
,

110 
EXPECT_WRITE_PROTECTED
);

111 
	}
}

114 
	$ã°_com∑ª™dwrôe
()

116 
	`loggög
(
LOG_VERBOSE
, "Test COMPAREANDWRITE fails with WRITE_PROTECTED");

117 
	`COMPAREANDWRITE
(
sd
, 0, 
s¸©ch
, 2 * 
block_size
, block_size, 0, 0, 0, 0,

118 
EXPECT_WRITE_PROTECTED
);

119 
	}
}

122 
	$ã°_unm≠
()

124 
unm≠_li°
 
li°
[1];

126 
	`loggög
(
LOG_VERBOSE
, "Test UNMAP of oneÖhysical block fails with "

128 
li°
[0].
lba
 = 0;

129 
li°
[0].
num
 = 
lbµb
;

130 
	`UNMAP
(
sd
, 0, 
li°
, 1,

131 
EXPECT_WRITE_PROTECTED
);

133 
	`loggög
(
LOG_VERBOSE
, "Test UNMAP of oneÜogical block fails with "

135 
li°
[0].
lba
 = 0;

136 
li°
[0].
num
 = 1;

137 
	`UNMAP
(
sd
, 0, 
li°
, 1,

138 
EXPECT_WRITE_PROTECTED
);

139 
	}
}

142 
	$ã°_ªad⁄ly_sbc
()

144 
CHECK_FOR_DATALOSS
;

145 
CHECK_FOR_READONLY
;

146 
CHECK_FOR_SBC
;

148 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

149 
	`loggög
(
LOG_VERBOSE
, "TestÅhat Medium write commands fail for READ-ONLY SBC devices");

151 
	`ã°_com∑ª™dwrôe
();

152 
	`ã°_‹wrôe
();

153 
	`ã°_unm≠
();

154 
	`ã°_wrôe10
();

155 
	`ã°_wrôe12
();

156 
	`ã°_wrôe16
();

157 
	`ã°_wrôeßme10
();

158 
	`ã°_wrôeßme16
();

159 
	`ã°_wrôevîify10
();

160 
	`ã°_wrôevîify12
();

161 
	`ã°_wrôevîify16
();

162 
	}
}

	@test-tool/test_receive_copy_results_copy_status.c

19 
	~<°dio.h
>

20 
	~<°dlib.h
>

21 
	~<°rög.h
>

22 
	~<°dlib.h
>

24 
	~<CUnô/CUnô.h
>

26 
	~"iscsi.h
"

27 
	~"scsi-lowÀvñ.h
"

28 
	~"iscsi-ã°-cu.h
"

31 
	$ã°_ª˚ive_c›y_ªsu…s_c›y_°©us
()

33 
scsi_èsk
 *
cs_èsk
;

34 
scsi_c›y_ªsu…s_c›y_°©us
 *
c•
;

35 
tgt_desc_Àn
 = 0, 
£g_desc_Àn
 = 0;

36 
off£t
 = 
XCOPY_DESC_OFFSET
, 
li°_id
 = 1;

37 
iscsi_d©a
 
d©a
;

38 *
xc›ybuf
;

40 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

41 
	`loggög
(
LOG_VERBOSE
, "Test RECEIVE COPY RESULTS, COPY STATUS");

43 
	`loggög
(
LOG_VERBOSE
, "No copy inÖrogress");

44 
	`RECEIVE_COPY_RESULTS
(&
cs_èsk
, 
sd
, 
SCSI_COPY_RESULTS_COPY_STATUS
,

45 
li°_id
, 
NULL
, 
EXPECT_INVALID_FIELD_IN_CDB
);

46 
	`scsi_‰ì_scsi_èsk
(
cs_èsk
);

47 
cs_èsk
 = 
NULL
;

49 
CHECK_FOR_DATALOSS
;

51 
	`loggög
(
LOG_VERBOSE
, "Issue Extended Copy");

52 
d©a
.
size
 = 
XCOPY_DESC_OFFSET
 +

53 
	`gë_desc_Àn
(
IDENT_DESCR_TGT_DESCR
) +

54 
	`gë_desc_Àn
(
BLK_TO_BLK_SEG_DESCR
);

55 
d©a
.d©®
	`Æloˇ
(d©a.
size
);

56 
xc›ybuf
 = 
d©a
.data;

57 
	`mem£t
(
xc›ybuf
, 0, 
d©a
.
size
);

60 
off£t
 +
	`p›uœã_tgt_desc
(
xc›ybuf
+off£t, 
IDENT_DESCR_TGT_DESCR
,

61 
LU_ID_TYPE_LUN
, 0, 0, 0, 0, 
sd
);

62 
tgt_desc_Àn
 = 
off£t
 - 
XCOPY_DESC_OFFSET
;

65 
off£t
 +
	`p›uœã_£g_desc_b2b
(
xc›ybuf
+offset, 0, 0, 0, 0,

66 2048, 0, 
num_blocks
 - 2048);

67 
£g_desc_Àn
 = 
off£t
 - 
XCOPY_DESC_OFFSET
 - 
tgt_desc_Àn
;

70 
	`p›uœã_∑øm_hódî
(
xc›ybuf
, 
li°_id
, 0, 0, 0,

71 
tgt_desc_Àn
, 
£g_desc_Àn
, 0);

73 
	`EXTENDEDCOPY
(
sd
, &
d©a
, 
EXPECT_STATUS_GOOD
);

75 
	`loggög
(
LOG_VERBOSE
,

77 
	`RECEIVE_COPY_RESULTS
(&
cs_èsk
, 
sd
, 
SCSI_COPY_RESULTS_COPY_STATUS
,

78 
li°_id
, (**)&
c•
, 
EXPECT_STATUS_GOOD
);

80 
	`scsi_‰ì_scsi_èsk
(
cs_èsk
);

81 
	}
}

	@test-tool/test_receive_copy_results_op_params.c

19 
	~<°dio.h
>

20 
	~<°dlib.h
>

21 
	~<°rög.h
>

22 
	~<°dlib.h
>

24 
	~<CUnô/CUnô.h
>

26 
	~"iscsi.h
"

27 
	~"scsi-lowÀvñ.h
"

28 
	~"iscsi-ã°-cu.h
"

31 
	$ã°_ª˚ive_c›y_ªsu…s_›_∑øms
()

33 
scsi_èsk
 *
›_èsk
 = 
NULL
;

34 
scsi_c›y_ªsu…s_›_∑øms
 *
›p
;

35 
ªt
;

37 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

38 
	`loggög
(
LOG_VERBOSE
, "Test RECEIVE COPY RESULTS, OPERATING PARAMS");

40 
ªt
 = 
	`RECEIVE_COPY_RESULTS
(&
›_èsk
, 
sd
, 
SCSI_COPY_RESULTS_OP_PARAMS
, 0,

41 (**)&
›p
, 
EXPECT_STATUS_GOOD
);

43 i‡(
ªt
 == 0)

44 
	`loggög
(
LOG_NORMAL
,

46 
›p
->
max_èrgë_desc_cou¡
,

47 
›p
->
max_£gmít_desc_cou¡
);

49 
	`scsi_‰ì_scsi_èsk
(
›_èsk
);

50 
	}
}

	@test-tool/test_report_supported_opcodes_one_command.c

19 
	~<°dio.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-suµ‹t.h
"

26 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_ªp‹t_suµ‹ãd_›codes_⁄e_comm™d
()

32 
i
;

33 
scsi_èsk
 *
rso_èsk
;

34 
scsi_èsk
 *
⁄e_èsk
;

35 
scsi_ªp‹t_suµ‹ãd_›_codes
 *
rsoc
;

36 
scsi_ªp‹t_suµ‹ãd_›_codes_⁄e_comm™d
 *
rsoc_⁄e
;

38 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

39 
	`loggög
(
LOG_VERBOSE
, "Test READ_SUPPORTED_OPCODESÑeading one-command");

41 
	`loggög
(
LOG_VERBOSE
, "FetchÜist ofáll supported opcodes");

42 
	`REPORT_SUPPORTED_OPCODES
(
sd
, &
rso_èsk
,

43 0, 
SCSI_REPORT_SUPPORTING_OPS_ALL
,

45 
EXPECT_STATUS_GOOD
);

47 
	`loggög
(
LOG_VERBOSE
, "UnmarshallÅhe DATA-IN buffer");

48 
rsoc
 = 
	`scsi_d©aö_unm¨shÆl
(
rso_èsk
);

49 
	`CU_ASSERT_PTR_NOT_NULL_FATAL
(
rsoc
);

51 
	`loggög
(
LOG_VERBOSE
, "VerifyÑead one-command works foráll supported "

53 
i
 = 0; i < 
rsoc
->
num_des¸ùt‹s
; i++) {

54 
	`loggög
(
LOG_VERBOSE
, "Check opcode:0x%02x ServiceAction:0x%02x",

55 
rsoc
->
des¸ùt‹s
[
i
].
›code
,

56 
rsoc
->
des¸ùt‹s
[
i
].
ß
);

57 i‡(
rsoc
->
des¸ùt‹s
[
i
].
£rva˘v
) {

58 
	`loggög
(
LOG_VERBOSE
, "This opcode has serviceáctions. "

60 
	`REPORT_SUPPORTED_OPCODES
(
sd
, 
NULL
, 0,

61 
SCSI_REPORT_SUPPORTING_OPCODE
,

62 
rsoc
->
des¸ùt‹s
[
i
].
›code
,

63 
rsoc
->
des¸ùt‹s
[
i
].
ß
,

65 
EXPECT_INVALID_FIELD_IN_CDB
);

67 
	`loggög
(
LOG_VERBOSE
, "This opcode doesÇot have "

70 
	`REPORT_SUPPORTED_OPCODES
(
sd
, 
NULL
, 0,

71 
SCSI_REPORT_SUPPORTING_OPCODE
,

72 
rsoc
->
des¸ùt‹s
[
i
].
›code
,

73 
rsoc
->
des¸ùt‹s
[
i
].
ß
,

75 
EXPECT_STATUS_GOOD
);

78 i‡(
rsoc
->
des¸ùt‹s
[
i
].
£rva˘v
) {

79 
	`loggög
(
LOG_VERBOSE
, "This opcode has serviceáctions. "

81 
	`REPORT_SUPPORTED_OPCODES
(
sd
, 
NULL
, 0,

82 
SCSI_REPORT_SUPPORTING_SERVICEACTION
,

83 
rsoc
->
des¸ùt‹s
[
i
].
›code
,

84 
rsoc
->
des¸ùt‹s
[
i
].
ß
,

86 
EXPECT_STATUS_GOOD
);

88 
	`loggög
(
LOG_VERBOSE
, "This opcode doesÇot have "

91 
	`REPORT_SUPPORTED_OPCODES
(
sd
, 
NULL
, 0,

92 
SCSI_REPORT_SUPPORTING_SERVICEACTION
,

93 
rsoc
->
des¸ùt‹s
[
i
].
›code
,

94 
rsoc
->
des¸ùt‹s
[
i
].
ß
,

96 
EXPECT_INVALID_FIELD_IN_CDB
);

101 
	`loggög
(
LOG_VERBOSE
, "VerifyÑead one-command CDBÜooks sane");

102 
i
 = 0; i < 
rsoc
->
num_des¸ùt‹s
; i++) {

103 
	`loggög
(
LOG_VERBOSE
, "Check CDB for opcode:0x%02x "

105 
rsoc
->
des¸ùt‹s
[
i
].
›code
,

106 
rsoc
->
des¸ùt‹s
[
i
].
ß
);

107 
	`REPORT_SUPPORTED_OPCODES
(
sd
, &
⁄e_èsk
, 0,

108 
rsoc
->
des¸ùt‹s
[
i
].
£rva˘v
 ?

109 
SCSI_REPORT_SUPPORTING_SERVICEACTION
 :

110 
SCSI_REPORT_SUPPORTING_OPCODE
,

111 
rsoc
->
des¸ùt‹s
[
i
].
›code
,

112 
rsoc
->
des¸ùt‹s
[
i
].
ß
,

114 
EXPECT_STATUS_GOOD
);

116 
	`loggög
(
LOG_VERBOSE
, "UnmarshallÅhe DATA-IN buffer");

117 
rsoc_⁄e
 = 
	`scsi_d©aö_unm¨shÆl
(
⁄e_èsk
);

118 
	`CU_ASSERT_PTR_NOT_NULL_FATAL
(
rsoc_⁄e
);

120 
	`loggög
(
LOG_VERBOSE
, "Verify CDBÜength isÇot 0");

121 
	`CU_ASSERT_NOT_EQUAL
(
rsoc_⁄e
->
cdb_Àngth
, 0);

122 i‡(
rsoc_⁄e
->
cdb_Àngth
 == 0) {

123 
	`loggög
(
LOG_NORMAL
, "[FAILED] CDBÜength is 0");

126 
	`loggög
(
LOG_VERBOSE
, "Verify CDB[0] Usage Data == <opcode>");

127 
	`CU_ASSERT_EQUAL
(
rsoc_⁄e
->
cdb_ußge_d©a
[0],

128 
rsoc
->
des¸ùt‹s
[
i
].
›code
);

129 i‡(
rsoc_⁄e
->
cdb_ußge_d©a
[0] !
rsoc
->
des¸ùt‹s
[
i
].
›code
) {

130 
	`loggög
(
LOG_NORMAL
, "[FAILED] CDB[0] Usage Data was "

132 
rsoc_⁄e
->
cdb_ußge_d©a
[0],

133 
rsoc
->
des¸ùt‹s
[
i
].
›code
,

134 
rsoc
->
des¸ùt‹s
[
i
].
›code
);

137 
	`scsi_‰ì_scsi_èsk
(
⁄e_èsk
);

140 
	`scsi_‰ì_scsi_èsk
(
rso_èsk
);

141 
	}
}

	@test-tool/test_report_supported_opcodes_rctd.c

19 
	~<°dio.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-suµ‹t.h
"

26 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_ªp‹t_suµ‹ãd_›codes_r˘d
()

32 
i
;

33 
scsi_èsk
 *
rso_èsk
;

34 
scsi_ªp‹t_suµ‹ãd_›_codes
 *
rsoc
;

36 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

37 
	`loggög
(
LOG_VERBOSE
, "Test READ_SUPPORTED_OPCODES RCTD flag");

39 
	`loggög
(
LOG_VERBOSE
, "Test READ_SUPPORTED_OPCODESÑeport ALL opcodes "

41 
	`REPORT_SUPPORTED_OPCODES
(
sd
, &
rso_èsk
,

42 0, 
SCSI_REPORT_SUPPORTING_OPS_ALL
, 0, 0,

44 
EXPECT_STATUS_GOOD
);

46 
	`loggög
(
LOG_VERBOSE
, "UnmarshallÅhe DATA-IN buffer");

47 
rsoc
 = 
	`scsi_d©aö_unm¨shÆl
(
rso_èsk
);

48 
	`CU_ASSERT_PTR_NOT_NULL_FATAL
(
rsoc
);

50 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatállÑeturned command descriptors "

52 
i
 = 0; i < 
rsoc
->
num_des¸ùt‹s
; i++) {

53 i‡(
rsoc
->
des¸ùt‹s
[
i
].
˘dp
) {

54 
	`loggög
(
LOG_NORMAL
, "[FAILED] Command descriptor with "

56 
	`CU_FAIL
("[FAILED] Command descriptor with "

60 
	`scsi_‰ì_scsi_èsk
(
rso_èsk
);

63 
	`loggög
(
LOG_VERBOSE
, "Test READ_SUPPORTED_OPCODESÑeport ALL opcodes "

65 
	`REPORT_SUPPORTED_OPCODES
(
sd
, &
rso_èsk
,

66 1, 
SCSI_REPORT_SUPPORTING_OPS_ALL
, 0, 0,

68 
EXPECT_STATUS_GOOD
);

70 
	`loggög
(
LOG_VERBOSE
, "UnmarshallÅhe DATA-IN buffer");

71 
rsoc
 = 
	`scsi_d©aö_unm¨shÆl
(
rso_èsk
);

72 
	`CU_ASSERT_NOT_EQUAL
(
rsoc
, 
NULL
);

73 i‡(!
rsoc
)

74 
‰ì_èsk
;

76 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatállÑeturned command descriptors "

78 
i
 = 0; i < 
rsoc
->
num_des¸ùt‹s
; i++) {

79 i‡(!
rsoc
->
des¸ùt‹s
[
i
].
˘dp
) {

80 
	`loggög
(
LOG_NORMAL
, "[FAILED] Command descriptor "

82 
	`CU_FAIL
("[FAILED] Command descriptor without "

87 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatállÅimeout descriptors haveÅhe "

89 
i
 = 0; i < 
rsoc
->
num_des¸ùt‹s
; i++) {

90 i‡(
rsoc
->
des¸ùt‹s
[
i
].
˘dp
 &&

91 
rsoc
->
des¸ùt‹s
[
i
].
to
.
des¸ùt‹_Àngth
 != 0x0a) {

92 
	`loggög
(
LOG_NORMAL
, "[FAILED] Command descriptor "

94 
	`CU_FAIL
("[FAILED] Command descriptor with "

99 
‰ì_èsk
:

100 
	`scsi_‰ì_scsi_èsk
(
rso_èsk
);

101 
	}
}

	@test-tool/test_report_supported_opcodes_servactv.c

19 
	~<°dio.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-suµ‹t.h
"

26 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_ªp‹t_suµ‹ãd_›codes_£rva˘v
()

32 
i
;

33 
scsi_èsk
 *
rso_èsk
;

34 
scsi_ªp‹t_suµ‹ãd_›_codes
 *
rsoc
;

36 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

37 
	`loggög
(
LOG_VERBOSE
, "Test READ_SUPPORTED_OPCODES SERVACTV flag");

39 
	`REPORT_SUPPORTED_OPCODES
(
sd
, &
rso_èsk
,

40 0, 
SCSI_REPORT_SUPPORTING_OPS_ALL
, 0, 0,

42 
EXPECT_STATUS_GOOD
);

44 
	`loggög
(
LOG_VERBOSE
, "UnmarshallÅhe DATA-IN buffer");

45 
rsoc
 = 
	`scsi_d©aö_unm¨shÆl
(
rso_èsk
);

46 
	`CU_ASSERT_PTR_NOT_NULL_FATAL
(
rsoc
);

48 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhat when SERVACTV is clearÅhen "

50 
i
 = 0; i < 
rsoc
->
num_des¸ùt‹s
; i++) {

51 i‡(!
rsoc
->
des¸ùt‹s
[
i
].
£rva˘v
 &&Ñsoc->des¸ùt‹s[i].
ß
) {

52 
	`loggög
(
LOG_NORMAL
, "[FAILED] ServiceAction is "

54 
	`CU_FAIL
("[FAILED] ServiceAction is "

59 
	`scsi_‰ì_scsi_èsk
(
rso_èsk
);

60 
	}
}

	@test-tool/test_report_supported_opcodes_simple.c

19 
	~<°dio.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-suµ‹t.h
"

26 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_ªp‹t_suµ‹ãd_›codes_sim∂e
()

32 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

33 
	`loggög
(
LOG_VERBOSE
, "Test basic READ_SUPPORTED_OPCODES");

35 
	`REPORT_SUPPORTED_OPCODES
(
sd
, 
NULL
,

36 0, 
SCSI_REPORT_SUPPORTING_OPS_ALL
, 0, 0,

38 
EXPECT_STATUS_GOOD
);

39 
	}
}

	@test-tool/test_reserve6_2initiators.c

19 
	~<°dio.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-suµ‹t.h
"

26 
	~"iscsi-ã°-cu.h
"

27 
	~"iscsi-mu…ù©h.h
"

30 
	$ã°_ª£rve6_2öôüt‹s
()

32 
ªt
;

33 
scsi_devi˚
 *
sd2
;

35 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

36 
	`loggög
(
LOG_VERBOSE
, "Test RESERVE6/RELEASE6ácrossÅwo initiators");

38 i‡(
sd
->
iscsi_˘x
 =
NULL
) {

39 c⁄° *
îr
 = "[SKIPPED] This RESERVE6Åest is only "

41 
	`loggög
(
LOG_NORMAL
, "%s", 
îr
);

42 
	`CU_PASS
(
îr
);

46 
	`loggög
(
LOG_NORMAL
, "Take outá RESERVE6 fromÅhe first initiator");

47 
	`RESERVE6
(
sd
);

49 
	`loggög
(
LOG_NORMAL
, "VerifyÅhatÅhe first initiator canÑe-RESERVE6Åhe sameÑeservation");

50 
	`RESERVE6
(
sd
);

52 
ªt
 = 
	`m∑th_sd2_gë_‹_˛⁄e
(
sd
, &
sd2
);

53 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

54 i‡(
ªt
 < 0)

57 
	`loggög
(
LOG_NORMAL
, "TryÅoÅake outá RESERVE6 fromÅhe second initiator");

58 
ªt
 = 
	`ª£rve6_c⁄Êi˘
(
sd2
);

59 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

62 
	`loggög
(
LOG_NORMAL
, "TryÅo RELEASE fromÅhe second initiator. Should beáÇop");

63 
	`RELEASE6
(
sd2
);

65 
	`loggög
(
LOG_NORMAL
, "Test we can still send MODE SENSE fromÅhe first initiator");

66 
	`MODESENSE6
(
sd
, 
NULL
, 0, 
SCSI_MODESENSE_PC_CURRENT
,

67 
SCSI_MODEPAGE_RETURN_ALL_PAGES
, 0, 255,

68 
EXPECT_STATUS_GOOD
);

70 
	`loggög
(
LOG_NORMAL
, "MODE SENSE should fail fromÅhe second initiator");

71 
	`MODESENSE6
(
sd2
, 
NULL
, 0, 
SCSI_MODESENSE_PC_CURRENT
,

72 
SCSI_MODEPAGE_RETURN_ALL_PAGES
, 0, 255,

73 
EXPECT_RESERVATION_CONFLICT
);

75 
	`loggög
(
LOG_NORMAL
, "RESERVE6 fromÅhe second initiator should still fail");

76 
ªt
 = 
	`ª£rve6_c⁄Êi˘
(
sd2
);

77 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

79 
	`loggög
(
LOG_NORMAL
, "RELEASE6 fromÅhe first initiator");

80 
	`RELEASE6
(
sd
);

82 
	`loggög
(
LOG_NORMAL
, "RESERVE6 fromÅhe second initiator should workÇow");

83 
	`RESERVE6
(
sd2
);

85 
	`loggög
(
LOG_NORMAL
, "RELEASE6 fromÅhe second initiator");

86 
	`RELEASE6
(
sd2
);

88 
	`m∑th_sd2_put
(
sd2
);

89 
	}
}

	@test-tool/test_reserve6_itnexus_loss.c

19 
	~<°dio.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-suµ‹t.h
"

26 
	~"iscsi-ã°-cu.h
"

27 
	~"iscsi-mu…ù©h.h
"

30 
	$ã°_ª£rve6_ô√xus_loss
()

32 
ªt
;

33 
scsi_devi˚
 *
sd2
;

35 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

36 
	`loggög
(
LOG_VERBOSE
, "TestÅhat RESERVE6 isÑeleased on it-nexusÜoss");

38 i‡(
sd
->
iscsi_˘x
 =
NULL
) {

39 c⁄° *
îr
 = "[SKIPPED] This RESERVE6Åest is only "

41 
	`loggög
(
LOG_NORMAL
, "%s", 
îr
);

42 
	`CU_PASS
(
îr
);

46 
	`loggög
(
LOG_NORMAL
, "Take outá RESERVE6 fromÅhe first initiator");

47 
	`RESERVE6
(
sd
);

49 
	`loggög
(
LOG_VERBOSE
, "Createá second connectionÅoÅheÅarget");

50 
ªt
 = 
	`m∑th_sd2_gë_‹_˛⁄e
(
sd
, &
sd2
);

51 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

52 i‡(
ªt
 < 0)

55 
	`loggög
(
LOG_NORMAL
, "TryÅoÅake outá RESERVE6 fromÅhe second initiator");

56 
ªt
 = 
	`ª£rve6_c⁄Êi˘
(
sd2
);

57 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

59 
	`loggög
(
LOG_VERBOSE
, "Disconnect fromÅheÅarget.");

60 
	`iscsi_de°roy_c⁄ãxt
(
sd
->
iscsi_˘x
);

62 
	`loggög
(
LOG_VERBOSE
, "Sleep forÅhree seconds in caseÅheÅarget is slowÅoÑeset");

63 
	`¶ìp
(3);

65 
	`loggög
(
LOG_VERBOSE
, "ReconnectÅoÅarget");

66 
sd
->
iscsi_˘x
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹«me1
, sd->
iscsi_uæ
, &sd->
iscsi_lun
);

67 i‡(
sd
->
iscsi_˘x
 =
NULL
) {

68 
	`loggög
(
LOG_VERBOSE
, "FailedÅoÜoginÅoÅarget");

69 
föished
;

72 
	`loggög
(
LOG_NORMAL
, "RESERVE6 fromÅhe second initiator should workÇow");

73 
	`RESERVE6
(
sd2
);

75 
	`loggög
(
LOG_NORMAL
, "RELEASE6 fromÅhe second initiator");

76 
	`RELEASE6
(
sd2
);

78 
föished
:

79 
	`m∑th_sd2_put
(
sd2
);

80 
	}
}

	@test-tool/test_reserve6_logout.c

19 
	~<°dio.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-suµ‹t.h
"

26 
	~"iscsi-ã°-cu.h
"

27 
	~"iscsi-mu…ù©h.h
"

30 
	$ã°_ª£rve6_logout
()

32 
ªt
;

33 
scsi_devi˚
 *
sd2
;

35 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

36 
	`loggög
(
LOG_VERBOSE
, "TestÅhat RESERVE6 isÑeleased onÜogout");

38 i‡(
sd
->
iscsi_˘x
 =
NULL
) {

39 c⁄° *
îr
 = "[SKIPPED] This RESERVE6Åest is only "

41 
	`loggög
(
LOG_NORMAL
, "%s", 
îr
);

42 
	`CU_PASS
(
îr
);

46 
	`loggög
(
LOG_NORMAL
, "Take outá RESERVE6 fromÅhe first initiator");

47 
	`RESERVE6
(
sd
);

49 
	`loggög
(
LOG_VERBOSE
, "Createá second connectionÅoÅheÅarget");

50 
ªt
 = 
	`m∑th_sd2_gë_‹_˛⁄e
(
sd
, &
sd2
);

51 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

52 i‡(
ªt
 < 0)

55 
	`loggög
(
LOG_NORMAL
, "TryÅoÅake outá RESERVE6 fromÅhe second initiator");

56 
ªt
 = 
	`ª£rve6_c⁄Êi˘
(
sd2
);

57 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

59 
	`loggög
(
LOG_VERBOSE
, "Logout fromÅarget");

60 
	`iscsi_logout_sync
(
sd
->
iscsi_˘x
);

61 
	`iscsi_de°roy_c⁄ãxt
(
sd
->
iscsi_˘x
);

63 
	`loggög
(
LOG_VERBOSE
, "ReloginÅoÅarget");

64 
sd
->
iscsi_˘x
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹«me1
, sd->
iscsi_uæ
, &sd->
iscsi_lun
);

65 i‡(
sd
->
iscsi_˘x
 =
NULL
) {

66 
	`loggög
(
LOG_VERBOSE
, "FailedÅoÜoginÅoÅarget");

70 
	`loggög
(
LOG_NORMAL
, "RESERVE6 fromÅhe second initiator should workÇow");

71 
	`RESERVE6
(
sd2
);

73 
	`loggög
(
LOG_NORMAL
, "RELEASE6 fromÅhe second initiator");

74 
	`RELEASE6
(
sd2
);

76 
	`m∑th_sd2_put
(
sd2
);

77 
	}
}

	@test-tool/test_reserve6_lun_reset.c

19 
	~<°dio.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-suµ‹t.h
"

26 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_ª£rve6_lun_ª£t
()

32 
ªt
;

33 
scsi_devi˚
 
sd2
;

35 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

36 
	`loggög
(
LOG_VERBOSE
, "TestÅhat RESERVE6 isÑeleased onÜunÑeset");

38 i‡(
sd
->
iscsi_˘x
 =
NULL
) {

39 c⁄° *
îr
 = "[SKIPPED] This RESERVE6Åest is only "

41 
	`loggög
(
LOG_NORMAL
, "%s", 
îr
);

42 
	`CU_PASS
(
îr
);

46 
	`loggög
(
LOG_VERBOSE
, "Take outá RESERVE6 fromÅhe first initiator");

47 
	`RESERVE6
(
sd
);

49 
	`loggög
(
LOG_VERBOSE
, "Sendá LUN Reset");

50 
ªt
 = 
	`iscsi_èsk_mgmt_lun_ª£t_sync
(
sd
->
iscsi_˘x
, sd->
iscsi_lun
);

51 i‡(
ªt
 != 0) {

52 
	`loggög
(
LOG_NORMAL
, "LUNÑe£àÁûed. %s", 
	`iscsi_gë_îr‹
(
sd
->
iscsi_˘x
));

54 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

56 
	`loggög
(
LOG_VERBOSE
, "Sleep forÅhree seconds in caseÅheÅarget is slowÅoÑeset");

57 
	`¶ìp
(3);

60 
	`loggög
(
LOG_VERBOSE
, "Createá second connectionÅoÅheÅarget");

61 
	`mem£t
(&
sd2
, 0, (sd2));

62 
sd2
.
iscsi_uæ
 = 
sd
->iscsi_url;

63 
sd2
.
iscsi_lun
 = 
sd
->iscsi_lun;

64 
sd2
.
iscsi_˘x
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹«me2
, sd2.
iscsi_uæ
, &sd2.
iscsi_lun
);

65 i‡(
sd2
.
iscsi_˘x
 =
NULL
) {

66 
	`loggög
(
LOG_VERBOSE
, "FailedÅoÜoginÅoÅarget");

70 
	`loggög
(
LOG_VERBOSE
, "RESERVE6 fromÅhe second initiator should workÇow");

71 
	`RESERVE6
(&
sd2
);

73 
	`loggög
(
LOG_VERBOSE
, "RELEASE6 fromÅhe second initiator");

74 
	`RELEASE6
(&
sd2
);

76 
	`iscsi_logout_sync
(
sd2
.
iscsi_˘x
);

77 
	`iscsi_de°roy_c⁄ãxt
(
sd2
.
iscsi_˘x
);

78 
	}
}

	@test-tool/test_reserve6_simple.c

19 
	~<°dio.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-suµ‹t.h
"

26 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_ª£rve6_sim∂e
()

32 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

33 
	`loggög
(
LOG_VERBOSE
, "Test basic RESERVE6/RELEASE6 commands if supported");

35 
	`RESERVE6
(
sd
);

37 
	`RELEASE6
(
sd
);

38 
	}
}

	@test-tool/test_reserve6_target_cold_reset.c

19 
	~<°dio.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-suµ‹t.h
"

26 
	~"iscsi-ã°-cu.h
"

27 
	~"iscsi-mu…ù©h.h
"

30 
	$ã°_ª£rve6_èrgë_cﬁd_ª£t
()

32 
ªt
;

33 
scsi_devi˚
 *
sd2
;

35 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

36 
	`loggög
(
LOG_VERBOSE
, "TestÅhat RESERVE6 isÑeleased onÅarget coldÑeset");

38 i‡(
sd
->
iscsi_˘x
 =
NULL
) {

39 c⁄° *
îr
 = "[SKIPPED] This RESERVE6Åest is only "

41 
	`loggög
(
LOG_NORMAL
, "%s", 
îr
);

42 
	`CU_PASS
(
îr
);

46 
	`loggög
(
LOG_VERBOSE
, "Take outá RESERVE6 fromÅhe first initiator");

47 
	`RESERVE6
(
sd
);

49 
	`loggög
(
LOG_VERBOSE
, "Sendá Cold ResetÅoÅheÅarget");

50 
ªt
 = 
	`iscsi_èsk_mgmt_èrgë_cﬁd_ª£t_sync
(
sd
->
iscsi_˘x
);

51 i‡(
ªt
 != 0) {

52 c⁄° *
îr
 = "[SKIPPED] Task Management function"

54 
	`loggög
(
LOG_NORMAL
, "%s", 
îr
);

55 
	`CU_PASS
(
îr
);

59 
	`loggög
(
LOG_VERBOSE
, "Sleep forÅhree seconds in caseÅheÅarget is slowÅoÑeset");

60 
	`¶ìp
(3);

62 
	`loggög
(
LOG_VERBOSE
, "Createá second connectionÅoÅheÅarget");

63 
ªt
 = 
	`m∑th_sd2_gë_‹_˛⁄e
(
sd
, &
sd2
);

64 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

65 i‡(
ªt
 < 0)

68 
	`loggög
(
LOG_VERBOSE
, "RESERVE6 fromÅhe second initiator should workÇow");

69 
	`RESERVE6
(
sd2
);

71 
	`loggög
(
LOG_VERBOSE
, "RELEASE6 fromÅhe second initiator");

72 
	`RELEASE6
(
sd2
);

74 
	`m∑th_sd2_put
(
sd2
);

75 
	}
}

	@test-tool/test_reserve6_target_warm_reset.c

19 
	~<°dio.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-suµ‹t.h
"

26 
	~"iscsi-ã°-cu.h
"

27 
	~"iscsi-mu…ù©h.h
"

30 
	$ã°_ª£rve6_èrgë_w¨m_ª£t
()

32 
ªt
;

33 
scsi_devi˚
 *
sd2
;

35 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

36 
	`loggög
(
LOG_VERBOSE
, "TestÅhat RESERVE6 isÑeleased onÅarget warmÑeset");

38 i‡(
sd
->
iscsi_˘x
 =
NULL
) {

39 c⁄° *
îr
 = "[SKIPPED] This RESERVE6Åest is only "

41 
	`loggög
(
LOG_NORMAL
, "%s", 
îr
);

42 
	`CU_PASS
(
îr
);

46 
	`loggög
(
LOG_VERBOSE
, "Take outá RESERVE6 fromÅhe first initiator");

47 
	`RESERVE6
(
sd
);

49 
	`loggög
(
LOG_VERBOSE
, "Sendá Warm ResetÅoÅheÅarget");

50 
ªt
 = 
	`iscsi_èsk_mgmt_èrgë_w¨m_ª£t_sync
(
sd
->
iscsi_˘x
);

51 i‡(
ªt
 != 0) {

52 c⁄° *
îr
 = "[SKIPPED] Task Management function"

54 
	`loggög
(
LOG_NORMAL
, "%s", 
îr
);

55 
	`CU_PASS
(
îr
);

59 
	`loggög
(
LOG_VERBOSE
, "Sleep forÅhree seconds in caseÅheÅarget is slowÅoÑeset");

60 
	`¶ìp
(3);

62 
	`loggög
(
LOG_VERBOSE
, "Createá second connectionÅoÅheÅarget");

63 
ªt
 = 
	`m∑th_sd2_gë_‹_˛⁄e
(
sd
, &
sd2
);

64 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

65 i‡(
ªt
 < 0)

68 
	`loggög
(
LOG_VERBOSE
, "RESERVE6 fromÅhe second initiator should workÇow");

69 
	`RESERVE6
(
sd2
);

71 
	`loggög
(
LOG_VERBOSE
, "RELEASE6 fromÅhe second initiator");

72 
	`RELEASE6
(
sd2
);

74 
	`m∑th_sd2_put
(
sd2
);

75 
	}
}

	@test-tool/test_sanitize_block_erase.c

19 
	~<°dio.h
>

20 
	~<°dlib.h
>

21 
	~<°rög.h
>

22 
	~<°dlib.h
>

23 
	~<öây≥s.h
>

25 
	~<CUnô/CUnô.h
>

27 
	~"iscsi.h
"

28 
	~"scsi-lowÀvñ.h
"

29 
	~"iscsi-ã°-cu.h
"

32 
	$check_wabîeq
()

34 
scsi_èsk
 *
èsk_ªt
 = 
NULL
;

36 
	`loggög
(
LOG_VERBOSE
, "Read one block from LBA 0");

37 
	`READ10
(
sd
, &
èsk_ªt
, 0, 
block_size
, block_size, 0, 0, 0, 0, 0, 
NULL
,

38 
EXPECT_STATUS_GOOD
);

39 
	`CU_ASSERT_PTR_NOT_NULL_FATAL
(
èsk_ªt
);

40 i‡(
èsk_ªt
 =
NULL
) {

43 
	`CU_ASSERT_NOT_EQUAL
(
èsk_ªt
->
°©us
, 
SCSI_STATUS_CANCELLED
);

45 
öq_bdc
->
wabîeq
) {

47 
	`loggög
(
LOG_NORMAL
, "[FAILED] SANITIZE BLOCK ERASE "

49 
	`CU_FAIL
("[FAILED] SANITIZE BLOCK ERASE "

53 
	`loggög
(
LOG_VERBOSE
, "WABEREQ==1. Reads fromÅhe "

55 i‡(
èsk_ªt
->
°©us
 =
SCSI_STATUS_GOOD
) {

56 
	`loggög
(
LOG_VERBOSE
, "[SUCCESS] Read was "

60 
	`loggög
(
LOG_NORMAL
, "[FAILED] Readáfter "

62 
	`CU_FAIL
("[FAILED] Readáfter SANITIZE failed "

66 
	`loggög
(
LOG_VERBOSE
, "WABEREQ==2. Reads fromÅhe "

68 i‡(
èsk_ªt
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


69 && 
èsk_ªt
->
£n£
.
key
 =
SCSI_SENSE_MEDIUM_ERROR


70 && 
èsk_ªt
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_WRITE_AFTER_SANITIZE_REQUIRED
) {

71 
	`loggög
(
LOG_VERBOSE
, "[SUCCESS] Read failed "

76 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Read should have failed "

79 
	`CU_FAIL
("[FAILED] Read should have failed "

84 
	`loggög
(
LOG_VERBOSE
, "WABEREQ==3. Reads fromÅhe "

86 i‡(
èsk_ªt
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


87 && 
èsk_ªt
->
£n£
.
key
 =
SCSI_SENSE_MEDIUM_ERROR


88 && 
èsk_ªt
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_WRITE_AFTER_SANITIZE_REQUIRED
) {

89 
	`loggög
(
LOG_VERBOSE
, "[SUCCESS] Read failed "

94 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Read should have failed "

97 
	`CU_FAIL
("[FAILED] Read should have failed "

103 
	`scsi_‰ì_scsi_èsk
(
èsk_ªt
);

104 
	}
}

107 
	$check_unm≠
()

109 
i
;

110 
scsi_èsk
 *
èsk_ªt
 = 
NULL
;

111 
scsi_gë_lba_°©us
 *
lbas
;

112 
uöt64_t
 
lba
;

114 
	`loggög
(
LOG_VERBOSE
, "Read LBA mapping fromÅheÅarget");

115 
	`GETLBASTATUS
(
sd
, &
èsk_ªt
, 0, 256,

116 
EXPECT_STATUS_GOOD
);

117 i‡(
èsk_ªt
 =
NULL
) {

118 
	`loggög
(
LOG_VERBOSE
, "[FAILED] FailedÅoÑead LBA mapping "

120 
	`CU_FAIL
("[FAILED] FailedÅoÑead LBA mapping "

124 i‡(
èsk_ªt
->
°©us
 !
SCSI_STATUS_GOOD
) {

125 
	`loggög
(
LOG_VERBOSE
, "[FAILED] FailedÅoÑead LBA mapping "

127 
sd
->
îr‹_°r
);

128 
	`CU_FAIL
("[FAILED] FailedÅoÑead LBA mapping "

130 
	`scsi_‰ì_scsi_èsk
(
èsk_ªt
);

134 
	`loggög
(
LOG_VERBOSE
, "Unmarshall LBA mapping datain buffer");

135 
lbas
 = 
	`scsi_d©aö_unm¨shÆl
(
èsk_ªt
);

136 i‡(
lbas
 =
NULL
) {

137 
	`loggög
(
LOG_VERBOSE
, "[FAILED] FailedÅo unmarshall LBA "

139 
	`CU_FAIL
("[FAILED] FailedÅoÑead unmarshall LBA mapping");

140 
	`scsi_‰ì_scsi_èsk
(
èsk_ªt
);

144 
	`loggög
(
LOG_VERBOSE
, "Verify we gotátÜeast one status descriptor "

146 i‡(
lbas
->
num_des¸ùt‹s
 < 1) {

147 
	`loggög
(
LOG_VERBOSE
, "[FAILED] WrongÇumber of LBA status "

149 
lbas
->
num_des¸ùt‹s
);

150 
	`CU_FAIL
("[FAILED] WrongÇumber of LBA status descriptors.");

151 
	`scsi_‰ì_scsi_èsk
(
èsk_ªt
);

155 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatáll descriptorsáreÉither "

157 
i
 = 0; i < ()
lbas
->
num_des¸ùt‹s
; i++) {

158 
	`loggög
(
LOG_VERBOSE
, "Check des¸ùt‹ %d LBA:%" 
PRIu64
 "-%"

159 
PRIu64
 "Åhat it isÇot MAPPED",

160 
i
,

161 
lbas
->
des¸ùt‹s
[
i
].
lba
,

162 
lbas
->
des¸ùt‹s
[
i
].
lba
 +Übas->des¸ùt‹s[i].
num_blocks
);

163 i‡(
lbas
->
des¸ùt‹s
[
i
].
¥ovisi⁄ög
 =
SCSI_PROVISIONING_TYPE_MAPPED
) {

164 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Descriptor %d is MAPPED."

166 "‹ ANCHOREDá·î SANITIZE", 
i
);

167 
	`CU_FAIL
("[FAILED] LBA status descriptor is MAPPED.");

171 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅhe descriptors coverÅhe whole LUN");

172 
lba
 = 0;

173 
i
 = 0; i < ()
lbas
->
num_des¸ùt‹s
; i++) {

174 
	`loggög
(
LOG_VERBOSE
, "Check des¸ùt‹ %d LBA:%" 
PRIu64
 "-%"

175 
PRIu64
 "Åhat it is in order",

176 
i
,

177 
lbas
->
des¸ùt‹s
[
i
].
lba
,

178 
lbas
->
des¸ùt‹s
[
i
].
lba
 +Übas->des¸ùt‹s[i].
num_blocks
);

179 i‡(
lba
 !
lbas
->
des¸ùt‹s
[
i
].lba) {

180 
	`loggög
(
LOG_VERBOSE
, "[FAILED] LBA status descriptors "

182 
	`CU_FAIL
("[FAILED] LBA status descriptorsÇot in order");

184 
lba
 +
lbas
->
des¸ùt‹s
[
i
].
num_blocks
;

186 i‡(
lba
 !
num_blocks
) {

187 
	`loggög
(
LOG_VERBOSE
, "[FAILED] The LUN isÇot fully"

189 
	`CU_FAIL
("[FAILED] The LUN isÇot fully"

193 
	`scsi_‰ì_scsi_èsk
(
èsk_ªt
);

194 
	}
}

197 
	$check_lun_is_wùed
(*
buf
, 
uöt64_t
 
lba
)

199 *
rbuf
 = 
	`Æloˇ
(256 * 
block_size
);

201 
	`READ16
(
sd
, 
NULL
, 
lba
, 256 * 
block_size
, block_size, 0, 0, 0, 0, 0, 
rbuf
,

202 
EXPECT_STATUS_GOOD
);

203 i‡(
rc16
 =
NULL
) {

207 i‡(
rc16
->
lb¥z
) {

208 
	`loggög
(
LOG_VERBOSE
, "LBPRZ==1 All blocks "

210 i‡(
	`Æl_zîo
(
rbuf
, 256 * 
block_size
) == 0) {

211 
	`loggög
(
LOG_NORMAL
, "[FAILED] Blocks didÇot "

213 
	`CU_FAIL
("[FAILED] Blocks didÇotÑead back "

216 
	`loggög
(
LOG_VERBOSE
, "[SUCCESS] BlocksÑead "

220 
	`loggög
(
LOG_VERBOSE
, "LBPRZ==0 Blocks shouldÇotÑead backás "

222 i‡(!
	`memcmp
(
buf
, 
rbuf
, 256 * 
block_size
)) {

223 
	`loggög
(
LOG_NORMAL
, "[FAILED] Blocks wereÇot wiped");

224 
	`CU_FAIL
("[FAILED] Blocks wereÇot wiped");

226 
	`loggög
(
LOG_VERBOSE
, "[SUCCESS] Blocks were wiped");

229 
	}
}

232 
	$ã°_ßnôize_block_îa£
()

234 
iscsi_d©a
 
d©a
;

235 
scsi_comm™d_des¸ùt‹
 *
cd
;

236 *
buf
 = 
	`Æloˇ
(256 * 
block_size
);

238 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

239 
	`loggög
(
LOG_VERBOSE
, "Test SANITIZE BLOCK ERASE");

241 
CHECK_FOR_SANITIZE
;

242 
CHECK_FOR_DATALOSS
;

244 
	`loggög
(
LOG_VERBOSE
, "CheckÅhat SANITIZE BLOCK_ERASE is supported "

246 
cd
 = 
	`gë_comm™d_des¸ùt‹
(
SCSI_OPCODE_SANITIZE
,

247 
SCSI_SANITIZE_BLOCK_ERASE
);

248 i‡(
cd
 =
NULL
) {

249 
	`loggög
(
LOG_VERBOSE
, "Opcode isÇot supported. VerifyÅhat "

251 i‡(
öq_bdc
 && inq_bdc->
wabîeq
) {

252 
	`loggög
(
LOG_NORMAL
, "[FAILED] WABEREQ isÇot 0 but "

254 
	`CU_FAIL
("[FAILED] WABEREQ isÇot 0 but BLOCK ERASE "

258 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] SANITIZE BLOCK_ERASE isÇot "

260 
	`CU_PASS
("SANITIZE isÇot implemented.");

264 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhat we have BlockDeviceCharacteristics "

266 i‡(
öq_bdc
 =
NULL
) {

267 
	`loggög
(
LOG_NORMAL
, "[FAILED] SANITIZE BLOCK ERASE opcode is "

270 
	`CU_FAIL
("[FAILED] BlockDeviceCharacteristics VPD "

274 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhat we have READCAPACITY16");

275 i‡(!
rc16
) {

276 
	`loggög
(
LOG_NORMAL
, "[FAILED] SANITIZE BLOCK ERASE opcode is "

278 
	`CU_FAIL
("[FAILED] READCAPACITY16 is missing");

281 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÜogical blockÖrovisioning (LBPME) "

283 i‡(!
rc16
 || !‘c16->
lbpme
)) {

284 
	`loggög
(
LOG_NORMAL
, "[FAILED] SANITIZE BLOCK ERASE opcode is "

286 
	`CU_FAIL
("[FAILED] SANITIZE BLOCK ERASE opcode is "

290 
	`loggög
(
LOG_VERBOSE
, "Check MediumRotationRate whetherÅhis isá HDD "

292 i‡(
öq_bdc
 && inq_bdc->
medium_rŸ©i⁄_øã
 != 0) {

293 
	`loggög
(
LOG_NORMAL
, "This isá HDD device");

294 
	`loggög
(
LOG_NORMAL
, "[WARNING] SANITIZE BLOCK ERASE opcode is "

299 
	`loggög
(
LOG_NORMAL
, "This isá HDD device");

303 
	`loggög
(
LOG_VERBOSE
, "Write 'a'ÅoÅhe first 256 LBAs");

304 
	`mem£t
(
s¸©ch
, 'a', 256 * 
block_size
);

305 
	`WRITE16
(
sd
, 0, 256 * 
block_size
,

306 
block_size
, 0, 0, 0, 0, 0, 
s¸©ch
,

307 
EXPECT_STATUS_GOOD
);

308 
	`loggög
(
LOG_VERBOSE
, "Write 'a'ÅoÅheÜast 256 LBAs");

309 
	`WRITE16
(
sd
, 
num_blocks
 - 256, 256 * 
block_size
,

310 
block_size
, 0, 0, 0, 0, 0, 
s¸©ch
,

311 
EXPECT_STATUS_GOOD
);

314 
	`loggög
(
LOG_VERBOSE
, "Test we canÖerform basic BLOCK ERASE SANITIZE");

315 
	`SANITIZE
(
sd
, 0, 0, 
SCSI_SANITIZE_BLOCK_ERASE
, 0, 
NULL
,

316 
EXPECT_STATUS_GOOD
);

318 
	`loggög
(
LOG_VERBOSE
, "CheckÅhatÅhe first 256 LBAsáre wiped.");

319 
	`check_lun_is_wùed
(
buf
, 0);

320 
	`loggög
(
LOG_VERBOSE
, "CheckÅhatÅheÜast 256 LBAsáre wiped.");

321 
	`check_lun_is_wùed
(
buf
, 
num_blocks
 - 256);

323 
d©a
.
size
 = 8;

324 
d©a
.d©®
	`Æloˇ
(d©a.
size
);

325 
	`mem£t
(
d©a
.d©a, 0, d©a.
size
);

327 
	`loggög
(
LOG_VERBOSE
, "BLOCK_ERASEÖarameterÜistÜength must be 0");

328 
	`loggög
(
LOG_VERBOSE
, "TestÅhatÇon-zeroÖaramÜength isánÉrror for "

330 
	`SANITIZE
(
sd
, 0, 0, 
SCSI_SANITIZE_BLOCK_ERASE
, 8, &
d©a
,

331 
EXPECT_INVALID_FIELD_IN_CDB
);

333 i‡(
öq_bdc
) {

334 
	`loggög
(
LOG_VERBOSE
, "Check WABEREQ settingándÅhat READ "

336 
	`check_wabîeq
();

339 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatáll blocksáre unmappedáfter "

341 
	`check_unm≠
();

342 
	}
}

	@test-tool/test_sanitize_block_erase_reserved.c

19 
	~<°dio.h
>

20 
	~<¨∑/öë.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"iscsi-¥iv©e.h
"

25 
	~"scsi-lowÀvñ.h
"

26 
	~"iscsi-ã°-cu.h
"

28 
	gch™ge_num
;

30 
	$my_iscsi_queue_pdu
(
iscsi_c⁄ãxt
 *
iscsi
 
_U_
, 
iscsi_pdu
 *
pdu
)

32 
ch™ge_num
) {

35 
pdu
->
outd©a
.
d©a
[33] |= 0x40;

43 
pdu
->
outd©a
.
d©a
[32 + 
ch™ge_num
] = change_num;

47 
ch™ge_num
 = 0;

49 
	}
}

51 
	$ã°_ßnôize_block_îa£_ª£rved
()

53 
i
;

55 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

56 
	`loggög
(
LOG_VERBOSE
, "Test SANITIZE BLOCK_ERASE Reserved bits/bytes");

58 
CHECK_FOR_SANITIZE
;

59 
CHECK_FOR_DATALOSS
;

61 
loˇl_iscsi_queue_pdu
 = 
my_iscsi_queue_pdu
;

64 
	`loggög
(
LOG_VERBOSE
, "Send SANITIZE command withÅheÑeserved "

66 
ch™ge_num
 = 1;

67 
	`SANITIZE
(
sd
, 0, 0, 
SCSI_SANITIZE_BLOCK_ERASE
, 0, 
NULL
,

68 
EXPECT_INVALID_FIELD_IN_CDB
);

70 
i
 = 2; i < 7; i++) {

71 
	`loggög
(
LOG_VERBOSE
, "Send SANITIZE command withÅheÑeserved "

72 "byã %d sëÅÿn⁄-zîo", 
i
);

73 
ch™ge_num
 = 
i
;

75 
	`SANITIZE
(
sd
, 0, 0, 
SCSI_SANITIZE_BLOCK_ERASE
, 0, 
NULL
,

76 
EXPECT_INVALID_FIELD_IN_CDB
);

78 
	}
}

	@test-tool/test_sanitize_crypto_erase.c

19 
	~<°dio.h
>

20 
	~<°dlib.h
>

21 
	~<°rög.h
>

22 
	~<°dlib.h
>

24 
	~<CUnô/CUnô.h
>

26 
	~"iscsi.h
"

27 
	~"scsi-lowÀvñ.h
"

28 
	~"iscsi-ã°-cu.h
"

32 
	$check_wa˚ªq
()

34 
scsi_èsk
 *
èsk_ªt
 = 
NULL
;

36 
	`loggög
(
LOG_VERBOSE
, "Read one block from LBA 0");

37 
	`READ10
(
sd
, &
èsk_ªt
, 0, 
block_size
, block_size, 0, 0, 0, 0, 0, 
NULL
,

38 
EXPECT_STATUS_GOOD
);

39 
	`CU_ASSERT_PTR_NOT_NULL_FATAL
(
èsk_ªt
);

40 i‡(
èsk_ªt
 =
NULL
) {

43 
	`CU_ASSERT_NOT_EQUAL
(
èsk_ªt
->
°©us
, 
SCSI_STATUS_CANCELLED
);

45 
öq_bdc
->
wabîeq
) {

47 
	`loggög
(
LOG_NORMAL
, "[FAILED] SANITIZE BLOCK ERASE "

49 
	`CU_FAIL
("[FAILED] SANITIZE BLOCK ERASE "

53 
	`loggög
(
LOG_VERBOSE
, "WACEREQ==1. Reads fromÅhe "

55 i‡(
èsk_ªt
->
°©us
 =
SCSI_STATUS_GOOD
) {

56 
	`loggög
(
LOG_VERBOSE
, "[SUCCESS] Read was "

60 
	`loggög
(
LOG_NORMAL
, "[FAILED] Readáfter "

62 
	`CU_FAIL
("[FAILED] Readáfter SANITIZE failed "

66 
	`loggög
(
LOG_VERBOSE
, "WACEREQ==2. Reads fromÅhe "

68 i‡(
èsk_ªt
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


69 && 
èsk_ªt
->
£n£
.
key
 =
SCSI_SENSE_MEDIUM_ERROR


70 && 
èsk_ªt
->
£n£
.
ascq
 !
SCSI_SENSE_ASCQ_WRITE_AFTER_SANITIZE_REQUIRED
) {

71 
	`loggög
(
LOG_VERBOSE
, "[SUCCESS] Read failed "

76 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Read should have failed "

79 
	`CU_FAIL
("[FAILED] Read should have failed "

84 
	`loggög
(
LOG_VERBOSE
, "WACEREQ==3. Reads fromÅhe "

86 i‡(
èsk_ªt
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


87 && 
èsk_ªt
->
£n£
.
key
 =
SCSI_SENSE_MEDIUM_ERROR


88 && 
èsk_ªt
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_WRITE_AFTER_SANITIZE_REQUIRED
) {

89 
	`loggög
(
LOG_VERBOSE
, "[SUCCESS] Read failed "

94 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Read should have failed "

97 
	`CU_FAIL
("[FAILED] Read should have failed "

103 
	`scsi_‰ì_scsi_èsk
(
èsk_ªt
);

104 
	}
}

107 
	$check_lun_is_wùed
(*
buf
, 
uöt64_t
 
lba
)

109 *
rbuf
 = 
	`Æloˇ
(256 * 
block_size
);

111 
	`READ16
(
sd
, 
NULL
, 
lba
, 256 * 
block_size
, block_size, 0, 0, 0, 0, 0, 
rbuf
,

112 
EXPECT_STATUS_GOOD
);

113 i‡(!
	`memcmp
(
buf
, 
rbuf
, 256 * 
block_size
)) {

114 
	`loggög
(
LOG_NORMAL
, "[FAILED] Blocks wereÇot wiped");

115 
	`CU_FAIL
("[FAILED] Blocks wereÇot wiped");

117 
	`loggög
(
LOG_VERBOSE
, "[SUCCESS] Blocks were wiped");

119 
	}
}

122 
	$ã°_ßnôize_¸y±o_îa£
()

124 
iscsi_d©a
 
d©a
;

125 
scsi_comm™d_des¸ùt‹
 *
cd
;

126 *
buf
 = 
	`Æloˇ
(256 * 
block_size
);

128 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

129 
	`loggög
(
LOG_VERBOSE
, "Test SANITIZE CRYPTO ERASE");

131 
CHECK_FOR_SANITIZE
;

132 
CHECK_FOR_DATALOSS
;

134 
	`loggög
(
LOG_VERBOSE
, "CheckÅhat SANITIZE CRYPTO_ERASE is supported "

136 
cd
 = 
	`gë_comm™d_des¸ùt‹
(
SCSI_OPCODE_SANITIZE
,

137 
SCSI_SANITIZE_CRYPTO_ERASE
);

138 i‡(
cd
 =
NULL
) {

139 
	`loggög
(
LOG_VERBOSE
, "Opcode isÇot supported. VerifyÅhat "

141 i‡(
öq_bdc
 && inq_bdc->
wa˚ªq
) {

142 
	`loggög
(
LOG_NORMAL
, "[FAILED] WACEREQ isÇot 0 but "

145 
	`CU_FAIL
("[FAILED] WACEREQ isÇot 0 but CRYPTO ERASE "

149 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] SANITIZE CRYPTO_ERASE isÇot "

151 
	`CU_PASS
("SANITIZE isÇot implemented.");

155 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhat we have BlockDeviceCharacteristics "

157 i‡(
öq_bdc
 =
NULL
) {

158 
	`loggög
(
LOG_NORMAL
, "[FAILED] SANITIZE CRYPTO ERASE opcode is "

161 
	`CU_FAIL
("[FAILED] BlockDeviceCharacteristics VPD "

166 
	`loggög
(
LOG_VERBOSE
, "Write 'a'ÅoÅhe first 256 LBAs");

167 
	`mem£t
(
s¸©ch
, 'a', 256 * 
block_size
);

168 
	`WRITE16
(
sd
, 0, 256 * 
block_size
,

169 
block_size
, 0, 0, 0, 0, 0, 
s¸©ch
,

170 
EXPECT_STATUS_GOOD
);

171 
	`loggög
(
LOG_VERBOSE
, "Write 'a'ÅoÅheÜast 256 LBAs");

172 
	`WRITE16
(
sd
, 
num_blocks
 - 256, 256 * 
block_size
,

173 
block_size
, 0, 0, 0, 0, 0, 
s¸©ch
,

174 
EXPECT_STATUS_GOOD
);

177 
	`loggög
(
LOG_VERBOSE
, "Test we canÖerform basic CRYPTO ERASE SANITIZE");

178 
	`SANITIZE
(
sd
, 0, 0, 
SCSI_SANITIZE_CRYPTO_ERASE
, 0, 
NULL
,

179 
EXPECT_STATUS_GOOD
);

181 
	`loggög
(
LOG_VERBOSE
, "CheckÅhatÅhe first 256 LBAsáre wiped.");

182 
	`check_lun_is_wùed
(
buf
, 0);

183 
	`loggög
(
LOG_VERBOSE
, "CheckÅhatÅheÜast 256 LBAsáre wiped.");

184 
	`check_lun_is_wùed
(
buf
, 
num_blocks
 - 256);

186 
d©a
.
size
 = 8;

187 
d©a
.d©®
	`Æloˇ
(d©a.
size
);

188 
	`mem£t
(
d©a
.d©a, 0, d©a.
size
);

190 
	`loggög
(
LOG_VERBOSE
, "CRYPTO_ERASEÖarameterÜistÜength must be 0");

191 
	`loggög
(
LOG_VERBOSE
, "TestÅhatÇon-zeroÖaramÜength isánÉrror for "

193 
	`SANITIZE
(
sd
, 0, 0, 
SCSI_SANITIZE_CRYPTO_ERASE
, 8, &
d©a
,

194 
EXPECT_INVALID_FIELD_IN_CDB
);

195 i‡(
öq_bdc
) {

196 
	`loggög
(
LOG_VERBOSE
, "Check WACEREQ settingándÅhat READ "

198 
	`check_wa˚ªq
();

200 
	}
}

	@test-tool/test_sanitize_crypto_erase_reserved.c

19 
	~<°dio.h
>

20 
	~<¨∑/öë.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"iscsi-¥iv©e.h
"

25 
	~"scsi-lowÀvñ.h
"

26 
	~"iscsi-ã°-cu.h
"

28 
	gch™ge_num
;

30 
	$my_iscsi_queue_pdu
(
iscsi_c⁄ãxt
 *
iscsi
 
_U_
, 
iscsi_pdu
 *
pdu
)

32 
ch™ge_num
) {

35 
pdu
->
outd©a
.
d©a
[33] |= 0x40;

43 
pdu
->
outd©a
.
d©a
[32 + 
ch™ge_num
] = change_num;

47 
ch™ge_num
 = 0;

49 
	}
}

51 
	$ã°_ßnôize_¸y±o_îa£_ª£rved
()

53 
i
;

55 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

56 
	`loggög
(
LOG_VERBOSE
, "Test SANITIZE CRYPTO_ERASE Reserved bits/bytes");

58 
CHECK_FOR_SANITIZE
;

59 
CHECK_FOR_DATALOSS
;

61 
loˇl_iscsi_queue_pdu
 = 
my_iscsi_queue_pdu
;

64 
	`loggög
(
LOG_VERBOSE
, "Send SANITIZE command withÅheÑeserved "

66 
ch™ge_num
 = 1;

67 
	`SANITIZE
(
sd
, 0, 0, 
SCSI_SANITIZE_CRYPTO_ERASE
, 0, 
NULL
,

68 
EXPECT_INVALID_FIELD_IN_CDB
);

70 
i
 = 2; i < 7; i++) {

71 
	`loggög
(
LOG_VERBOSE
, "Send SANITIZE command withÅheÑeserved "

72 "byã %d sëÅÿn⁄-zîo", 
i
);

73 
ch™ge_num
 = 
i
;

75 
	`SANITIZE
(
sd
, 0, 0, 
SCSI_SANITIZE_CRYPTO_ERASE
, 0, 
NULL
,

76 
EXPECT_INVALID_FIELD_IN_CDB
);

78 
	}
}

	@test-tool/test_sanitize_exit_failure_mode.c

19 
	~<°dio.h
>

20 
	~<°dlib.h
>

21 
	~<°rög.h
>

22 
	~<°dlib.h
>

24 
	~<CUnô/CUnô.h
>

26 
	~"iscsi.h
"

27 
	~"scsi-lowÀvñ.h
"

28 
	~"iscsi-ã°-cu.h
"

31 
	$ã°_ßnôize_exô_Áûuª_mode
()

33 
iscsi_d©a
 
d©a
;

34 
scsi_comm™d_des¸ùt‹
 *
cd
;

36 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

37 
	`loggög
(
LOG_VERBOSE
, "Test SANITIZE EXIT FAILURE MODE");

39 
CHECK_FOR_SANITIZE
;

40 
CHECK_FOR_DATALOSS
;

42 
	`loggög
(
LOG_VERBOSE
, "CheckÅhat SANITIZE EXIT FAILURE MODE is "

44 
cd
 = 
	`gë_comm™d_des¸ùt‹
(
SCSI_OPCODE_SANITIZE
,

45 
SCSI_SANITIZE_EXIT_FAILURE_MODE
);

46 i‡(
cd
 =
NULL
) {

47 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] SANITIZE EXIT FAILURE MODE is "

50 
	`CU_PASS
("SANITIZE isÇot implemented.");

54 
d©a
.
size
 = 8;

55 
d©a
.d©®
	`Æloˇ
(d©a.
size
);

56 
	`mem£t
(
d©a
.d©a, 0, d©a.
size
);

58 
	`loggög
(
LOG_VERBOSE
, "EXIT_FAILURE_MODEÖarameterÜistÜength must "

60 
	`loggög
(
LOG_VERBOSE
, "TestÅhatÇon-zeroÖaramÜength isánÉrror for "

62 
	`SANITIZE
(
sd
, 0, 0, 
SCSI_SANITIZE_EXIT_FAILURE_MODE
, 8, &
d©a
,

63 
EXPECT_INVALID_FIELD_IN_CDB
);

64 
	}
}

	@test-tool/test_sanitize_invalid_serviceaction.c

19 
	~<°dio.h
>

20 
	~<°dlib.h
>

21 
	~<°rög.h
>

22 
	~<°dlib.h
>

24 
	~<CUnô/CUnô.h
>

26 
	~"iscsi.h
"

27 
	~"scsi-lowÀvñ.h
"

28 
	~"iscsi-ã°-cu.h
"

31 
	$ã°_ßnôize_övÆid_£rvi˚a˘i⁄
()

33 
i
;

35 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

36 
	`loggög
(
LOG_VERBOSE
, "Test SANITIZE for invalid serviceactions");

38 
CHECK_FOR_SANITIZE
;

40 
	`loggög
(
LOG_VERBOSE
, "Testáll invalid serviceáctionsánd make sure "

42 
i
 = 0; i <= 0x1f; i++) {

43 
i
) {

51 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhat ServiceAction:0x%02d is "

52 "™Éº‹.", 
i
);

54 
	`SANITIZE
(
sd
, 0, 0, 
i
, 0, 
NULL
,

55 
EXPECT_INVALID_FIELD_IN_CDB
);

57 
	}
}

	@test-tool/test_sanitize_overwrite.c

19 
	~<°dio.h
>

20 
	~<°dlib.h
>

21 
	~<°rög.h
>

22 
	~<°dlib.h
>

24 
	~<CUnô/CUnô.h
>

26 
	~"iscsi.h
"

27 
	~"scsi-lowÀvñ.h
"

28 
	~"iscsi-ã°-cu.h
"

31 
	$check_lun_is_wùed
(
uöt64_t
 
lba
, 
c
)

33 *
rbuf
 = 
	`Æloˇ
(256 * 
block_size
);

34 *
zbuf
 = 
	`Æloˇ
(256 * 
block_size
);

36 
	`READ16
(
sd
, 
NULL
, 
lba
, 256 * 
block_size
,

37 
block_size
, 0, 0, 0, 0, 0, 
rbuf
,

38 
EXPECT_STATUS_GOOD
);

40 
	`mem£t
(
zbuf
, 
c
, 256 * 
block_size
);

42 i‡(
	`memcmp
(
zbuf
, 
rbuf
, 256 * 
block_size
)) {

43 
	`loggög
(
LOG_NORMAL
, "[FAILED] Blocks didÇotÑead backás %#x",

44 
c
);

45 
	`CU_FAIL
("[FAILED] Blocks didÇotÑead backásÉxpected");

47 
	`loggög
(
LOG_VERBOSE
, "[SUCCESS] Block†ªad backá†%#x", 
c
);

49 
	}
}

52 
	$ã°_ßnôize_ovîwrôe
()

54 
i
;

55 
iscsi_d©a
 
d©a
;

56 
scsi_comm™d_des¸ùt‹
 *
cd
;

58 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

59 
	`loggög
(
LOG_VERBOSE
, "Test SANITIZE OVERWRITE");

61 
CHECK_FOR_SANITIZE
;

62 
CHECK_FOR_DATALOSS
;

64 
	`loggög
(
LOG_VERBOSE
, "CheckÅhat SANITIZE OVERWRITE is supported "

66 
cd
 = 
	`gë_comm™d_des¸ùt‹
(
SCSI_OPCODE_SANITIZE
,

67 
SCSI_SANITIZE_OVERWRITE
);

68 i‡(
cd
 =
NULL
) {

69 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] SANITIZE OVERWRITE isÇot "

71 
	`CU_PASS
("SANITIZE isÇot implemented.");

75 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhat we have BlockDeviceCharacteristics "

77 i‡(
öq_bdc
 =
NULL
) {

78 
	`loggög
(
LOG_NORMAL
, "[FAILED] SANITIZE OVERWRITE opcode is "

81 
	`CU_FAIL
("[FAILED] BlockDeviceCharacteristics VPD "

85 
	`loggög
(
LOG_VERBOSE
, "Check MediumRotationRate whetherÅhis isá HDD "

87 i‡(
öq_bdc
 && inq_bdc->
medium_rŸ©i⁄_øã
 == 0) {

88 
	`loggög
(
LOG_NORMAL
, "This isá HDD device");

90 
	`loggög
(
LOG_NORMAL
, "This isá SSD device");

93 
	`loggög
(
LOG_VERBOSE
, "Write 'a'ÅoÅhe first 256 LBAs");

94 
	`mem£t
(
s¸©ch
, 'a', 256 * 
block_size
);

95 
	`WRITE16
(
sd
, 0, 256 * 
block_size
,

96 
block_size
, 0, 0, 0, 0, 0, 
s¸©ch
,

97 
EXPECT_STATUS_GOOD
);

98 
	`loggög
(
LOG_VERBOSE
, "Write 'a'ÅoÅheÜast 256 LBAs");

99 
	`WRITE16
(
sd
, 
num_blocks
 - 256, 256 * 
block_size
,

100 
block_size
, 0, 0, 0, 0, 0, 
s¸©ch
,

101 
EXPECT_STATUS_GOOD
);

103 
	`loggög
(
LOG_VERBOSE
, "Test SANITIZE OVERWRITE with initializationÖattern of one full block");

104 
d©a
.
size
 = 
block_size
 + 4;

105 
d©a
.d©®
	`Æloˇ
(d©a.
size
);

106 
	`mem£t
(&
d©a
.d©a[4], 0xØ, 
block_size
);

108 
d©a
.data[0] = 0x01;

109 
d©a
.data[1] = 0x00;

110 
d©a
.d©a[2] = 
block_size
 >> 8;

111 
d©a
.d©a[3] = 
block_size
 & 0xff;

112 
	`SANITIZE
(
sd
, 0, 0, 
SCSI_SANITIZE_OVERWRITE
, 
d©a
.
size
, &data,

113 
EXPECT_STATUS_GOOD
);

115 
	`loggög
(
LOG_VERBOSE
, "CheckÅhatÅhe first 256 LBAsáre wiped.");

116 
	`check_lun_is_wùed
(0, 0xaa);

117 
	`loggög
(
LOG_VERBOSE
, "CheckÅhatÅheÜast 256 LBAsáre wiped.");

118 
	`check_lun_is_wùed
(
num_blocks
 - 256, 0xaa);

121 
	`loggög
(
LOG_VERBOSE
, "Test SANITIZE OVERWRITE with initializationÖattern of one half block");

122 
d©a
.
size
 = 
block_size
 / 2 + 4;

124 
d©a
.d©a[2] = (
block_size
 / 2) >> 8;

125 
d©a
.d©a[3] = (
block_size
 / 2 ) & 0xff;

127 
	`SANITIZE
(
sd
, 0, 0, 
SCSI_SANITIZE_OVERWRITE
, 
d©a
.
size
, &data,

128 
EXPECT_STATUS_GOOD
);

130 
	`loggög
(
LOG_VERBOSE
, "Test SANITIZE OVERWRITE with initializationÖattern of 4 bytes");

131 
d©a
.
size
 = 4 + 4;

133 
d©a
.data[2] = 0;

134 
d©a
.data[3] = 4;

136 
	`SANITIZE
(
sd
, 0, 0, 
SCSI_SANITIZE_OVERWRITE
, 
d©a
.
size
, &data,

137 
EXPECT_STATUS_GOOD
);

139 
	`loggög
(
LOG_VERBOSE
, "OVERWRITEÖarameterÜistÜength must "

141 
i
 = 0; i < 5; i++) {

142 
	`loggög
(
LOG_VERBOSE
, "Test OVERWRITE with ParamLen:%d isán "

143 "îr‹.", 
i
);

145 
	`SANITIZE
(
sd
, 0, 0, 
SCSI_SANITIZE_OVERWRITE
, 
i
, &
d©a
,

146 
EXPECT_INVALID_FIELD_IN_CDB
);

150 
	`loggög
(
LOG_VERBOSE
, "Test OVERWRITE with ParamLen:%zd (blocksize+5) "

151 "i†™Éº‹.", 
block_size
 + 5);

153 
d©a
.
size
 = 
block_size
 + 8;

154 
d©a
.d©®
	`Æloˇ
(
block_size
 + 8);

155 
	`mem£t
(
d©a
.d©a, 0, d©a.
size
);

156 
	`SANITIZE
(
sd
, 0, 0, 
SCSI_SANITIZE_OVERWRITE
, 
block_size
 + 5, &
d©a
,

157 
EXPECT_INVALID_FIELD_IN_CDB
);

159 
	`loggög
(
LOG_VERBOSE
, "Test OVERWRITE COUNT == 0 isánÉrror");

160 
d©a
.
size
 = 
block_size
 + 4;

162 
d©a
.data[0] = 0x00;

163 
d©a
.data[1] = 0x00;

164 
d©a
.d©a[2] = 
block_size
 >> 8;

165 
d©a
.d©a[3] = 
block_size
 & 0xff;

166 
	`SANITIZE
(
sd
, 0, 0, 
SCSI_SANITIZE_OVERWRITE
, 
d©a
.
size
, &data,

167 
EXPECT_INVALID_FIELD_IN_CDB
);

169 
	`loggög
(
LOG_VERBOSE
, "Test INITIALIZATION PATTERN LENGTH == 0 isán "

171 
d©a
.
size
 = 
block_size
 + 4;

173 
d©a
.data[0] = 0x00;

174 
d©a
.data[1] = 0x00;

175 
d©a
.data[2] = 0x00;

176 
d©a
.data[3] = 0x00;

177 
	`SANITIZE
(
sd
, 0, 0, 
SCSI_SANITIZE_OVERWRITE
, 
d©a
.
size
, &data,

178 
EXPECT_INVALID_FIELD_IN_CDB
);

180 
	`loggög
(
LOG_VERBOSE
, "Test INITIALIZATION PATTERN LENGTH == %zd > %zd "

181 "(blocksizeËi†™Éº‹", 
block_size
 + 4, block_size);

183 
d©a
.
size
 = 
block_size
 + 4;

185 
d©a
.data[0] = 0x00;

186 
d©a
.data[1] = 0x00;

187 
d©a
.d©a[2] = (
block_size
 + 4) >> 8;

188 
d©a
.d©a[3] = (
block_size
 + 4) & 0xff;

189 
	`SANITIZE
(
sd
, 0, 0, 
SCSI_SANITIZE_OVERWRITE
, 
d©a
.
size
, &data,

190 
EXPECT_INVALID_FIELD_IN_CDB
);

191 
	}
}

	@test-tool/test_sanitize_overwrite_reserved.c

19 
	~<°dio.h
>

20 
	~<°dlib.h
>

21 
	~<¨∑/öë.h
>

22 
	~<CUnô/CUnô.h
>

24 
	~"iscsi.h
"

25 
	~"iscsi-¥iv©e.h
"

26 
	~"scsi-lowÀvñ.h
"

27 
	~"iscsi-ã°-cu.h
"

29 
	gch™ge_num
;

31 
	$my_iscsi_queue_pdu
(
iscsi_c⁄ãxt
 *
iscsi
 
_U_
, 
iscsi_pdu
 *
pdu
)

33 
ch™ge_num
) {

36 
pdu
->
outd©a
.
d©a
[33] |= 0x40;

44 
pdu
->
outd©a
.
d©a
[32 + 
ch™ge_num
] = change_num;

48 
ch™ge_num
 = 0;

50 
	}
}

52 
	$ã°_ßnôize_ovîwrôe_ª£rved
()

54 
i
;

55 
iscsi_d©a
 
d©a
;

57 
d©a
.
size
 = 
block_size
 + 4;

58 
d©a
.d©®
	`Æloˇ
(d©a.
size
);

59 
	`mem£t
(&
d©a
.d©a[4], 0xØ, 
block_size
);

61 
d©a
.data[0] = 0x01;

62 
d©a
.data[1] = 0x00;

63 
d©a
.d©a[2] = 
block_size
 >> 8;

64 
d©a
.d©a[3] = 
block_size
 & 0xff;

66 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

67 
	`loggög
(
LOG_VERBOSE
, "Test SANITIZE OVERWRITE Reserved bits/bytes");

69 
CHECK_FOR_SANITIZE
;

70 
CHECK_FOR_DATALOSS
;

72 
loˇl_iscsi_queue_pdu
 = 
my_iscsi_queue_pdu
;

74 
	`loggög
(
LOG_VERBOSE
, "Send SANITIZE command withÅheÑeserved "

76 
ch™ge_num
 = 1;

77 
	`SANITIZE
(
sd
, 0, 0, 
SCSI_SANITIZE_OVERWRITE
, 
d©a
.
size
, &data,

78 
EXPECT_INVALID_FIELD_IN_CDB
);

80 
i
 = 2; i < 7; i++) {

81 
	`loggög
(
LOG_VERBOSE
, "Send SANITIZE command withÅheÑeserved "

82 "byã %d sëÅÿn⁄-zîo", 
i
);

83 
ch™ge_num
 = 
i
;

85 
	`SANITIZE
(
sd
, 0, 0, 
SCSI_SANITIZE_OVERWRITE
, 
d©a
.
size
, &data,

86 
EXPECT_INVALID_FIELD_IN_CDB
);

88 
	}
}

	@test-tool/test_sanitize_readonly.c

19 
	~<°dio.h
>

20 
	~<°dlib.h
>

21 
	~<°rög.h
>

22 
	~<°dlib.h
>

24 
	~<CUnô/CUnô.h
>

26 
	~"iscsi.h
"

27 
	~"scsi-lowÀvñ.h
"

28 
	~"iscsi-ã°-cu.h
"

29 
	~"iscsi-mu…ù©h.h
"

32 
	$ã°_ßnôize_ªad⁄ly
()

34 
ªt
;

35 
iscsi_d©a
 
d©a
;

36 
scsi_comm™d_des¸ùt‹
 *
cd
;

37 
scsi_devi˚
 *
sd2
;

39 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

40 
	`loggög
(
LOG_VERBOSE
, "Test SANITIZE with READONLY devices");

42 
CHECK_FOR_SANITIZE
;

43 
CHECK_FOR_DATALOSS
;

45 i‡(
sd
->
iscsi_˘x
 =
NULL
) {

46 c⁄° *
îr
 = "[SKIPPED] This SANITIZEÅest is only "

48 
	`loggög
(
LOG_NORMAL
, "%s", 
îr
);

49 
	`CU_PASS
(
îr
);

53 
	`loggög
(
LOG_VERBOSE
, "Createá second connectionÅoÅheÅarget");

54 
ªt
 = 
	`m∑th_sd2_gë_‹_˛⁄e
(
sd
, &
sd2
);

55 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

56 i‡(
ªt
 < 0)

59 
	`loggög
(
LOG_VERBOSE
, "Set Software Write Protect onÅhe second connection");

60 
ªt
 = 
	`£t_swp
(
sd2
);

61 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

62 i‡(
ªt
 != 0) {

66 
	`loggög
(
LOG_VERBOSE
, "Use TESTUNITREADYÅo clear unitáttention on "

68 
	`ã°unôªady_˛ór_ua
(
sd
)) {

69 
	`¶ìp
(1);

72 
	`loggög
(
LOG_VERBOSE
, "Check if SANITIZE OVERWRITE is supported "

74 
cd
 = 
	`gë_comm™d_des¸ùt‹
(
SCSI_OPCODE_SANITIZE
,

75 
SCSI_SANITIZE_OVERWRITE
);

76 i‡(
cd
 =
NULL
) {

77 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] SANITIZE OVERWRITE isÇot "

80 
	`loggög
(
LOG_VERBOSE
, "Test SANITIZE OVERWRITE with "

82 
d©a
.
size
 = 
block_size
 + 4;

83 
d©a
.d©®
	`Æloˇ
(d©a.
size
);

84 
	`mem£t
(&
d©a
.d©a[4], 0xØ, 
block_size
);

86 
d©a
.data[0] = 0x01;

87 
d©a
.data[1] = 0x00;

88 
d©a
.d©a[2] = 
block_size
 >> 8;

89 
d©a
.d©a[3] = 
block_size
 & 0xff;

90 
	`SANITIZE
(
sd
, 0, 0, 
SCSI_SANITIZE_OVERWRITE
, 
d©a
.
size
, &data,

91 
EXPECT_WRITE_PROTECTED
);

95 
	`loggög
(
LOG_VERBOSE
, "Check if SANITIZE BLOCK_ERASE is supported "

97 
cd
 = 
	`gë_comm™d_des¸ùt‹
(
SCSI_OPCODE_SANITIZE
,

98 
SCSI_SANITIZE_BLOCK_ERASE
);

99 i‡(
cd
 =
NULL
) {

100 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] SANITIZE BLOCK_ERASE isÇot "

103 
	`loggög
(
LOG_VERBOSE
, "Test SANITIZE BLOCK_ERASE");

104 
	`SANITIZE
(
sd
, 0, 0, 
SCSI_SANITIZE_BLOCK_ERASE
, 0, 
NULL
,

105 
EXPECT_WRITE_PROTECTED
);

108 
	`loggög
(
LOG_VERBOSE
, "Check if SANITIZE CRYPTO_ERASE is supported "

110 
cd
 = 
	`gë_comm™d_des¸ùt‹
(
SCSI_OPCODE_SANITIZE
,

111 
SCSI_SANITIZE_CRYPTO_ERASE
);

112 i‡(
cd
 =
NULL
) {

113 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] SANITIZE CRYPTO_ERASE isÇot "

116 
	`loggög
(
LOG_VERBOSE
, "Test SANITIZE CRYPTO_ERASE");

117 
	`SANITIZE
(
sd
, 0, 0, 
SCSI_SANITIZE_CRYPTO_ERASE
, 0, 
NULL
,

118 
EXPECT_WRITE_PROTECTED
);

122 
	`loggög
(
LOG_VERBOSE
, "Clear Software Write Protect onÅhe second connection");

123 
ªt
 = 
	`˛ór_swp
(
sd2
);

124 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

126 
	`loggög
(
LOG_VERBOSE
, "Use TESTUNITREADYÅo clear unitáttention on "

128 
	`ã°unôªady_˛ór_ua
(
sd
)) {

129 
	`¶ìp
(1);

132 
	`m∑th_sd2_put
(
sd2
);

133 
	}
}

	@test-tool/test_sanitize_reservations.c

19 
	~<°dio.h
>

20 
	~<°dlib.h
>

21 
	~<°rög.h
>

22 
	~<°dlib.h
>

24 
	~<CUnô/CUnô.h
>

26 
	~"iscsi.h
"

27 
	~"scsi-lowÀvñ.h
"

28 
	~"iscsi-ã°-cu.h
"

29 
	~"iscsi-mu…ù©h.h
"

32 
	$ã°_ßnôize_ª£rv©i⁄s
()

34 
ªt
;

35 
iscsi_d©a
 
d©a
;

36 
scsi_comm™d_des¸ùt‹
 *
cd
;

37 
scsi_devi˚
 *
sd2
;

39 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

40 
	`loggög
(
LOG_VERBOSE
, "Test SANITIZE with RESERVATIONS");

42 
CHECK_FOR_SANITIZE
;

43 
CHECK_FOR_DATALOSS
;

45 i‡(
sd
->
iscsi_˘x
 =
NULL
) {

46 c⁄° *
îr
 = "[SKIPPED] This SANITIZEÅest is only "

48 
	`loggög
(
LOG_NORMAL
, "%s", 
îr
);

49 
	`CU_PASS
(
îr
);

53 
	`loggög
(
LOG_VERBOSE
, "Createá second connectionÅoÅheÅarget");

54 
ªt
 = 
	`m∑th_sd2_gë_‹_˛⁄e
(
sd
, &
sd2
);

55 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

56 i‡(
ªt
 < 0)

59 
	`loggög
(
LOG_VERBOSE
, "Take outá RESERVE6 fromÅhe second "

61 
	`RESERVE6
(
sd2
);

63 
	`loggög
(
LOG_VERBOSE
, "Check if SANITIZE OVERWRITE is supported "

65 
cd
 = 
	`gë_comm™d_des¸ùt‹
(
SCSI_OPCODE_SANITIZE
,

66 
SCSI_SANITIZE_OVERWRITE
);

67 i‡(
cd
 =
NULL
) {

68 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] SANITIZE OVERWRITE isÇot "

71 
	`loggög
(
LOG_VERBOSE
, "Test SANITIZE OVERWRITE with "

73 
d©a
.
size
 = 
block_size
 + 4;

74 
d©a
.d©®
	`Æloˇ
(d©a.
size
);

75 
	`mem£t
(&
d©a
.d©a[4], 0xØ, 
block_size
);

77 
d©a
.data[0] = 0x01;

78 
d©a
.data[1] = 0x00;

79 
d©a
.d©a[2] = 
block_size
 >> 8;

80 
d©a
.d©a[3] = 
block_size
 & 0xff;

81 
	`SANITIZE
(
sd
, 0, 0, 
SCSI_SANITIZE_OVERWRITE
, 
d©a
.
size
, &data,

82 
EXPECT_RESERVATION_CONFLICT
);

86 
	`loggög
(
LOG_VERBOSE
, "Check if SANITIZE BLOCK_ERASE is supported "

88 
cd
 = 
	`gë_comm™d_des¸ùt‹
(
SCSI_OPCODE_SANITIZE
,

89 
SCSI_SANITIZE_BLOCK_ERASE
);

90 i‡(
cd
 =
NULL
) {

91 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] SANITIZE BLOCK_ERASE isÇot "

94 
	`loggög
(
LOG_VERBOSE
, "Test SANITIZE BLOCK_ERASE");

95 
	`SANITIZE
(
sd
, 0, 0, 
SCSI_SANITIZE_BLOCK_ERASE
, 0, 
NULL
,

96 
EXPECT_RESERVATION_CONFLICT
);

99 
	`loggög
(
LOG_VERBOSE
, "Check if SANITIZE CRYPTO_ERASE is supported "

101 
cd
 = 
	`gë_comm™d_des¸ùt‹
(
SCSI_OPCODE_SANITIZE
,

102 
SCSI_SANITIZE_CRYPTO_ERASE
);

103 i‡(
cd
 =
NULL
) {

104 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] SANITIZE CRYPTO_ERASE isÇot "

107 
	`loggög
(
LOG_VERBOSE
, "Test SANITIZE CRYPTO_ERASE");

108 
	`SANITIZE
(
sd
, 0, 0, 
SCSI_SANITIZE_CRYPTO_ERASE
, 0, 
NULL
,

109 
EXPECT_RESERVATION_CONFLICT
);

112 
	`m∑th_sd2_put
(
sd2
);

113 
	}
}

	@test-tool/test_sanitize_reset.c

19 
	~<°dio.h
>

20 
	~<°dlib.h
>

21 
	~<°rög.h
>

22 
	~<°dlib.h
>

24 
	~<CUnô/CUnô.h
>

26 
	~"iscsi.h
"

27 
	~"scsi-lowÀvñ.h
"

28 
	~"iscsi-ã°-cu.h
"

30 
	$ßnôize_cb
(
iscsi_c⁄ãxt
 *
iscsi
 
_U_
, 
°©us
 _U_,

31 *
comm™d_d©a
 
_U_
, *
¥iv©e_d©a
 _U_)

33 
	}
}

36 
	$ã°_ßnôize_ª£t
()

38 
ªt
;

39 
scsi_comm™d_des¸ùt‹
 *
cd
;

40 
scsi_èsk
 *
ßnôize_èsk
;

41 
scsi_èsk
 *
æ_èsk
;

42 
iscsi_d©a
 
d©a
;

44 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

45 
	`loggög
(
LOG_VERBOSE
, "Test SANITIZE with Task/Lun/Target/SessionÑeset");

47 
CHECK_FOR_SANITIZE
;

48 
CHECK_FOR_DATALOSS
;

50 i‡(
sd
->
iscsi_˘x
 =
NULL
) {

51 c⁄° *
îr
 = "[SKIPPED] This SANITIZEÅest is only "

53 
	`loggög
(
LOG_NORMAL
, "%s", 
îr
);

54 
	`CU_PASS
(
îr
);

58 
	`loggög
(
LOG_VERBOSE
, "CheckÅhat SANITIZE OVERWRITE will continue "

60 
cd
 = 
	`gë_comm™d_des¸ùt‹
(
SCSI_OPCODE_SANITIZE
,

61 
SCSI_SANITIZE_OVERWRITE
);

62 i‡(
cd
 =
NULL
) {

63 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] SANITIZE OVERWRITE isÇot "

65 
	`CU_PASS
("SANITIZE isÇot implemented.");

69 
	`loggög
(
LOG_VERBOSE
, "Sendánásyncronous SANITIZEÅoÅheÅarget.");

70 
d©a
.
size
 = 
block_size
 + 4;

71 
d©a
.d©®
	`Æloˇ
(d©a.
size
);

72 
	`mem£t
(&
d©a
.d©a[4], 0, 
block_size
);

74 
d©a
.data[0] = 0x01;

75 
d©a
.data[1] = 0x00;

76 
d©a
.d©a[2] = 
block_size
 >> 8;

77 
d©a
.d©a[3] = 
block_size
 & 0xff;

78 
ßnôize_èsk
 = 
	`iscsi_ßnôize_èsk
(
sd
->
iscsi_˘x
, sd->
iscsi_lun
,

79 0, 0, 
SCSI_SANITIZE_OVERWRITE
,

80 
d©a
.
size
, &data,

81 
ßnôize_cb
, 
NULL
);

82 
	`CU_ASSERT_NOT_EQUAL
(
ßnôize_èsk
, 
NULL
);

86 
æ_èsk
 = 
	`iscsi_ªp‹éuns_sync
(
sd
->
iscsi_˘x
, 0, 64);

87 i‡(
æ_èsk
) {

88 
	`scsi_‰ì_scsi_èsk
(
æ_èsk
);

92 
	`loggög
(
LOG_VERBOSE
, "Sleep forÅhree seconds in caseÅheÅarget is "

94 
	`¶ìp
(3);

96 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅhe SANITIZE has startedándÅhat "

98 
	`TESTUNITREADY
(
sd
,

99 
EXPECT_SANITIZE
);

101 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhat STARTSTOPUNIT fails with "

103 
	`STARTSTOPUNIT
(
sd
, 1, 0, 1, 0, 1, 0,

104 
EXPECT_SANITIZE
);

106 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhat READ16 fails with "

108 
	`READ16
(
sd
, 
NULL
, 0, 
block_size
,

109 
block_size
, 0, 0, 0, 0, 0, 
NULL
,

110 
EXPECT_SANITIZE
);

112 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhat INQUIRY is stillállowed while "

114 
ªt
 = 
	`öquúy
(
sd
, 
NULL
, 0, 0, 255,

115 
EXPECT_STATUS_GOOD
);

116 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

119 
	`loggög
(
LOG_VERBOSE
, "Sendán ABORT TASK");

120 
ªt
 = 
	`iscsi_èsk_mgmt_ab‹t_èsk_sync
(
sd
->
iscsi_˘x
, 
ßnôize_èsk
);

121 i‡(
ªt
 != 0) {

122 
	`loggög
(
LOG_NORMAL
, "ABORT TASK failed. %s",

123 
	`iscsi_gë_îr‹
(
sd
->
iscsi_˘x
));

126 
	`loggög
(
LOG_VERBOSE
, "Sendán ABORT TASK SET");

127 
ªt
 = 
	`iscsi_èsk_mgmt_ab‹t_èsk_£t_sync
(
sd
->
iscsi_˘x
, sd->
iscsi_lun
);

128 i‡(
ªt
 != 0) {

129 
	`loggög
(
LOG_NORMAL
, "ABORT TASK SET failed. %s",

130 
	`iscsi_gë_îr‹
(
sd
->
iscsi_˘x
));

133 
	`loggög
(
LOG_VERBOSE
, "Sendá LUN Reset");

134 
ªt
 = 
	`iscsi_èsk_mgmt_lun_ª£t_sync
(
sd
->
iscsi_˘x
, sd->
iscsi_lun
);

135 i‡(
ªt
 != 0) {

136 
	`loggög
(
LOG_NORMAL
, "LUNÑe£àÁûed. %s", 
	`iscsi_gë_îr‹
(
sd
->
iscsi_˘x
));

139 
	`loggög
(
LOG_VERBOSE
, "Sendá Warm Reset");

140 
ªt
 = 
	`iscsi_èsk_mgmt_èrgë_w¨m_ª£t_sync
(
sd
->
iscsi_˘x
);

141 i‡(
ªt
 != 0) {

142 
	`loggög
(
LOG_NORMAL
, "W¨mÑe£àÁûed. %s", 
	`iscsi_gë_îr‹
(
sd
->
iscsi_˘x
));

145 
	`loggög
(
LOG_VERBOSE
, "Sendá Cold Reset");

146 
ªt
 = 
	`iscsi_èsk_mgmt_èrgë_cﬁd_ª£t_sync
(
sd
->
iscsi_˘x
);

147 i‡(
ªt
 != 0) {

148 
	`loggög
(
LOG_NORMAL
, "CﬁdÑe£àÁûed. %s", 
	`iscsi_gë_îr‹
(
sd
->
iscsi_˘x
));

151 
	`loggög
(
LOG_VERBOSE
, "Disconnect fromÅheÅarget.");

152 
	`iscsi_de°roy_c⁄ãxt
(
sd
->
iscsi_˘x
);

154 
	`loggög
(
LOG_VERBOSE
, "Sleep for one seconds in caseÅheÅarget is "

156 
	`¶ìp
(1);

158 
	`loggög
(
LOG_VERBOSE
, "ReconnectÅoÅarget");

159 
sd
->
iscsi_˘x
 = 
	`iscsi_c⁄ãxt_logö
(
öôüt‹«me1
, sd->
iscsi_uæ
, &sd->
iscsi_lun
);

160 i‡(
sd
->
iscsi_˘x
 =
NULL
) {

161 
	`loggög
(
LOG_VERBOSE
, "FailedÅoÜoginÅoÅarget");

165 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅhe SANITIZE is still going.");

166 
	`TESTUNITREADY
(
sd
,

167 
EXPECT_SANITIZE
);

169 
	`loggög
(
LOG_VERBOSE
, "Wait untilÅhe SANITIZE operation has finished");

170 
	`ã°unôªady_˛ór_ua
(
sd
)) {

171 
	`¶ìp
(60);

173 
	}
}

	@test-tool/test_startstopunit_noloej.c

19 
	~<°dio.h
>

20 
	~<°dlib.h
>

21 
	~<°rög.h
>

23 
	~<CUnô/CUnô.h
>

25 
	~"iscsi.h
"

26 
	~"scsi-lowÀvñ.h
"

27 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_°¨t°›unô_nﬁ€j
()

32 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

33 
	`loggög
(
LOG_VERBOSE
, "Test STARTSTOPUNIT LOEJ==0");

34 i‡(!
öq
->
rmb
) {

35 
	`loggög
(
LOG_VERBOSE
, "[SKIPPED] LUN isÇotÑemovable. "

40 
	`loggög
(
LOG_VERBOSE
, "TestÅhat media isÇotÉjected when LOEJ==0 IMMED==0 NO_FLUSH==0 START==0");

41 
	`STARTSTOPUNIT
(
sd
, 0, 0, 0, 0, 0, 0,

42 
EXPECT_STATUS_GOOD
);

44 
	`loggög
(
LOG_VERBOSE
, "Test TESTUNITREADYÅhat medium isÇotÉjected.");

45 
	`TESTUNITREADY
(
sd
,

46 
EXPECT_STATUS_GOOD
);

48 
	`loggög
(
LOG_VERBOSE
, "TestÅhat media isÇotÉjected when LOEJ==0 IMMED==0 NO_FLUSH==0 START==1");

49 
	`STARTSTOPUNIT
(
sd
, 0, 0, 0, 0, 0, 1,

50 
EXPECT_STATUS_GOOD
);

52 
	`loggög
(
LOG_VERBOSE
, "Test TESTUNITREADYÅhat medium isÇotÉjected.");

53 
	`TESTUNITREADY
(
sd
,

54 
EXPECT_STATUS_GOOD
);

56 
	`loggög
(
LOG_VERBOSE
, "TestÅhat media isÇotÉjected when LOEJ==0 IMMED==1 NO_FLUSH==0 START==0");

57 
	`STARTSTOPUNIT
(
sd
, 1, 0, 0, 0, 0, 0,

58 
EXPECT_STATUS_GOOD
);

60 
	`loggög
(
LOG_VERBOSE
, "Test TESTUNITREADYÅhat medium isÇotÉjected.");

61 
	`TESTUNITREADY
(
sd
,

62 
EXPECT_STATUS_GOOD
);

64 
	`loggög
(
LOG_VERBOSE
, "TestÅhat media isÇotÉjected when LOEJ==0 IMMED==1 NO_FLUSH==0 START==1");

65 
	`STARTSTOPUNIT
(
sd
, 1, 0, 0, 0, 0, 1,

66 
EXPECT_STATUS_GOOD
);

68 
	`loggög
(
LOG_VERBOSE
, "Test TESTUNITREADYÅhat medium isÇotÉjected.");

69 
	`TESTUNITREADY
(
sd
,

70 
EXPECT_STATUS_GOOD
);

72 
	`loggög
(
LOG_VERBOSE
, "TestÅhat media isÇotÉjected when LOEJ==0 IMMED==0 NO_FLUSH==1 START==0");

73 
	`STARTSTOPUNIT
(
sd
, 0, 0, 0, 1, 0, 0,

74 
EXPECT_STATUS_GOOD
);

76 
	`loggög
(
LOG_VERBOSE
, "Test TESTUNITREADYÅhat medium isÇotÉjected.");

77 
	`TESTUNITREADY
(
sd
,

78 
EXPECT_STATUS_GOOD
);

80 
	`loggög
(
LOG_VERBOSE
, "TestÅhat media isÇotÉjected when LOEJ==0 IMMED==0 NO_FLUSH==1 START==1");

81 
	`STARTSTOPUNIT
(
sd
, 0, 0, 0, 1, 0, 1,

82 
EXPECT_STATUS_GOOD
);

84 
	`loggög
(
LOG_VERBOSE
, "Test TESTUNITREADYÅhat medium isÇotÉjected.");

85 
	`TESTUNITREADY
(
sd
,

86 
EXPECT_STATUS_GOOD
);

88 
	`loggög
(
LOG_VERBOSE
, "TestÅhat media isÇotÉjected when LOEJ==0 IMMED==1 NO_FLUSH==1 START==0");

89 
	`STARTSTOPUNIT
(
sd
, 1, 0, 0, 1, 0, 0,

90 
EXPECT_STATUS_GOOD
);

92 
	`loggög
(
LOG_VERBOSE
, "Test TESTUNITREADYÅhat medium isÇotÉjected.");

93 
	`TESTUNITREADY
(
sd
,

94 
EXPECT_STATUS_GOOD
);

96 
	`loggög
(
LOG_VERBOSE
, "TestÅhat media isÇotÉjected when LOEJ==0 IMMED==1 NO_FLUSH==1 START==1");

97 
	`STARTSTOPUNIT
(
sd
, 1, 0, 0, 1, 0, 1,

98 
EXPECT_STATUS_GOOD
);

100 
	`loggög
(
LOG_VERBOSE
, "Test TESTUNITREADYÅhat medium isÇotÉjected.");

101 
	`TESTUNITREADY
(
sd
,

102 
EXPECT_STATUS_GOOD
);

104 
	`loggög
(
LOG_VERBOSE
, "In caseÅheÅarget didÉjectÅhe medium,Üoad itágain.");

105 
	`STARTSTOPUNIT
(
sd
, 1, 0, 0, 0, 1, 1,

106 
EXPECT_STATUS_GOOD
);

107 
	}
}

	@test-tool/test_startstopunit_pwrcnd.c

19 
	~<°dio.h
>

20 
	~<°dlib.h
>

21 
	~<°rög.h
>

23 
	~<CUnô/CUnô.h
>

25 
	~"iscsi.h
"

26 
	~"scsi-lowÀvñ.h
"

27 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_°¨t°›unô_pwr˙d
()

32 
i
;

34 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

35 
	`loggög
(
LOG_VERBOSE
, "Test STARTSTOPUNIT PowerCondition");

36 i‡(!
öq
->
rmb
) {

37 
	`loggög
(
LOG_VERBOSE
, "[SKIPPED] LUN isÇotÑemovable. "

42 
	`loggög
(
LOG_VERBOSE
, "TestÅhat media isÇotÉjected when PC!=0");

43 
i
 = 1; i < 16; i++) {

44 
	`STARTSTOPUNIT
(
sd
, 1, 0, 
i
, 0, 1, 0,

45 
EXPECT_STATUS_GOOD
);

47 
	`loggög
(
LOG_VERBOSE
, "Test TESTUNITREADYÅhat medium isÇotÉjected.");

48 
	`TESTUNITREADY
(
sd
,

49 
EXPECT_STATUS_GOOD
);

52 
	`loggög
(
LOG_VERBOSE
, "In caseÅheÅarget didÉjectÅhe medium,Üoad itágain.");

53 
	`STARTSTOPUNIT
(
sd
, 1, 0, 0, 0, 1, 1,

54 
EXPECT_STATUS_GOOD
);

55 
	}
}

	@test-tool/test_startstopunit_simple.c

19 
	~<°dio.h
>

20 
	~<°dlib.h
>

21 
	~<°rög.h
>

23 
	~<CUnô/CUnô.h
>

25 
	~"iscsi.h
"

26 
	~"scsi-lowÀvñ.h
"

27 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_°¨t°›unô_sim∂e
()

32 
ªt
;

34 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

35 
	`loggög
(
LOG_VERBOSE
, "Test basic STARTSTOPUNIT");

38 
	`loggög
(
LOG_VERBOSE
, "Test we canÉjectÑemovableÅhe media with IMMED==1");

39 i‡(
öq
->
rmb
) {

40 
	`loggög
(
LOG_VERBOSE
, "Media isÑemovable. STARTSTOPUNIT should work");

41 
ªt
 = 
	`°¨t°›unô
(
sd
, 1, 0, 0, 0, 1, 0,

42 
EXPECT_STATUS_GOOD
);

43 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

45 c⁄° *
îr
 = "[SKIPPED] Media isÇotÑemovable.";

46 
	`loggög
(
LOG_NORMAL
, "%s", 
îr
);

47 
	`CU_PASS
(
îr
);

53 
	`loggög
(
LOG_VERBOSE
, "Test TESTUNITREADYÅhat medium isÉjected.");

54 
	`TESTUNITREADY
(
sd
,

55 
EXPECT_NO_MEDIUM
);

57 
	`loggög
(
LOG_VERBOSE
, "Test we canÜoadÅheÑemovableÅhe media with IMMED==1");

58 
	`STARTSTOPUNIT
(
sd
, 1, 0, 0, 0, 1, 1,

59 
EXPECT_STATUS_GOOD
);

61 
	`loggög
(
LOG_VERBOSE
, "Verify we canÑead fromÅhe media.");

62 
	`TESTUNITREADY
(
sd
,

63 
EXPECT_STATUS_GOOD
);

65 
	`loggög
(
LOG_VERBOSE
, "Test we canÉjectÑemovableÅhe media with IMMED==1");

66 
	`STARTSTOPUNIT
(
sd
, 0, 0, 0, 0, 1, 0,

67 
EXPECT_STATUS_GOOD
);

69 
	`loggög
(
LOG_VERBOSE
, "Test TESTUNITREADYÅhat medium isÉjected.");

70 
	`TESTUNITREADY
(
sd
,

71 
EXPECT_NO_MEDIUM
);

74 
	`loggög
(
LOG_VERBOSE
, "Test we canÜoadÅheÑemovableÅhe media with IMMED==1");

75 
	`STARTSTOPUNIT
(
sd
, 0, 0, 0, 0, 1, 1,

76 
EXPECT_STATUS_GOOD
);

78 
	`loggög
(
LOG_VERBOSE
, "Verify we canáccessÅhe mediaágain.");

79 
	`TESTUNITREADY
(
sd
,

80 
EXPECT_STATUS_GOOD
);

81 
	}
}

	@test-tool/test_testunitready_simple.c

19 
	~<°dio.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-ã°-cu.h
"

28 
	$ã°_ã°unôªady_sim∂e
()

30 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

31 
	`loggög
(
LOG_VERBOSE
, "Test TESTUNITREADY");

32 
	`TESTUNITREADY
(
sd
,

33 
EXPECT_STATUS_GOOD
);

34 
	}
}

	@test-tool/test_unmap_0blocks.c

19 
	~<°dio.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-suµ‹t.h
"

26 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_unm≠_0blocks
()

32 
i
;

33 
max_ƒ_bdc
 = 256;

34 
unm≠_li°
 
li°
[257];

36 
CHECK_FOR_DATALOSS
;

37 
CHECK_FOR_THIN_PROVISIONING
;

38 
CHECK_FOR_SBC
;

40 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

41 
	`loggög
(
LOG_VERBOSE
, "Test UNMAP of 0 blocksát LBA:0-255ásá single descriptor");

42 
i
 = 0; i < 256; i++) {

43 
li°
[0].
lba
 = 
i
;

44 
li°
[0].
num
 = 0;

45 
	`UNMAP
(
sd
, 0, 
li°
, 1,

46 
EXPECT_STATUS_GOOD
);

49 
	`loggög
(
LOG_VERBOSE
, "Test UNMAP of 0 blocksátÉnd-of-LUN");

50 
li°
[0].
lba
 = 
num_blocks
;

51 
li°
[0].
num
 = 0;

52 
	`UNMAP
(
sd
, 0, 
li°
, 1,

53 
EXPECT_STATUS_GOOD
);

55 
	`loggög
(
LOG_VERBOSE
, "Test UNMAP withoutány descriptors.");

56 
	`UNMAP
(
sd
, 0, 
li°
, 0,

57 
EXPECT_STATUS_GOOD
);

59 i‡(
öq_bl
->
max_unm≠_bdc
 <= 1) {

60 
	`CU_PASS
("[SKIPPING] Test UNMAP of 0 blocks with multiple descriptosÇot supported");

64 i‡(
öq_bl
->
max_unm≠_bdc
 > 0 && 
max_ƒ_bdc
 > ()inq_bl->max_unmap_bdc) {

65 
max_ƒ_bdc
 = ()
öq_bl
->
max_unm≠_bdc
;

68 
	`loggög
(
LOG_VERBOSE
, "Te° UNMAP o‡0 block†© LBA:0-%d wôh o√ des¸ùt‹Öî block", 
max_ƒ_bdc
 - 1);

69 
i
 = 0; i < 
max_ƒ_bdc
; i++) {

70 
li°
[
i
].
lba
 = i;

71 
li°
[
i
].
num
 = 0;

72 
	`UNMAP
(
sd
, 0, 
li°
, 
i
 + 1,

73 
EXPECT_STATUS_GOOD
);

76 
	`loggög
(
LOG_VERBOSE
, "Te° UNMAP o‡0 block†© LBA:0-%d wôh o√ des¸ùt‹Öî block,Öossibly \"ovîœµög\".", 
max_ƒ_bdc
 - 1);

77 
i
 = 0; i < 
max_ƒ_bdc
; i++) {

78 
li°
[
i
].
lba
 = i/2;

79 
li°
[
i
].
num
 = 0;

81 
	`UNMAP
(
sd
, 0, 
li°
, 
max_ƒ_bdc
,

82 
EXPECT_STATUS_GOOD
);

83 
	}
}

	@test-tool/test_unmap_simple.c

19 
	~<°dio.h
>

20 
	~<°dlib.h
>

22 
	~<CUnô/CUnô.h
>

24 
	~"iscsi.h
"

25 
	~"scsi-lowÀvñ.h
"

26 
	~"iscsi-suµ‹t.h
"

27 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_unm≠_sim∂e
()

32 
i
;

33 
max_ƒ_bdc
 = 256;

34 
unm≠_li°
 
li°
[257];

36 
	`¥ötf
("\ntest_unmap_simple");

37 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

38 
	`loggög
(
LOG_VERBOSE
, "Test basic UNMAP");

40 
	`¥ötf
("\nCheck for dataloss");

42 
	`¥ötf
("\nCheck forÅhinÖrovisioning");

44 
	`¥ötf
("\nCheck for sbc");

47 
	`¥ötf
("\nTest UNMAP of 1-256 blocksátÅhe start ofÅhe");

48 
	`loggög
(
LOG_VERBOSE
, "Test UNMAP of 1-256 blocksátÅhe start ofÅhe "

51 
	`loggög
(
LOG_VERBOSE
, "Write 'a'ÅoÅhe first 256 LBAs");

52 
	`mem£t
(
s¸©ch
, 'a', 256 * 
block_size
);

53 
	`WRITE10
(
sd
, 0, 256 * 
block_size
,

54 
block_size
, 0, 0, 0, 0, 0, 
s¸©ch
,

55 
EXPECT_STATUS_GOOD
);

57 
i
 = 1; i <= 256; i++) {

58 
	`loggög
(
LOG_VERBOSE
, "UNMAP block†0-%d", 
i
);

59 
li°
[0].
lba
 = 0;

60 
li°
[0].
num
 = 
i
;

61 
	`UNMAP
(
sd
, 0, 
li°
, 1,

62 
EXPECT_STATUS_GOOD
);

64 
	`loggög
(
LOG_VERBOSE
, "Ród block†0-%d", 
i
);

65 
	`READ10
(
sd
, 
NULL
, 0, 
i
 * 
block_size
,

66 
block_size
, 0, 0, 0, 0, 0, 
s¸©ch
,

67 
EXPECT_STATUS_GOOD
);

69 i‡(
rc16
 &&Ñc16->
lb¥z
) {

70 
	`loggög
(
LOG_VERBOSE
, "LBPRZ==1 All UNMAPPED blocks "

72 
	`ALL_ZERO
(
s¸©ch
, 
i
 * 
block_size
);

76 i‡(
öq_bl
->
max_unm≠_bdc
 > 0 && 
max_ƒ_bdc
 > ()inq_bl->max_unmap_bdc) {

77 
max_ƒ_bdc
 = ()
öq_bl
->
max_unm≠_bdc
;

79 i‡(
max_ƒ_bdc
 < 0 || max_nr_bdc > 256) {

80 
	`loggög
(
LOG_VERBOSE
, "Clamp max unmapped blocksÅo 256");

81 
max_ƒ_bdc
 = 256;

84 
	`loggög
(
LOG_VERBOSE
, "Test UNMAP of 1-%d blocksátÅhe start ofÅhe "

85 "LUN wôh o√ des¸ùt‹Öî block", 
max_ƒ_bdc
);

87 
	`loggög
(
LOG_VERBOSE
, "Wrôê'a'Åÿthêfú° %d LBAs", 
max_ƒ_bdc
);

88 
	`mem£t
(
s¸©ch
, 'a', 
max_ƒ_bdc
 * 
block_size
);

89 
	`WRITE10
(
sd
, 0, 
max_ƒ_bdc
 * 
block_size
,

90 
block_size
, 0, 0, 0, 0, 0, 
s¸©ch
,

91 
EXPECT_STATUS_GOOD
);

93 
i
 = 0; i < 
max_ƒ_bdc
; i++) {

94 
li°
[
i
].
lba
 = i;

95 
li°
[
i
].
num
 = 1;

96 
	`UNMAP
(
sd
, 0, 
li°
, 
i
 + 1,

97 
EXPECT_STATUS_GOOD
);

99 
	`loggög
(
LOG_VERBOSE
, "Ród block†0-%d", 
i
);

100 
	`READ10
(
sd
, 
NULL
, 0, (
i
 + 1Ë* 
block_size
,

101 
block_size
, 0, 0, 0, 0, 0, 
s¸©ch
,

102 
EXPECT_STATUS_GOOD
);

104 i‡(
rc16
 &&Ñc16->
lb¥z
) {

105 
	`loggög
(
LOG_VERBOSE
, "LBPRZ==1 All UNMAPPED blocks "

107 
	`ALL_ZERO
(
s¸©ch
, 
i
 * 
block_size
);

110 
	}
}

	@test-tool/test_unmap_vpd.c

19 
	~<°dio.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-suµ‹t.h
"

26 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_unm≠_vpd
()

32 
ªt
;

33 
unm≠_li°
 
li°
[1];

35 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

36 
	`loggög
(
LOG_VERBOSE
, "Test UNMAPávailability is consistent with VPD settings");

38 
CHECK_FOR_DATALOSS
;

39 
CHECK_FOR_SBC
;

41 
	`loggög
(
LOG_VERBOSE
, "Check if UNMAP isávailable.");

42 
li°
[0].
lba
 = 0;

43 
li°
[0].
num
 = 0;

44 
ªt
 = 
	`unm≠
(
sd
, 0, 
li°
, 1,

45 
EXPECT_STATUS_GOOD
);

46 i‡(
ªt
 != 0) {

47 
	`loggög
(
LOG_VERBOSE
, "UNMAP isÇotávailable. VerifyÅhat VPD "

50 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhat LBPU is clear.");

51 i‡(
öq_lbp
 && inq_lbp->
lbpu
) {

52 
	`loggög
(
LOG_NORMAL
, "[FAILED] UNMAP isÇot implemented "

54 
	`CU_FAIL
("[FAILED] UNMAP is unavailable but LBPU==1");

56 
	`loggög
(
LOG_VERBOSE
, "[SUCCESS] LBPU is clear.");

59 
	`loggög
(
LOG_VERBOSE
, "UNMAP isávailable. VerifyÅhat VPD "

62 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhat LBPME is set.");

63 i‡(
rc16
 &&Ñc16->
lbpme
) {

64 
	`loggög
(
LOG_VERBOSE
, "[SUCCESS] LBPME is set.");

66 
	`loggög
(
LOG_NORMAL
, "[FAILED] UNMAP is implemented "

68 
	`CU_FAIL
("[FAILED] UNMAP isávailable but LBPME==0");

71 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhat LBPU is set.");

72 i‡(
öq_lbp
 && inq_lbp->
lbpu
) {

73 
	`loggög
(
LOG_VERBOSE
, "[SUCCESS] LBPU is set.");

75 
	`loggög
(
LOG_NORMAL
, "[FAILED] UNMAP is implemented "

77 
	`CU_FAIL
("[FAILED] UNMAP isávailable but LBPU==0");

80 
	}
}

	@test-tool/test_verify10_0blocks.c

19 
	~<°dio.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-ã°-cu.h
"

28 
	$ã°_vîify10_0blocks
()

30 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

31 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY10 0-blocksát LBA==0");

33 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY10 0-blocks one blockÖastÉnd-of-LUN");

34 
	`VERIFY10
(
sd
, 
num_blocks
 + 1, 0, 
block_size
, 0, 0, 1, 
NULL
,

35 
EXPECT_LBA_OOB
);

37 i‡(
num_blocks
 - 1 < 0x80000000) {

38 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY10 0-blocksát LBA==2^31");

39 
	`VERIFY10
(
sd
, 0x80000000, 0, 
block_size
, 0, 0, 1, 
NULL
,

40 
EXPECT_LBA_OOB
);

43 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY10 0-blocksát LBA==-1");

44 
	`VERIFY10
(
sd
, -1, 0, 
block_size
, 0, 0, 1, 
NULL
,

45 
EXPECT_LBA_OOB
);

46 
	}
}

	@test-tool/test_verify10_beyond_eol.c

19 
	~<°dio.h
>

20 
	~<°dlib.h
>

22 
	~<CUnô/CUnô.h
>

24 
	~"iscsi.h
"

25 
	~"scsi-lowÀvñ.h
"

26 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_vîify10_bey⁄d_eﬁ
()

32 
i
;

34 i‡(
num_blocks
 >= 0x80000000) {

35 
	`CU_PASS
("LUN isÅoo big forÑead-beyond-eolÅests with VERIFY10. SkippingÅest.\n");

39 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

40 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY10 1-256 blocks one block beyondÅheÉnd");

41 
	`mem£t
(
s¸©ch
, 0xa6, 256 * 
block_size
);

42 
i
 = 1; i <= 256; i++) {

43 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

46 
	`VERIFY10
(
sd
, 
num_blocks
 + 1 - 
i
,

47 
i
 * 
block_size
, block_size, 0, 0, 1, 
s¸©ch
,

48 
EXPECT_LBA_OOB
);

51 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY10 1-256 blocksát LBA==2^31");

52 
i
 = 1; i <= 256; i++) {

53 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

56 
	`VERIFY10
(
sd
, 0x80000000,

57 
i
 * 
block_size
, block_size, 0, 0, 1, 
s¸©ch
,

58 
EXPECT_LBA_OOB
);

61 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY10 1-256 blocksát LBA==-1");

62 
i
 = 1; i <= 256; i++) {

63 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

66 
	`VERIFY10
(
sd
, -1, 
i
 * 
block_size
, block_size, 0, 0, 1, 
s¸©ch
,

67 
EXPECT_LBA_OOB
);

71 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY10 2-256 blocksáll but one block beyondÅheÉnd");

72 
i
 = 2; i <= 256; i++) {

73 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

76 
	`VERIFY10
(
sd
, 
num_blocks
 - 1,

77 
i
 * 
block_size
, block_size, 0, 0, 1, 
s¸©ch
,

78 
EXPECT_LBA_OOB
);

80 
	}
}

	@test-tool/test_verify10_dpo.c

19 
	~<°dio.h
>

20 
	~<°dlib.h
>

21 
	~<°rög.h
>

23 
	~<CUnô/CUnô.h
>

25 
	~"iscsi.h
"

26 
	~"scsi-lowÀvñ.h
"

27 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_vîify10_dpo
()

32 
dpofua
, 
ußge_d©a_dpo
;

33 
scsi_èsk
 *
ms_èsk
 = 
NULL
;

34 
scsi_mode_£n£
 *
ms
;

35 
scsi_èsk
 *
rso_èsk
 = 
NULL
;

36 
scsi_ªp‹t_suµ‹ãd_›_codes_⁄e_comm™d
 *
rsoc
;

38 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

39 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY10 DPO flag");

41 
CHECK_FOR_SBC
;

43 
	`READ10
(
sd
, 
NULL
, 0, 
block_size
, block_size, 0, 0, 0, 0, 0, 
s¸©ch
,

44 
EXPECT_STATUS_GOOD
);

46 
	`loggög
(
LOG_VERBOSE
, "ReadÅhe DPOFUA flag from mode sense data");

47 
	`MODESENSE6
(
sd
, &
ms_èsk
, 0, 
SCSI_MODESENSE_PC_CURRENT
,

48 
SCSI_MODEPAGE_RETURN_ALL_PAGES
, 0, 255,

49 
EXPECT_STATUS_GOOD
);

51 
	`loggög
(
LOG_VERBOSE
, "[SUCCESS] Mode senseÑeturned status GOOD");

52 
ms
 = 
	`scsi_d©aö_unm¨shÆl
(
ms_èsk
);

53 
dpofua
 = 
ms
 && (ms->
devi˚_•ecific_∑ømëî
 & 0x10);

54 
	`scsi_‰ì_scsi_èsk
(
ms_èsk
);

56 i‡(
dpofua
) {

57 
	`loggög
(
LOG_VERBOSE
, "DPOFUA flag is set. Device shouldállow "

60 
	`loggög
(
LOG_VERBOSE
, "DPOFUA flag is clear. Device should fail "

64 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY10 with DPO==1");

65 i‡(
dpofua
) {

66 
	`VERIFY10
(
sd
, 0, 
block_size
, block_size, 0, 1, 0, 
s¸©ch
,

67 
EXPECT_STATUS_GOOD
);

69 
	`VERIFY10
(
sd
, 0, 
block_size
, block_size, 0, 1, 0, 
s¸©ch
,

70 
EXPECT_INVALID_FIELD_IN_CDB
);

73 
	`loggög
(
LOG_VERBOSE
, "Try fetching REPORT_SUPPORTED_OPCODES "

75 
	`REPORT_SUPPORTED_OPCODES
(
sd
, &
rso_èsk
,

76 0, 
SCSI_REPORT_SUPPORTING_OPCODE
,

77 
SCSI_OPCODE_VERIFY10
,

80 
EXPECT_STATUS_GOOD
);

81 
	`loggög
(
LOG_VERBOSE
, "UnmarshallÅhe DATA-IN buffer");

82 
rsoc
 = 
	`scsi_d©aö_unm¨shÆl
(
rso_èsk
);

83 
	`CU_ASSERT_PTR_NOT_NULL_FATAL
(
rsoc
);

84 
ußge_d©a_dpo
 = 
rsoc
 ?Ñsoc->
cdb_ußge_d©a
[1] & 0x10 : -1;

85 i‡(
dpofua
) {

86 
	`loggög
(
LOG_VERBOSE
, "DPOFUA is set. VerifyÅhe DPO flag "

88 
	`CU_ASSERT_EQUAL
(
ußge_d©a_dpo
, 0x10);

90 
	`loggög
(
LOG_VERBOSE
, "DPOFUA is clear. VerifyÅhe DPO "

92 
	`CU_ASSERT_EQUAL
(
ußge_d©a_dpo
, 0x00);

95 
	`scsi_‰ì_scsi_èsk
(
rso_èsk
);

96 
	}
}

	@test-tool/test_verify10_flags.c

19 
	~<°dio.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-suµ‹t.h
"

26 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_vîify10_Êags
()

32 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

33 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY10 flags");

35 
	`READ10
(
sd
, 
NULL
, 0, 
block_size
,

36 
block_size
, 0, 0, 0, 0, 0, 
s¸©ch
,

37 
EXPECT_STATUS_GOOD
);

38 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY10 with BYTCHK==1");

39 
	`VERIFY10
(
sd
, 0, 
block_size
, block_size, 0, 0, 1, 
s¸©ch
,

40 
EXPECT_STATUS_GOOD
);

41 
	}
}

	@test-tool/test_verify10_mismatch.c

19 
	~<°dio.h
>

20 
	~<°dlib.h
>

22 
	~<CUnô/CUnô.h
>

24 
	~"iscsi.h
"

25 
	~"scsi-lowÀvñ.h
"

26 
	~"iscsi-suµ‹t.h
"

27 
	~"iscsi-ã°-cu.h
"

31 
	$ã°_vîify10_mism©ch
()

33 
i
;

35 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

36 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY10 for blocks 1-255");

37 
i
 = 1; i <= 256; i++) {

38 
off£t
 = 
	`øndom
(Ë% (
i
 * 
block_size
);

40 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

43 
	`READ10
(
sd
, 
NULL
, 0, 
i
 * 
block_size
,

44 
block_size
, 0, 0, 0, 0, 0, 
s¸©ch
,

45 
EXPECT_STATUS_GOOD
);

48 
s¸©ch
[
off£t
] ^= 'X';

49 
	`loggög
(
LOG_VERBOSE
, "Flip some bits inÅhe data");

51 
	`VERIFY10
(
sd
, 0, 
i
 * 
block_size
, block_size, 0, 0, 1, 
s¸©ch
,

52 
EXPECT_MISCOMPARE
);

55 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY10 of 1-256 blocksátÅheÉnd ofÅhe LUN");

56 
i
 = 1; i <= 256; i++) {

57 
off£t
 = 
	`øndom
(Ë% (
i
 * 
block_size
);

59 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

62 
	`READ10
(
sd
, 
NULL
, 
num_blocks
 - 
i
,

63 
i
 * 
block_size
, block_size, 0, 0, 0, 0, 0, 
s¸©ch
,

64 
EXPECT_STATUS_GOOD
);

67 
s¸©ch
[
off£t
] ^= 'X';

68 
	`loggög
(
LOG_VERBOSE
, "Flip some bits inÅhe data");

70 
	`VERIFY10
(
sd
, 
num_blocks
 - 
i
,

71 
i
 * 
block_size
, block_size, 0, 0, 1, 
s¸©ch
,

72 
EXPECT_MISCOMPARE
);

74 
	}
}

	@test-tool/test_verify10_mismatch_no_cmp.c

19 
	~<°dio.h
>

20 
	~<°dlib.h
>

22 
	~<CUnô/CUnô.h
>

24 
	~"iscsi.h
"

25 
	~"scsi-lowÀvñ.h
"

26 
	~"iscsi-suµ‹t.h
"

27 
	~"iscsi-ã°-cu.h
"

31 
	$ã°_vîify10_mism©ch_no_cmp
()

33 
i
;

35 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

36 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY10 without BYTCHK for blocks 1-255");

37 
i
 = 1; i <= 256; i++) {

38 
off£t
 = 
	`øndom
(Ë% (
i
 * 
block_size
);

40 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

43 
	`READ10
(
sd
, 
NULL
, 0, 
i
 * 
block_size
,

44 
block_size
, 0, 0, 0, 0, 0, 
s¸©ch
,

45 
EXPECT_STATUS_GOOD
);

48 
s¸©ch
[
off£t
] ^= 'X';

49 
	`loggög
(
LOG_VERBOSE
, "Flip some bits inÅhe data");

51 
	`VERIFY10
(
sd
, 0, 
i
 * 
block_size
, block_size, 0, 0, 0, 
s¸©ch
,

52 
EXPECT_STATUS_GOOD
);

55 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY10 without BYTCHK of 1-256 blocksátÅheÉnd ofÅhe LUN");

56 
i
 = 1; i <= 256; i++) {

57 
off£t
 = 
	`øndom
(Ë% (
i
 * 
block_size
);

59 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

62 
	`READ10
(
sd
, 
NULL
, 
num_blocks
 - 
i
,

63 
i
 * 
block_size
, block_size, 0, 0, 0, 0, 0, 
s¸©ch
,

64 
EXPECT_STATUS_GOOD
);

67 
s¸©ch
[
off£t
] ^= 'X';

68 
	`loggög
(
LOG_VERBOSE
, "Flip some bits inÅhe data");

70 
	`VERIFY10
(
sd
, 
num_blocks
 - 
i
,

71 
i
 * 
block_size
, block_size, 0, 0, 0, 
s¸©ch
,

72 
EXPECT_STATUS_GOOD
);

74 
	}
}

	@test-tool/test_verify10_simple.c

19 
	~<°dio.h
>

20 
	~<°dlib.h
>

22 
	~<CUnô/CUnô.h
>

24 
	~"iscsi.h
"

25 
	~"scsi-lowÀvñ.h
"

26 
	~"iscsi-suµ‹t.h
"

27 
	~"iscsi-ã°-cu.h
"

31 
	$ã°_vîify10_sim∂e
()

33 
i
;

35 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

36 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY10 of 1-256 blocksátÅhe start ofÅhe LUN");

37 
i
 = 1; i <= 256; i++) {

38 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

41 
	`READ10
(
sd
, 
NULL
, 0, 
i
 * 
block_size
,

42 
block_size
, 0, 0, 0, 0, 0, 
s¸©ch
,

43 
EXPECT_STATUS_GOOD
);

44 
	`VERIFY10
(
sd
, 0, 
i
 * 
block_size
, block_size, 0, 0, 1, 
s¸©ch
,

45 
EXPECT_STATUS_GOOD
);

48 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY10 of 1-256 blocksátÅheÉnd ofÅhe LUN");

49 
i
 = 1; i <= 256; i++) {

50 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

53 
	`READ10
(
sd
, 
NULL
, 
num_blocks
 - 
i
,

54 
i
 * 
block_size
, block_size, 0, 0, 0, 0, 0, 
s¸©ch
,

55 
EXPECT_STATUS_GOOD
);

56 
	`VERIFY10
(
sd
, 
num_blocks
 - 
i
,

57 
i
 * 
block_size
, block_size, 0, 0, 1, 
s¸©ch
,

58 
EXPECT_STATUS_GOOD
);

60 
	}
}

	@test-tool/test_verify10_vrprotect.c

19 
	~<°dio.h
>

20 
	~<°dlib.h
>

22 
	~<CUnô/CUnô.h
>

24 
	~"iscsi.h
"

25 
	~"scsi-lowÀvñ.h
"

26 
	~"iscsi-suµ‹t.h
"

27 
	~"iscsi-ã°-cu.h
"

31 
	$ã°_vîify10_vΩrŸe˘
()

33 
i
;

35 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

36 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY10 withÇon-zero VRPROTECT");

38 
CHECK_FOR_SBC
;

40 i‡(!
öq
->
¥Ÿe˘
 || (
rc16
 !
NULL
 && !rc16->
¥Ÿ_í
)) {

41 
	`loggög
(
LOG_VERBOSE
, "Device doesÇot support/useÖrotection information. All commands should fail.");

42 
i
 = 1; i < 8; i++) {

43 
	`READ10
(
sd
, 
NULL
, 0, 
block_size
,

44 
block_size
, 0, 0, 0, 0, 0, 
s¸©ch
,

45 
EXPECT_STATUS_GOOD
);

46 
	`VERIFY10
(
sd
, 0, 
block_size
,

47 
block_size
, 
i
, 0, 1, 
s¸©ch
,

48 
EXPECT_INVALID_FIELD_IN_CDB
);

53 
	`loggög
(
LOG_NORMAL
, "NoÅests for devicesÅhat supportÖrotection information yet.");

54 
	}
}

	@test-tool/test_verify12_0blocks.c

19 
	~<°dio.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-ã°-cu.h
"

28 
	$ã°_vîify12_0blocks
()

30 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

31 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY12 0-blocksát LBA==0");

33 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY12 0-blocks one blockÖastÉnd-of-LUN");

34 
	`VERIFY12
(
sd
, 
num_blocks
 + 1, 0, 
block_size
, 0, 0, 1, 
NULL
,

35 
EXPECT_LBA_OOB
);

37 i‡(
num_blocks
 - 1 < 0x80000000) {

38 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY12 0-blocksát LBA==2^31");

39 
	`VERIFY12
(
sd
, 0x80000000, 0, 
block_size
, 0, 0, 1, 
NULL
,

40 
EXPECT_LBA_OOB
);

43 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY12 0-blocksát LBA==-1");

44 
	`VERIFY12
(
sd
, -1, 0, 
block_size
, 0, 0, 1, 
NULL
,

45 
EXPECT_LBA_OOB
);

46 
	}
}

	@test-tool/test_verify12_beyond_eol.c

19 
	~<°dio.h
>

20 
	~<°dlib.h
>

22 
	~<CUnô/CUnô.h
>

24 
	~"iscsi.h
"

25 
	~"scsi-lowÀvñ.h
"

26 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_vîify12_bey⁄d_eﬁ
()

32 
i
;

34 i‡(
num_blocks
 >= 0x80000000) {

35 
	`CU_PASS
("LUN isÅoo big forÑead-beyond-eolÅests with VERIFY12. SkippingÅest.\n");

39 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

40 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY12 1-256 blocks one block beyondÅheÉnd");

41 
	`mem£t
(
s¸©ch
, 0xa6, 256 * 
block_size
);

42 
i
 = 1; i <= 256; i++) {

43 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

46 
	`VERIFY12
(
sd
, 
num_blocks
 + 1 - 
i
,

47 
i
 * 
block_size
, block_size, 0, 0, 1, 
s¸©ch
,

48 
EXPECT_LBA_OOB
);

51 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY12 1-256 blocksát LBA==2^31");

52 
i
 = 1; i <= 256; i++) {

53 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

56 
	`VERIFY12
(
sd
, 0x80000000,

57 
i
 * 
block_size
, block_size, 0, 0, 1, 
s¸©ch
,

58 
EXPECT_LBA_OOB
);

61 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY12 1-256 blocksát LBA==-1");

62 
i
 = 1; i <= 256; i++) {

63 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

66 
	`VERIFY12
(
sd
, -1, 
i
 * 
block_size
,

67 
block_size
, 0, 0, 1, 
s¸©ch
,

68 
EXPECT_LBA_OOB
);

71 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY12 2-256 blocksáll but one block beyondÅheÉnd");

72 
i
 = 2; i <= 256; i++) {

73 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

76 
	`VERIFY12
(
sd
, 
num_blocks
 - 1,

77 
i
 * 
block_size
, block_size, 0, 0, 1, 
s¸©ch
,

78 
EXPECT_LBA_OOB
);

80 
	}
}

	@test-tool/test_verify12_dpo.c

19 
	~<°dio.h
>

20 
	~<°dlib.h
>

21 
	~<°rög.h
>

23 
	~<CUnô/CUnô.h
>

25 
	~"iscsi.h
"

26 
	~"scsi-lowÀvñ.h
"

27 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_vîify12_dpo
()

32 
dpofua
, 
ußge_d©a_dpo
;

33 
scsi_èsk
 *
ms_èsk
 = 
NULL
;

34 
scsi_mode_£n£
 *
ms
;

35 
scsi_èsk
 *
rso_èsk
 = 
NULL
;

36 
scsi_ªp‹t_suµ‹ãd_›_codes_⁄e_comm™d
 *
rsoc
;

38 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

39 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY12 DPO flag");

41 
CHECK_FOR_SBC
;

43 
	`READ10
(
sd
, 
NULL
, 0, 
block_size
, block_size, 0, 0, 0, 0, 0, 
s¸©ch
,

44 
EXPECT_STATUS_GOOD
);

46 
	`loggög
(
LOG_VERBOSE
, "ReadÅhe DPOFUA flag from mode sense data");

47 
	`MODESENSE6
(
sd
, &
ms_èsk
, 0, 
SCSI_MODESENSE_PC_CURRENT
,

48 
SCSI_MODEPAGE_RETURN_ALL_PAGES
, 0, 255,

49 
EXPECT_STATUS_GOOD
);

51 
	`loggög
(
LOG_VERBOSE
, "[SUCCESS] Mode senseÑeturned status GOOD");

52 
ms
 = 
	`scsi_d©aö_unm¨shÆl
(
ms_èsk
);

53 
dpofua
 = 
ms
 && (ms->
devi˚_•ecific_∑ømëî
 & 0x10);

54 
	`scsi_‰ì_scsi_èsk
(
ms_èsk
);

56 i‡(
dpofua
) {

57 
	`loggög
(
LOG_VERBOSE
, "DPOFUA flag is set. Device shouldállow "

60 
	`loggög
(
LOG_VERBOSE
, "DPOFUA flag is clear. Device should fail "

64 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY12 with DPO==1");

65 i‡(
dpofua
) {

66 
	`VERIFY12
(
sd
, 0, 
block_size
, block_size, 0, 1, 0, 
s¸©ch
,

67 
EXPECT_STATUS_GOOD
);

69 
	`VERIFY12
(
sd
, 0, 
block_size
, block_size, 0, 1, 0, 
s¸©ch
,

70 
EXPECT_INVALID_FIELD_IN_CDB
);

73 
	`loggög
(
LOG_VERBOSE
, "Try fetching REPORT_SUPPORTED_OPCODES "

75 
	`REPORT_SUPPORTED_OPCODES
(
sd
, &
rso_èsk
,

76 0, 
SCSI_REPORT_SUPPORTING_OPCODE
,

77 
SCSI_OPCODE_VERIFY12
,

80 
EXPECT_STATUS_GOOD
);

81 
	`loggög
(
LOG_VERBOSE
, "UnmarshallÅhe DATA-IN buffer");

82 
rsoc
 = 
	`scsi_d©aö_unm¨shÆl
(
rso_èsk
);

83 
	`CU_ASSERT_PTR_NOT_NULL_FATAL
(
rsoc
);

84 
ußge_d©a_dpo
 = 
rsoc
 ?Ñsoc->
cdb_ußge_d©a
[1] & 0x10 : -1;

85 i‡(
dpofua
) {

86 
	`loggög
(
LOG_VERBOSE
, "DPOFUA is set. VerifyÅhe DPO flag "

88 
	`CU_ASSERT_EQUAL
(
ußge_d©a_dpo
, 0x10);

90 
	`loggög
(
LOG_VERBOSE
, "DPOFUA is clear. VerifyÅhe DPO "

92 
	`CU_ASSERT_EQUAL
(
ußge_d©a_dpo
, 0x00);

95 
	`scsi_‰ì_scsi_èsk
(
rso_èsk
);

96 
	}
}

	@test-tool/test_verify12_flags.c

19 
	~<°dio.h
>

20 
	~<°dlib.h
>

22 
	~<CUnô/CUnô.h
>

24 
	~"iscsi.h
"

25 
	~"scsi-lowÀvñ.h
"

26 
	~"iscsi-suµ‹t.h
"

27 
	~"iscsi-ã°-cu.h
"

31 
	$ã°_vîify12_Êags
()

33 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

34 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY12 flags");

36 
	`READ12
(
sd
, 
NULL
, 0, 
block_size
, block_size, 0, 0, 0, 0, 0, 
s¸©ch
,

37 
EXPECT_STATUS_GOOD
);

39 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY12 with BYTCHK==1");

40 
	`VERIFY12
(
sd
, 0, 
block_size
, block_size, 0, 0, 1, 
s¸©ch
,

41 
EXPECT_STATUS_GOOD
);

42 
	}
}

	@test-tool/test_verify12_mismatch.c

19 
	~<°dio.h
>

20 
	~<°dlib.h
>

22 
	~<CUnô/CUnô.h
>

24 
	~"iscsi.h
"

25 
	~"scsi-lowÀvñ.h
"

26 
	~"iscsi-suµ‹t.h
"

27 
	~"iscsi-ã°-cu.h
"

31 
	$ã°_vîify12_mism©ch
()

33 
i
;

35 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

36 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY12 for blocks 1-255");

37 
i
 = 1; i <= 256; i++) {

38 
off£t
 = 
	`øndom
(Ë% (
i
 * 
block_size
);

40 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

43 
	`READ12
(
sd
, 
NULL
, 0, 
i
 * 
block_size
,

44 
block_size
, 0, 0, 0, 0, 0, 
s¸©ch
,

45 
EXPECT_STATUS_GOOD
);

48 
s¸©ch
[
off£t
] ^= 'X';

49 
	`loggög
(
LOG_VERBOSE
, "Flip some bits inÅhe data");

51 
	`VERIFY12
(
sd
, 0, 
i
 * 
block_size
, block_size, 0, 0, 1, 
s¸©ch
,

52 
EXPECT_MISCOMPARE
);

55 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY12 of 1-256 blocksátÅheÉnd ofÅhe LUN");

56 
i
 = 1; i <= 256; i++) {

57 
off£t
 = 
	`øndom
(Ë% (
i
 * 
block_size
);

59 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

62 
	`READ12
(
sd
, 
NULL
, 
num_blocks
 - 
i
,

63 
i
 * 
block_size
, block_size, 0, 0, 0, 0, 0, 
s¸©ch
,

64 
EXPECT_STATUS_GOOD
);

67 
s¸©ch
[
off£t
] ^= 'X';

68 
	`loggög
(
LOG_VERBOSE
, "Flip some bits inÅhe data");

70 
	`VERIFY12
(
sd
, 
num_blocks
 - 
i
,

71 
i
 * 
block_size
, block_size, 0, 0, 1, 
s¸©ch
,

72 
EXPECT_MISCOMPARE
);

74 
	}
}

	@test-tool/test_verify12_mismatch_no_cmp.c

19 
	~<°dio.h
>

20 
	~<°dlib.h
>

22 
	~<CUnô/CUnô.h
>

24 
	~"iscsi.h
"

25 
	~"scsi-lowÀvñ.h
"

26 
	~"iscsi-suµ‹t.h
"

27 
	~"iscsi-ã°-cu.h
"

31 
	$ã°_vîify12_mism©ch_no_cmp
()

33 
i
;

35 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

36 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY12 without BYTCHK for blocks 1-255");

37 
i
 = 1; i <= 256; i++) {

38 
off£t
 = 
	`øndom
(Ë% (
i
 * 
block_size
);

40 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

43 
	`READ12
(
sd
, 
NULL
, 0, 
i
 * 
block_size
,

44 
block_size
, 0, 0, 0, 0, 0, 
s¸©ch
,

45 
EXPECT_STATUS_GOOD
);

48 
s¸©ch
[
off£t
] ^= 'X';

49 
	`loggög
(
LOG_VERBOSE
, "Flip some bits inÅhe data");

51 
	`VERIFY12
(
sd
, 0, 
i
 * 
block_size
, block_size, 0, 0, 0, 
s¸©ch
,

52 
EXPECT_STATUS_GOOD
);

55 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY12 without BYTCHK of 1-256 blocksátÅheÉnd ofÅhe LUN");

56 
i
 = 1; i <= 256; i++) {

57 
off£t
 = 
	`øndom
(Ë% (
i
 * 
block_size
);

59 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

62 
	`READ12
(
sd
, 
NULL
, 
num_blocks
 - 
i
,

63 
i
 * 
block_size
, block_size, 0, 0, 0, 0, 0, 
s¸©ch
,

64 
EXPECT_STATUS_GOOD
);

67 
s¸©ch
[
off£t
] ^= 'X';

68 
	`loggög
(
LOG_VERBOSE
, "Flip some bits inÅhe data");

70 
	`VERIFY12
(
sd
, 
num_blocks
 - 
i
,

71 
i
 * 
block_size
, block_size, 0, 0, 0, 
s¸©ch
,

72 
EXPECT_STATUS_GOOD
);

74 
	}
}

	@test-tool/test_verify12_simple.c

19 
	~<°dio.h
>

20 
	~<°dlib.h
>

22 
	~<CUnô/CUnô.h
>

24 
	~"iscsi.h
"

25 
	~"scsi-lowÀvñ.h
"

26 
	~"iscsi-suµ‹t.h
"

27 
	~"iscsi-ã°-cu.h
"

31 
	$ã°_vîify12_sim∂e
()

33 
i
;

35 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

36 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY12 of 1-256 blocksátÅhe start ofÅhe LUN");

37 
i
 = 1; i <= 256; i++) {

38 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

41 
	`READ12
(
sd
, 
NULL
, 0, 
i
 * 
block_size
,

42 
block_size
, 0, 0, 0, 0, 0, 
s¸©ch
,

43 
EXPECT_STATUS_GOOD
);

44 
	`VERIFY12
(
sd
, 0, 
i
 * 
block_size
, block_size, 0, 0, 1, 
s¸©ch
,

45 
EXPECT_STATUS_GOOD
);

48 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY12 of 1-256 blocksátÅheÉnd ofÅhe LUN");

49 
i
 = 1; i <= 256; i++) {

50 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

53 
	`READ12
(
sd
, 
NULL
, 
num_blocks
 - 
i
,

54 
i
 * 
block_size
, block_size, 0, 0, 0, 0, 0, 
s¸©ch
,

55 
EXPECT_STATUS_GOOD
);

56 
	`VERIFY12
(
sd
, 
num_blocks
 - 
i
,

57 
i
 * 
block_size
, block_size, 0, 0, 1, 
s¸©ch
,

58 
EXPECT_STATUS_GOOD
);

60 
	}
}

	@test-tool/test_verify12_vrprotect.c

19 
	~<°dio.h
>

20 
	~<°dlib.h
>

22 
	~<CUnô/CUnô.h
>

24 
	~"iscsi.h
"

25 
	~"scsi-lowÀvñ.h
"

26 
	~"iscsi-suµ‹t.h
"

27 
	~"iscsi-ã°-cu.h
"

31 
	$ã°_vîify12_vΩrŸe˘
()

33 
i
;

35 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

36 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY12 withÇon-zero VRPROTECT");

38 
CHECK_FOR_SBC
;

40 i‡(!
öq
->
¥Ÿe˘
 || (
rc16
 !
NULL
 && !rc16->
¥Ÿ_í
)) {

41 
	`loggög
(
LOG_VERBOSE
, "Device doesÇot support/useÖrotection information. All commands should fail.");

42 
i
 = 1; i < 8; i++) {

43 
	`READ10
(
sd
, 
NULL
, 0, 
block_size
,

44 
block_size
, 0, 0, 0, 0, 0, 
s¸©ch
,

45 
EXPECT_STATUS_GOOD
);

46 
	`VERIFY12
(
sd
, 0, 
block_size
,

47 
block_size
, 
i
, 0, 1, 
s¸©ch
,

48 
EXPECT_INVALID_FIELD_IN_CDB
);

53 
	`loggög
(
LOG_NORMAL
, "NoÅests for devicesÅhat supportÖrotection information yet.");

54 
	}
}

	@test-tool/test_verify16_0blocks.c

19 
	~<°dio.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-ã°-cu.h
"

28 
	$ã°_vîify16_0blocks
()

30 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

31 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY16 0-blocksát LBA==0");

33 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY16 0-blocks one blockÖastÉnd-of-LUN");

34 
	`VERIFY16
(
sd
, 
num_blocks
 + 1, 0, 
block_size
, 0, 0, 1, 
NULL
,

35 
EXPECT_LBA_OOB
);

37 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY16 0-blocksát LBA==2^63");

38 
	`VERIFY16
(
sd
, 0x8000000000000000ULL, 0, 
block_size
, 0, 0, 1, 
NULL
,

39 
EXPECT_LBA_OOB
);

41 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY16 0-blocksát LBA==-1");

42 
	`VERIFY16
(
sd
, -1, 0, 
block_size
, 0, 0, 1, 
NULL
,

43 
EXPECT_LBA_OOB
);

44 
	}
}

	@test-tool/test_verify16_beyond_eol.c

19 
	~<°dio.h
>

20 
	~<°dlib.h
>

22 
	~<CUnô/CUnô.h
>

24 
	~"iscsi.h
"

25 
	~"scsi-lowÀvñ.h
"

26 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_vîify16_bey⁄d_eﬁ
()

32 
i
;

34 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

35 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY16 1-256 blocks one block beyondÅheÉnd");

36 
	`mem£t
(
s¸©ch
, 0xa6, 256 * 
block_size
);

37 
i
 = 1; i <= 256; i++) {

38 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

41 
	`VERIFY16
(
sd
, 
num_blocks
 + 1 - 
i
,

42 
i
 * 
block_size
, block_size, 0, 0, 1, 
s¸©ch
,

43 
EXPECT_LBA_OOB
);

46 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY16 1-256 blocksát LBA==2^63");

47 
i
 = 1; i <= 256; i++) {

48 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

51 
	`VERIFY16
(
sd
, 0x8000000000000000ULL,

52 
i
 * 
block_size
, block_size, 0, 0, 1, 
s¸©ch
,

53 
EXPECT_LBA_OOB
);

56 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY16 1-256 blocksát LBA==-1");

57 
i
 = 1; i <= 256; i++) {

58 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

61 
	`VERIFY16
(
sd
, -1, 
i
 * 
block_size
, block_size, 0, 0, 1, 
s¸©ch
,

62 
EXPECT_LBA_OOB
);

65 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY16 2-256 blocksáll but one block beyondÅheÉnd");

66 
i
 = 2; i <= 256; i++) {

67 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

70 
	`VERIFY16
(
sd
, 
num_blocks
 - 1,

71 
i
 * 
block_size
, block_size, 0, 0, 1, 
s¸©ch
,

72 
EXPECT_LBA_OOB
);

74 
	}
}

	@test-tool/test_verify16_dpo.c

19 
	~<°dio.h
>

20 
	~<°dlib.h
>

21 
	~<°rög.h
>

23 
	~<CUnô/CUnô.h
>

25 
	~"iscsi.h
"

26 
	~"scsi-lowÀvñ.h
"

27 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_vîify16_dpo
()

32 
dpofua
, 
ußge_d©a_dpo
;

33 
scsi_èsk
 *
ms_èsk
 = 
NULL
;

34 
scsi_mode_£n£
 *
ms
;

35 
scsi_èsk
 *
rso_èsk
 = 
NULL
;

36 
scsi_ªp‹t_suµ‹ãd_›_codes_⁄e_comm™d
 *
rsoc
;

38 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

39 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY16 DPO flag");

41 
CHECK_FOR_SBC
;

43 
	`READ10
(
sd
, 
NULL
, 0, 
block_size
, block_size, 0, 0, 0, 0, 0, 
s¸©ch
,

44 
EXPECT_STATUS_GOOD
);

46 
	`loggög
(
LOG_VERBOSE
, "ReadÅhe DPOFUA flag from mode sense data");

47 
	`MODESENSE6
(
sd
, &
ms_èsk
, 0, 
SCSI_MODESENSE_PC_CURRENT
,

48 
SCSI_MODEPAGE_RETURN_ALL_PAGES
, 0, 255,

49 
EXPECT_STATUS_GOOD
);

51 
	`loggög
(
LOG_VERBOSE
, "[SUCCESS] Mode senseÑeturned status GOOD");

52 
ms
 = 
	`scsi_d©aö_unm¨shÆl
(
ms_èsk
);

53 
dpofua
 = 
ms
 && (ms->
devi˚_•ecific_∑ømëî
 & 0x10);

54 
	`scsi_‰ì_scsi_èsk
(
ms_èsk
);

56 i‡(
dpofua
) {

57 
	`loggög
(
LOG_VERBOSE
, "DPOFUA flag is set. Device shouldállow "

60 
	`loggög
(
LOG_VERBOSE
, "DPOFUA flag is clear. Device should fail "

64 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY16 with DPO==1");

65 i‡(
dpofua
) {

66 
	`VERIFY16
(
sd
, 0, 
block_size
, block_size, 0, 1, 0, 
s¸©ch
,

67 
EXPECT_STATUS_GOOD
);

69 
	`VERIFY16
(
sd
, 0, 
block_size
, block_size, 0, 1, 0, 
s¸©ch
,

70 
EXPECT_INVALID_FIELD_IN_CDB
);

73 
	`loggög
(
LOG_VERBOSE
, "Try fetching REPORT_SUPPORTED_OPCODES "

75 
	`REPORT_SUPPORTED_OPCODES
(
sd
, &
rso_èsk
,

76 0, 
SCSI_REPORT_SUPPORTING_OPCODE
,

77 
SCSI_OPCODE_VERIFY16
,

80 
EXPECT_STATUS_GOOD
);

81 
	`loggög
(
LOG_VERBOSE
, "UnmarshallÅhe DATA-IN buffer");

82 
rsoc
 = 
	`scsi_d©aö_unm¨shÆl
(
rso_èsk
);

83 
	`CU_ASSERT_PTR_NOT_NULL_FATAL
(
rsoc
);

85 
ußge_d©a_dpo
 = 
rsoc
 ?Ñsoc->
cdb_ußge_d©a
[1] & 0x10 : -1;

86 i‡(
dpofua
) {

87 
	`loggög
(
LOG_VERBOSE
, "DPOFUA is set. VerifyÅhe DPO flag "

89 
	`CU_ASSERT_EQUAL
(
ußge_d©a_dpo
, 0x10);

91 
	`loggög
(
LOG_VERBOSE
, "DPOFUA is clear. VerifyÅhe DPO "

93 
	`CU_ASSERT_EQUAL
(
ußge_d©a_dpo
, 0x00);

96 
	`scsi_‰ì_scsi_èsk
(
rso_èsk
);

97 
	}
}

	@test-tool/test_verify16_flags.c

19 
	~<°dio.h
>

20 
	~<°dlib.h
>

22 
	~<CUnô/CUnô.h
>

24 
	~"iscsi.h
"

25 
	~"scsi-lowÀvñ.h
"

26 
	~"iscsi-suµ‹t.h
"

27 
	~"iscsi-ã°-cu.h
"

31 
	$ã°_vîify16_Êags
()

33 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

34 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY16 flags");

36 
	`READ16
(
sd
, 
NULL
, 0, 
block_size
, block_size, 0, 0, 0, 0, 0, 
s¸©ch
,

37 
EXPECT_STATUS_GOOD
);

39 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY16 with BYTCHK==1");

40 
	`VERIFY16
(
sd
, 0, 
block_size
, block_size, 0, 0, 1, 
s¸©ch
,

41 
EXPECT_STATUS_GOOD
);

42 
	}
}

	@test-tool/test_verify16_mismatch.c

19 
	~<°dio.h
>

20 
	~<°dlib.h
>

22 
	~<CUnô/CUnô.h
>

24 
	~"iscsi.h
"

25 
	~"scsi-lowÀvñ.h
"

26 
	~"iscsi-suµ‹t.h
"

27 
	~"iscsi-ã°-cu.h
"

31 
	$ã°_vîify16_mism©ch
()

33 
i
;

35 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

36 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY16 for blocks 1-255");

37 
i
 = 1; i <= 256; i++) {

38 
off£t
 = 
	`øndom
(Ë% (
i
 * 
block_size
);

40 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

43 
	`READ16
(
sd
, 
NULL
, 0, 
i
 * 
block_size
,

44 
block_size
, 0, 0, 0, 0, 0, 
s¸©ch
,

45 
EXPECT_STATUS_GOOD
);

48 
s¸©ch
[
off£t
] ^= 'X';

49 
	`loggög
(
LOG_VERBOSE
, "Flip some bits inÅhe data");

51 
	`VERIFY16
(
sd
, 0, 
i
 * 
block_size
, block_size, 0, 0, 1, 
s¸©ch
,

52 
EXPECT_MISCOMPARE
);

55 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY16 of 1-256 blocksátÅheÉnd ofÅhe LUN");

56 
i
 = 1; i <= 256; i++) {

57 
off£t
 = 
	`øndom
(Ë% (
i
 * 
block_size
);

59 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

62 
	`READ16
(
sd
, 
NULL
, 
num_blocks
 - 
i
,

63 
i
 * 
block_size
, block_size, 0, 0, 0, 0, 0, 
s¸©ch
,

64 
EXPECT_STATUS_GOOD
);

67 
s¸©ch
[
off£t
] ^= 'X';

68 
	`loggög
(
LOG_VERBOSE
, "Flip some bits inÅhe data");

70 
	`VERIFY16
(
sd
, 
num_blocks
 - 
i
,

71 
i
 * 
block_size
, block_size, 0, 0, 1, 
s¸©ch
,

72 
EXPECT_MISCOMPARE
);

74 
	}
}

	@test-tool/test_verify16_mismatch_no_cmp.c

19 
	~<°dio.h
>

20 
	~<°dlib.h
>

22 
	~<CUnô/CUnô.h
>

24 
	~"iscsi.h
"

25 
	~"scsi-lowÀvñ.h
"

26 
	~"iscsi-suµ‹t.h
"

27 
	~"iscsi-ã°-cu.h
"

31 
	$ã°_vîify16_mism©ch_no_cmp
()

33 
i
;

35 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

36 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY16 without BYTCHK for blocks 1-255");

37 
i
 = 1; i <= 256; i++) {

38 
off£t
 = 
	`øndom
(Ë% (
i
 * 
block_size
);

40 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

43 
	`READ16
(
sd
, 
NULL
, 0, 
i
 * 
block_size
,

44 
block_size
, 0, 0, 0, 0, 0, 
s¸©ch
,

45 
EXPECT_STATUS_GOOD
);

48 
s¸©ch
[
off£t
] ^= 'X';

49 
	`loggög
(
LOG_VERBOSE
, "Flip some bits inÅhe data");

51 
	`VERIFY16
(
sd
, 0, 
i
 * 
block_size
, block_size, 0, 0, 0, 
s¸©ch
,

52 
EXPECT_STATUS_GOOD
);

55 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY16 without BYTCHK of 1-256 blocksátÅheÉnd ofÅhe LUN");

56 
i
 = 1; i <= 256; i++) {

57 
off£t
 = 
	`øndom
(Ë% (
i
 * 
block_size
);

59 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

62 
	`READ16
(
sd
, 
NULL
, 
num_blocks
 - 
i
,

63 
i
 * 
block_size
, block_size, 0, 0, 0, 0, 0, 
s¸©ch
,

64 
EXPECT_STATUS_GOOD
);

67 
s¸©ch
[
off£t
] ^= 'X';

68 
	`loggög
(
LOG_VERBOSE
, "Flip some bits inÅhe data");

70 
	`VERIFY16
(
sd
, 
num_blocks
 - 
i
,

71 
i
 * 
block_size
, block_size, 0, 0, 0, 
s¸©ch
,

72 
EXPECT_STATUS_GOOD
);

74 
	}
}

	@test-tool/test_verify16_simple.c

19 
	~<°dio.h
>

20 
	~<°dlib.h
>

22 
	~<CUnô/CUnô.h
>

24 
	~"iscsi.h
"

25 
	~"scsi-lowÀvñ.h
"

26 
	~"iscsi-suµ‹t.h
"

27 
	~"iscsi-ã°-cu.h
"

31 
	$ã°_vîify16_sim∂e
()

33 
i
;

35 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

36 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY16 of 1-256 blocksátÅhe start ofÅhe LUN");

37 
i
 = 1; i <= 256; i++) {

38 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

41 
	`READ16
(
sd
, 
NULL
, 0, 
i
 * 
block_size
,

42 
block_size
, 0, 0, 0, 0, 0, 
s¸©ch
,

43 
EXPECT_STATUS_GOOD
);

44 
	`VERIFY16
(
sd
, 0, 
i
 * 
block_size
,

45 
block_size
, 0, 0, 1, 
s¸©ch
,

46 
EXPECT_STATUS_GOOD
);

49 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY16 of 1-256 blocksátÅheÉnd ofÅhe LUN");

50 
i
 = 1; i <= 256; i++) {

51 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

54 
	`READ16
(
sd
, 
NULL
, 
num_blocks
 - 
i
,

55 
i
 * 
block_size
, block_size, 0, 0, 0, 0, 0, 
s¸©ch
,

56 
EXPECT_STATUS_GOOD
);

57 
	`VERIFY16
(
sd
, 
num_blocks
 - 
i
,

58 
i
 * 
block_size
, block_size, 0, 0, 1, 
s¸©ch
,

59 
EXPECT_STATUS_GOOD
);

61 
	}
}

	@test-tool/test_verify16_vrprotect.c

19 
	~<°dio.h
>

20 
	~<°dlib.h
>

22 
	~<CUnô/CUnô.h
>

24 
	~"iscsi.h
"

25 
	~"scsi-lowÀvñ.h
"

26 
	~"iscsi-suµ‹t.h
"

27 
	~"iscsi-ã°-cu.h
"

31 
	$ã°_vîify16_vΩrŸe˘
()

33 
i
;

35 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

36 
	`loggög
(
LOG_VERBOSE
, "Test VERIFY16 withÇon-zero VRPROTECT");

38 
CHECK_FOR_SBC
;

40 i‡(!
öq
->
¥Ÿe˘
 || (
rc16
 !
NULL
 && !rc16->
¥Ÿ_í
)) {

41 
	`loggög
(
LOG_VERBOSE
, "Device doesÇot support/useÖrotection information. All commands should fail.");

42 
i
 = 1; i < 8; i++) {

43 
	`READ16
(
sd
, 
NULL
, 0, 
block_size
,

44 
block_size
, 0, 0, 0, 0, 0, 
s¸©ch
,

45 
EXPECT_STATUS_GOOD
);

46 
	`VERIFY16
(
sd
, 0, 
block_size
,

47 
block_size
, 
i
, 0, 1, 
s¸©ch
,

48 
EXPECT_INVALID_FIELD_IN_CDB
);

53 
	`loggög
(
LOG_NORMAL
, "NoÅests for devicesÅhat supportÖrotection information yet.");

54 
	}
}

	@test-tool/test_write10_0blocks.c

19 
	~<°dio.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-ã°-cu.h
"

28 
	$ã°_wrôe10_0blocks
()

30 
CHECK_FOR_DATALOSS
;

32 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

33 
	`loggög
(
LOG_VERBOSE
, "Test WRITE10 0-blocksát LBA==0");

34 
	`WRITE10
(
sd
, 0, 0, 
block_size
, 0, 0, 0, 0, 0, 
NULL
,

35 
EXPECT_STATUS_GOOD
);

37 i‡(
num_blocks
 >= 0x80000000) {

38 
	`CU_PASS
("LUN isÅoo big forÑead-beyond-eolÅests with WRITE10. SkippingÅest.\n");

42 
	`loggög
(
LOG_VERBOSE
, "Test WRITE10 0-blocks one blockÖastÉnd-of-LUN");

43 
	`WRITE10
(
sd
, 
num_blocks
 + 1, 0, 
block_size
, 0, 0, 0, 0, 0, 
NULL
,

44 
EXPECT_LBA_OOB
);

46 
	`loggög
(
LOG_VERBOSE
, "Test WRITE10 0-blocksát LBA==2^31");

47 
	`WRITE10
(
sd
, 0x80000000, 0, 
block_size
, 0, 0, 0, 0, 0, 
NULL
,

48 
EXPECT_LBA_OOB
);

50 
	`loggög
(
LOG_VERBOSE
, "Test WRITE10 0-blocksát LBA==-1");

51 
	`WRITE10
(
sd
, -1, 0, 
block_size
, 0, 0, 0, 0, 0, 
NULL
,

52 
EXPECT_LBA_OOB
);

53 
	}
}

	@test-tool/test_write10_beyond_eol.c

19 
	~<°dio.h
>

20 
	~<°dlib.h
>

22 
	~<CUnô/CUnô.h
>

24 
	~"iscsi.h
"

25 
	~"scsi-lowÀvñ.h
"

26 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_wrôe10_bey⁄d_eﬁ
()

32 
i
;

34 
CHECK_FOR_DATALOSS
;

36 i‡(
num_blocks
 >= 0x80000000) {

37 
	`CU_PASS
("LUN isÅoo big for write-beyond-eolÅests with WRITE10. SkippingÅest.\n");

41 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

42 
	`loggög
(
LOG_VERBOSE
, "Test WRITE10 1-256 blocks one block beyondÅheÉnd");

43 
	`mem£t
(
s¸©ch
, 0xa6, 256 * 
block_size
);

44 
i
 = 1; i <= 256; i++) {

45 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

48 
	`WRITE10
(
sd
, 
num_blocks
 + 1 - 
i
,

49 
i
 * 
block_size
, block_size, 0, 0, 0, 0, 0, 
s¸©ch
,

50 
EXPECT_LBA_OOB
);

53 
	`loggög
(
LOG_VERBOSE
, "Test WRITE10 1-256 blocksát LBA==2^31");

54 
i
 = 1; i <= 256; i++) {

55 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

58 
	`WRITE10
(
sd
, 0x80000000,

59 
i
 * 
block_size
, block_size, 0, 0, 0, 0, 0, 
s¸©ch
,

60 
EXPECT_LBA_OOB
);

63 
	`loggög
(
LOG_VERBOSE
, "Test WRITE10 1-256 blocksát LBA==-1");

64 
i
 = 1; i <= 256; i++) {

65 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

68 
	`WRITE10
(
sd
, -1, 
i
 * 
block_size
,

69 
block_size
, 0, 0, 0, 0, 0, 
s¸©ch
,

70 
EXPECT_LBA_OOB
);

73 
	`loggög
(
LOG_VERBOSE
, "Test WRITE10 2-256 blocksáll but one block beyondÅheÉnd");

74 
i
 = 2; i <= 256; i++) {

75 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

78 
	`WRITE10
(
sd
, 
num_blocks
 - 1,

79 
i
 * 
block_size
, block_size, 0, 0, 0, 0, 0, 
s¸©ch
,

80 
EXPECT_LBA_OOB
);

82 
	}
}

	@test-tool/test_write10_dpofua.c

19 
	~<°dio.h
>

20 
	~<°dlib.h
>

21 
	~<°rög.h
>

23 
	~<CUnô/CUnô.h
>

25 
	~"iscsi.h
"

26 
	~"scsi-lowÀvñ.h
"

27 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_wrôe10_dpofua
()

32 
dpofua
, 
ußge_d©a_dpofua
;

33 
scsi_èsk
 *
ms_èsk
 = 
NULL
;

34 
scsi_mode_£n£
 *
ms
;

35 
scsi_èsk
 *
rso_èsk
 = 
NULL
;

36 
scsi_ªp‹t_suµ‹ãd_›_codes_⁄e_comm™d
 *
rsoc
;

38 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

39 
	`loggög
(
LOG_VERBOSE
, "Test WRITE10 DPO/FUA flags");

41 
CHECK_FOR_SBC
;

42 
CHECK_FOR_DATALOSS
;

44 
	`loggög
(
LOG_VERBOSE
, "ReadÅhe DPOFUA flag from mode sense data");

45 
	`MODESENSE6
(
sd
, &
ms_èsk
, 0, 
SCSI_MODESENSE_PC_CURRENT
,

46 
SCSI_MODEPAGE_RETURN_ALL_PAGES
, 0, 255,

47 
EXPECT_STATUS_GOOD
);

49 
	`loggög
(
LOG_VERBOSE
, "[SUCCESS] Mode senseÑeturned status GOOD");

50 
ms
 = 
	`scsi_d©aö_unm¨shÆl
(
ms_èsk
);

51 
dpofua
 = 
ms
 && (ms->
devi˚_•ecific_∑ømëî
 & 0x10);

52 
	`scsi_‰ì_scsi_èsk
(
ms_èsk
);

54 i‡(
dpofua
) {

55 
	`loggög
(
LOG_VERBOSE
, "DPOFUA flag is set. Device shouldállow "

58 
	`loggög
(
LOG_VERBOSE
, "DPOFUA flag is clear. Device should fail "

62 
	`loggög
(
LOG_VERBOSE
, "Test WRITE10 with DPO==1");

63 
	`mem£t
(
s¸©ch
, 0xa6, 
block_size
);

64 i‡(
dpofua
) {

65 
	`WRITE10
(
sd
, 0, 
block_size
, block_size, 0, 1, 0, 0, 0, 
s¸©ch
,

66 
EXPECT_STATUS_GOOD
);

68 
	`WRITE10
(
sd
, 0, 
block_size
, block_size, 0, 1, 0, 0, 0, 
s¸©ch
,

69 
EXPECT_INVALID_FIELD_IN_CDB
);

72 
	`loggög
(
LOG_VERBOSE
, "Test WRITE10 with FUA==1");

73 i‡(
dpofua
) {

74 
	`WRITE10
(
sd
, 0, 
block_size
, block_size, 0, 0, 1, 0, 0, 
s¸©ch
,

75 
EXPECT_STATUS_GOOD
);

77 
	`WRITE10
(
sd
, 0, 
block_size
, block_size, 0, 0, 1, 0, 0, 
s¸©ch
,

78 
EXPECT_INVALID_FIELD_IN_CDB
);

81 
	`loggög
(
LOG_VERBOSE
, "Test WRITE10 with DPO==1 FUA==1");

82 i‡(
dpofua
) {

83 
	`WRITE10
(
sd
, 0, 
block_size
, block_size, 0, 1, 1, 0, 0, 
s¸©ch
,

84 
EXPECT_STATUS_GOOD
);

86 
	`WRITE10
(
sd
, 0, 
block_size
, block_size, 0, 1, 1, 0, 0, 
s¸©ch
,

87 
EXPECT_INVALID_FIELD_IN_CDB
);

91 
	`loggög
(
LOG_VERBOSE
, "Try fetching REPORT_SUPPORTED_OPCODES "

93 
	`REPORT_SUPPORTED_OPCODES
(
sd
, &
rso_èsk
,

94 0, 
SCSI_REPORT_SUPPORTING_OPCODE
,

95 
SCSI_OPCODE_WRITE10
,

98 
EXPECT_STATUS_GOOD
);

100 
	`loggög
(
LOG_VERBOSE
, "UnmarshallÅhe DATA-IN buffer");

101 
rsoc
 = 
	`scsi_d©aö_unm¨shÆl
(
rso_èsk
);

102 
	`CU_ASSERT_PTR_NOT_NULL_FATAL
(
rsoc
);

104 
ußge_d©a_dpofua
 = 
rsoc
->
cdb_ußge_d©a
[1] & 0x18;

105 i‡(
dpofua
) {

106 
	`loggög
(
LOG_VERBOSE
, "DPOFUA is set. VerifyÅhe "

108 i‡(!
ußge_d©a_dpofua
) {

109 
	`loggög
(
LOG_NORMAL
, "[FAILED] DpoFuaÇot set "

111 
	`CU_FAIL
("DpoFuaÇot set in CDB_USAGE_DATE");

114 
	`loggög
(
LOG_VERBOSE
, "DPOFUA is clear. VerifyÅhe "

116 i‡(
ußge_d©a_dpofua
) {

117 
	`loggög
(
LOG_NORMAL
, "[FAILED] DpoFuaÇot clear "

119 
	`CU_FAIL
("DpoFuaÇot clear in CDB_USAGE_DATE");

123 
	`scsi_‰ì_scsi_èsk
(
rso_èsk
);

124 
	}
}

	@test-tool/test_write10_flags.c

19 
	~<°dio.h
>

20 
	~<°dlib.h
>

21 
	~<°rög.h
>

22 
	~<°dlib.h
>

24 
	~<CUnô/CUnô.h
>

26 
	~"iscsi.h
"

27 
	~"scsi-lowÀvñ.h
"

28 
	~"iscsi-ã°-cu.h
"

31 
	$ã°_wrôe10_Êags
()

33 
CHECK_FOR_DATALOSS
;

35 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

36 
	`loggög
(
LOG_VERBOSE
, "Test WRITE10 flags");

38 
	`loggög
(
LOG_VERBOSE
, "Test WRITE10 with DPO==1");

39 
	`mem£t
(
s¸©ch
, 0xa6, 
block_size
);

40 
	`WRITE10
(
sd
, 0, 
block_size
, block_size, 0, 1, 0, 0, 0, 
s¸©ch
,

41 
EXPECT_STATUS_GOOD
);

43 
	`loggög
(
LOG_VERBOSE
, "Test WRITE10 with FUA==1 FUA_NV==0");

44 
	`WRITE10
(
sd
, 0, 
block_size
, block_size, 0, 0, 1, 0, 0, 
s¸©ch
,

45 
EXPECT_STATUS_GOOD
);

47 
	`loggög
(
LOG_VERBOSE
, "Test WRITE10 with FUA==1 FUA_NV==1");

48 
	`WRITE10
(
sd
, 0, 
block_size
, block_size, 0, 0, 1, 1, 0, 
s¸©ch
,

49 
EXPECT_STATUS_GOOD
);

51 
	`loggög
(
LOG_VERBOSE
, "Test WRITE10 with FUA==0 FUA_NV==1");

52 
	`WRITE10
(
sd
, 0, 
block_size
, block_size, 0, 0, 0, 1, 0, 
s¸©ch
,

53 
EXPECT_STATUS_GOOD
);

55 
	`loggög
(
LOG_VERBOSE
, "Test WRITE10 with DPO==1 FUA==1 FUA_NV==1");

56 
	`WRITE10
(
sd
, 0, 
block_size
, block_size, 0, 1, 1, 1, 0, 
s¸©ch
,

57 
EXPECT_STATUS_GOOD
);

58 
	}
}

	@test-tool/test_write10_residuals.c

19 
	~<°dio.h
>

20 
	~<°dlib.h
>

21 
	~<°rög.h
>

23 
	~<CUnô/CUnô.h
>

25 
	~"iscsi.h
"

26 
	~"iscsi-¥iv©e.h
"

27 
	~"scsi-lowÀvñ.h
"

28 
	~"iscsi-ã°-cu.h
"

32 
	$ã°_wrôe10_ªsiduÆs
()

34 
scsi_èsk
 *
èsk_ªt
;

35 
buf
[10000];

36 
iscsi_d©a
 
d©a
;

37 
ok
;

38 
i
;

40 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

41 
	`loggög
(
LOG_VERBOSE
, "Test WRITE10 commands withÑesiduals");

42 
	`loggög
(
LOG_VERBOSE
, "Block sizêi†%zu", 
block_size
);

44 
CHECK_FOR_DATALOSS
;

45 
CHECK_FOR_SBC
;

47 i‡(
sd
->
iscsi_˘x
 =
NULL
) {

48 c⁄° *
îr
 = "[SKIPPED] This WRITE10Åest is only "

50 
	`loggög
(
LOG_NORMAL
, "%s", 
îr
);

51 
	`CU_PASS
(
îr
);

56 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

57 
	`CU_ASSERT_PTR_NOT_NULL_FATAL
(
èsk
);

59 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

60 
èsk
->
cdb
[0] = 
SCSI_OPCODE_WRITE10
;

61 
èsk
->
cdb
[8] = 1;

62 
èsk
->
cdb_size
 = 10;

63 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

64 
èsk
->
expx„æí
 = 0;

70 
	`iscsi_£t_nﬂut‹ec⁄√˘
(
sd
->
iscsi_˘x
, 1);

72 
	`loggög
(
LOG_VERBOSE
, "Try writing one block but with iSCSIÉxpectedÅransferÜength==0");

74 
èsk_ªt
 = 
	`iscsi_scsi_comm™d_sync
(
sd
->
iscsi_˘x
, sd->
iscsi_lun
, 
èsk
, 
NULL
);

75 
	`CU_ASSERT_PTR_NOT_NULL_FATAL
(
èsk_ªt
);

76 
	`CU_ASSERT_NOT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_CANCELLED
);

78 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


79 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


80 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

81 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITE10 isÇot implemented.");

82 
	`CU_PASS
("WRITE10 isÇot implemented.");

85 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅheÅargetÑeturned SUCCESS");

86 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

87 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturnedÉrror %s",

88 
	`iscsi_gë_îr‹
(
sd
->
iscsi_˘x
));

90 
	`CU_ASSERT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_GOOD
);

92 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesidual overflow flag is set");

93 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_OVERFLOW
) {

94 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot setÑesidual "

97 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ_°©us
, 
SCSI_RESIDUAL_OVERFLOW
);

99 
	`loggög
(
LOG_VERBOSE
, "Verify we got %zu bytes ofÑesidual overflow",

100 
block_size
);

101 i‡(
èsk
->
ªsiduÆ
 !
block_size
) {

102 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot set correct "

104 
block_size
, 
èsk
->
ªsiduÆ
);

106 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ
, 
block_size
);

107 
	`scsi_‰ì_scsi_èsk
(
èsk
);

108 
èsk
 = 
NULL
;

111 
	`iscsi_£t_nﬂut‹ec⁄√˘
(
sd
->
iscsi_˘x
, 0);

114 
	`loggög
(
LOG_VERBOSE
, "Try writing one block but with iSCSIÉxpectedÅransferÜength==10000");

115 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

116 
	`CU_ASSERT_PTR_NOT_NULL_FATAL
(
èsk
);

118 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

119 
èsk
->
cdb
[0] = 
SCSI_OPCODE_WRITE10
;

120 
èsk
->
cdb
[8] = 1;

121 
èsk
->
cdb_size
 = 10;

122 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

123 
èsk
->
expx„æí
 = 10000;

125 
	`mem£t
(
buf
, 0xa6, (buf));

126 
d©a
.
size
 = 
èsk
->
expx„æí
;

127 
d©a
.d©®&
buf
[0];

128 
èsk_ªt
 = 
	`iscsi_scsi_comm™d_sync
(
sd
->
iscsi_˘x
, sd->
iscsi_lun
, 
èsk
, &
d©a
);

129 
	`CU_ASSERT_PTR_NOT_NULL_FATAL
(
èsk_ªt
);

131 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅheÅargetÑeturned SUCCESS");

132 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

133 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturnedÉrror %s",

134 
	`iscsi_gë_îr‹
(
sd
->
iscsi_˘x
));

136 
	`CU_ASSERT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_GOOD
);

138 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesidual underflow flag is set");

139 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_UNDERFLOW
) {

140 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot setÑesidual "

143 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ_°©us
, 
SCSI_RESIDUAL_UNDERFLOW
);

145 
	`loggög
(
LOG_VERBOSE
, "Verify we got %zu bytes ofÑesidual underflow",

146 10000 - 
block_size
);

147 i‡(
èsk
->
ªsiduÆ
 !10000 - 
block_size
) {

148 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot set correct "

150 10000 - 
block_size
, 
èsk
->
ªsiduÆ
);

152 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ
, 10000 - 
block_size
);

153 
	`scsi_‰ì_scsi_èsk
(
èsk
);

154 
èsk
 = 
NULL
;

157 
	`loggög
(
LOG_VERBOSE
, "Try writing one block but with iSCSIÉxpectedÅransferÜength==200");

158 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

159 
	`CU_ASSERT_PTR_NOT_NULL_FATAL
(
èsk
);

161 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

162 
èsk
->
cdb
[0] = 
SCSI_OPCODE_WRITE10
;

163 
èsk
->
cdb
[8] = 1;

164 
èsk
->
cdb_size
 = 10;

165 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

166 
èsk
->
expx„æí
 = 200;

168 
d©a
.
size
 = 
èsk
->
expx„æí
;

169 
d©a
.d©®&
buf
[0];

170 
èsk_ªt
 = 
	`iscsi_scsi_comm™d_sync
(
sd
->
iscsi_˘x
, sd->
iscsi_lun
, 
èsk
, &
d©a
);

171 
	`CU_ASSERT_PTR_NOT_NULL_FATAL
(
èsk_ªt
);

173 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅheÅargetÑeturned SUCCESS");

174 
ok
 = 
èsk
->
°©us
 =
SCSI_STATUS_GOOD
 ||

175 (
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION
 &&

176 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST
 &&

177 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_FIELD_IN_INFORMATION_UNIT
);

178 i‡(!
ok
) {

179 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturnedÉrror %s",

180 
	`iscsi_gë_îr‹
(
sd
->
iscsi_˘x
));

182 
	`CU_ASSERT
(
ok
);

184 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesidual overflow flag is set");

185 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_OVERFLOW
) {

186 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot setÑesidual "

189 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ_°©us
, 
SCSI_RESIDUAL_OVERFLOW
);

191 
	`loggög
(
LOG_VERBOSE
, "Verify we got %zu bytes ofÑesidual overflow",

192 
block_size
 - 200);

193 i‡(
èsk
->
ªsiduÆ
 !
block_size
 - 200) {

194 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot set correct "

196 
block_size
 - 200, 
èsk
->
ªsiduÆ
);

198 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ
, 
block_size
 - 200);

200 
	`scsi_‰ì_scsi_èsk
(
èsk
);

201 
èsk
 = 
NULL
;

205 
	`loggög
(
LOG_VERBOSE
, "Try writingÅwo blocks but iSCSIÉxpected "

206 "å™s„∏Àngth==%zu (==⁄êblock)", 
block_size
);

207 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

208 
	`CU_ASSERT_PTR_NOT_NULL_FATAL
(
èsk
);

210 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

211 
èsk
->
cdb
[0] = 
SCSI_OPCODE_WRITE10
;

212 
èsk
->
cdb
[8] = 2;

213 
èsk
->
cdb_size
 = 10;

214 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

215 
èsk
->
expx„æí
 = 
block_size
;

217 
d©a
.
size
 = 
èsk
->
expx„æí
;

218 
d©a
.d©®&
buf
[0];

219 
èsk_ªt
 = 
	`iscsi_scsi_comm™d_sync
(
sd
->
iscsi_˘x
, sd->
iscsi_lun
, 
èsk
, &
d©a
);

220 
	`CU_ASSERT_PTR_NOT_NULL_FATAL
(
èsk_ªt
);

222 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅheÅargetÑeturned SUCCESS");

223 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

224 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturnedÉrror %s",

225 
	`iscsi_gë_îr‹
(
sd
->
iscsi_˘x
));

227 
	`CU_ASSERT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_GOOD
);

229 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesidual overflow flag is set");

230 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_OVERFLOW
) {

231 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot setÑesidual "

234 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ_°©us
, 
SCSI_RESIDUAL_OVERFLOW
);

236 
	`loggög
(
LOG_VERBOSE
, "Verify we got one block ofÑesidual overflow");

237 i‡(
èsk
->
ªsiduÆ
 !
block_size
) {

238 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot set correct "

240 
block_size
, 
èsk
->
ªsiduÆ
);

242 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ
, 
block_size
);

244 
	`scsi_‰ì_scsi_èsk
(
èsk
);

245 
èsk
 = 
NULL
;

250 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhat if iSCSI EDTL > SCSI TLÅhen we only write SCSI TLámount of data");

252 
	`loggög
(
LOG_VERBOSE
, "WriteÅwo blocks of 'a'");

253 
	`mem£t
(
buf
, 'a', 10000);

254 
	`WRITE10
(
sd
, 0, 2 * 
block_size
, block_size, 0, 0, 0, 0, 0, 
buf
,

255 
EXPECT_STATUS_GOOD
);

257 
	`loggög
(
LOG_VERBOSE
, "Write one block of 'b' but set iSCSI EDTLÅo 2 blocks.");

258 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

259 
	`CU_ASSERT_PTR_NOT_NULL_FATAL
(
èsk
);

261 
	`mem£t
(
buf
, 'b', 10000);

263 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

264 
èsk
->
cdb
[0] = 
SCSI_OPCODE_WRITE10
;

265 
èsk
->
cdb
[8] = 1;

266 
èsk
->
cdb_size
 = 10;

267 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

268 
èsk
->
expx„æí
 = 2 * 
block_size
;

270 
d©a
.
size
 = 
èsk
->
expx„æí
;

271 
d©a
.d©®&
buf
[0];

272 
èsk_ªt
 = 
	`iscsi_scsi_comm™d_sync
(
sd
->
iscsi_˘x
, sd->
iscsi_lun
, 
èsk
, &
d©a
);

273 
	`CU_ASSERT_PTR_NOT_NULL_FATAL
(
èsk_ªt
);

275 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅheÅargetÑeturned SUCCESS");

276 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

277 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturnedÉrror %s",

278 
	`iscsi_gë_îr‹
(
sd
->
iscsi_˘x
));

280 
	`CU_ASSERT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_GOOD
);

282 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesidual underflow flag is set");

283 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_UNDERFLOW
) {

284 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot setÑesidual "

287 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ_°©us
, 
SCSI_RESIDUAL_UNDERFLOW
);

289 
	`loggög
(
LOG_VERBOSE
, "Verify we got one block ofÑesidual underflow");

290 i‡(
èsk
->
ªsiduÆ
 !
block_size
) {

291 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot set correct "

293 
block_size
, 
èsk
->
ªsiduÆ
);

295 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ
, 
block_size
);

296 
	`scsi_‰ì_scsi_èsk
(
èsk
);

297 
èsk
 = 
NULL
;

299 
	`loggög
(
LOG_VERBOSE
, "ReadÅheÅwo blocks");

300 
	`READ10
(
sd
, 
NULL
, 0, 2* 
block_size
, block_size, 0, 0, 0, 0, 0, 
buf
,

301 
EXPECT_STATUS_GOOD
);

303 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅhe first block was changedÅo 'b'");

304 
i
 = 0; i < 
block_size
; i++) {

305 i‡(
buf
[
i
] != 'b') {

306 
	`loggög
(
LOG_NORMAL
, "First block didÇot containÉxpected 'b'");

307 
	`CU_FAIL
("Block wasÇot written correctly");

312 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅhe second block was NOT overwrittenánd still contains 'a'");

313 
i
 = 
block_size
; i < 2 * block_size; i++) {

314 i‡(
buf
[
i
] != 'a') {

315 
	`loggög
(
LOG_NORMAL
, "Second block was overwrittenándÇoÜonger contain 'a'");

316 
	`CU_FAIL
("Second block was incorrectly overwritten");

322 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhat if iSCSI EDTL < SCSI TLÅhen we only write iSCSI EDTLámount of data");

324 
	`loggög
(
LOG_VERBOSE
, "WriteÅwo blocks of 'a'");

325 
	`mem£t
(
buf
, 'a', 10000);

326 
	`WRITE10
(
sd
, 0, 2 * 
block_size
, block_size, 0, 0, 0, 0, 0, 
buf
,

327 
EXPECT_STATUS_GOOD
);

329 
	`loggög
(
LOG_VERBOSE
, "WriteÅwo blocks of 'b' but set iSCSI EDTLÅo 1 blocks.");

330 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

331 
	`CU_ASSERT_PTR_NOT_NULL_FATAL
(
èsk
);

333 
	`mem£t
(
buf
, 'b', 10000);

335 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

336 
èsk
->
cdb
[0] = 
SCSI_OPCODE_WRITE10
;

337 
èsk
->
cdb
[8] = 2;

338 
èsk
->
cdb_size
 = 10;

339 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

340 
èsk
->
expx„æí
 = 
block_size
;

342 
d©a
.
size
 = 
èsk
->
expx„æí
;

343 
d©a
.d©®&
buf
[0];

344 
èsk_ªt
 = 
	`iscsi_scsi_comm™d_sync
(
sd
->
iscsi_˘x
, sd->
iscsi_lun
, 
èsk
, &
d©a
);

345 
	`CU_ASSERT_PTR_NOT_NULL_FATAL
(
èsk_ªt
);

347 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅheÅargetÑeturned SUCCESS");

348 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

349 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturnedÉrror %s",

350 
	`iscsi_gë_îr‹
(
sd
->
iscsi_˘x
));

352 
	`CU_ASSERT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_GOOD
);

354 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesidual overflow flag is set");

355 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_OVERFLOW
) {

356 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot setÑesidual "

359 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ_°©us
, 
SCSI_RESIDUAL_OVERFLOW
);

361 
	`loggög
(
LOG_VERBOSE
, "Verify we got one block ofÑesidual overflow");

362 i‡(
èsk
->
ªsiduÆ
 !
block_size
) {

363 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot set correct "

365 
block_size
, 
èsk
->
ªsiduÆ
);

367 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ
, 
block_size
);

368 
	`scsi_‰ì_scsi_èsk
(
èsk
);

369 
èsk
 = 
NULL
;

371 
	`loggög
(
LOG_VERBOSE
, "ReadÅheÅwo blocks");

372 
	`READ10
(
sd
, 
NULL
, 0, 2* 
block_size
, block_size, 0, 0, 0, 0, 0, 
buf
,

373 
EXPECT_STATUS_GOOD
);

375 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅhe first block was changedÅo 'b'");

376 
i
 = 0; i < 
block_size
; i++) {

377 i‡(
buf
[
i
] != 'b') {

378 
	`loggög
(
LOG_NORMAL
, "First block didÇot containÉxpected 'b'");

379 
	`CU_FAIL
("Block wasÇot written correctly");

384 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅhe second block was NOT overwrittenánd still contains 'a'");

385 
i
 = 
block_size
; i < 2 * block_size; i++) {

386 i‡(
buf
[
i
] != 'a') {

387 
	`loggög
(
LOG_NORMAL
, "Second block was overwrittenándÇoÜonger contain 'a'");

388 
	`CU_FAIL
("Second block was incorrectly overwritten");

392 
	}
}

	@test-tool/test_write10_simple.c

19 
	~<°dio.h
>

20 
	~<°dlib.h
>

22 
	~<CUnô/CUnô.h
>

24 
	~"iscsi.h
"

25 
	~"scsi-lowÀvñ.h
"

26 
	~"iscsi-suµ‹t.h
"

27 
	~"iscsi-ã°-cu.h
"

31 
	$ã°_wrôe10_sim∂e
()

33 
i
;

34 
uöt32_t
 
lba
;

36 
CHECK_FOR_DATALOSS
;

37 
	`¥ötf
("\nTest WRITE10 of 1-256 blocksátÅhe start ofÅhe LUN\n");

38 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

39 
	`loggög
(
LOG_VERBOSE
, "Test WRITE10 of 1-256 blocksátÅhe start ofÅhe LUN");

40 
	`mem£t
(
s¸©ch
, 0xa6, 256 * 
block_size
);

41 
i
 = 1; i <= 256; i++) {

42 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

45 
	`WRITE10
(
sd
, 0, 
i
 * 
block_size
, block_size,

46 0, 0, 0, 0, 0, 
s¸©ch
,

47 
EXPECT_STATUS_GOOD
);

50 
	`loggög
(
LOG_VERBOSE
, "Test WRITE10 of 1-256 blocksátÅheÉnd ofÅhe LUN");

51 
i
 = 1; i <= 256; i++) {

52 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

55 
	`WRITE10
(
sd
, 
num_blocks
 - 
i
,

56 
i
 * 
block_size
, block_size, 0, 0, 0, 0, 0, 
s¸©ch
,

57 
EXPECT_STATUS_GOOD
);

60 
lba
 = ((4 * 1024 * 1024Ë/ 
block_size
) - 3;

61 i‡(
num_blocks
 > (
lba
 + 256)) {

62 
	`loggög
(
LOG_VERBOSE
,

64 
i
 = 1; i <= 256; i++) {

65 i‡(
maximum_å™s„r_Àngth


66 && 
maximum_å™s„r_Àngth
 < 
i
) {

69 
	`WRITE10
(
sd
, 
lba
, 
i
 * 
block_size
,

70 
block_size
, 0, 0, 0, 0, 0, 
s¸©ch
,

71 
EXPECT_STATUS_GOOD
);

74 
	}
}

	@test-tool/test_write10_wrprotect.c

19 
	~<°dio.h
>

20 
	~<°dlib.h
>

21 
	~<°rög.h
>

22 
	~<°dlib.h
>

24 
	~<CUnô/CUnô.h
>

26 
	~"iscsi.h
"

27 
	~"scsi-lowÀvñ.h
"

28 
	~"iscsi-ã°-cu.h
"

31 
	$ã°_wrôe10_wΩrŸe˘
()

33 
i
;

38 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

39 
	`loggög
(
LOG_VERBOSE
, "Test WRITE10 withÇon-zero WRPROTECT");

41 
CHECK_FOR_DATALOSS
;

42 
CHECK_FOR_SBC
;

44 
	`mem£t
(
s¸©ch
, 0xa6, 
block_size
);

45 i‡(!
öq
->
¥Ÿe˘
 || (
rc16
 !
NULL
 && !rc16->
¥Ÿ_í
)) {

46 
	`loggög
(
LOG_VERBOSE
, "Device doesÇot support/useÖrotection information. All commands should fail.");

47 
i
 = 1; i < 8; i++) {

48 
	`WRITE10
(
sd
, 0, 
block_size
, block_size,

49 
i
, 0, 0, 0, 0, 
s¸©ch
,

50 
EXPECT_INVALID_FIELD_IN_CDB
);

55 
	`loggög
(
LOG_NORMAL
, "NoÅests for devicesÅhat supportÖrotection information yet.");

56 
	}
}

	@test-tool/test_write12_0blocks.c

19 
	~<°dio.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-ã°-cu.h
"

28 
	$ã°_wrôe12_0blocks
()

30 
CHECK_FOR_DATALOSS
;

32 i‡(
num_blocks
 >= 0x80000000) {

33 
	`CU_PASS
("LUN isÅoo big forÑead-beyond-eolÅests with WRITE12. SkippingÅest.\n");

37 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

38 
	`loggög
(
LOG_VERBOSE
, "Test WRITE12 0-blocksát LBA==0");

39 
	`WRITE12
(
sd
, 0, 0, 
block_size
, 0, 0, 0, 0, 0, 
NULL
,

40 
EXPECT_STATUS_GOOD
);

42 
	`loggög
(
LOG_VERBOSE
, "Test WRITE12 0-blocks one blockÖastÉnd-of-LUN");

43 
	`WRITE12
(
sd
, 
num_blocks
 + 1, 0, 
block_size
, 0, 0, 0, 0, 0, 
NULL
,

44 
EXPECT_LBA_OOB
);

46 
	`loggög
(
LOG_VERBOSE
, "Test WRITE12 0-blocksát LBA==2^31");

47 
	`WRITE12
(
sd
, 0x80000000, 0, 
block_size
, 0, 0, 0, 0, 0, 
NULL
,

48 
EXPECT_LBA_OOB
);

50 
	`loggög
(
LOG_VERBOSE
, "Test WRITE12 0-blocksát LBA==-1");

51 
	`WRITE12
(
sd
, -1, 0, 
block_size
, 0, 0, 0, 0, 0, 
NULL
,

52 
EXPECT_LBA_OOB
);

53 
	}
}

	@test-tool/test_write12_beyond_eol.c

19 
	~<°dio.h
>

20 
	~<°dlib.h
>

22 
	~<CUnô/CUnô.h
>

24 
	~"iscsi.h
"

25 
	~"scsi-lowÀvñ.h
"

26 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_wrôe12_bey⁄d_eﬁ
()

32 
i
;

34 
CHECK_FOR_DATALOSS
;

36 i‡(
num_blocks
 >= 0x80000000) {

37 
	`CU_PASS
("LUN isÅoo big for write-beyond-eolÅests with WRITE12. SkippingÅest.\n");

41 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

42 
	`loggög
(
LOG_VERBOSE
, "Test WRITE12 1-256 blocks one block beyondÅheÉnd");

43 
	`mem£t
(
s¸©ch
, 0xa6, 256 * 
block_size
);

44 
i
 = 1; i <= 256; i++) {

45 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

48 
	`WRITE12
(
sd
, 
num_blocks
 + 1 - 
i
,

49 
i
 * 
block_size
, block_size, 0, 0, 0, 0, 0, 
s¸©ch
,

50 
EXPECT_LBA_OOB
);

53 
	`loggög
(
LOG_VERBOSE
, "Test WRITE12 1-256 blocksát LBA==2^31");

54 
i
 = 1; i <= 256; i++) {

55 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

58 
	`WRITE12
(
sd
, 0x80000000,

59 
i
 * 
block_size
, block_size, 0, 0, 0, 0, 0, 
s¸©ch
,

60 
EXPECT_LBA_OOB
);

63 
	`loggög
(
LOG_VERBOSE
, "Test WRITE12 1-256 blocksát LBA==-1");

64 
i
 = 1; i <= 256; i++) {

65 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

68 
	`WRITE12
(
sd
, -1, 
i
 * 
block_size
,

69 
block_size
, 0, 0, 0, 0, 0, 
s¸©ch
,

70 
EXPECT_LBA_OOB
);

73 
	`loggög
(
LOG_VERBOSE
, "Test WRITE12 2-256 blocksáll but one block beyondÅheÉnd");

74 
i
 = 2; i <= 256; i++) {

75 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

78 
	`WRITE12
(
sd
, 
num_blocks
 - 1,

79 
i
 * 
block_size
, block_size, 0, 0, 0, 0, 0, 
s¸©ch
,

80 
EXPECT_LBA_OOB
);

82 
	}
}

	@test-tool/test_write12_dpofua.c

19 
	~<°dio.h
>

20 
	~<°dlib.h
>

21 
	~<°rög.h
>

23 
	~<CUnô/CUnô.h
>

25 
	~"iscsi.h
"

26 
	~"scsi-lowÀvñ.h
"

27 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_wrôe12_dpofua
()

32 
dpofua
, 
ußge_d©a_dpofua
;

33 
scsi_èsk
 *
ms_èsk
 = 
NULL
;

34 
scsi_mode_£n£
 *
ms
;

35 
scsi_èsk
 *
rso_èsk
 = 
NULL
;

36 
scsi_ªp‹t_suµ‹ãd_›_codes_⁄e_comm™d
 *
rsoc
;

38 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

39 
	`loggög
(
LOG_VERBOSE
, "Test WRITE12 DPO/FUA flags");

41 
CHECK_FOR_SBC
;

42 
CHECK_FOR_DATALOSS
;

44 
	`loggög
(
LOG_VERBOSE
, "ReadÅhe DPOFUA flag from mode sense data");

45 
	`MODESENSE6
(
sd
, &
ms_èsk
, 0, 
SCSI_MODESENSE_PC_CURRENT
,

46 
SCSI_MODEPAGE_RETURN_ALL_PAGES
, 0, 255,

47 
EXPECT_STATUS_GOOD
);

49 
	`loggög
(
LOG_VERBOSE
, "[SUCCESS] Mode senseÑeturned status GOOD");

50 
ms
 = 
	`scsi_d©aö_unm¨shÆl
(
ms_èsk
);

51 
dpofua
 = 
ms
 && (ms->
devi˚_•ecific_∑ømëî
 & 0x10);

52 
	`scsi_‰ì_scsi_èsk
(
ms_èsk
);

54 i‡(
dpofua
) {

55 
	`loggög
(
LOG_VERBOSE
, "DPOFUA flag is set. Device shouldállow "

58 
	`loggög
(
LOG_VERBOSE
, "DPOFUA flag is clear. Device should fail "

62 
	`loggög
(
LOG_VERBOSE
, "Test WRITE12 with DPO==1");

63 
	`mem£t
(
s¸©ch
, 0xa6, 
block_size
);

64 i‡(
dpofua
) {

65 
	`WRITE12
(
sd
, 0, 
block_size
, block_size, 0, 1, 0, 0, 0, 
s¸©ch
,

66 
EXPECT_STATUS_GOOD
);

68 
	`WRITE12
(
sd
, 0, 
block_size
, block_size, 0, 1, 0, 0, 0, 
s¸©ch
,

69 
EXPECT_INVALID_FIELD_IN_CDB
);

72 
	`loggög
(
LOG_VERBOSE
, "Test WRITE12 with FUA==1");

73 i‡(
dpofua
) {

74 
	`WRITE12
(
sd
, 0, 
block_size
, block_size, 0, 0, 1, 0, 0, 
s¸©ch
,

75 
EXPECT_STATUS_GOOD
);

77 
	`WRITE12
(
sd
, 0, 
block_size
, block_size, 0, 0, 1, 0, 0, 
s¸©ch
,

78 
EXPECT_INVALID_FIELD_IN_CDB
);

81 
	`loggög
(
LOG_VERBOSE
, "Test WRITE12 with DPO==1 FUA==1");

82 i‡(
dpofua
) {

83 
	`WRITE12
(
sd
, 0, 
block_size
, block_size, 0, 1, 1, 0, 0, 
s¸©ch
,

84 
EXPECT_STATUS_GOOD
);

86 
	`WRITE12
(
sd
, 0, 
block_size
, block_size, 0, 1, 1, 0, 0, 
s¸©ch
,

87 
EXPECT_INVALID_FIELD_IN_CDB
);

91 
	`loggög
(
LOG_VERBOSE
, "Try fetching REPORT_SUPPORTED_OPCODES "

93 
	`REPORT_SUPPORTED_OPCODES
(
sd
, &
rso_èsk
,

94 0, 
SCSI_REPORT_SUPPORTING_OPCODE
,

95 
SCSI_OPCODE_WRITE12
,

98 
EXPECT_STATUS_GOOD
);

100 
	`loggög
(
LOG_VERBOSE
, "UnmarshallÅhe DATA-IN buffer");

101 
rsoc
 = 
	`scsi_d©aö_unm¨shÆl
(
rso_èsk
);

102 
	`CU_ASSERT_PTR_NOT_NULL_FATAL
(
rsoc
);

104 
ußge_d©a_dpofua
 = 
rsoc
->
cdb_ußge_d©a
[1] & 0x18;

105 i‡(
dpofua
) {

106 
	`loggög
(
LOG_VERBOSE
, "DPOFUA is set. VerifyÅhe "

108 i‡(!
ußge_d©a_dpofua
) {

109 
	`loggög
(
LOG_NORMAL
, "[FAILED] DpoFuaÇot set "

111 
	`CU_FAIL
("DpoFuaÇot set in CDB_USAGE_DATE");

114 
	`loggög
(
LOG_VERBOSE
, "DPOFUA is clear. VerifyÅhe "

116 i‡(
ußge_d©a_dpofua
) {

117 
	`loggög
(
LOG_NORMAL
, "[FAILED] DpoFuaÇot clear "

119 
	`CU_FAIL
("DpoFuaÇot clear in CDB_USAGE_DATE");

123 
	`scsi_‰ì_scsi_èsk
(
rso_èsk
);

124 
	}
}

	@test-tool/test_write12_flags.c

19 
	~<°dio.h
>

20 
	~<°dlib.h
>

21 
	~<°rög.h
>

22 
	~<°dlib.h
>

24 
	~<CUnô/CUnô.h
>

26 
	~"iscsi.h
"

27 
	~"scsi-lowÀvñ.h
"

28 
	~"iscsi-ã°-cu.h
"

31 
	$ã°_wrôe12_Êags
()

33 
CHECK_FOR_DATALOSS
;

35 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

36 
	`loggög
(
LOG_VERBOSE
, "Test WRITE12 flags");

38 
	`loggög
(
LOG_VERBOSE
, "Test WRITE12 with DPO==1");

39 
	`mem£t
(
s¸©ch
, 0xa6, 
block_size
);

40 
	`WRITE12
(
sd
, 0, 
block_size
, block_size, 0, 1, 0, 0, 0, 
s¸©ch
,

41 
EXPECT_STATUS_GOOD
);

43 
	`loggög
(
LOG_VERBOSE
, "Test WRITE12 with FUA==1 FUA_NV==0");

44 
	`WRITE12
(
sd
, 0, 
block_size
, block_size, 0, 0, 1, 0, 0, 
s¸©ch
,

45 
EXPECT_STATUS_GOOD
);

47 
	`loggög
(
LOG_VERBOSE
, "Test WRITE12 with FUA==1 FUA_NV==1");

48 
	`WRITE12
(
sd
, 0, 
block_size
, block_size, 0, 0, 1, 1, 0, 
s¸©ch
,

49 
EXPECT_STATUS_GOOD
);

51 
	`loggög
(
LOG_VERBOSE
, "Test WRITE12 with FUA==0 FUA_NV==1");

52 
	`WRITE12
(
sd
, 0, 
block_size
, block_size, 0, 0, 0, 1, 0, 
s¸©ch
,

53 
EXPECT_STATUS_GOOD
);

55 
	`loggög
(
LOG_VERBOSE
, "Test WRITE12 with DPO==1 FUA==1 FUA_NV==1");

56 
	`WRITE12
(
sd
, 0, 
block_size
, block_size, 0, 1, 1, 1, 0, 
s¸©ch
,

57 
EXPECT_STATUS_GOOD
);

58 
	}
}

	@test-tool/test_write12_residuals.c

19 
	~<°dio.h
>

20 
	~<°dlib.h
>

21 
	~<°rög.h
>

23 
	~<CUnô/CUnô.h
>

25 
	~"iscsi.h
"

26 
	~"iscsi-¥iv©e.h
"

27 
	~"scsi-lowÀvñ.h
"

28 
	~"iscsi-ã°-cu.h
"

32 
	$ã°_wrôe12_ªsiduÆs
()

34 
scsi_èsk
 *
èsk_ªt
;

35 
buf
[10000];

36 
iscsi_d©a
 
d©a
;

37 
ok
;

38 
i
;

40 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

41 
	`loggög
(
LOG_VERBOSE
, "Test WRITE12 commands withÑesiduals");

42 
	`loggög
(
LOG_VERBOSE
, "Block sizêi†%zu", 
block_size
);

44 
CHECK_FOR_DATALOSS
;

45 
CHECK_FOR_SBC
;

47 i‡(
sd
->
iscsi_˘x
 =
NULL
) {

48 c⁄° *
îr
 = "[SKIPPED] This WRITE12Åest is only "

50 
	`loggög
(
LOG_NORMAL
, "%s", 
îr
);

51 
	`CU_PASS
(
îr
);

56 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

57 
	`CU_ASSERT_PTR_NOT_NULL_FATAL
(
èsk
);

59 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

60 
èsk
->
cdb
[0] = 
SCSI_OPCODE_WRITE12
;

61 
èsk
->
cdb
[9] = 1;

62 
èsk
->
cdb_size
 = 12;

63 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

64 
èsk
->
expx„æí
 = 0;

70 
	`iscsi_£t_nﬂut‹ec⁄√˘
(
sd
->
iscsi_˘x
, 1);

72 
	`loggög
(
LOG_VERBOSE
, "Try writing one block but with iSCSIÉxpectedÅransferÜength==0");

74 
èsk_ªt
 = 
	`iscsi_scsi_comm™d_sync
(
sd
->
iscsi_˘x
, sd->
iscsi_lun
, 
èsk
, 
NULL
);

75 
	`CU_ASSERT_PTR_NOT_NULL_FATAL
(
èsk_ªt
);

76 
	`CU_ASSERT_NOT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_CANCELLED
);

78 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


79 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


80 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

81 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITE12 isÇot implemented.");

82 
	`CU_PASS
("WRITE12 isÇot implemented.");

85 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅheÅargetÑeturned SUCCESS");

86 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

87 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturnedÉrror %s",

88 
	`iscsi_gë_îr‹
(
sd
->
iscsi_˘x
));

90 
	`CU_ASSERT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_GOOD
);

92 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesidual overflow flag is set");

93 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_OVERFLOW
) {

94 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot setÑesidual "

97 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ_°©us
, 
SCSI_RESIDUAL_OVERFLOW
);

99 
	`loggög
(
LOG_VERBOSE
, "Verify we got %zu bytes ofÑesidual overflow",

100 
block_size
);

101 i‡(
èsk
->
ªsiduÆ
 !
block_size
) {

102 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot set correct "

104 
block_size
, 
èsk
->
ªsiduÆ
);

106 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ
, 
block_size
);

107 
	`scsi_‰ì_scsi_èsk
(
èsk
);

108 
èsk
 = 
NULL
;

111 
	`iscsi_£t_nﬂut‹ec⁄√˘
(
sd
->
iscsi_˘x
, 0);

114 
	`loggög
(
LOG_VERBOSE
, "Try writing one block but with iSCSIÉxpectedÅransferÜength==10000");

115 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

116 
	`CU_ASSERT_PTR_NOT_NULL_FATAL
(
èsk
);

118 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

119 
èsk
->
cdb
[0] = 
SCSI_OPCODE_WRITE12
;

120 
èsk
->
cdb
[9] = 1;

121 
èsk
->
cdb_size
 = 12;

122 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

123 
èsk
->
expx„æí
 = 10000;

125 
	`mem£t
(
buf
, 0xa6, (buf));

126 
d©a
.
size
 = 
èsk
->
expx„æí
;

127 
d©a
.d©®&
buf
[0];

128 
èsk_ªt
 = 
	`iscsi_scsi_comm™d_sync
(
sd
->
iscsi_˘x
, sd->
iscsi_lun
, 
èsk
, &
d©a
);

129 
	`CU_ASSERT_PTR_NOT_NULL_FATAL
(
èsk_ªt
);

131 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅheÅargetÑeturned SUCCESS");

132 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

133 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturnedÉrror %s",

134 
	`iscsi_gë_îr‹
(
sd
->
iscsi_˘x
));

136 
	`CU_ASSERT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_GOOD
);

138 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesidual underflow flag is set");

139 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_UNDERFLOW
) {

140 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot setÑesidual "

143 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ_°©us
, 
SCSI_RESIDUAL_UNDERFLOW
);

145 
	`loggög
(
LOG_VERBOSE
, "Verify we got %zu bytes ofÑesidual underflow",

146 10000 - 
block_size
);

147 i‡(
èsk
->
ªsiduÆ
 !10000 - 
block_size
) {

148 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot set correct "

150 10000 - 
block_size
, 
èsk
->
ªsiduÆ
);

152 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ
, 10000 - 
block_size
);

153 
	`scsi_‰ì_scsi_èsk
(
èsk
);

154 
èsk
 = 
NULL
;

157 
	`loggög
(
LOG_VERBOSE
, "Try writing one block but with iSCSIÉxpectedÅransferÜength==200");

158 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

159 
	`CU_ASSERT_PTR_NOT_NULL_FATAL
(
èsk
);

161 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

162 
èsk
->
cdb
[0] = 
SCSI_OPCODE_WRITE12
;

163 
èsk
->
cdb
[9] = 1;

164 
èsk
->
cdb_size
 = 12;

165 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

166 
èsk
->
expx„æí
 = 200;

168 
d©a
.
size
 = 
èsk
->
expx„æí
;

169 
d©a
.d©®&
buf
[0];

170 
èsk_ªt
 = 
	`iscsi_scsi_comm™d_sync
(
sd
->
iscsi_˘x
, sd->
iscsi_lun
, 
èsk
, &
d©a
);

171 
	`CU_ASSERT_PTR_NOT_NULL_FATAL
(
èsk_ªt
);

173 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅheÅargetÑeturned SUCCESS");

174 
ok
 = 
èsk
->
°©us
 =
SCSI_STATUS_GOOD
 ||

175 (
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION
 &&

176 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST
 &&

177 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_FIELD_IN_INFORMATION_UNIT
);

178 i‡(!
ok
) {

179 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturnedÉrror %s",

180 
	`iscsi_gë_îr‹
(
sd
->
iscsi_˘x
));

182 
	`CU_ASSERT
(
ok
);

184 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesidual overflow flag is set");

185 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_OVERFLOW
) {

186 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot setÑesidual "

189 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ_°©us
, 
SCSI_RESIDUAL_OVERFLOW
);

191 
	`loggög
(
LOG_VERBOSE
, "Verify we got %zu bytes ofÑesidual overflow",

192 
block_size
 - 200);

193 i‡(
èsk
->
ªsiduÆ
 !
block_size
 - 200) {

194 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot set correct "

196 
block_size
 - 200, 
èsk
->
ªsiduÆ
);

198 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ
, 
block_size
 - 200);

200 
	`scsi_‰ì_scsi_èsk
(
èsk
);

201 
èsk
 = 
NULL
;

205 
	`loggög
(
LOG_VERBOSE
, "Try writingÅwo blocks but iSCSIÉxpected "

206 "å™s„∏Àngth==%zu (==⁄êblock)", 
block_size
);

207 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

208 
	`CU_ASSERT_PTR_NOT_NULL_FATAL
(
èsk
);

210 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

211 
èsk
->
cdb
[0] = 
SCSI_OPCODE_WRITE12
;

212 
èsk
->
cdb
[9] = 2;

213 
èsk
->
cdb_size
 = 12;

214 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

215 
èsk
->
expx„æí
 = 
block_size
;

217 
d©a
.
size
 = 
èsk
->
expx„æí
;

218 
d©a
.d©®&
buf
[0];

219 
èsk_ªt
 = 
	`iscsi_scsi_comm™d_sync
(
sd
->
iscsi_˘x
, sd->
iscsi_lun
, 
èsk
, &
d©a
);

220 
	`CU_ASSERT_PTR_NOT_NULL_FATAL
(
èsk_ªt
);

222 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅheÅargetÑeturned SUCCESS");

223 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

224 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturnedÉrror %s",

225 
	`iscsi_gë_îr‹
(
sd
->
iscsi_˘x
));

227 
	`CU_ASSERT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_GOOD
);

229 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesidual overflow flag is set");

230 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_OVERFLOW
) {

231 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot setÑesidual "

234 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ_°©us
, 
SCSI_RESIDUAL_OVERFLOW
);

236 
	`loggög
(
LOG_VERBOSE
, "Verify we got one block ofÑesidual overflow");

237 i‡(
èsk
->
ªsiduÆ
 !
block_size
) {

238 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot set correct "

240 
block_size
, 
èsk
->
ªsiduÆ
);

242 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ
, 
block_size
);

244 
	`scsi_‰ì_scsi_èsk
(
èsk
);

245 
èsk
 = 
NULL
;

249 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhat if iSCSI EDTL > SCSI TLÅhen we only write SCSI TLámount of data");

251 
	`loggög
(
LOG_VERBOSE
, "WriteÅwo blocks of 'a'");

252 
	`mem£t
(
buf
, 'a', 10000);

253 
	`WRITE12
(
sd
, 0, 2 * 
block_size
, block_size, 0, 0, 0, 0, 0, 
buf
,

254 
EXPECT_STATUS_GOOD
);

256 
	`loggög
(
LOG_VERBOSE
, "Write one block of 'b' but set iSCSI EDTLÅo 2 blocks.");

257 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

258 
	`CU_ASSERT_PTR_NOT_NULL_FATAL
(
èsk
);

260 
	`mem£t
(
buf
, 'b', 10000);

262 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

263 
èsk
->
cdb
[0] = 
SCSI_OPCODE_WRITE12
;

264 
èsk
->
cdb
[9] = 1;

265 
èsk
->
cdb_size
 = 12;

266 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

267 
èsk
->
expx„æí
 = 2 * 
block_size
;

269 
d©a
.
size
 = 
èsk
->
expx„æí
;

270 
d©a
.d©®&
buf
[0];

271 
èsk_ªt
 = 
	`iscsi_scsi_comm™d_sync
(
sd
->
iscsi_˘x
, sd->
iscsi_lun
, 
èsk
, &
d©a
);

272 
	`CU_ASSERT_PTR_NOT_NULL_FATAL
(
èsk_ªt
);

274 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅheÅargetÑeturned SUCCESS");

275 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

276 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturnedÉrror %s",

277 
	`iscsi_gë_îr‹
(
sd
->
iscsi_˘x
));

279 
	`CU_ASSERT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_GOOD
);

281 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesidual underflow flag is set");

282 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_UNDERFLOW
) {

283 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot setÑesidual "

286 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ_°©us
, 
SCSI_RESIDUAL_UNDERFLOW
);

288 
	`loggög
(
LOG_VERBOSE
, "Verify we got one block ofÑesidual underflow");

289 i‡(
èsk
->
ªsiduÆ
 !
block_size
) {

290 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot set correct "

292 
block_size
, 
èsk
->
ªsiduÆ
);

294 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ
, 
block_size
);

295 
	`scsi_‰ì_scsi_èsk
(
èsk
);

296 
èsk
 = 
NULL
;

298 
	`loggög
(
LOG_VERBOSE
, "ReadÅheÅwo blocks");

299 
	`READ12
(
sd
, 
NULL
, 0, 2* 
block_size
, block_size, 0, 0, 0, 0, 0, 
buf
,

300 
EXPECT_STATUS_GOOD
);

302 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅhe first block was changedÅo 'b'");

303 
i
 = 0; i < 
block_size
; i++) {

304 i‡(
buf
[
i
] != 'b') {

305 
	`loggög
(
LOG_NORMAL
, "First block didÇot containÉxpected 'b'");

306 
	`CU_FAIL
("Block wasÇot written correctly");

311 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅhe second block was NOT overwrittenánd still contains 'a'");

312 
i
 = 
block_size
; i < 2 * block_size; i++) {

313 i‡(
buf
[
i
] != 'a') {

314 
	`loggög
(
LOG_NORMAL
, "Second block was overwrittenándÇoÜonger contain 'a'");

315 
	`CU_FAIL
("Second block was incorrectly overwritten");

321 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhat if iSCSI EDTL < SCSI TLÅhen we only write iSCSI EDTLámount of data");

323 
	`loggög
(
LOG_VERBOSE
, "WriteÅwo blocks of 'a'");

324 
	`mem£t
(
buf
, 'a', 10000);

325 
	`WRITE12
(
sd
, 0, 2 * 
block_size
, block_size, 0, 0, 0, 0, 0, 
buf
,

326 
EXPECT_STATUS_GOOD
);

328 
	`loggög
(
LOG_VERBOSE
, "WriteÅwo blocks of 'b' but set iSCSI EDTLÅo 1 blocks.");

329 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

330 
	`CU_ASSERT_PTR_NOT_NULL_FATAL
(
èsk
);

332 
	`mem£t
(
buf
, 'b', 10000);

334 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

335 
èsk
->
cdb
[0] = 
SCSI_OPCODE_WRITE12
;

336 
èsk
->
cdb
[9] = 2;

337 
èsk
->
cdb_size
 = 12;

338 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

339 
èsk
->
expx„æí
 = 
block_size
;

341 
d©a
.
size
 = 
èsk
->
expx„æí
;

342 
d©a
.d©®&
buf
[0];

343 
èsk_ªt
 = 
	`iscsi_scsi_comm™d_sync
(
sd
->
iscsi_˘x
, sd->
iscsi_lun
, 
èsk
, &
d©a
);

344 
	`CU_ASSERT_PTR_NOT_NULL_FATAL
(
èsk_ªt
);

346 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅheÅargetÑeturned SUCCESS");

347 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

348 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturnedÉrror %s",

349 
	`iscsi_gë_îr‹
(
sd
->
iscsi_˘x
));

351 
	`CU_ASSERT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_GOOD
);

353 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesidual overflow flag is set");

354 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_OVERFLOW
) {

355 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot setÑesidual "

358 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ_°©us
, 
SCSI_RESIDUAL_OVERFLOW
);

360 
	`loggög
(
LOG_VERBOSE
, "Verify we got one block ofÑesidual overflow");

361 i‡(
èsk
->
ªsiduÆ
 !
block_size
) {

362 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot set correct "

364 
block_size
, 
èsk
->
ªsiduÆ
);

366 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ
, 
block_size
);

367 
	`scsi_‰ì_scsi_èsk
(
èsk
);

368 
èsk
 = 
NULL
;

370 
	`loggög
(
LOG_VERBOSE
, "ReadÅheÅwo blocks");

371 
	`READ12
(
sd
, 
NULL
, 0, 2* 
block_size
, block_size, 0, 0, 0, 0, 0, 
buf
,

372 
EXPECT_STATUS_GOOD
);

374 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅhe first block was changedÅo 'b'");

375 
i
 = 0; i < 
block_size
; i++) {

376 i‡(
buf
[
i
] != 'b') {

377 
	`loggög
(
LOG_NORMAL
, "First block didÇot containÉxpected 'b'");

378 
	`CU_FAIL
("Block wasÇot written correctly");

383 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅhe second block was NOT overwrittenánd still contains 'a'");

384 
i
 = 
block_size
; i < 2 * block_size; i++) {

385 i‡(
buf
[
i
] != 'a') {

386 
	`loggög
(
LOG_NORMAL
, "Second block was overwrittenándÇoÜonger contain 'a'");

387 
	`CU_FAIL
("Second block was incorrectly overwritten");

391 
	}
}

	@test-tool/test_write12_simple.c

19 
	~<°dio.h
>

20 
	~<°dlib.h
>

22 
	~<CUnô/CUnô.h
>

24 
	~"iscsi.h
"

25 
	~"scsi-lowÀvñ.h
"

26 
	~"iscsi-suµ‹t.h
"

27 
	~"iscsi-ã°-cu.h
"

31 
	$ã°_wrôe12_sim∂e
()

33 
i
;

35 
CHECK_FOR_DATALOSS
;

37 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

38 
	`loggög
(
LOG_VERBOSE
, "Test WRITE12 of 1-256 blocksátÅhe start ofÅhe LUN");

39 
	`mem£t
(
s¸©ch
, 0xa6, 256 * 
block_size
);

40 
i
 = 1; i <= 256; i++) {

41 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

44 
	`WRITE12
(
sd
, 0, 
i
 * 
block_size
, block_size,

45 0, 0, 0, 0, 0, 
s¸©ch
,

46 
EXPECT_STATUS_GOOD
);

49 
	`loggög
(
LOG_VERBOSE
, "Test WRITE12 of 1-256 blocksátÅheÉnd ofÅhe LUN");

50 
i
 = 1; i <= 256; i++) {

51 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

54 
	`WRITE12
(
sd
, 
num_blocks
 - 
i
,

55 
i
 * 
block_size
, block_size, 0, 0, 0, 0, 0, 
s¸©ch
,

56 
EXPECT_STATUS_GOOD
);

58 
	}
}

	@test-tool/test_write12_wrprotect.c

19 
	~<°dio.h
>

20 
	~<°dlib.h
>

21 
	~<°rög.h
>

22 
	~<°dlib.h
>

24 
	~<CUnô/CUnô.h
>

26 
	~"iscsi.h
"

27 
	~"scsi-lowÀvñ.h
"

28 
	~"iscsi-ã°-cu.h
"

31 
	$ã°_wrôe12_wΩrŸe˘
()

33 
i
;

38 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

39 
	`loggög
(
LOG_VERBOSE
, "Test WRITE12 withÇon-zero WRPROTECT");

41 
CHECK_FOR_DATALOSS
;

42 
CHECK_FOR_SBC
;

44 
	`mem£t
(
s¸©ch
, 0xa6, 
block_size
);

45 i‡(!
öq
->
¥Ÿe˘
 || (
rc16
 !
NULL
 && !rc16->
¥Ÿ_í
)) {

46 
	`loggög
(
LOG_VERBOSE
, "Device doesÇot support/useÖrotection information. All commands should fail.");

47 
i
 = 1; i < 8; i++) {

48 
	`WRITE12
(
sd
, 0, 
block_size
, block_size,

49 
i
, 0, 0, 0, 0, 
s¸©ch
,

50 
EXPECT_INVALID_FIELD_IN_CDB
);

55 
	`loggög
(
LOG_NORMAL
, "NoÅests for devicesÅhat supportÖrotection information yet.");

56 
	}
}

	@test-tool/test_write16_0blocks.c

19 
	~<°dio.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-ã°-cu.h
"

28 
	$ã°_wrôe16_0blocks
()

30 
CHECK_FOR_DATALOSS
;

31 
CHECK_FOR_SBC
;

33 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

34 
	`loggög
(
LOG_VERBOSE
, "Test WRITE16 0-blocksát LBA==0");

35 
	`WRITE16
(
sd
, 0, 0, 
block_size
, 0, 0, 0, 0, 0, 
NULL
,

36 
EXPECT_STATUS_GOOD
);

38 
	`loggög
(
LOG_VERBOSE
, "Test WRITE16 0-blocks one blockÖastÉnd-of-LUN");

39 
	`WRITE16
(
sd
, 
num_blocks
 + 1, 0, 
block_size
, 0, 0, 0, 0, 0, 
NULL
,

40 
EXPECT_LBA_OOB
);

42 
	`loggög
(
LOG_VERBOSE
, "Test WRITE16 0-blocksát LBA==2^63");

43 
	`WRITE16
(
sd
, 0x8000000000000000ULL, 0, 
block_size
, 0, 0, 0, 0, 0, 
NULL
,

44 
EXPECT_LBA_OOB
);

46 
	`loggög
(
LOG_VERBOSE
, "Test WRITE16 0-blocksát LBA==-1");

47 
	`WRITE16
(
sd
, -1, 0, 
block_size
, 0, 0, 0, 0, 0, 
NULL
,

48 
EXPECT_LBA_OOB
);

49 
	}
}

	@test-tool/test_write16_beyond_eol.c

19 
	~<°dio.h
>

20 
	~<°dlib.h
>

22 
	~<CUnô/CUnô.h
>

24 
	~"iscsi.h
"

25 
	~"scsi-lowÀvñ.h
"

26 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_wrôe16_bey⁄d_eﬁ
()

32 
i
;

34 
CHECK_FOR_DATALOSS
;

35 
CHECK_FOR_SBC
;

37 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

38 
	`loggög
(
LOG_VERBOSE
, "Test WRITE16 1-256 blocks one block beyondÅheÉnd");

39 
	`mem£t
(
s¸©ch
, 0xa6, 256 * 
block_size
);

40 
i
 = 1; i <= 256; i++) {

41 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

44 
	`WRITE16
(
sd
, 
num_blocks
 + 1 - 
i
,

45 
i
 * 
block_size
, block_size, 0, 0, 0, 0, 0, 
s¸©ch
,

46 
EXPECT_LBA_OOB
);

49 
	`loggög
(
LOG_VERBOSE
, "Test WRITE16 1-256 blocksát LBA==2^63");

50 
i
 = 1; i <= 256; i++) {

51 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

54 
	`WRITE16
(
sd
, 0x8000000000000000ULL,

55 
i
 * 
block_size
, block_size, 0, 0, 0, 0, 0, 
s¸©ch
,

56 
EXPECT_LBA_OOB
);

59 
	`loggög
(
LOG_VERBOSE
, "Test WRITE16 1-256 blocksát LBA==-1");

60 
i
 = 1; i <= 256; i++) {

61 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

64 
	`WRITE16
(
sd
, -1, 
i
 * 
block_size
,

65 
block_size
, 0, 0, 0, 0, 0, 
s¸©ch
,

66 
EXPECT_LBA_OOB
);

69 
	`loggög
(
LOG_VERBOSE
, "Test WRITE16 2-256 blocksáll but one block beyondÅheÉnd");

70 
i
 = 2; i <= 256; i++) {

71 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

74 
	`WRITE16
(
sd
, 
num_blocks
 - 1,

75 
i
 * 
block_size
, block_size, 0, 0, 0, 0, 0, 
s¸©ch
,

76 
EXPECT_LBA_OOB
);

78 
	}
}

	@test-tool/test_write16_dpofua.c

19 
	~<°dio.h
>

20 
	~<°dlib.h
>

21 
	~<°rög.h
>

23 
	~<CUnô/CUnô.h
>

25 
	~"iscsi.h
"

26 
	~"scsi-lowÀvñ.h
"

27 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_wrôe16_dpofua
()

32 
dpofua
, 
ußge_d©a_dpofua
;

33 
scsi_èsk
 *
ms_èsk
 = 
NULL
;

34 
scsi_mode_£n£
 *
ms
;

35 
scsi_èsk
 *
rso_èsk
 = 
NULL
;

36 
scsi_ªp‹t_suµ‹ãd_›_codes_⁄e_comm™d
 *
rsoc
;

38 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

39 
	`loggög
(
LOG_VERBOSE
, "Test WRITE16 DPO/FUA flags");

41 
CHECK_FOR_SBC
;

42 
CHECK_FOR_DATALOSS
;

44 
	`loggög
(
LOG_VERBOSE
, "ReadÅhe DPOFUA flag from mode sense data");

45 
	`MODESENSE6
(
sd
, &
ms_èsk
, 0, 
SCSI_MODESENSE_PC_CURRENT
,

46 
SCSI_MODEPAGE_RETURN_ALL_PAGES
, 0, 255,

47 
EXPECT_STATUS_GOOD
);

49 
	`loggög
(
LOG_VERBOSE
, "[SUCCESS] Mode senseÑeturned status GOOD");

50 
ms
 = 
	`scsi_d©aö_unm¨shÆl
(
ms_èsk
);

51 
dpofua
 = 
ms
 && (ms->
devi˚_•ecific_∑ømëî
 & 0x10);

52 
	`scsi_‰ì_scsi_èsk
(
ms_èsk
);

54 i‡(
dpofua
) {

55 
	`loggög
(
LOG_VERBOSE
, "DPOFUA flag is set. Device shouldállow "

58 
	`loggög
(
LOG_VERBOSE
, "DPOFUA flag is clear. Device should fail "

62 
	`loggög
(
LOG_VERBOSE
, "Test WRITE16 with DPO==1");

63 
	`mem£t
(
s¸©ch
, 0xa6, 
block_size
);

64 i‡(
dpofua
) {

65 
	`WRITE16
(
sd
, 0, 
block_size
, block_size, 0, 1, 0, 0, 0, 
s¸©ch
,

66 
EXPECT_STATUS_GOOD
);

68 
	`WRITE16
(
sd
, 0, 
block_size
, block_size, 0, 1, 0, 0, 0, 
s¸©ch
,

69 
EXPECT_INVALID_FIELD_IN_CDB
);

72 
	`loggög
(
LOG_VERBOSE
, "Test WRITE16 with FUA==1");

73 i‡(
dpofua
) {

74 
	`WRITE16
(
sd
, 0, 
block_size
, block_size, 0, 0, 1, 0, 0, 
s¸©ch
,

75 
EXPECT_STATUS_GOOD
);

77 
	`WRITE16
(
sd
, 0, 
block_size
, block_size, 0, 0, 1, 0, 0, 
s¸©ch
,

78 
EXPECT_INVALID_FIELD_IN_CDB
);

81 
	`loggög
(
LOG_VERBOSE
, "Test WRITE16 with DPO==1 FUA==1");

82 i‡(
dpofua
) {

83 
	`WRITE16
(
sd
, 0, 
block_size
, block_size, 0, 1, 1, 0, 0, 
s¸©ch
,

84 
EXPECT_STATUS_GOOD
);

86 
	`WRITE16
(
sd
, 0, 
block_size
, block_size, 0, 1, 1, 0, 0, 
s¸©ch
,

87 
EXPECT_INVALID_FIELD_IN_CDB
);

91 
	`loggög
(
LOG_VERBOSE
, "Try fetching REPORT_SUPPORTED_OPCODES "

93 
	`REPORT_SUPPORTED_OPCODES
(
sd
, &
rso_èsk
,

94 0, 
SCSI_REPORT_SUPPORTING_OPCODE
,

95 
SCSI_OPCODE_WRITE16
,

98 
EXPECT_STATUS_GOOD
);

100 
	`loggög
(
LOG_VERBOSE
, "UnmarshallÅhe DATA-IN buffer");

101 
rsoc
 = 
	`scsi_d©aö_unm¨shÆl
(
rso_èsk
);

102 
	`CU_ASSERT_PTR_NOT_NULL_FATAL
(
rsoc
);

104 
ußge_d©a_dpofua
 = 
rsoc
->
cdb_ußge_d©a
[1] & 0x18;

105 i‡(
dpofua
) {

106 
	`loggög
(
LOG_VERBOSE
, "DPOFUA is set. VerifyÅhe "

108 i‡(!
ußge_d©a_dpofua
) {

109 
	`loggög
(
LOG_NORMAL
, "[FAILED] DpoFuaÇot set "

111 
	`CU_FAIL
("DpoFuaÇot set in CDB_USAGE_DATE");

114 
	`loggög
(
LOG_VERBOSE
, "DPOFUA is clear. VerifyÅhe "

116 i‡(
ußge_d©a_dpofua
) {

117 
	`loggög
(
LOG_NORMAL
, "[FAILED] DpoFuaÇot clear "

119 
	`CU_FAIL
("DpoFuaÇot clear in CDB_USAGE_DATE");

123 
	`scsi_‰ì_scsi_èsk
(
rso_èsk
);

124 
	}
}

	@test-tool/test_write16_flags.c

19 
	~<°dio.h
>

20 
	~<°dlib.h
>

21 
	~<°rög.h
>

22 
	~<°dlib.h
>

24 
	~<CUnô/CUnô.h
>

26 
	~"iscsi.h
"

27 
	~"scsi-lowÀvñ.h
"

28 
	~"iscsi-ã°-cu.h
"

31 
	$ã°_wrôe16_Êags
()

33 
CHECK_FOR_DATALOSS
;

34 
CHECK_FOR_SBC
;

36 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

37 
	`loggög
(
LOG_VERBOSE
, "Test WRITE16 flags");

39 
	`loggög
(
LOG_VERBOSE
, "Test WRITE16 with DPO==1");

40 
	`mem£t
(
s¸©ch
, 0xa6, 
block_size
);

41 
	`WRITE16
(
sd
, 0, 
block_size
, block_size, 0, 1, 0, 0, 0, 
s¸©ch
,

42 
EXPECT_STATUS_GOOD
);

44 
	`loggög
(
LOG_VERBOSE
, "Test WRITE16 with FUA==1 FUA_NV==0");

45 
	`WRITE16
(
sd
, 0, 
block_size
, block_size, 0, 0, 1, 0, 0, 
s¸©ch
,

46 
EXPECT_STATUS_GOOD
);

48 
	`loggög
(
LOG_VERBOSE
, "Test WRITE16 with FUA==1 FUA_NV==1");

49 
	`WRITE16
(
sd
, 0, 
block_size
, block_size, 0, 0, 1, 1, 0, 
s¸©ch
,

50 
EXPECT_STATUS_GOOD
);

52 
	`loggög
(
LOG_VERBOSE
, "Test WRITE16 with FUA==0 FUA_NV==1");

53 
	`WRITE16
(
sd
, 0, 
block_size
, block_size, 0, 0, 0, 1, 0, 
s¸©ch
,

54 
EXPECT_STATUS_GOOD
);

56 
	`loggög
(
LOG_VERBOSE
, "Test WRITE16 with DPO==1 FUA==1 FUA_NV==1");

57 
	`WRITE16
(
sd
, 0, 
block_size
, block_size, 0, 1, 1, 1, 0, 
s¸©ch
,

58 
EXPECT_STATUS_GOOD
);

59 
	}
}

	@test-tool/test_write16_residuals.c

19 
	~<°dio.h
>

20 
	~<°dlib.h
>

21 
	~<°rög.h
>

23 
	~<CUnô/CUnô.h
>

25 
	~"iscsi.h
"

26 
	~"iscsi-¥iv©e.h
"

27 
	~"scsi-lowÀvñ.h
"

28 
	~"iscsi-ã°-cu.h
"

32 
	$ã°_wrôe16_ªsiduÆs
()

34 
scsi_èsk
 *
èsk_ªt
;

35 
buf
[10000];

36 
iscsi_d©a
 
d©a
;

37 
ok
;

38 
i
;

40 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

41 
	`loggög
(
LOG_VERBOSE
, "Test WRITE16 commands withÑesiduals");

42 
	`loggög
(
LOG_VERBOSE
, "Block sizêi†%zu", 
block_size
);

44 
CHECK_FOR_DATALOSS
;

45 
CHECK_FOR_SBC
;

47 i‡(
sd
->
iscsi_˘x
 =
NULL
) {

48 c⁄° *
îr
 = "[SKIPPED] This WRITE16Åest is only "

50 
	`loggög
(
LOG_NORMAL
, "%s", 
îr
);

51 
	`CU_PASS
(
îr
);

56 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

57 
	`CU_ASSERT_PTR_NOT_NULL_FATAL
(
èsk
);

59 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

60 
èsk
->
cdb
[0] = 
SCSI_OPCODE_WRITE16
;

61 
èsk
->
cdb
[13] = 1;

62 
èsk
->
cdb_size
 = 16;

63 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

64 
èsk
->
expx„æí
 = 0;

70 
	`iscsi_£t_nﬂut‹ec⁄√˘
(
sd
->
iscsi_˘x
, 1);

72 
	`loggög
(
LOG_VERBOSE
, "Try writing one block but with iSCSIÉxpectedÅransferÜength==0");

74 
èsk_ªt
 = 
	`iscsi_scsi_comm™d_sync
(
sd
->
iscsi_˘x
, sd->
iscsi_lun
, 
èsk
, 
NULL
);

75 
	`CU_ASSERT_PTR_NOT_NULL_FATAL
(
èsk_ªt
);

76 
	`CU_ASSERT_NOT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_CANCELLED
);

78 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


79 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


80 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

81 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITE16 isÇot implemented.");

82 
	`CU_PASS
("WRITE16 isÇot implemented.");

85 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅheÅargetÑeturned SUCCESS");

86 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

87 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturnedÉrror %s",

88 
	`iscsi_gë_îr‹
(
sd
->
iscsi_˘x
));

90 
	`CU_ASSERT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_GOOD
);

92 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesidual overflow flag is set");

93 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_OVERFLOW
) {

94 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot setÑesidual "

97 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ_°©us
, 
SCSI_RESIDUAL_OVERFLOW
);

99 
	`loggög
(
LOG_VERBOSE
, "Verify we got %zu bytes ofÑesidual overflow",

100 
block_size
);

101 i‡(
èsk
->
ªsiduÆ
 !
block_size
) {

102 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot set correct "

104 
block_size
, 
èsk
->
ªsiduÆ
);

106 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ
, 
block_size
);

107 
	`scsi_‰ì_scsi_èsk
(
èsk
);

108 
èsk
 = 
NULL
;

111 
	`iscsi_£t_nﬂut‹ec⁄√˘
(
sd
->
iscsi_˘x
, 0);

114 
	`loggög
(
LOG_VERBOSE
, "Try writing one block but with iSCSIÉxpectedÅransferÜength==10000");

115 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

116 
	`CU_ASSERT_PTR_NOT_NULL_FATAL
(
èsk
);

118 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

119 
èsk
->
cdb
[0] = 
SCSI_OPCODE_WRITE16
;

120 
èsk
->
cdb
[13] = 1;

121 
èsk
->
cdb_size
 = 16;

122 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

123 
èsk
->
expx„æí
 = 10000;

125 
	`mem£t
(
buf
, 0xa6, (buf));

126 
d©a
.
size
 = 
èsk
->
expx„æí
;

127 
d©a
.d©®&
buf
[0];

128 
èsk_ªt
 = 
	`iscsi_scsi_comm™d_sync
(
sd
->
iscsi_˘x
, sd->
iscsi_lun
, 
èsk
, &
d©a
);

129 
	`CU_ASSERT_PTR_NOT_NULL_FATAL
(
èsk_ªt
);

131 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅheÅargetÑeturned SUCCESS");

132 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

133 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturnedÉrror %s",

134 
	`iscsi_gë_îr‹
(
sd
->
iscsi_˘x
));

136 
	`CU_ASSERT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_GOOD
);

138 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesidual underflow flag is set");

139 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_UNDERFLOW
) {

140 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot setÑesidual "

143 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ_°©us
, 
SCSI_RESIDUAL_UNDERFLOW
);

145 
	`loggög
(
LOG_VERBOSE
, "Verify we got %zu bytes ofÑesidual underflow",

146 10000 - 
block_size
);

147 i‡(
èsk
->
ªsiduÆ
 !10000 - 
block_size
) {

148 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot set correct "

150 10000 - 
block_size
, 
èsk
->
ªsiduÆ
);

152 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ
, 10000 - 
block_size
);

153 
	`scsi_‰ì_scsi_èsk
(
èsk
);

154 
èsk
 = 
NULL
;

157 
	`loggög
(
LOG_VERBOSE
, "Try writing one block but with iSCSIÉxpectedÅransferÜength==200");

158 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

159 
	`CU_ASSERT_PTR_NOT_NULL_FATAL
(
èsk
);

161 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

162 
èsk
->
cdb
[0] = 
SCSI_OPCODE_WRITE16
;

163 
èsk
->
cdb
[13] = 1;

164 
èsk
->
cdb_size
 = 16;

165 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

166 
èsk
->
expx„æí
 = 200;

168 
d©a
.
size
 = 
èsk
->
expx„æí
;

169 
d©a
.d©®&
buf
[0];

170 
èsk_ªt
 = 
	`iscsi_scsi_comm™d_sync
(
sd
->
iscsi_˘x
, sd->
iscsi_lun
, 
èsk
, &
d©a
);

171 
	`CU_ASSERT_PTR_NOT_NULL_FATAL
(
èsk_ªt
);

173 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅheÅargetÑeturned SUCCESS");

174 
ok
 = 
èsk
->
°©us
 =
SCSI_STATUS_GOOD
 ||

175 (
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION
 &&

176 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST
 &&

177 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_FIELD_IN_INFORMATION_UNIT
);

178 i‡(!
ok
) {

179 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturnedÉrror %s",

180 
	`iscsi_gë_îr‹
(
sd
->
iscsi_˘x
));

182 
	`CU_ASSERT
(
ok
);

184 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesidual overflow flag is set");

185 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_OVERFLOW
) {

186 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot setÑesidual "

189 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ_°©us
, 
SCSI_RESIDUAL_OVERFLOW
);

191 
	`loggög
(
LOG_VERBOSE
, "Verify we got %zu bytes ofÑesidual overflow",

192 
block_size
 - 200);

193 i‡(
èsk
->
ªsiduÆ
 !
block_size
 - 200) {

194 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot set correct "

196 
block_size
 - 200, 
èsk
->
ªsiduÆ
);

198 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ
, 
block_size
 - 200);

200 
	`scsi_‰ì_scsi_èsk
(
èsk
);

201 
èsk
 = 
NULL
;

205 
	`loggög
(
LOG_VERBOSE
, "Try writingÅwo blocks but iSCSIÉxpected "

206 "å™s„∏Àngth==%zu (==⁄êblock)", 
block_size
);

207 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

208 
	`CU_ASSERT_PTR_NOT_NULL_FATAL
(
èsk
);

210 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

211 
èsk
->
cdb
[0] = 
SCSI_OPCODE_WRITE16
;

212 
èsk
->
cdb
[13] = 2;

213 
èsk
->
cdb_size
 = 16;

214 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

215 
èsk
->
expx„æí
 = 
block_size
;

217 
d©a
.
size
 = 
èsk
->
expx„æí
;

218 
d©a
.d©®&
buf
[0];

219 
èsk_ªt
 = 
	`iscsi_scsi_comm™d_sync
(
sd
->
iscsi_˘x
, sd->
iscsi_lun
, 
èsk
, &
d©a
);

220 
	`CU_ASSERT_PTR_NOT_NULL_FATAL
(
èsk_ªt
);

222 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅheÅargetÑeturned SUCCESS");

223 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

224 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturnedÉrror %s",

225 
	`iscsi_gë_îr‹
(
sd
->
iscsi_˘x
));

227 
	`CU_ASSERT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_GOOD
);

229 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesidual overflow flag is set");

230 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_OVERFLOW
) {

231 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot setÑesidual "

234 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ_°©us
, 
SCSI_RESIDUAL_OVERFLOW
);

236 
	`loggög
(
LOG_VERBOSE
, "Verify we got one block ofÑesidual overflow");

237 i‡(
èsk
->
ªsiduÆ
 !
block_size
) {

238 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot set correct "

240 
block_size
, 
èsk
->
ªsiduÆ
);

242 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ
, 
block_size
);

244 
	`scsi_‰ì_scsi_èsk
(
èsk
);

245 
èsk
 = 
NULL
;

249 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhat if iSCSI EDTL > SCSI TLÅhen we only write SCSI TLámount of data");

251 
	`loggög
(
LOG_VERBOSE
, "WriteÅwo blocks of 'a'");

252 
	`mem£t
(
buf
, 'a', 10000);

253 
	`WRITE16
(
sd
, 0, 2 * 
block_size
, block_size, 0, 0, 0, 0, 0, 
buf
,

254 
EXPECT_STATUS_GOOD
);

256 
	`loggög
(
LOG_VERBOSE
, "Write one block of 'b' but set iSCSI EDTLÅo 2 blocks.");

257 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

258 
	`CU_ASSERT_PTR_NOT_NULL_FATAL
(
èsk
);

260 
	`mem£t
(
buf
, 'b', 10000);

262 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

263 
èsk
->
cdb
[0] = 
SCSI_OPCODE_WRITE16
;

264 
èsk
->
cdb
[13] = 1;

265 
èsk
->
cdb_size
 = 16;

266 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

267 
èsk
->
expx„æí
 = 2 * 
block_size
;

269 
d©a
.
size
 = 
èsk
->
expx„æí
;

270 
d©a
.d©®&
buf
[0];

271 
èsk_ªt
 = 
	`iscsi_scsi_comm™d_sync
(
sd
->
iscsi_˘x
, sd->
iscsi_lun
, 
èsk
, &
d©a
);

272 
	`CU_ASSERT_PTR_NOT_NULL_FATAL
(
èsk_ªt
);

274 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅheÅargetÑeturned SUCCESS");

275 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

276 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturnedÉrror %s",

277 
	`iscsi_gë_îr‹
(
sd
->
iscsi_˘x
));

279 
	`CU_ASSERT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_GOOD
);

281 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesidual underflow flag is set");

282 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_UNDERFLOW
) {

283 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot setÑesidual "

286 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ_°©us
, 
SCSI_RESIDUAL_UNDERFLOW
);

288 
	`loggög
(
LOG_VERBOSE
, "Verify we got one block ofÑesidual underflow");

289 i‡(
èsk
->
ªsiduÆ
 !
block_size
) {

290 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot set correct "

292 
block_size
, 
èsk
->
ªsiduÆ
);

294 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ
, 
block_size
);

295 
	`scsi_‰ì_scsi_èsk
(
èsk
);

296 
èsk
 = 
NULL
;

298 
	`loggög
(
LOG_VERBOSE
, "ReadÅheÅwo blocks");

299 
	`READ16
(
sd
, 
NULL
, 0, 2* 
block_size
, block_size, 0, 0, 0, 0, 0, 
buf
,

300 
EXPECT_STATUS_GOOD
);

302 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅhe first block was changedÅo 'b'");

303 
i
 = 0; i < 
block_size
; i++) {

304 i‡(
buf
[
i
] != 'b') {

305 
	`loggög
(
LOG_NORMAL
, "First block didÇot containÉxpected 'b'");

306 
	`CU_FAIL
("Block wasÇot written correctly");

311 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅhe second block was NOT overwrittenánd still contains 'a'");

312 
i
 = 
block_size
; i < 2 * block_size; i++) {

313 i‡(
buf
[
i
] != 'a') {

314 
	`loggög
(
LOG_NORMAL
, "Second block was overwrittenándÇoÜonger contain 'a'");

315 
	`CU_FAIL
("Second block was incorrectly overwritten");

321 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhat if iSCSI EDTL < SCSI TLÅhen we only write iSCSI EDTLámount of data");

323 
	`loggög
(
LOG_VERBOSE
, "WriteÅwo blocks of 'a'");

324 
	`mem£t
(
buf
, 'a', 10000);

325 
	`WRITE16
(
sd
, 0, 2 * 
block_size
, block_size, 0, 0, 0, 0, 0, 
buf
,

326 
EXPECT_STATUS_GOOD
);

328 
	`loggög
(
LOG_VERBOSE
, "WriteÅwo blocks of 'b' but set iSCSI EDTLÅo 1 blocks.");

329 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

330 
	`CU_ASSERT_PTR_NOT_NULL_FATAL
(
èsk
);

332 
	`mem£t
(
buf
, 'b', 10000);

334 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

335 
èsk
->
cdb
[0] = 
SCSI_OPCODE_WRITE16
;

336 
èsk
->
cdb
[13] = 2;

337 
èsk
->
cdb_size
 = 16;

338 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

339 
èsk
->
expx„æí
 = 
block_size
;

341 
d©a
.
size
 = 
èsk
->
expx„æí
;

342 
d©a
.d©®&
buf
[0];

343 
èsk_ªt
 = 
	`iscsi_scsi_comm™d_sync
(
sd
->
iscsi_˘x
, sd->
iscsi_lun
, 
èsk
, &
d©a
);

344 
	`CU_ASSERT_PTR_NOT_NULL_FATAL
(
èsk_ªt
);

346 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅheÅargetÑeturned SUCCESS");

347 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

348 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturnedÉrror %s",

349 
	`iscsi_gë_îr‹
(
sd
->
iscsi_˘x
));

351 
	`CU_ASSERT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_GOOD
);

353 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesidual overflow flag is set");

354 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_OVERFLOW
) {

355 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot setÑesidual "

358 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ_°©us
, 
SCSI_RESIDUAL_OVERFLOW
);

360 
	`loggög
(
LOG_VERBOSE
, "Verify we got one block ofÑesidual overflow");

361 i‡(
èsk
->
ªsiduÆ
 !
block_size
) {

362 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot set correct "

364 
block_size
, 
èsk
->
ªsiduÆ
);

366 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ
, 
block_size
);

367 
	`scsi_‰ì_scsi_èsk
(
èsk
);

368 
èsk
 = 
NULL
;

370 
	`loggög
(
LOG_VERBOSE
, "ReadÅheÅwo blocks");

371 
	`READ16
(
sd
, 
NULL
, 0, 2* 
block_size
, block_size, 0, 0, 0, 0, 0, 
buf
,

372 
EXPECT_STATUS_GOOD
);

374 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅhe first block was changedÅo 'b'");

375 
i
 = 0; i < 
block_size
; i++) {

376 i‡(
buf
[
i
] != 'b') {

377 
	`loggög
(
LOG_NORMAL
, "First block didÇot containÉxpected 'b'");

378 
	`CU_FAIL
("Block wasÇot written correctly");

383 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅhe second block was NOT overwrittenánd still contains 'a'");

384 
i
 = 
block_size
; i < 2 * block_size; i++) {

385 i‡(
buf
[
i
] != 'a') {

386 
	`loggög
(
LOG_NORMAL
, "Second block was overwrittenándÇoÜonger contain 'a'");

387 
	`CU_FAIL
("Second block was incorrectly overwritten");

391 
	}
}

	@test-tool/test_write16_simple.c

19 
	~<°dio.h
>

20 
	~<°dlib.h
>

22 
	~<CUnô/CUnô.h
>

24 
	~"iscsi.h
"

25 
	~"scsi-lowÀvñ.h
"

26 
	~"iscsi-suµ‹t.h
"

27 
	~"iscsi-ã°-cu.h
"

31 
	$ã°_wrôe16_sim∂e
()

33 
i
;

35 
CHECK_FOR_DATALOSS
;

36 
CHECK_FOR_SBC
;

38 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

39 
	`loggög
(
LOG_VERBOSE
, "Test WRITE16 of 1-256 blocksátÅhe start ofÅhe LUN");

40 
	`mem£t
(
s¸©ch
, 0xa6, 256 * 
block_size
);

41 
i
 = 1; i <= 256; i++) {

42 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

45 
	`WRITE16
(
sd
, 0, 
i
 * 
block_size
, block_size,

46 0, 0, 0, 0, 0, 
s¸©ch
,

47 
EXPECT_STATUS_GOOD
);

50 
	`loggög
(
LOG_VERBOSE
, "Test WRITE16 of 1-256 blocksátÅheÉnd ofÅhe LUN");

51 
i
 = 1; i <= 256; i++) {

52 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

55 
	`WRITE16
(
sd
, 
num_blocks
 - 
i
,

56 
i
 * 
block_size
, block_size, 0, 0, 0, 0, 0, 
s¸©ch
,

57 
EXPECT_STATUS_GOOD
);

59 
	}
}

	@test-tool/test_write16_wrprotect.c

19 
	~<°dio.h
>

20 
	~<°dlib.h
>

21 
	~<°rög.h
>

22 
	~<°dlib.h
>

24 
	~<CUnô/CUnô.h
>

26 
	~"iscsi.h
"

27 
	~"scsi-lowÀvñ.h
"

28 
	~"iscsi-ã°-cu.h
"

31 
	$ã°_wrôe16_wΩrŸe˘
()

33 
i
;

38 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

39 
	`loggög
(
LOG_VERBOSE
, "Test WRITE16 withÇon-zero WRPROTECT");

41 
CHECK_FOR_DATALOSS
;

42 
CHECK_FOR_SBC
;

44 
	`mem£t
(
s¸©ch
, 0xa6, 
block_size
);

45 i‡(!
öq
->
¥Ÿe˘
 || (
rc16
 !
NULL
 && !rc16->
¥Ÿ_í
)) {

46 
	`loggög
(
LOG_VERBOSE
, "Device doesÇot support/useÖrotection information. All commands should fail.");

47 
i
 = 1; i < 8; i++) {

48 
	`WRITE16
(
sd
, 0, 
block_size
, block_size,

49 
i
, 0, 0, 0, 0, 
s¸©ch
,

50 
EXPECT_INVALID_FIELD_IN_CDB
);

55 
	`loggög
(
LOG_NORMAL
, "NoÅests for devicesÅhat supportÖrotection information yet.");

56 
	}
}

	@test-tool/test_writeatomic16_0blocks.c

19 
	~<°dio.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-ã°-cu.h
"

28 
	$ã°_wrôótomic16_0blocks
()

30 
Æign
;

32 
CHECK_FOR_DATALOSS
;

33 
CHECK_FOR_SBC
;

35 i‡(!
öq_bl
) {

36 
	`CU_PASS
("BlockLimits VPD isÇotávailable. SkippingÅest.\n");

40 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

42 
Æign
 = 
öq_bl
->
©omic_Æign
 ? inq_bl->atomic_align : 1;

43 
	`loggög
(
LOG_VERBOSE
, "Test WRITEATOMIC16 0-blocksát LBA==0");

44 
	`WRITEATOMIC16
(
sd
, 0, 0, 
block_size
, 0, 0, 0, 0, 
NULL
,

45 
EXPECT_STATUS_GOOD
);

47 
	`loggög
(
LOG_VERBOSE
, "Test WRITEATOMIC16 0-blocks oneálignmentÖastÉnd-of-LUN");

48 
	`WRITEATOMIC16
(
sd
, 
num_blocks
 + 
Æign
, 0, 
block_size
, 0, 0, 0, 0, 
NULL
,

49 
EXPECT_LBA_OOB
);

51 
	`loggög
(
LOG_VERBOSE
, "Test WRITEATOMIC16 0-blocksát LBA==2^63");

52 
	`WRITEATOMIC16
(
sd
, 0x8000000000000000ULL, 0,

53 
block_size
, 0, 0, 0, 0, 
NULL
,

54 
EXPECT_LBA_OOB
);

56 
	`loggög
(
LOG_VERBOSE
, "Test WRITEATOMIC16 0-blocksát LBA==-<alignment>");

57 
	`WRITEATOMIC16
(
sd
, -
Æign
, 0, 
block_size
, 0, 0, 0, 0, 
NULL
,

58 
EXPECT_LBA_OOB
);

59 
	}
}

	@test-tool/test_writeatomic16_beyond_eol.c

19 
	~<°dio.h
>

20 
	~<°dlib.h
>

22 
	~<CUnô/CUnô.h
>

24 
	~"iscsi.h
"

25 
	~"scsi-lowÀvñ.h
"

26 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_wrôótomic16_bey⁄d_eﬁ
()

32 
Æign
, 
i
, 
gøn
;

33 c⁄° 
size_t
 
bufsz
 = 256 * 2 * 
block_size
;

35 
CHECK_FOR_DATALOSS
;

36 
CHECK_FOR_SBC
;

38 i‡(!
öq_bl
) {

39 
	`CU_PASS
("BlockLimits VPD isÇotávailable. SkippingÅest.\n");

43 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

45 
	`mem£t
(
s¸©ch
, 0xa6, 
bufsz
);

46 
Æign
 = 
öq_bl
->
©omic_Æign
 ? inq_bl->atomic_align : 1;

47 
gøn
 = 
öq_bl
->
©omic_gøn
 ? inq_bl->atomic_gran : 1;

48 
	`WRITEATOMIC16
(
sd
, 0, 
block_size
 * 
gøn
, block_size, 0, 0, 0, 0, 
s¸©ch
,

49 
EXPECT_STATUS_GOOD
);

51 
	`loggög
(
LOG_VERBOSE
, "Test WRITEATOMIC16 1-256 blocks <granularity> blocks beyondÅheÉnd");

52 
i
 = 
gøn
; i <= 256; i += gran) {

53 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

56 
	`WRITEATOMIC16
(
sd
, 
num_blocks
 - 
i
,

57 2 * 
i
 * 
block_size
, block_size,

58 0, 0, 0, 0, 
s¸©ch
,

59 
EXPECT_LBA_OOB
);

62 
	`loggög
(
LOG_VERBOSE
, "Test WRITEATOMIC16 1-256 blocksát LBA==2^63");

63 
i
 = 
gøn
; i <= 256; i += gran) {

64 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

67 
	`WRITEATOMIC16
(
sd
, 0x8000000000000000ULL,

68 
i
 * 
block_size
, block_size,

69 0, 0, 0, 0, 
s¸©ch
,

70 
EXPECT_LBA_OOB
);

73 
	`loggög
(
LOG_VERBOSE
, "Test WRITEATOMIC16 1-256 blocksát LBA==-<alignment>");

74 
i
 = 
gøn
; i <= 256; i += gran) {

75 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

78 
	`WRITEATOMIC16
(
sd
, -
Æign
, 
i
 * 
block_size
,

79 
block_size
, 0, 0, 0, 0, 
s¸©ch
,

80 
EXPECT_LBA_OOB
);

83 
	`loggög
(
LOG_VERBOSE
, "Test WRITEATOMIC16 2-256 blocksáll but one block beyondÅheÉnd");

84 
i
 = 2 * 
gøn
; i <= 256; i += gran) {

85 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

88 
	`WRITEATOMIC16
(
sd
, 
num_blocks
 - 
gøn
,

89 
i
 * 
block_size
, block_size,

90 0, 0, 0, 0, 
s¸©ch
,

91 
EXPECT_LBA_OOB
);

93 
	}
}

	@test-tool/test_writeatomic16_dpofua.c

19 
	~<°dio.h
>

20 
	~<°dlib.h
>

21 
	~<°rög.h
>

23 
	~<CUnô/CUnô.h
>

25 
	~"iscsi.h
"

26 
	~"scsi-lowÀvñ.h
"

27 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_wrôótomic16_dpofua
()

32 
gøn
, 
dpofua
, 
ußge_d©a_dpofua
;

33 
scsi_èsk
 *
ms_èsk
 = 
NULL
;

34 
scsi_mode_£n£
 *
ms
;

35 
scsi_èsk
 *
rso_èsk
 = 
NULL
;

36 
scsi_ªp‹t_suµ‹ãd_›_codes_⁄e_comm™d
 *
rsoc
;

38 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

39 
	`loggög
(
LOG_VERBOSE
, "Test WRITEATOMIC16 DPO/FUA flags");

41 
CHECK_FOR_SBC
;

42 
CHECK_FOR_DATALOSS
;

44 i‡(!
öq_bl
) {

45 
	`CU_PASS
("BlockLimits VPD isÇotávailable. SkippingÅest.\n");

49 
gøn
 = 
öq_bl
->
©omic_gøn
 ? inq_bl->atomic_gran : 1;

51 
	`loggög
(
LOG_VERBOSE
, "ReadÅhe DPOFUA flag from mode sense data");

52 
	`MODESENSE6
(
sd
, &
ms_èsk
, 0, 
SCSI_MODESENSE_PC_CURRENT
,

53 
SCSI_MODEPAGE_RETURN_ALL_PAGES
, 0, 255,

54 
EXPECT_STATUS_GOOD
);

56 
	`loggög
(
LOG_VERBOSE
, "[SUCCESS] Mode senseÑeturned status GOOD");

57 
ms
 = 
	`scsi_d©aö_unm¨shÆl
(
ms_èsk
);

58 
dpofua
 = 
ms
 && (ms->
devi˚_•ecific_∑ømëî
 & 0x10);

59 
	`scsi_‰ì_scsi_èsk
(
ms_èsk
);

61 i‡(
dpofua
) {

62 
	`loggög
(
LOG_VERBOSE
, "DPOFUA flag is set. Device shouldállow "

65 
	`loggög
(
LOG_VERBOSE
, "DPOFUA flag is clear. Device should fail "

69 
	`loggög
(
LOG_VERBOSE
, "Test WRITEATOMIC16 with DPO==1");

70 
	`mem£t
(
s¸©ch
, 0xa6, 
block_size
);

71 i‡(
dpofua
) {

72 
	`WRITEATOMIC16
(
sd
, 0, 
gøn
 * 
block_size
,

73 
block_size
, 0, 1, 0, 0, 
s¸©ch
,

74 
EXPECT_STATUS_GOOD
);

76 
	`WRITEATOMIC16
(
sd
, 0, 
gøn
 * 
block_size
,

77 
block_size
, 0, 1, 0, 0, 
s¸©ch
,

78 
EXPECT_INVALID_FIELD_IN_CDB
);

81 
	`loggög
(
LOG_VERBOSE
, "Test WRITEATOMIC16 with FUA==1");

82 i‡(
dpofua
) {

83 
	`WRITEATOMIC16
(
sd
, 0, 
gøn
 * 
block_size
,

84 
block_size
, 0, 0, 1, 0, 
s¸©ch
,

85 
EXPECT_STATUS_GOOD
);

87 
	`WRITEATOMIC16
(
sd
, 0, 
gøn
 * 
block_size
,

88 
block_size
, 0, 0, 1, 0, 
s¸©ch
,

89 
EXPECT_INVALID_FIELD_IN_CDB
);

92 
	`loggög
(
LOG_VERBOSE
, "Test WRITEATOMIC16 with DPO==1 FUA==1");

93 i‡(
dpofua
) {

94 
	`WRITEATOMIC16
(
sd
, 0, 
gøn
 * 
block_size
,

95 
block_size
, 0, 1, 1, 0, 
s¸©ch
,

96 
EXPECT_STATUS_GOOD
);

98 
	`WRITEATOMIC16
(
sd
, 0, 
gøn
 * 
block_size
,

99 
block_size
, 0, 1, 1, 0, 
s¸©ch
,

100 
EXPECT_INVALID_FIELD_IN_CDB
);

104 
	`loggög
(
LOG_VERBOSE
, "Try fetching REPORT_SUPPORTED_OPCODES "

106 
	`REPORT_SUPPORTED_OPCODES
(
sd
, &
rso_èsk
,

107 0, 
SCSI_REPORT_SUPPORTING_OPCODE
,

108 
SCSI_OPCODE_WRITE_ATOMIC16
,

111 
EXPECT_STATUS_GOOD
);

113 
	`loggög
(
LOG_VERBOSE
, "UnmarshallÅhe DATA-IN buffer");

114 
rsoc
 = 
	`scsi_d©aö_unm¨shÆl
(
rso_èsk
);

115 
	`CU_ASSERT_PTR_NOT_NULL_FATAL
(
rsoc
);

117 
ußge_d©a_dpofua
 = 
rsoc
->
cdb_ußge_d©a
[1] & 0x18;

118 i‡(
dpofua
) {

119 
	`loggög
(
LOG_VERBOSE
, "DPOFUA is set. VerifyÅhe "

121 i‡(!
ußge_d©a_dpofua
) {

122 
	`loggög
(
LOG_NORMAL
, "[FAILED] DpoFuaÇot set "

124 
	`CU_FAIL
("DpoFuaÇot set in CDB_USAGE_DATE");

127 
	`loggög
(
LOG_VERBOSE
, "DPOFUA is clear. VerifyÅhe "

129 i‡(
ußge_d©a_dpofua
) {

130 
	`loggög
(
LOG_NORMAL
, "[FAILED] DpoFuaÇot clear "

132 
	`CU_FAIL
("DpoFuaÇot clear in CDB_USAGE_DATE");

136 
	`scsi_‰ì_scsi_èsk
(
rso_èsk
);

137 
	}
}

	@test-tool/test_writeatomic16_simple.c

19 
	~<°dio.h
>

20 
	~<°dlib.h
>

22 
	~<CUnô/CUnô.h
>

24 
	~"iscsi.h
"

25 
	~"scsi-lowÀvñ.h
"

26 
	~"iscsi-suµ‹t.h
"

27 
	~"iscsi-ã°-cu.h
"

31 
	$ã°_wrôótomic16_sim∂e
()

33 
i
, 
Æign
, 
gøn
;

34 c⁄° 
size_t
 
bufsz
 = 256 * 
block_size
;

36 
CHECK_FOR_DATALOSS
;

37 
CHECK_FOR_SBC
;

39 i‡(!
öq_bl
) {

40 
	`CU_PASS
("BlockLimits VPD isÇotávailable. SkippingÅest.\n");

44 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

46 
	`mem£t
(
s¸©ch
, 0, 
bufsz
);

47 
gøn
 = 
öq_bl
->
©omic_gøn
 ? inq_bl->atomic_gran : 1;

48 
	`WRITEATOMIC16
(
sd
, 0, 
block_size
 * 
gøn
, block_size, 0, 0, 0, 0, 
s¸©ch
,

49 
EXPECT_STATUS_GOOD
);

51 
	`loggög
(
LOG_VERBOSE
, "Test WRITEATOMIC16 of 1-256 blocksátÅhe start ofÅhe LUN");

52 
	`mem£t
(
s¸©ch
, 0xa6, 256 * 
block_size
);

53 
i
 = 
gøn
; i <= 256; i += gran) {

54 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

57 
	`WRITEATOMIC16
(
sd
, 0, 
i
 * 
block_size
,

58 
block_size
, 0, 0, 0, 0, 
s¸©ch
,

59 
EXPECT_STATUS_GOOD
);

62 
	`loggög
(
LOG_VERBOSE
, "Test WRITEATOMIC16 of 1-256 blocksátÅheÉnd ofÅhe LUN");

63 
Æign
 = 
öq_bl
->
©omic_Æign
 ? inq_bl->atomic_align : 1;

64 
i
 = 
Æign
; i <= 256; i +=álign) {

65 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

68 
	`WRITEATOMIC16
(
sd
, 
num_blocks
 - 
i
, i * 
block_size
, block_size,

69 0, 0, 0, 0, 
s¸©ch
,

70 
EXPECT_STATUS_GOOD
);

72 
	}
}

	@test-tool/test_writeatomic16_vpd.c

19 
	~<°dio.h
>

20 
	~<°dlib.h
>

21 
	~<°rög.h
>

23 
	~<CUnô/CUnô.h
>

25 
	~"iscsi.h
"

26 
	~"scsi-lowÀvñ.h
"

27 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_wrôótomic16_vpd
()

32 
ªt
;

33 
scsi_öquúy_block_limôs
 *
bl
;

34 
scsi_èsk
 *
bl_èsk
 = 
NULL
;

35 
gøn
;

37 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

38 
	`loggög
(
LOG_VERBOSE
, "Test WRITEATOMIC16 VPD data");

40 
CHECK_FOR_SBC
;

41 
CHECK_FOR_DATALOSS
;

44 
	`loggög
(
LOG_VERBOSE
, "Block device. VerifyÅhat we canÑead Block "

46 
ªt
 = 
	`öquúy
(
sd
, &
bl_èsk
,

47 1, 
SCSI_INQUIRY_PAGECODE_BLOCK_LIMITS
, 255,

48 
EXPECT_STATUS_GOOD
);

49 
	`CU_ASSERT_EQUAL
(
ªt
, 0);

50 i‡(
ªt
 != 0) {

51 
	`loggög
(
LOG_NORMAL
, "[FAILURE] failedÅoÑead Block Limits VDP");

52 
	`CU_FAIL
("[FAILURE] failedÅoÑead Block Limits VDP");

53 
föished
;

55 
bl
 = 
	`scsi_d©aö_unm¨shÆl
(
bl_èsk
);

56 i‡(
bl
 =
NULL
) {

57 
	`loggög
(
LOG_NORMAL
, "[FAILURE] failedÅo unmarshall Block Limits VDP");

58 
	`CU_FAIL
("[FAILURE] failedÅo unmarshall Block Limits VDP");

59 
föished
;

63 
	`loggög
(
LOG_VERBOSE
, "Check if WRITEATOMIC16 is supported");

64 
gøn
 = 
öq_bl
->
©omic_gøn
 ? inq_bl->atomic_gran : 1;

65 
	`mem£t
(
s¸©ch
 , 0x00, 
block_size
 * 
gøn
);

66 
ªt
 = 
	`wrôótomic16
(
sd
, 0, 
block_size
 * 
gøn
,

67 
block_size
, 0, 0, 0, 0, 
s¸©ch
,

68 
EXPECT_STATUS_GOOD
);

69 i‡(
ªt
 == -2) {

70 
	`loggög
(
LOG_VERBOSE
, "WRITEATOMIC16 is NOT supported byÅheÅarget.");

72 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhat MAXIMUM_ATOMIC_TRANSFER_LENGTH is zero");

73 i‡(
bl
->
max_©omic_x„r_Àn
) {

74 
	`loggög
(
LOG_VERBOSE
, "MAXIMUM_ATOMIC_TRANSFER_LENGTH isÇon-zero butÅarget doesÇot support ATOMICWRITE16");

75 
	`CU_FAIL
("MAXIMUM_ATOMIC_TRANSFER_LENGTH isÇon-zero butÅarget doesÇot support ATOMICWRITE16");

78 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhat ATOMIC_ALIGNMENT is zero");

79 i‡(
bl
->
©omic_Æign
) {

80 
	`loggög
(
LOG_VERBOSE
, "ATOMIC_ALIGNMENT isÇon-zero butÅarget doesÇot support ATOMICWRITE16");

81 
	`CU_FAIL
("ATOMIC_ALIGNMENT isÇon-zero butÅarget doesÇot support ATOMICWRITE16");

84 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhat ATOMIC_GRANULARITY is zero");

85 i‡(
bl
->
©omic_gøn
) {

86 
	`loggög
(
LOG_VERBOSE
, "ATOMIC_GRANULARITY isÇon-zero butÅarget doesÇot support ATOMICWRITE16");

87 
	`CU_FAIL
("ATOMIC_GRANULARITY isÇon-zero butÅarget doesÇot support ATOMICWRITE16");

89 
föished
;

92 
	`loggög
(
LOG_VERBOSE
, "WRITEATOMIC16 IS supported byÅheÅarget.");

93 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhat MAXIMUM_ATOMIC_TRANSFER_LENGTH isÇon-zero");

94 i‡(!
bl
->
max_©omic_x„r_Àn
) {

95 
	`loggög
(
LOG_VERBOSE
, "[WARNING] MAXIMUM_ATOMIC_TRANSFER_LENGTH is zero butÅarget supports ATOMICWRITE16");

96 
	`CU_FAIL
("[WARNING] MAXIMUM_ATOMIC_TRANSFER_LENGTH is zero butÅarget supports ATOMICWRITE16");

99 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhat MAXIMUM_ATOMIC_TRANSFER_LENGTH isÜessÅhan orÉqualÅo MAXIMUM_TRANSFER_LENGTH");

100 i‡(
bl
->
max_©omic_x„r_Àn
 > bl->
max_x„r_Àn
) {

101 
	`loggög
(
LOG_VERBOSE
, "[FAILED] MAXIMUM_ATOMIC_TRANSFER_LENGTH is greaterÅhan MAXIMUM_TRANSFER_LENGTH");

102 
	`CU_FAIL
("[FAILED] MAXIMUM_ATOMIC_TRANSFER_LENGTH is greaterÅhan MAXIMUM_TRANSFER_LENGTH");

105 
	`loggög
(
LOG_VERBOSE
, "Check handling on misaligned writes");

106 i‡(
bl
->
©omic_Æign
 < 2) {

107 
	`loggög
(
LOG_VERBOSE
, "[SKIPPED] NoálignmentÑestrictions onÅhis LUN");

109 
	`loggög
(
LOG_VERBOSE
, "Atomic Writeát LBA 1 should fail dueÅo misalignment");

110 
ªt
 = 
	`wrôótomic16
(
sd
, 1, 
block_size
 * 
gøn
,

111 
block_size
, 0, 0, 0, 0, 
s¸©ch
,

112 
EXPECT_INVALID_FIELD_IN_CDB
);

113 i‡(
ªt
) {

114 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Misaligned write did NOT fail with INVALID_FIELD_IN_CDB");

115 
	`CU_FAIL
("[FAILED] Misaligned write did NOT fail with INVALID_FIELD_IN_CDB");

119 
	`loggög
(
LOG_VERBOSE
, "Check handling on invalid granularity");

120 i‡(
bl
->
©omic_gøn
 < 2) {

121 
	`loggög
(
LOG_VERBOSE
, "[SKIPPED] No granularityÑestrictions onÅhis LUN");

123 
	`loggög
(
LOG_VERBOSE
, "Atomic Write of 1 block should fail dueÅo invalid granularity");

124 
ªt
 = 
	`wrôótomic16
(
sd
, 0, 
block_size
,

125 
block_size
, 0, 0, 0, 0, 
s¸©ch
,

126 
EXPECT_INVALID_FIELD_IN_CDB
);

127 i‡(
ªt
) {

128 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Misgranularity write did NOT fail with INVALID_FIELD_IN_CDB");

129 
	`CU_FAIL
("[FAILED] Misgranularity write did NOT fail with INVALID_FIELD_IN_CDB");

134 
föished
:

135 
	`scsi_‰ì_scsi_èsk
(
bl_èsk
);

136 
	}
}

	@test-tool/test_writeatomic16_wrprotect.c

19 
	~<°dio.h
>

20 
	~<°dlib.h
>

21 
	~<°rög.h
>

22 
	~<°dlib.h
>

24 
	~<CUnô/CUnô.h
>

26 
	~"iscsi.h
"

27 
	~"scsi-lowÀvñ.h
"

28 
	~"iscsi-ã°-cu.h
"

31 
	$ã°_wrôótomic16_wΩrŸe˘
()

33 
i
, 
gøn
;

35 
CHECK_FOR_DATALOSS
;

36 
CHECK_FOR_SBC
;

38 i‡(!
öq_bl
) {

39 
	`CU_PASS
("BlockLimits VPD isÇotávailable. SkippingÅest.\n");

43 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

45 
gøn
 = 
öq_bl
->
©omic_gøn
 ? inq_bl->atomic_gran : 1;

46 
	`mem£t
(
s¸©ch
, 0, 
block_size
);

47 
	`WRITEATOMIC16
(
sd
, 0, 
block_size
 * 
gøn
, block_size, 0, 0, 0, 0, 
s¸©ch
,

48 
EXPECT_STATUS_GOOD
);

50 
	`loggög
(
LOG_VERBOSE
, "Test WRITEATOMIC16 withÇon-zero WRPROTECT");

51 
	`mem£t
(
s¸©ch
, 0xa6, 
block_size
);

52 i‡(!
öq
->
¥Ÿe˘
 || (
rc16
 !
NULL
 && !rc16->
¥Ÿ_í
)) {

53 
	`loggög
(
LOG_VERBOSE
, "Device doesÇot support/useÖrotection information. All commands should fail.");

54 
i
 = 1; i < 8; i++) {

55 
	`WRITEATOMIC16
(
sd
, 0, 
gøn
 * 
block_size
, block_size,

56 
i
, 0, 0, 0, 
s¸©ch
,

57 
EXPECT_INVALID_FIELD_IN_CDB
);

62 
	`loggög
(
LOG_NORMAL
, "NoÅests for devicesÅhat supportÖrotection information yet.");

63 
	}
}

	@test-tool/test_writesame10_0blocks.c

19 
	~<°dio.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-ã°-cu.h
"

29 
	$ã°_wrôeßme10_0blocks
()

31 
CHECK_FOR_DATALOSS
;

32 
CHECK_FOR_SBC
;

34 i‡(
num_blocks
 >= 0x80000000) {

35 
	`CU_PASS
("LUN isÅoo big for write-beyond-eolÅests with WRITESAME10. SkippingÅest.\n");

38 i‡(!
öq_bl
) {

39 
	`CU_PASS
("BlockLimits VPD isÇotávailable. SkippingÅest.\n");

43 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

45 
	`loggög
(
LOG_VERBOSE
, "Test WRITESAME10 0-blocksát LBA==0 (WSNZ=%d)",

46 
öq_bl
->
w¢z
);

47 
	`mem£t
(
s¸©ch
, 0, 
block_size
);

49 i‡(
öq_bl
->
w¢z
) {

50 
	`WRITESAME10
(
sd
, 0, 
block_size
, 0, 0, 0, 0, 0, 
s¸©ch
,

51 
EXPECT_INVALID_FIELD_IN_CDB
);

52 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITESAME10 doesÇot support 0-blocks.");

56 i‡(
öq_bl
->
max_ws_Àn
 > 0 && 
num_blocks
 > inq_bl->max_ws_len) {

57 
	`WRITESAME10
(
sd
, 0, 
block_size
, 0, 0, 0, 0, 0, 
s¸©ch
,

58 
EXPECT_INVALID_FIELD_IN_CDB
);

60 
	`WRITESAME10
(
sd
, 0, 
block_size
, 0, 0, 0, 0, 0, 
s¸©ch
,

61 
EXPECT_STATUS_GOOD
);

64 i‡(
öq_bl
->
max_ws_Àn
 > 0) {

65 
	`loggög
(
LOG_VERBOSE
,

68 
	`CHECK_SIZE
((
öq_bl
->
max_ws_Àn
 + 1),

69 
	`WRITESAME10
(
sd
, 
num_blocks
 - (
öq_bl
->
max_ws_Àn
 + 1),

70 
block_size
, 0, 0, 0, 0, 0, 
s¸©ch
,

71 
EXPECT_INVALID_FIELD_IN_CDB
));

72 
	`loggög
(
LOG_VERBOSE
,

75 
	`CHECK_SIZE
(
öq_bl
->
max_ws_Àn
,

76 
	`WRITESAME10
(
sd
, 
num_blocks
 - 
öq_bl
->
max_ws_Àn
,

77 
block_size
, 0, 0, 0, 0, 0, 
s¸©ch
,

78 
EXPECT_STATUS_GOOD
));

79 
	`loggög
(
LOG_VERBOSE
,

82 
	`CHECK_SIZE
((
öq_bl
->
max_ws_Àn
 - 1),

83 
	`WRITESAME10
(
sd
, 
num_blocks
 - (
öq_bl
->
max_ws_Àn
 - 1),

84 
block_size
, 0, 0, 0, 0, 0, 
s¸©ch
,

85 
EXPECT_STATUS_GOOD
));

87 
	`loggög
(
LOG_VERBOSE
, "[SKIPPING] No MAXIMUM WRITE SAME LENGTH - "

91 
	`loggög
(
LOG_VERBOSE
, "Test WRITESAME10 0-blocks one blockÖastÉnd-of-LUN");

92 
	`WRITESAME10
(
sd
, 
num_blocks
 + 1, 
block_size
, 0, 0, 0, 0, 0, 
s¸©ch
,

93 
EXPECT_LBA_OOB
);

95 
	`loggög
(
LOG_VERBOSE
, "Test WRITESAME10 0-blocksát LBA==2^31");

96 
	`WRITESAME10
(
sd
, 0x80000000, 
block_size
, 0, 0, 0, 0, 0, 
s¸©ch
,

97 
EXPECT_LBA_OOB
);

99 
	`loggög
(
LOG_VERBOSE
, "Test WRITESAME10 0-blocksát LBA==-1");

100 
	`WRITESAME10
(
sd
, -1, 
block_size
, 0, 0, 0, 0, 0, 
s¸©ch
,

101 
EXPECT_LBA_OOB
);

102 
	}
}

	@test-tool/test_writesame10_beyond_eol.c

19 
	~<°dio.h
>

20 
	~<°dlib.h
>

22 
	~<CUnô/CUnô.h
>

24 
	~"iscsi.h
"

25 
	~"scsi-lowÀvñ.h
"

26 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_wrôeßme10_bey⁄d_eﬁ
()

32 
i
;

34 
CHECK_FOR_DATALOSS
;

35 
CHECK_FOR_SBC
;

37 i‡(
num_blocks
 >= 0x80000000) {

38 
	`CU_PASS
("LUN isÅoo big for write-beyond-eolÅests with WRITESAME10. SkippingÅest.\n");

42 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

43 
	`loggög
(
LOG_VERBOSE
, "Test WRITESAME10 1-256 blocks one block beyondÅheÉnd");

44 
	`mem£t
(
s¸©ch
, 0, 
block_size
);

45 
i
 = 1; i <= 256; i++) {

46 
	`WRITESAME10
(
sd
, 
num_blocks
 - 
i
 + 1,

47 
block_size
, 
i
, 0, 0, 0, 0, 
s¸©ch
,

48 
EXPECT_LBA_OOB
);

51 
	`loggög
(
LOG_VERBOSE
, "Test WRITESAME10 1-256 blocksát LBA==2^31");

52 
i
 = 1; i <= 256; i++) {

53 
	`WRITESAME10
(
sd
, 0x80000000,

54 
block_size
, 
i
, 0, 0, 0, 0, 
s¸©ch
,

55 
EXPECT_LBA_OOB
);

58 
	`loggög
(
LOG_VERBOSE
, "Test WRITESAME10 1-256 blocksát LBA==-1");

59 
i
 = 1; i <= 256; i++) {

60 
	`WRITESAME10
(
sd
, -1, 
block_size
, 
i
, 0, 0, 0, 0, 
s¸©ch
,

61 
EXPECT_LBA_OOB
);

64 
	`loggög
(
LOG_VERBOSE
, "Test WRITESAME10 2-256 blocksáll but one block beyondÅheÉnd");

65 
i
 = 2; i <= 256; i++) {

66 
	`WRITESAME10
(
sd
, 
num_blocks
 - 1,

67 
block_size
, 
i
, 0, 0, 0, 0, 
s¸©ch
,

68 
EXPECT_LBA_OOB
);

70 
	}
}

	@test-tool/test_writesame10_check.c

20 
	~<°dio.h
>

21 
	~<°dlib.h
>

23 
	~<CUnô/CUnô.h
>

25 
	~"iscsi.h
"

26 
	~"scsi-lowÀvñ.h
"

27 
	~"iscsi-suµ‹t.h
"

28 
	~"iscsi-ã°-cu.h
"

32 
	$ã°_wrôeßme10_check
()

34 
i
;

35 
ws_max_blocks
 = 256;

36 
ªad_buf
[
ws_max_blocks
 * 
block_size
];

38 
CHECK_FOR_DATALOSS
;

39 
CHECK_FOR_SBC
;

41 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

42 
	`loggög
(
LOG_VERBOSE
, "Test WRITESAME10 of 1-256 blocksátÅhe start ofÅhe LUN");

44 
i
 = 1; i <
ws_max_blocks
; i++) {

49 
	`mem£t
(
s¸©ch
, 
i
, 
block_size
 * 
ws_max_blocks
);

50 
	`WRITESAME10
(
sd
, 0, 
block_size
, 
i
, 0, 0, 0, 0, 
s¸©ch
,

51 
EXPECT_STATUS_GOOD
);

53 
	`mem£t
(
ªad_buf
, 0, 
i
 * 
block_size
);

54 
	`READ10
(
sd
, 
NULL
, 0, 
i
 * 
block_size
,

55 
block_size
, 0, 0, 0, 0, 0, 
ªad_buf
,

56 
EXPECT_STATUS_GOOD
);

58 
	`CU_ASSERT_EQUAL
(0, 
	`memcmp
(
ªad_buf
, 
s¸©ch
, 
i
));

61 
	`loggög
(
LOG_VERBOSE
, "Test WRITESAME10 of 1-256 blocksátÅheÉnd ofÅhe LUN");

62 
i
 = 1; i <
ws_max_blocks
; i++) {

63 
	`mem£t
(
s¸©ch
, 
i
, 
block_size
 * 
ws_max_blocks
);

64 
	`WRITESAME10
(
sd
, 
num_blocks
 - 
i
,

65 
block_size
, 
i
, 0, 0, 0, 0, 
s¸©ch
,

66 
EXPECT_STATUS_GOOD
);

68 
	`mem£t
(
ªad_buf
, 0, 
i
 * 
block_size
);

69 
	`READ10
(
sd
, 
NULL
, 
num_blocks
 - 
i
, i * 
block_size
,

70 
block_size
, 0, 0, 0, 0, 0, 
ªad_buf
,

71 
EXPECT_STATUS_GOOD
);

73 
	`CU_ASSERT_EQUAL
(0, 
	`memcmp
(
ªad_buf
, 
s¸©ch
, 
i
));

75 
	}
}

	@test-tool/test_writesame10_invalid_dataout_size.c

19 
	~<°dio.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-suµ‹t.h
"

26 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_wrôeßme10_övÆid_d©aout_size
()

32 
CHECK_FOR_DATALOSS
;

33 
CHECK_FOR_THIN_PROVISIONING
;

34 
CHECK_FOR_LBPWS10
;

35 
CHECK_FOR_LBPPB_GT_1
;

36 
CHECK_FOR_SBC
;

38 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

39 
	`loggög
(
LOG_VERBOSE
, "TestÅhat WRITESAME10 fails for invalid "

41 
	`mem£t
(
s¸©ch
, 0xa6, 
block_size
);

43 
	`loggög
(
LOG_VERBOSE
, "CheckÅoo small DataOut");

44 
	`loggög
(
LOG_VERBOSE
, "Unmap with DataOut==%zd (block_size==%zd)",

45 
block_size
 / 2, block_size);

46 
	`WRITESAME10
(
sd
, 0, 
block_size
 / 2, 1, 0, 1, 0, 0, 
s¸©ch
,

47 
EXPECT_STATUS_GENERIC_BAD
);

49 
	`loggög
(
LOG_VERBOSE
, "CheckÅooÜarge DataOut");

50 
	`loggög
(
LOG_VERBOSE
, "Unmap with DataOut==%zd (block_size==%zd)",

51 
block_size
 * 2, block_size);

52 
	`WRITESAME10
(
sd
, 0, 
block_size
 * 2, 1, 0, 1, 0, 0, 
s¸©ch
,

53 
EXPECT_STATUS_GENERIC_BAD
);

54 
	}
}

	@test-tool/test_writesame10_simple.c

19 
	~<°dio.h
>

20 
	~<°dlib.h
>

22 
	~<CUnô/CUnô.h
>

24 
	~"iscsi.h
"

25 
	~"scsi-lowÀvñ.h
"

26 
	~"iscsi-suµ‹t.h
"

27 
	~"iscsi-ã°-cu.h
"

31 
	$ã°_wrôeßme10_sim∂e
()

33 
i
;

35 
CHECK_FOR_DATALOSS
;

36 
CHECK_FOR_SBC
;

38 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

39 
	`loggög
(
LOG_VERBOSE
, "Test WRITESAME10 of 1-256 blocksátÅhe start ofÅhe LUN");

41 
	`mem£t
(
s¸©ch
, 0, 
block_size
);

42 
i
 = 1; i <= 256; i++) {

43 
	`WRITESAME10
(
sd
, 0, 
block_size
, 
i
, 0, 0, 0, 0, 
s¸©ch
,

44 
EXPECT_STATUS_GOOD
);

47 
	`loggög
(
LOG_VERBOSE
, "Test WRITESAME10 of 1-256 blocksátÅheÉnd ofÅhe LUN");

48 
i
 = 1; i <= 256; i++) {

49 
	`WRITESAME10
(
sd
, 
num_blocks
 - 
i
,

50 
block_size
, 
i
, 0, 0, 0, 0, 
s¸©ch
,

51 
EXPECT_STATUS_GOOD
);

53 
	}
}

	@test-tool/test_writesame10_unmap.c

19 
	~<°dio.h
>

20 
	~<°dlib.h
>

22 
	~<CUnô/CUnô.h
>

24 
	~"iscsi.h
"

25 
	~"scsi-lowÀvñ.h
"

26 
	~"iscsi-suµ‹t.h
"

27 
	~"iscsi-ã°-cu.h
"

31 
	$ã°_wrôeßme10_unm≠
()

33 
i
;

35 
CHECK_FOR_DATALOSS
;

36 
CHECK_FOR_THIN_PROVISIONING
;

37 
CHECK_FOR_LBPWS10
;

38 
CHECK_FOR_SBC
;

40 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

41 
	`loggög
(
LOG_VERBOSE
, "Test WRITESAME10 of 1-256 blocksátÅhe start of "

43 
	`mem£t
(
s¸©ch
, 0xa6, 256 * 
block_size
);

44 
i
 = 1; i <= 256; i++) {

45 
	`loggög
(
LOG_VERBOSE
, "Wrôê%d block†o‡0xFF", 
i
);

46 
	`mem£t
(
s¸©ch
, 0xff, 
i
 * 
block_size
);

47 
	`WRITE10
(
sd
, 0, 
i
 * 
block_size
, block_size,

48 0, 0, 0, 0, 0, 
s¸©ch
,

49 
EXPECT_STATUS_GOOD
);

51 
	`loggög
(
LOG_VERBOSE
, "Unm≠ %d block†usög WRITESAME10", 
i
);

52 
	`mem£t
(
s¸©ch
, 0, 
block_size
);

53 
	`WRITESAME10
(
sd
, 0, 
block_size
, 
i
, 0, 1, 0, 0, 
s¸©ch
,

54 
EXPECT_STATUS_GOOD
);

56 i‡(
rc16
->
lb¥z
) {

57 
	`loggög
(
LOG_VERBOSE
, "LBPRZ is set. ReadÅhe unmapped "

60 
	`loggög
(
LOG_VERBOSE
, "Read %d blocksánd verifyÅhey "

61 "¨ênow zîo", 
i
);

62 
	`READ10
(
sd
, 
NULL
, 0, 
i
 * 
block_size
, block_size,

63 0, 0, 0, 0, 0, 
s¸©ch
,

64 
EXPECT_STATUS_GOOD
);

65 
	`ALL_ZERO
(
s¸©ch
, 
i
 * 
block_size
);

67 
	`loggög
(
LOG_VERBOSE
, "LBPRZ is clear. SkipÅheÑead "

73 
	`loggög
(
LOG_VERBOSE
, "Test WRITESAME10 of 1-256 blocksátÅheÉnd of "

75 
i
 = 1; i <= 256; i++) {

76 
	`loggög
(
LOG_VERBOSE
, "Wrôê%d block†o‡0xFF", 
i
);

77 
	`mem£t
(
s¸©ch
, 0xff, 
i
 * 
block_size
);

78 
	`WRITE10
(
sd
, 
num_blocks
 - 
i
,

79 
i
 * 
block_size
, block_size, 0, 0, 0, 0, 0, 
s¸©ch
,

80 
EXPECT_STATUS_GOOD
);

82 
	`loggög
(
LOG_VERBOSE
, "Unm≠ %d block†usög WRITESAME10", 
i
);

83 
	`mem£t
(
s¸©ch
, 0, 
block_size
);

84 
	`WRITESAME10
(
sd
, 
num_blocks
 - 
i
,

85 
block_size
, 
i
, 0, 1, 0, 0, 
s¸©ch
,

86 
EXPECT_STATUS_GOOD
);

88 i‡(
rc16
->
lb¥z
) {

89 
	`loggög
(
LOG_VERBOSE
, "LBPRZ is set. ReadÅhe unmapped "

92 
	`loggög
(
LOG_VERBOSE
, "Read %d blocksánd verifyÅhey "

93 "¨ênow zîo", 
i
);

94 
	`READ10
(
sd
, 
NULL
, 
num_blocks
 - 
i
,

95 
i
 * 
block_size
, block_size,

96 0, 0, 0, 0, 0, 
s¸©ch
,

97 
EXPECT_STATUS_GOOD
);

98 
	`ALL_ZERO
(
s¸©ch
, 
i
 * 
block_size
);

100 
	`loggög
(
LOG_VERBOSE
, "LBPRZ is clear. SkipÅheÑead "

105 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhat WRITESAME10 ANCHOR==1 + UNMAP==0 is "

107 
	`WRITESAME10
(
sd
, 0, 
block_size
, 1, 1, 0, 0, 0, 
s¸©ch
,

108 
EXPECT_INVALID_FIELD_IN_CDB
);

110 i‡(
öq_lbp
->
™c_sup
) {

111 
	`loggög
(
LOG_VERBOSE
, "Test WRITESAME10 ANCHOR==1 + UNMAP==0");

112 
	`mem£t
(
s¸©ch
, 0, 
block_size
);

113 
	`WRITESAME10
(
sd
, 0, 
block_size
, 1, 1, 1, 0, 0, 
s¸©ch
,

114 
EXPECT_STATUS_GOOD
);

116 
	`loggög
(
LOG_VERBOSE
, "Test WRITESAME10 ANCHOR==1 + UNMAP==0Ço "

118 
	`WRITESAME10
(
sd
, 0, 
block_size
, 1, 1, 1, 0, 0, 
s¸©ch
,

119 
EXPECT_INVALID_FIELD_IN_CDB
);

122 i‡(
öq_bl
 =
NULL
) {

123 
	`loggög
(
LOG_VERBOSE
, "[FAILED] WRITESAME10 works but "

125 
	`CU_FAIL
("[FAILED] WRITESAME10 works but "

130 
i
 = 256;

131 i‡(
i
 <
num_blocks


132 && (
öq_bl
->
max_ws_Àn
 =0 || inq_bl->max_ws_À¿>
i
)) {

133 
	`loggög
(
LOG_VERBOSE
, "Block Limits VPDÖageÑeports MAX_WS_LEN "

136 "Àngths", 
i
, i);

138 
	`loggög
(
LOG_VERBOSE
, "Wrôê%d block†o‡0xFF", 
i
);

139 
	`mem£t
(
s¸©ch
, 0xff, 
i
 * 
block_size
);

140 
	`WRITE10
(
sd
, 0,

141 
i
 * 
block_size
, block_size, 0, 0, 0, 0, 0, 
s¸©ch
,

142 
EXPECT_STATUS_GOOD
);

144 
	`loggög
(
LOG_VERBOSE
, "Unm≠ %d block†usög WRITESAME10", 
i
);

145 
	`mem£t
(
s¸©ch
, 0, 
block_size
);

146 
	`WRITESAME10
(
sd
, 0, 
block_size
, 
i
, 0, 1, 0, 0, 
s¸©ch
,

147 
EXPECT_STATUS_GOOD
);

149 i‡(
rc16
->
lb¥z
) {

150 
	`loggög
(
LOG_VERBOSE
, "LBPRZ is set. ReadÅhe unmapped "

153 
	`loggög
(
LOG_VERBOSE
, "Read %d blocksánd verifyÅhey "

154 "¨ênow zîo", 
i
);

155 
	`READ10
(
sd
, 
NULL
, 0, 
i
 * 
block_size
, block_size,

156 0, 0, 0, 0, 0, 
s¸©ch
,

157 
EXPECT_STATUS_GOOD
);

158 
	`ALL_ZERO
(
s¸©ch
, 
i
 * 
block_size
);

160 
	`loggög
(
LOG_VERBOSE
, "LBPRZ is clear. SkipÅheÑead "

163 } i‡(
i
 <
num_blocks
) {

164 
	`loggög
(
LOG_VERBOSE
, "Block Limits VPDÖageÑeports MAX_WS_LEN "

168 
	`loggög
(
LOG_VERBOSE
, "Unm≠ %d block†usög WRITESAME10", 
i
);

169 
	`WRITESAME10
(
sd
, 0, 
block_size
, 
i
, 0, 1, 0, 0, 
s¸©ch
,

170 
EXPECT_INVALID_FIELD_IN_CDB
);

172 
	}
}

	@test-tool/test_writesame10_unmap_unaligned.c

19 
	~<°dio.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-suµ‹t.h
"

26 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_wrôeßme10_unm≠_u«lig√d
()

32 
i
;

34 
CHECK_FOR_DATALOSS
;

35 
CHECK_FOR_THIN_PROVISIONING
;

36 
CHECK_FOR_LBPWS10
;

37 
CHECK_FOR_LBPPB_GT_1
;

38 
CHECK_FOR_SBC
;

40 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

41 
	`loggög
(
LOG_VERBOSE
, "Te°Åh© u«lig√d WRITESAME10 Unm≠ suc˚eds. LBPPB==%d", 
lbµb
);

42 
	`mem£t
(
s¸©ch
, 0xa6, 
block_size
);

43 
i
 = 1; i < 
lbµb
; i++) {

44 
	`loggög
(
LOG_VERBOSE
, "Unm≠ %d block†usög WRITESAME10áàLBA:%d", 
lbµb
 - 
i
, i);

45 
	`WRITESAME10
(
sd
, 
i
, 
block_size
, 
lbµb
 - i, 0, 1, 0, 0, 
s¸©ch
,

46 
EXPECT_STATUS_GOOD
);

48 
	}
}

	@test-tool/test_writesame10_unmap_until_end.c

19 
	~<°dio.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-suµ‹t.h
"

26 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_wrôeßme10_unm≠_u¡û_íd
()

32 
i
;

34 
CHECK_FOR_DATALOSS
;

35 
CHECK_FOR_THIN_PROVISIONING
;

36 
CHECK_FOR_LBPWS10
;

37 
CHECK_FOR_SBC
;

39 i‡(
öq_bl
->
w¢z
) {

40 
	`loggög
(
LOG_NORMAL
, "WRITESAME10 doesÇot support 0-blocks."

42 
	`mem£t
(
s¸©ch
, 0, 
block_size
);

43 
	`WRITESAME10
(
sd
, 0, 
block_size
, 0, 0, 1, 0, 0, 
s¸©ch
,

44 
EXPECT_INVALID_FIELD_IN_CDB
);

48 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

49 
	`loggög
(
LOG_VERBOSE
, "Test WRITESAME10 of 1-256 blocksátÅheÉnd ofÅhe LUN by settingÇumber-of-blocks==0");

50 
i
 = 1; i <= 256; i++) {

51 
	`loggög
(
LOG_VERBOSE
, "Wrôê%d block†o‡0xFF", 
i
);

52 
	`mem£t
(
s¸©ch
, 0xff, 
block_size
 * 
i
);

53 
	`WRITE10
(
sd
, 
num_blocks
 - 
i
,

54 
i
 * 
block_size
, block_size, 0, 0, 0, 0, 0, 
s¸©ch
,

55 
EXPECT_STATUS_GOOD
);

57 
	`loggög
(
LOG_VERBOSE
, "Unm≠ %d block†usög WRITESAME10", 
i
);

58 
	`WRITESAME10
(
sd
, 
num_blocks
 - 
i
,

59 
block_size
, 0, 0, 1, 0, 0, 
s¸©ch
,

60 
EXPECT_STATUS_GOOD
);

62 i‡(
rc16
->
lb¥z
) {

63 
	`loggög
(
LOG_VERBOSE
, "LBPRZ is set. ReadÅhe unmapped "

66 
	`loggög
(
LOG_VERBOSE
, "Read %d blocksánd verifyÅhey "

67 "¨ênow zîo", 
i
);

68 
	`READ10
(
sd
, 
NULL
, 
num_blocks
 - 
i
,

69 
i
 * 
block_size
, block_size,

70 0, 0, 0, 0, 0, 
s¸©ch
,

71 
EXPECT_STATUS_GOOD
);

72 
	`ALL_ZERO
(
s¸©ch
, 
i
 * 
block_size
);

74 
	`loggög
(
LOG_VERBOSE
, "LBPRZ is clear. SkipÅheÑead "

78 
	}
}

	@test-tool/test_writesame10_unmap_vpd.c

19 
	~<°dio.h
>

20 
	~<°dlib.h
>

22 
	~<CUnô/CUnô.h
>

24 
	~"iscsi.h
"

25 
	~"scsi-lowÀvñ.h
"

26 
	~"iscsi-suµ‹t.h
"

27 
	~"iscsi-ã°-cu.h
"

31 
	$ã°_wrôeßme10_unm≠_vpd
()

33 
ªt
;

35 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

36 
	`loggög
(
LOG_VERBOSE
, "Test WRITESAME10 UNMAPávailability is "

39 
CHECK_FOR_DATALOSS
;

40 
CHECK_FOR_SBC
;

42 
	`loggög
(
LOG_VERBOSE
, "Check if WRITESAME10 can be used for UNMAP.");

43 
	`loggög
(
LOG_VERBOSE
, "Unmap 1 block using WRITESAME10");

44 
	`mem£t
(
s¸©ch
, 0, 
block_size
);

45 
ªt
 = 
	`wrôeßme10
(
sd
, 0, 
block_size
, 1, 0, 1, 0, 0, 
s¸©ch
,

46 
EXPECT_STATUS_GOOD
);

47 i‡(
ªt
 != 0) {

48 
	`loggög
(
LOG_VERBOSE
, "WRITESAME10 UNMAP isÇotávailable. "

51 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhat LBPWS10 is clear.");

52 i‡(
öq_lbp
 && inq_lbp->
lbpws10
) {

53 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITESAME10 UNMAP isÇot "

55 
	`CU_FAIL
("[FAILED] WRITESAME10 UNMAP is unavailable but "

58 
	`loggög
(
LOG_VERBOSE
, "[SUCCESS] LBPWS10 is clear.");

61 
	`loggög
(
LOG_VERBOSE
, "WRITESAME10 UNMAP isávailable. Verify "

64 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhat LBPME is set.");

65 i‡(
rc16
 &&Ñc16->
lbpme
) {

66 
	`loggög
(
LOG_VERBOSE
, "[SUCCESS] LBPME is set.");

68 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITESAME10 UNMAP is "

70 
	`CU_FAIL
("[FAILED] UNMAP isávailable but LBPME==0");

73 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhat LBPWS10 is set.");

74 i‡(
öq_lbp
 && inq_lbp->
lbpws10
) {

75 
	`loggög
(
LOG_VERBOSE
, "[SUCCESS] LBPWS10 is set.");

77 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITESAME10 UNMAP is "

79 
	`CU_FAIL
("[FAILED] UNMAP isávailable but LBPWS10==0");

82 
	}
}

	@test-tool/test_writesame10_wrprotect.c

19 
	~<°dio.h
>

20 
	~<°dlib.h
>

21 
	~<°rög.h
>

22 
	~<°dlib.h
>

24 
	~<CUnô/CUnô.h
>

26 
	~"iscsi.h
"

27 
	~"scsi-lowÀvñ.h
"

28 
	~"iscsi-ã°-cu.h
"

31 
	$ã°_wrôeßme10_wΩrŸe˘
()

33 
i
;

38 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

39 
	`loggög
(
LOG_VERBOSE
, "Test WRITESAME10 withÇon-zero WRPROTECT");

41 
CHECK_FOR_DATALOSS
;

42 
CHECK_FOR_SBC
;

44 
	`mem£t
(
s¸©ch
, 0, 
block_size
);

45 i‡(!
öq
->
¥Ÿe˘
 || (
rc16
 !
NULL
 && !rc16->
¥Ÿ_í
)) {

46 
	`loggög
(
LOG_VERBOSE
, "Device doesÇot support/useÖrotection information. All commands should fail.");

47 
i
 = 1; i < 8; i++) {

48 
	`WRITESAME10
(
sd
, 0, 
block_size
, 1, 0, 0, 
i
, 0, 
s¸©ch
,

49 
EXPECT_INVALID_FIELD_IN_CDB
);

54 
	`loggög
(
LOG_NORMAL
, "NoÅests for devicesÅhat supportÖrotection information yet.");

55 
	}
}

	@test-tool/test_writesame16_0blocks.c

19 
	~<°dio.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-ã°-cu.h
"

28 
	$ã°_wrôeßme16_0blocks
()

30 
CHECK_FOR_DATALOSS
;

31 
CHECK_FOR_SBC
;

33 i‡(!
öq_bl
) {

34 
	`CU_PASS
("BlockLimits VPD isÇotávailable. SkippingÅest.\n");

38 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

39 
	`loggög
(
LOG_VERBOSE
, "Test WRITESAME16 0-blocksát LBA==0 (WSNZ=%d)",

40 
öq_bl
->
w¢z
);

41 
	`mem£t
(
s¸©ch
, 0, 
block_size
);

43 i‡(
öq_bl
->
w¢z
) {

44 
	`WRITESAME16
(
sd
, 0, 
block_size
, 0, 0, 0, 0, 0, 
s¸©ch
,

45 
EXPECT_INVALID_FIELD_IN_CDB
);

46 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITESAME16 doesÇot support 0-blocks.");

51 i‡(
öq_bl
->
max_ws_Àn
 > 0 && 
num_blocks
 > inq_bl->max_ws_len) {

52 
	`WRITESAME16
(
sd
, 0, 
block_size
, 0, 0, 0, 0, 0, 
s¸©ch
,

53 
EXPECT_INVALID_FIELD_IN_CDB
);

55 
	`WRITESAME16
(
sd
, 0, 
block_size
, 0, 0, 0, 0, 0, 
s¸©ch
,

56 
EXPECT_STATUS_GOOD
);

59 i‡(
öq_bl
->
max_ws_Àn
 > 0) {

60 
	`loggög
(
LOG_VERBOSE
,

63 
	`CHECK_SIZE
((
öq_bl
->
max_ws_Àn
 + 1),

64 
	`WRITESAME16
(
sd
, 
num_blocks
 - (
öq_bl
->
max_ws_Àn
 + 1),

65 
block_size
, 0, 0, 0, 0, 0, 
s¸©ch
,

66 
EXPECT_INVALID_FIELD_IN_CDB
));

67 
	`loggög
(
LOG_VERBOSE
,

70 
	`CHECK_SIZE
(
öq_bl
->
max_ws_Àn
,

71 
	`WRITESAME16
(
sd
, 
num_blocks
 - 
öq_bl
->
max_ws_Àn
,

72 
block_size
, 0, 0, 0, 0, 0, 
s¸©ch
,

73 
EXPECT_STATUS_GOOD
));

74 
	`loggög
(
LOG_VERBOSE
,

77 
	`CHECK_SIZE
((
öq_bl
->
max_ws_Àn
 - 1),

78 
	`WRITESAME16
(
sd
, 
num_blocks
 - (
öq_bl
->
max_ws_Àn
 - 1),

79 
block_size
, 0, 0, 0, 0, 0, 
s¸©ch
,

80 
EXPECT_STATUS_GOOD
));

82 
	`loggög
(
LOG_VERBOSE
, "[SKIPPING] No MAXIMUM WRITE SAME LENGTH - "

86 
	`loggög
(
LOG_VERBOSE
, "Test WRITESAME16 0-blocks one blockÖastÉnd-of-LUN");

87 
	`WRITESAME16
(
sd
, 
num_blocks
 + 1, 
block_size
, 0, 0, 0, 0, 0, 
s¸©ch
,

88 
EXPECT_LBA_OOB
);

90 
	`loggög
(
LOG_VERBOSE
, "Test WRITESAME16 0-blocksát LBA==2^63");

91 
	`WRITESAME16
(
sd
, 0x8000000000000000ULL,

92 
block_size
, 0, 0, 0, 0, 0, 
s¸©ch
,

93 
EXPECT_LBA_OOB
);

95 
	`loggög
(
LOG_VERBOSE
, "Test WRITESAME16 0-blocksát LBA==-1");

96 
	`WRITESAME16
(
sd
, -1, 
block_size
, 0, 0, 0, 0, 0, 
s¸©ch
,

97 
EXPECT_LBA_OOB
);

98 
	}
}

	@test-tool/test_writesame16_beyond_eol.c

19 
	~<°dio.h
>

20 
	~<°dlib.h
>

22 
	~<CUnô/CUnô.h
>

24 
	~"iscsi.h
"

25 
	~"scsi-lowÀvñ.h
"

26 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_wrôeßme16_bey⁄d_eﬁ
()

32 
i
;

34 
CHECK_FOR_DATALOSS
;

35 
CHECK_FOR_SBC
;

37 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

38 
	`loggög
(
LOG_VERBOSE
, "Test WRITESAME16 1-256 blocks one block beyondÅheÉnd");

39 
	`mem£t
(
s¸©ch
, 0, 
block_size
);

40 
i
 = 1; i <= 256; i++) {

41 
	`WRITESAME16
(
sd
, 
num_blocks
 - 
i
 + 1,

42 
block_size
, 
i
, 0, 0, 0, 0, 
s¸©ch
,

43 
EXPECT_LBA_OOB
);

46 
	`loggög
(
LOG_VERBOSE
, "Test WRITESAME16 1-256 blocksát LBA==2^63");

47 
i
 = 1; i <= 256; i++) {

48 
	`WRITESAME16
(
sd
, 0x8000000000000000ULL,

49 
block_size
, 
i
, 0, 0, 0, 0, 
s¸©ch
,

50 
EXPECT_LBA_OOB
);

53 
	`loggög
(
LOG_VERBOSE
, "Test WRITESAME16 1-256 blocksát LBA==-1");

54 
i
 = 1; i <= 256; i++) {

55 
	`WRITESAME16
(
sd
, -1, 
block_size
, 
i
, 0, 0, 0, 0, 
s¸©ch
,

56 
EXPECT_LBA_OOB
);

59 
	`loggög
(
LOG_VERBOSE
, "Test WRITESAME16 2-256 blocksáll but one block beyondÅheÉnd");

60 
i
 = 2; i <= 256; i++) {

61 
	`WRITESAME16
(
sd
, 
num_blocks
 - 1,

62 
block_size
, 
i
, 0, 0, 0, 0, 
s¸©ch
,

63 
EXPECT_LBA_OOB
);

65 
	}
}

	@test-tool/test_writesame16_check.c

20 
	~<°dio.h
>

21 
	~<°dlib.h
>

23 
	~<CUnô/CUnô.h
>

25 
	~"iscsi.h
"

26 
	~"scsi-lowÀvñ.h
"

27 
	~"iscsi-suµ‹t.h
"

28 
	~"iscsi-ã°-cu.h
"

32 
	$ã°_wrôeßme16_check
()

34 
i
;

35 
ws_max_blocks
 = 256;

36 
ªad_buf
[
ws_max_blocks
 * 
block_size
];

38 
CHECK_FOR_DATALOSS
;

39 
CHECK_FOR_SBC
;

41 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

42 
	`loggög
(
LOG_VERBOSE
, "Test WRITESAME16 of 1-256 blocksátÅhe start ofÅhe LUN");

44 
i
 = 1; i <
ws_max_blocks
; i++) {

49 
	`mem£t
(
s¸©ch
, 
i
, 
block_size
 * 
ws_max_blocks
);

50 
	`WRITESAME16
(
sd
, 0, 
block_size
, 
i
, 0, 0, 0, 0, 
s¸©ch
,

51 
EXPECT_STATUS_GOOD
);

53 
	`mem£t
(
ªad_buf
, 0, 
i
 * 
block_size
);

54 
	`READ16
(
sd
, 
NULL
, 0, 
i
 * 
block_size
,

55 
block_size
, 0, 0, 0, 0, 0, 
ªad_buf
,

56 
EXPECT_STATUS_GOOD
);

58 
	`CU_ASSERT_EQUAL
(0, 
	`memcmp
(
ªad_buf
, 
s¸©ch
, 
i
));

61 
	`loggög
(
LOG_VERBOSE
, "Test WRITESAME16 of 1-256 blocksátÅheÉnd ofÅhe LUN");

62 
i
 = 1; i <
ws_max_blocks
; i++) {

63 
	`mem£t
(
s¸©ch
, 
i
, 
block_size
 * 
ws_max_blocks
);

64 
	`WRITESAME16
(
sd
, 
num_blocks
 - 
i
,

65 
block_size
, 
i
, 0, 0, 0, 0, 
s¸©ch
,

66 
EXPECT_STATUS_GOOD
);

68 
	`mem£t
(
ªad_buf
, 0, 
i
 * 
block_size
);

69 
	`READ16
(
sd
, 
NULL
, 
num_blocks
 - 
i
, i * 
block_size
,

70 
block_size
, 0, 0, 0, 0, 0, 
ªad_buf
,

71 
EXPECT_STATUS_GOOD
);

73 
	`CU_ASSERT_EQUAL
(0, 
	`memcmp
(
ªad_buf
, 
s¸©ch
, 
i
));

75 
	}
}

	@test-tool/test_writesame16_invalid_dataout_size.c

19 
	~<°dio.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-suµ‹t.h
"

26 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_wrôeßme16_övÆid_d©aout_size
()

32 
CHECK_FOR_DATALOSS
;

33 
CHECK_FOR_THIN_PROVISIONING
;

34 
CHECK_FOR_LBPWS10
;

35 
CHECK_FOR_LBPPB_GT_1
;

36 
CHECK_FOR_SBC
;

38 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

39 
	`loggög
(
LOG_VERBOSE
, "TestÅhat WRITESAME10 fails for invalid "

41 
	`mem£t
(
s¸©ch
, 0xa6, 
block_size
);

43 
	`loggög
(
LOG_VERBOSE
, "CheckÅoo small DataOut");

44 
	`loggög
(
LOG_VERBOSE
, "Unmap with DataOut==%zd (block_size==%zd)",

45 
block_size
 / 2, block_size);

46 
	`WRITESAME16
(
sd
, 0, 
block_size
 / 2, 1, 0, 1, 0, 0, 
s¸©ch
,

47 
EXPECT_STATUS_GENERIC_BAD
);

49 
	`loggög
(
LOG_VERBOSE
, "CheckÅooÜarge DataOut");

50 
	`loggög
(
LOG_VERBOSE
, "Unmap with DataOut==%zd (block_size==%zd)",

51 
block_size
 * 2, block_size);

52 
	`WRITESAME16
(
sd
, 0, 
block_size
 * 2, 1, 0, 1, 0, 0, 
s¸©ch
,

53 
EXPECT_STATUS_GENERIC_BAD
);

54 
	}
}

	@test-tool/test_writesame16_simple.c

19 
	~<°dio.h
>

20 
	~<°dlib.h
>

22 
	~<CUnô/CUnô.h
>

24 
	~"iscsi.h
"

25 
	~"scsi-lowÀvñ.h
"

26 
	~"iscsi-suµ‹t.h
"

27 
	~"iscsi-ã°-cu.h
"

31 
	$ã°_wrôeßme16_sim∂e
()

33 
i
;

35 
CHECK_FOR_DATALOSS
;

36 
CHECK_FOR_SBC
;

38 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

39 
	`loggög
(
LOG_VERBOSE
, "Test WRITESAME16 of 1-256 blocksátÅhe start ofÅhe LUN");

41 
	`mem£t
(
s¸©ch
, 0, 
block_size
);

42 
i
 = 1; i <= 256; i++) {

43 
	`WRITESAME16
(
sd
, 0, 
block_size
, 
i
, 0, 0, 0, 0, 
s¸©ch
,

44 
EXPECT_STATUS_GOOD
);

47 
	`loggög
(
LOG_VERBOSE
, "Test WRITESAME16 of 1-256 blocksátÅheÉnd ofÅhe LUN");

48 
i
 = 1; i <= 256; i++) {

49 
	`WRITESAME16
(
sd
, 
num_blocks
 - 
i
,

50 
block_size
, 
i
, 0, 0, 0, 0, 
s¸©ch
,

51 
EXPECT_STATUS_GOOD
);

53 
	}
}

	@test-tool/test_writesame16_unmap.c

19 
	~<°dio.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-suµ‹t.h
"

26 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_wrôeßme16_unm≠
()

32 
i
;

34 
CHECK_FOR_DATALOSS
;

35 
CHECK_FOR_THIN_PROVISIONING
;

36 
CHECK_FOR_LBPWS
;

37 
CHECK_FOR_SBC
;

39 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

40 
	`loggög
(
LOG_VERBOSE
, "Test WRITESAME16 of 1-256 blocksátÅhe start ofÅhe LUN");

41 
i
 = 1; i <= 256; i++) {

42 
	`loggög
(
LOG_VERBOSE
, "Wrôê%d block†o‡0xFF", 
i
);

43 
	`mem£t
(
s¸©ch
, 0xff, 
i
 * 
block_size
);

44 
	`WRITE16
(
sd
, 0, 
i
 * 
block_size
, block_size,

45 0, 0, 0, 0, 0, 
s¸©ch
,

46 
EXPECT_STATUS_GOOD
);

48 
	`loggög
(
LOG_VERBOSE
, "Unm≠ %d block†usög WRITESAME16", 
i
);

49 
	`mem£t
(
s¸©ch
, 0, 
block_size
);

50 
	`WRITESAME16
(
sd
, 0, 
block_size
, 
i
, 0, 1, 0, 0, 
s¸©ch
,

51 
EXPECT_STATUS_GOOD
);

53 i‡(
rc16
->
lb¥z
) {

54 
	`loggög
(
LOG_VERBOSE
, "LBPRZ is set. ReadÅhe unmapped "

56 
	`loggög
(
LOG_VERBOSE
, "Read %d blocksánd verifyÅhey "

57 "¨ênow zîo", 
i
);

58 
	`READ16
(
sd
, 
NULL
, 0, 
i
 * 
block_size
, block_size,

59 0, 0, 0, 0, 0, 
s¸©ch
,

60 
EXPECT_STATUS_GOOD
);

61 
	`ALL_ZERO
(
s¸©ch
, 
i
 * 
block_size
);

63 
	`loggög
(
LOG_VERBOSE
, "LBPRZ is clear. SkipÅheÑead "

69 
	`loggög
(
LOG_VERBOSE
, "Test WRITESAME16 of 1-256 blocksátÅheÉnd ofÅhe LUN");

70 
i
 = 1; i <= 256; i++) {

71 
	`loggög
(
LOG_VERBOSE
, "Wrôê%d block†o‡0xFF", 
i
);

72 
	`mem£t
(
s¸©ch
, 0xff, 
i
 * 
block_size
);

73 
	`WRITE16
(
sd
, 
num_blocks
 - 
i
,

74 
i
 * 
block_size
, block_size, 0, 0, 0, 0, 0, 
s¸©ch
,

75 
EXPECT_STATUS_GOOD
);

77 
	`loggög
(
LOG_VERBOSE
, "Unm≠ %d block†usög WRITESAME16", 
i
);

78 
	`mem£t
(
s¸©ch
, 0, 
block_size
);

79 
	`WRITESAME16
(
sd
, 
num_blocks
 - 
i
,

80 
block_size
, 
i
, 0, 1, 0, 0, 
s¸©ch
,

81 
EXPECT_STATUS_GOOD
);

83 i‡(
rc16
->
lb¥z
) {

84 
	`loggög
(
LOG_VERBOSE
, "LBPRZ is set. ReadÅhe unmapped "

86 
	`loggög
(
LOG_VERBOSE
, "Read %d blocksánd verifyÅhey "

87 "¨ênow zîo", 
i
);

88 
	`READ16
(
sd
, 
NULL
, 
num_blocks
 - 
i
,

89 
i
 * 
block_size
, block_size,

90 0, 0, 0, 0, 0, 
s¸©ch
,

91 
EXPECT_STATUS_GOOD
);

92 
	`ALL_ZERO
(
s¸©ch
, 
i
 * 
block_size
);

94 
	`loggög
(
LOG_VERBOSE
, "LBPRZ is clear. SkipÅheÑead "

99 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhat WRITESAME16 ANCHOR==1 + UNMAP==0 is invalid");

100 
	`WRITESAME16
(
sd
, 0, 
block_size
, 1, 1, 0, 0, 0, 
s¸©ch
,

101 
EXPECT_INVALID_FIELD_IN_CDB
);

103 i‡(
öq_lbp
->
™c_sup
) {

104 
	`loggög
(
LOG_VERBOSE
, "Test WRITESAME16 ANCHOR==1 + UNMAP==0");

105 
	`mem£t
(
s¸©ch
, 0, 
block_size
);

106 
	`WRITESAME16
(
sd
, 0, 
block_size
, 1, 1, 1, 0, 0, 
s¸©ch
,

107 
EXPECT_STATUS_GOOD
);

109 
	`loggög
(
LOG_VERBOSE
, "Test WRITESAME16 ANCHOR==1 + UNMAP==0Ço ANC_SUP soÉxpectingÅo fail");

110 
	`WRITESAME16
(
sd
, 0, 
block_size
, 1, 1, 1, 0, 0, 
s¸©ch
,

111 
EXPECT_INVALID_FIELD_IN_CDB
);

114 i‡(
öq_bl
 =
NULL
) {

115 
	`loggög
(
LOG_VERBOSE
, "[FAILED] WRITESAME16 works but "

117 
	`CU_FAIL
("[FAILED] WRITESAME16 works but "

122 
i
 = 256;

123 i‡(
i
 <
num_blocks


124 && (
öq_bl
->
max_ws_Àn
 =0 || inq_bl->max_ws_À¿>
i
)) {

125 
	`loggög
(
LOG_VERBOSE
, "Block Limits VPDÖageÑeports MAX_WS_LEN "

128 "Àngths", 
i
, i);

130 
	`loggög
(
LOG_VERBOSE
, "Wrôê%d block†o‡0xFF", 
i
);

131 
	`mem£t
(
s¸©ch
, 0xff, 
i
 * 
block_size
);

132 
	`WRITE16
(
sd
, 0,

133 
i
 * 
block_size
, block_size, 0, 0, 0, 0, 0, 
s¸©ch
,

134 
EXPECT_STATUS_GOOD
);

136 
	`loggög
(
LOG_VERBOSE
, "Unm≠ %d block†usög WRITESAME16", 
i
);

137 
	`mem£t
(
s¸©ch
, 0, 
block_size
);

138 
	`WRITESAME16
(
sd
, 0, 
block_size
, 
i
, 0, 1, 0, 0, 
s¸©ch
,

139 
EXPECT_STATUS_GOOD
);

141 i‡(
rc16
->
lb¥z
) {

142 
	`loggög
(
LOG_VERBOSE
, "LBPRZ is set. ReadÅhe unmapped "

145 
	`loggög
(
LOG_VERBOSE
, "Read %d blocksánd verifyÅhey "

146 "¨ênow zîo", 
i
);

147 
	`READ16
(
sd
, 
NULL
, 0, 
i
 * 
block_size
, block_size,

148 0, 0, 0, 0, 0, 
s¸©ch
,

149 
EXPECT_STATUS_GOOD
);

150 
	`ALL_ZERO
(
s¸©ch
, 
i
 * 
block_size
);

152 
	`loggög
(
LOG_VERBOSE
, "LBPRZ is clear. SkipÅheÑead "

155 } i‡(
i
 <
num_blocks
) {

156 
	`loggög
(
LOG_VERBOSE
, "Block Limits VPDÖageÑeports MAX_WS_LEN "

160 
	`loggög
(
LOG_VERBOSE
, "Unm≠ %d block†usög WRITESAME16", 
i
);

161 
	`WRITESAME16
(
sd
, 0, 
block_size
, 
i
, 0, 1, 0, 0, 
s¸©ch
,

162 
EXPECT_INVALID_FIELD_IN_CDB
);

166 
i
 = 65536;

167 i‡(
i
 <
num_blocks


168 && (
öq_bl
->
max_ws_Àn
 =0 || inq_bl->max_ws_À¿>
i
)) {

169 
	`loggög
(
LOG_VERBOSE
, "Block Limits VPDÖageÑeports MAX_WS_LEN "

172 "Àngths", 
i
, i);

174 
	`loggög
(
LOG_VERBOSE
, "Wrôê%d block†o‡0xFF", 
i
);

175 
	`mem£t
(
s¸©ch
, 0xff, 
i
 * 
block_size
);

176 
	`WRITE16
(
sd
, 0,

177 
i
 * 
block_size
, block_size, 0, 0, 0, 0, 0, 
s¸©ch
,

178 
EXPECT_STATUS_GOOD
);

180 
	`loggög
(
LOG_VERBOSE
, "Unm≠ %d block†usög WRITESAME16", 
i
);

181 
	`mem£t
(
s¸©ch
, 0, 
block_size
);

182 
	`WRITESAME16
(
sd
, 0, 
block_size
, 
i
, 0, 1, 0, 0, 
s¸©ch
,

183 
EXPECT_STATUS_GOOD
);

185 i‡(
rc16
->
lb¥z
) {

186 
	`loggög
(
LOG_VERBOSE
, "LBPRZ is set. ReadÅhe unmapped "

189 
	`loggög
(
LOG_VERBOSE
, "Read %d blocksánd verifyÅhey "

190 "¨ênow zîo", 
i
);

191 
	`READ16
(
sd
, 
NULL
, 0, 
i
 * 
block_size
, block_size,

192 0, 0, 0, 0, 0, 
s¸©ch
,

193 
EXPECT_STATUS_GOOD
);

194 
	`ALL_ZERO
(
s¸©ch
, 
i
 * 
block_size
);

196 
	`loggög
(
LOG_VERBOSE
, "LBPRZ is clear. SkipÅheÑead "

199 } i‡(
i
 <
num_blocks
) {

200 
	`loggög
(
LOG_VERBOSE
, "Block Limits VPDÖageÑeports MAX_WS_LEN "

204 
	`loggög
(
LOG_VERBOSE
, "Unm≠ %d block†usög WRITESAME16", 
i
);

205 
	`WRITESAME16
(
sd
, 0, 
block_size
, 
i
, 0, 1, 0, 0, 
s¸©ch
,

206 
EXPECT_INVALID_FIELD_IN_CDB
);

208 
	}
}

	@test-tool/test_writesame16_unmap_unaligned.c

19 
	~<°dio.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-suµ‹t.h
"

26 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_wrôeßme16_unm≠_u«lig√d
()

32 
i
;

34 
CHECK_FOR_DATALOSS
;

35 
CHECK_FOR_THIN_PROVISIONING
;

36 
CHECK_FOR_LBPWS
;

37 
CHECK_FOR_LBPPB_GT_1
;

38 
CHECK_FOR_SBC
;

40 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

41 
	`loggög
(
LOG_VERBOSE
, "Te°Åh© u«lig√d WRITESAME16 Unm≠ suc˚eds. LBPPB==%d", 
lbµb
);

43 
i
 = 1; i < 
lbµb
; i++) {

44 
	`loggög
(
LOG_VERBOSE
, "Unm≠ %d block†usög WRITESAME16áàLBA:%d", 
lbµb
 - 
i
, i);

45 
	`WRITESAME16
(
sd
, 
i
, 0, 
lbµb
 - i, 0, 1, 0, 0, 
NULL
,

46 
EXPECT_STATUS_GOOD
);

48 
	}
}

	@test-tool/test_writesame16_unmap_until_end.c

19 
	~<°dio.h
>

20 
	~<°dlib.h
>

22 
	~<CUnô/CUnô.h
>

24 
	~"iscsi.h
"

25 
	~"scsi-lowÀvñ.h
"

26 
	~"iscsi-suµ‹t.h
"

27 
	~"iscsi-ã°-cu.h
"

31 
	$ã°_wrôeßme16_unm≠_u¡û_íd
()

33 
i
;

35 
CHECK_FOR_DATALOSS
;

36 
CHECK_FOR_THIN_PROVISIONING
;

37 
CHECK_FOR_LBPWS
;

38 
CHECK_FOR_SBC
;

40 i‡(
öq_bl
->
w¢z
) {

41 
	`loggög
(
LOG_NORMAL
, "WRITESAME16 doesÇot support 0-blocks."

43 
	`mem£t
(
s¸©ch
, 0, 
block_size
);

44 
	`WRITESAME16
(
sd
, 0, 
block_size
, 0, 0, 1, 0, 0, 
s¸©ch
,

45 
EXPECT_INVALID_FIELD_IN_CDB
);

49 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

50 
	`loggög
(
LOG_VERBOSE
, "Test WRITESAME16 of 1-256 blocksátÅheÉnd ofÅhe LUN by settingÇumber-of-blocks==0");

51 
	`mem£t
(
s¸©ch
, 0xa6, 256 * 
block_size
);

52 
i
 = 1; i <= 256; i++) {

53 
	`loggög
(
LOG_VERBOSE
, "Wrôê%d block†o‡0xFF", 
i
);

54 
	`mem£t
(
s¸©ch
, 0xff, 
block_size
 * 
i
);

55 
	`WRITE16
(
sd
, 
num_blocks
 - 
i
,

56 
i
 * 
block_size
, block_size, 0, 0, 0, 0, 0, 
s¸©ch
,

57 
EXPECT_STATUS_GOOD
);

59 
	`loggög
(
LOG_VERBOSE
, "Unm≠ %d block†usög WRITESAME16", 
i
);

60 
	`mem£t
(
s¸©ch
, 0, 
block_size
);

61 
	`WRITESAME16
(
sd
, 
num_blocks
 - 
i
,

62 
block_size
, 0, 0, 1, 0, 0, 
s¸©ch
,

63 
EXPECT_STATUS_GOOD
);

65 i‡(
rc16
->
lb¥z
) {

66 
	`loggög
(
LOG_VERBOSE
, "LBPRZ is set. ReadÅhe unmapped "

69 
	`loggög
(
LOG_VERBOSE
, "Read %d blocksánd verifyÅhey "

70 "¨ênow zîo", 
i
);

71 
	`READ16
(
sd
, 
NULL
, 
num_blocks
 - 
i
,

72 
i
 * 
block_size
, block_size,

73 0, 0, 0, 0, 0, 
s¸©ch
,

74 
EXPECT_STATUS_GOOD
);

75 
	`ALL_ZERO
(
s¸©ch
, 
i
 * 
block_size
);

77 
	`loggög
(
LOG_VERBOSE
, "LBPRZ is clear. SkipÅheÑead "

81 
	}
}

	@test-tool/test_writesame16_unmap_vpd.c

19 
	~<°dio.h
>

20 
	~<°dlib.h
>

22 
	~<CUnô/CUnô.h
>

24 
	~"iscsi.h
"

25 
	~"scsi-lowÀvñ.h
"

26 
	~"iscsi-suµ‹t.h
"

27 
	~"iscsi-ã°-cu.h
"

31 
	$ã°_wrôeßme16_unm≠_vpd
()

33 
ªt
;

35 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

36 
	`loggög
(
LOG_VERBOSE
, "Test WRITESAME16 UNMAPávailability is "

39 
CHECK_FOR_DATALOSS
;

40 
CHECK_FOR_SBC
;

42 
	`loggög
(
LOG_VERBOSE
, "Check if WRITESAME16 can be used for UNMAP.");

44 
	`loggög
(
LOG_VERBOSE
, "Unmap 1 block using WRITESAME16");

45 
	`mem£t
(
s¸©ch
, 0, 
block_size
);

46 
ªt
 = 
	`wrôeßme16
(
sd
, 0, 
block_size
, 1, 0, 1, 0, 0, 
s¸©ch
,

47 
EXPECT_STATUS_GOOD
);

48 i‡(
ªt
 != 0) {

49 
	`loggög
(
LOG_VERBOSE
, "WRITESAME16 UNMAP isÇotávailable. "

52 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhat LBPWS is clear.");

53 i‡(
öq_lbp
 && inq_lbp->
lbpws
) {

54 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITESAME16 UNMAP isÇot "

56 
	`CU_FAIL
("[FAILED] WRITESAME16 UNMAP is unavailable but "

59 
	`loggög
(
LOG_VERBOSE
, "[SUCCESS] LBPWS is clear.");

62 
	`loggög
(
LOG_VERBOSE
, "WRITESAME16 UNMAP isávailable. Verify "

65 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhat LBPME is set.");

66 i‡(
rc16
 &&Ñc16->
lbpme
) {

67 
	`loggög
(
LOG_VERBOSE
, "[SUCCESS] LBPME is set.");

69 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITESAME16 UNMAP is "

71 
	`CU_FAIL
("[FAILED] UNMAP isávailable but LBPME==0");

74 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhat LBPWS is set.");

75 i‡(
öq_lbp
 && inq_lbp->
lbpws
) {

76 
	`loggög
(
LOG_VERBOSE
, "[SUCCESS] LBPWS is set.");

78 
	`loggög
(
LOG_NORMAL
, "[FAILED] WRITESAME16 UNMAP is "

80 
	`CU_FAIL
("[FAILED] UNMAP isávailable but LBPWS==0");

83 
	}
}

	@test-tool/test_writesame16_wrprotect.c

19 
	~<°dio.h
>

20 
	~<°dlib.h
>

21 
	~<°rög.h
>

22 
	~<°dlib.h
>

24 
	~<CUnô/CUnô.h
>

26 
	~"iscsi.h
"

27 
	~"scsi-lowÀvñ.h
"

28 
	~"iscsi-ã°-cu.h
"

31 
	$ã°_wrôeßme16_wΩrŸe˘
()

33 
i
;

38 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

39 
	`loggög
(
LOG_VERBOSE
, "Test WRITESAME16 withÇon-zero WRPROTECT");

41 
CHECK_FOR_DATALOSS
;

42 
CHECK_FOR_SBC
;

44 
	`mem£t
(
s¸©ch
, 0, 
block_size
);

45 i‡(!
öq
->
¥Ÿe˘
 || (
rc16
 !
NULL
 && !rc16->
¥Ÿ_í
)) {

46 
	`loggög
(
LOG_VERBOSE
, "Device doesÇot support/useÖrotection information. All commands should fail.");

47 
i
 = 1; i < 8; i++) {

48 
	`WRITESAME16
(
sd
, 0, 
block_size
, 1, 0, 0, 
i
, 0, 
s¸©ch
,

49 
EXPECT_INVALID_FIELD_IN_CDB
);

54 
	`loggög
(
LOG_NORMAL
, "NoÅests for devicesÅhat supportÖrotection information yet.");

55 
	}
}

	@test-tool/test_writeverify10_0blocks.c

19 
	~<°dio.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-ã°-cu.h
"

28 
	$ã°_wrôevîify10_0blocks
()

30 
CHECK_FOR_DATALOSS
;

32 i‡(
num_blocks
 >= 0x80000000) {

33 
	`CU_PASS
("LUN isÅoo big forÑead-beyond-eolÅests with WRITEVERIFY10. SkippingÅest.\n");

37 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

38 
	`loggög
(
LOG_VERBOSE
, "Test WRITEVERIFY10 0-blocksát LBA==0");

39 
	`WRITEVERIFY10
(
sd
, 0, 0, 
block_size
, 0, 0, 0, 0, 
NULL
,

40 
EXPECT_STATUS_GOOD
);

42 
	`loggög
(
LOG_VERBOSE
, "Test WRITEVERIFY10 0-blocks one blockÖastÉnd-of-LUN");

43 
	`WRITEVERIFY10
(
sd
, 
num_blocks
 + 1, 0, 
block_size
, 0, 0, 0, 0, 
NULL
,

44 
EXPECT_LBA_OOB
);

46 
	`loggög
(
LOG_VERBOSE
, "Test WRITEVERIFY10 0-blocksát LBA==2^31");

47 
	`WRITEVERIFY10
(
sd
, 0x80000000, 0, 
block_size
, 0, 0, 0, 0, 
NULL
,

48 
EXPECT_LBA_OOB
);

50 
	`loggög
(
LOG_VERBOSE
, "Test WRITEVERIFY10 0-blocksát LBA==-1");

51 
	`WRITEVERIFY10
(
sd
, -1, 0, 
block_size
, 0, 0, 0, 0, 
NULL
,

52 
EXPECT_LBA_OOB
);

53 
	}
}

	@test-tool/test_writeverify10_beyond_eol.c

19 
	~<°dio.h
>

20 
	~<°dlib.h
>

22 
	~<CUnô/CUnô.h
>

24 
	~"iscsi.h
"

25 
	~"scsi-lowÀvñ.h
"

26 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_wrôevîify10_bey⁄d_eﬁ
()

32 
i
;

34 
CHECK_FOR_DATALOSS
;

36 i‡(
num_blocks
 >= 0x80000000) {

37 
	`CU_PASS
("LUN isÅoo big for write-beyond-eolÅests with WRITEVERIFY10. SkippingÅest.\n");

41 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

42 
	`loggög
(
LOG_VERBOSE
, "Test WRITEVERIFY10 1-256 blocks one block beyondÅheÉnd");

43 
	`mem£t
(
s¸©ch
, 0xa6, 256 * 
block_size
);

44 
i
 = 1; i <= 256; i++) {

45 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

48 
	`WRITEVERIFY10
(
sd
, 
num_blocks
 + 1 - 
i
,

49 
i
 * 
block_size
, block_size, 0, 0, 1, 0, 
s¸©ch
,

50 
EXPECT_LBA_OOB
);

53 
	`loggög
(
LOG_VERBOSE
, "Test WRITEVERIFY10 1-256 blocksát LBA==2^31");

54 
i
 = 1; i <= 256; i++) {

55 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

58 
	`WRITEVERIFY10
(
sd
, 0x80000000,

59 
i
 * 
block_size
, block_size, 0, 0, 1, 0, 
s¸©ch
,

60 
EXPECT_LBA_OOB
);

63 
	`loggög
(
LOG_VERBOSE
, "Test WRITEVERIFY10 1-256 blocksát LBA==-1");

64 
i
 = 1; i <= 256; i++) {

65 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

68 
	`WRITEVERIFY10
(
sd
, -1, 
i
 * 
block_size
,

69 
block_size
, 0, 0, 1, 0, 
s¸©ch
,

70 
EXPECT_LBA_OOB
);

73 
	`loggög
(
LOG_VERBOSE
, "Test WRITEVERIFY10 2-256 blocksáll but one block beyondÅheÉnd");

74 
i
 = 2; i <= 256; i++) {

75 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

78 
	`WRITEVERIFY10
(
sd
, 
num_blocks
 - 1,

79 
i
 * 
block_size
, block_size, 0, 0, 1, 0, 
s¸©ch
,

80 
EXPECT_LBA_OOB
);

82 
	}
}

	@test-tool/test_writeverify10_dpo.c

19 
	~<°dio.h
>

20 
	~<°dlib.h
>

21 
	~<°rög.h
>

23 
	~<CUnô/CUnô.h
>

25 
	~"iscsi.h
"

26 
	~"scsi-lowÀvñ.h
"

27 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_wrôevîify10_dpo
()

32 
dpofua
, 
ußge_d©a_dpo
;

33 
scsi_èsk
 *
ms_èsk
 = 
NULL
;

34 
scsi_mode_£n£
 *
ms
;

35 
scsi_èsk
 *
rso_èsk
 = 
NULL
;

36 
scsi_ªp‹t_suµ‹ãd_›_codes_⁄e_comm™d
 *
rsoc
;

38 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

39 
	`loggög
(
LOG_VERBOSE
, "Test WRITEVERIFY10 DPO flag");

41 
CHECK_FOR_SBC
;

43 
	`READ10
(
sd
, 
NULL
, 0, 
block_size
, block_size, 0, 0, 0, 0, 0, 
s¸©ch
,

44 
EXPECT_STATUS_GOOD
);

46 
	`loggög
(
LOG_VERBOSE
, "ReadÅhe DPOFUA flag from mode sense data");

47 
	`MODESENSE6
(
sd
, &
ms_èsk
, 0, 
SCSI_MODESENSE_PC_CURRENT
,

48 
SCSI_MODEPAGE_RETURN_ALL_PAGES
, 0, 255,

49 
EXPECT_STATUS_GOOD
);

51 
	`loggög
(
LOG_VERBOSE
, "[SUCCESS] Mode senseÑeturned status GOOD");

52 
ms
 = 
	`scsi_d©aö_unm¨shÆl
(
ms_èsk
);

53 
dpofua
 = 
ms
 && (ms->
devi˚_•ecific_∑ømëî
 & 0x10);

54 
	`scsi_‰ì_scsi_èsk
(
ms_èsk
);

56 i‡(
dpofua
) {

57 
	`loggög
(
LOG_VERBOSE
, "DPOFUA flag is set. Device shouldállow "

60 
	`loggög
(
LOG_VERBOSE
, "DPOFUA flag is clear. Device should fail "

64 
	`loggög
(
LOG_VERBOSE
, "Test WRITEVERIFY10 with DPO==1");

65 i‡(
dpofua
) {

66 
	`WRITEVERIFY10
(
sd
, 0, 
block_size
,

67 
block_size
, 0, 1, 1, 0, 
s¸©ch
,

68 
EXPECT_STATUS_GOOD
);

70 
	`WRITEVERIFY10
(
sd
, 0, 
block_size
,

71 
block_size
, 0, 1, 1, 0, 
s¸©ch
,

72 
EXPECT_INVALID_FIELD_IN_CDB
);

75 
	`loggög
(
LOG_VERBOSE
, "Try fetching REPORT_SUPPORTED_OPCODES "

77 
	`REPORT_SUPPORTED_OPCODES
(
sd
, &
rso_èsk
,

78 0, 
SCSI_REPORT_SUPPORTING_OPCODE
,

79 
SCSI_OPCODE_WRITE_VERIFY10
,

82 
EXPECT_STATUS_GOOD
);

84 
	`loggög
(
LOG_VERBOSE
, "UnmarshallÅhe DATA-IN buffer");

85 
rsoc
 = 
	`scsi_d©aö_unm¨shÆl
(
rso_èsk
);

86 
	`CU_ASSERT_PTR_NOT_NULL_FATAL
(
rsoc
);

88 
ußge_d©a_dpo
 = 
rsoc
 ?Ñsoc->
cdb_ußge_d©a
[1] & 0x10 : -1;

89 i‡(
dpofua
) {

90 
	`loggög
(
LOG_VERBOSE
, "DPOFUA is set. VerifyÅhe DPO flag "

92 
	`CU_ASSERT_EQUAL
(
ußge_d©a_dpo
, 0x10);

94 
	`loggög
(
LOG_VERBOSE
, "DPOFUA is clear. VerifyÅhe DPO "

96 
	`CU_ASSERT_EQUAL
(
ußge_d©a_dpo
, 0x00);

99 
	`scsi_‰ì_scsi_èsk
(
rso_èsk
);

100 
	}
}

	@test-tool/test_writeverify10_flags.c

19 
	~<°dio.h
>

20 
	~<°dlib.h
>

21 
	~<°rög.h
>

22 
	~<°dlib.h
>

24 
	~<CUnô/CUnô.h
>

26 
	~"iscsi.h
"

27 
	~"scsi-lowÀvñ.h
"

28 
	~"iscsi-ã°-cu.h
"

31 
	$ã°_wrôevîify10_Êags
()

33 
CHECK_FOR_DATALOSS
;

35 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

36 
	`loggög
(
LOG_VERBOSE
, "Test WRITEVERIFY10 flags");

39 
	`loggög
(
LOG_VERBOSE
, "Test WRITEVERIFY10 with BYTCHK==1");

40 
	`mem£t
(
s¸©ch
, 0xa6, 
block_size
);

41 
	`WRITEVERIFY10
(
sd
, 0, 
block_size
, block_size, 0, 0, 1, 0, 
s¸©ch
,

42 
EXPECT_STATUS_GOOD
);

43 
	}
}

	@test-tool/test_writeverify10_residuals.c

19 
	~<°dio.h
>

20 
	~<°dlib.h
>

21 
	~<°rög.h
>

23 
	~<CUnô/CUnô.h
>

25 
	~"iscsi.h
"

26 
	~"iscsi-¥iv©e.h
"

27 
	~"scsi-lowÀvñ.h
"

28 
	~"iscsi-ã°-cu.h
"

32 
	$ã°_wrôevîify10_ªsiduÆs
()

34 
scsi_èsk
 *
èsk_ªt
;

35 
buf
[10000];

36 
iscsi_d©a
 
d©a
;

37 
ok
;

38 
i
;

40 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

41 
	`loggög
(
LOG_VERBOSE
, "Test WRITEVERIFY10 commands withÑesiduals");

42 
	`loggög
(
LOG_VERBOSE
, "Block sizêi†%zu", 
block_size
);

44 
CHECK_FOR_DATALOSS
;

45 
CHECK_FOR_SBC
;

47 i‡(
sd
->
iscsi_˘x
 =
NULL
) {

48 c⁄° *
îr
 = "[SKIPPED] This WRITEVERIFY10Åest is only "

50 
	`loggög
(
LOG_NORMAL
, "%s", 
îr
);

51 
	`CU_PASS
(
îr
);

56 
	`WRITEVERIFY10
(
sd
, 0, 0, 
block_size
, 0, 0, 0, 0, 
NULL
,

57 
EXPECT_STATUS_GOOD
);

60 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

61 
	`CU_ASSERT_PTR_NOT_NULL_FATAL
(
èsk
);

63 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

64 
èsk
->
cdb
[0] = 
SCSI_OPCODE_WRITE_VERIFY10
;

65 
èsk
->
cdb
[1] = 2;

66 
èsk
->
cdb
[8] = 1;

67 
èsk
->
cdb_size
 = 10;

68 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

69 
èsk
->
expx„æí
 = 0;

75 
	`iscsi_£t_nﬂut‹ec⁄√˘
(
sd
->
iscsi_˘x
, 1);

77 
	`loggög
(
LOG_VERBOSE
, "Try writing one block but with iSCSIÉxpectedÅransferÜength==0");

79 
èsk_ªt
 = 
	`iscsi_scsi_comm™d_sync
(
sd
->
iscsi_˘x
, sd->
iscsi_lun
, 
èsk
, 
NULL
);

80 
	`CU_ASSERT_PTR_NOT_NULL_FATAL
(
èsk_ªt
);

81 
	`CU_ASSERT_NOT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_CANCELLED
);

83 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


84 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


85 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

86 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITEVERIFY10 isÇot implemented.");

87 
	`CU_PASS
("WRITEVERIFY10 isÇot implemented.");

90 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅheÅargetÑeturned SUCCESS");

91 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

92 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturnedÉrror %s",

93 
	`iscsi_gë_îr‹
(
sd
->
iscsi_˘x
));

95 
	`CU_ASSERT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_GOOD
);

97 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesidual overflow flag is set");

98 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_OVERFLOW
) {

99 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot setÑesidual "

102 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ_°©us
, 
SCSI_RESIDUAL_OVERFLOW
);

104 
	`loggög
(
LOG_VERBOSE
, "Verify we got %zu bytes ofÑesidual overflow",

105 
block_size
);

106 i‡(
èsk
->
ªsiduÆ
 !
block_size
) {

107 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot set correct "

109 
block_size
, 
èsk
->
ªsiduÆ
);

111 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ
, 
block_size
);

112 
	`scsi_‰ì_scsi_èsk
(
èsk
);

113 
èsk
 = 
NULL
;

116 
	`iscsi_£t_nﬂut‹ec⁄√˘
(
sd
->
iscsi_˘x
, 0);

119 
	`loggög
(
LOG_VERBOSE
, "Try writing one block but with iSCSIÉxpectedÅransferÜength==10000");

120 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

121 
	`CU_ASSERT_PTR_NOT_NULL_FATAL
(
èsk
);

123 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

124 
èsk
->
cdb
[0] = 
SCSI_OPCODE_WRITE_VERIFY10
;

125 
èsk
->
cdb
[1] = 2;

126 
èsk
->
cdb
[8] = 1;

127 
èsk
->
cdb_size
 = 10;

128 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

129 
èsk
->
expx„æí
 = 10000;

131 
	`mem£t
(
buf
, 0xa6, (buf));

132 
d©a
.
size
 = 
èsk
->
expx„æí
;

133 
d©a
.d©®&
buf
[0];

134 
èsk_ªt
 = 
	`iscsi_scsi_comm™d_sync
(
sd
->
iscsi_˘x
, sd->
iscsi_lun
, 
èsk
, &
d©a
);

135 
	`CU_ASSERT_PTR_NOT_NULL_FATAL
(
èsk_ªt
);

137 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅheÅargetÑeturned SUCCESS");

138 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

139 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturnedÉrror %s",

140 
	`iscsi_gë_îr‹
(
sd
->
iscsi_˘x
));

142 
	`CU_ASSERT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_GOOD
);

144 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesidual underflow flag is set");

145 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_UNDERFLOW
) {

146 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot setÑesidual "

149 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ_°©us
, 
SCSI_RESIDUAL_UNDERFLOW
);

151 
	`loggög
(
LOG_VERBOSE
, "Verify we got %zu bytes ofÑesidual underflow",

152 10000 - 
block_size
);

153 i‡(
èsk
->
ªsiduÆ
 !10000 - 
block_size
) {

154 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot set correct "

156 10000 - 
block_size
, 
èsk
->
ªsiduÆ
);

158 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ
, 10000 - 
block_size
);

159 
	`scsi_‰ì_scsi_èsk
(
èsk
);

160 
èsk
 = 
NULL
;

163 
	`loggög
(
LOG_VERBOSE
, "Try writing one block but with iSCSIÉxpectedÅransferÜength==200");

164 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

165 
	`CU_ASSERT_PTR_NOT_NULL_FATAL
(
èsk
);

167 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

168 
èsk
->
cdb
[0] = 
SCSI_OPCODE_WRITE_VERIFY10
;

169 
èsk
->
cdb
[1] = 2;

170 
èsk
->
cdb
[8] = 1;

171 
èsk
->
cdb_size
 = 10;

172 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

173 
èsk
->
expx„æí
 = 200;

175 
d©a
.
size
 = 
èsk
->
expx„æí
;

176 
d©a
.d©®&
buf
[0];

177 
èsk_ªt
 = 
	`iscsi_scsi_comm™d_sync
(
sd
->
iscsi_˘x
, sd->
iscsi_lun
, 
èsk
, &
d©a
);

178 
	`CU_ASSERT_PTR_NOT_NULL_FATAL
(
èsk_ªt
);

180 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅheÅargetÑeturned SUCCESS");

181 
ok
 = 
èsk
->
°©us
 =
SCSI_STATUS_GOOD
 ||

182 (
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION
 &&

183 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST
 &&

184 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_FIELD_IN_INFORMATION_UNIT
);

185 i‡(!
ok
) {

186 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturnedÉrror %s",

187 
	`iscsi_gë_îr‹
(
sd
->
iscsi_˘x
));

189 
	`CU_ASSERT
(
ok
);

191 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesidual overflow flag is set");

192 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_OVERFLOW
) {

193 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot setÑesidual "

196 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ_°©us
, 
SCSI_RESIDUAL_OVERFLOW
);

198 
	`loggög
(
LOG_VERBOSE
, "Verify we got %zu bytes ofÑesidual overflow",

199 
block_size
 - 200);

200 i‡(
èsk
->
ªsiduÆ
 !
block_size
 - 200) {

201 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot set correct "

203 
block_size
 - 200, 
èsk
->
ªsiduÆ
);

205 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ
, 
block_size
 - 200);

207 
	`scsi_‰ì_scsi_èsk
(
èsk
);

208 
èsk
 = 
NULL
;

212 
	`loggög
(
LOG_VERBOSE
, "Try writingÅwo blocks but iSCSIÉxpected "

213 "å™s„∏Àngth==%zu (==⁄êblock)", 
block_size
);

214 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

215 
	`CU_ASSERT_PTR_NOT_NULL_FATAL
(
èsk
);

217 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

218 
èsk
->
cdb
[0] = 
SCSI_OPCODE_WRITE_VERIFY10
;

219 
èsk
->
cdb
[1] = 2;

220 
èsk
->
cdb
[8] = 2;

221 
èsk
->
cdb_size
 = 10;

222 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

223 
èsk
->
expx„æí
 = 
block_size
;

225 
d©a
.
size
 = 
èsk
->
expx„æí
;

226 
d©a
.d©®&
buf
[0];

227 
èsk_ªt
 = 
	`iscsi_scsi_comm™d_sync
(
sd
->
iscsi_˘x
, sd->
iscsi_lun
, 
èsk
, &
d©a
);

228 
	`CU_ASSERT_PTR_NOT_NULL_FATAL
(
èsk_ªt
);

230 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅheÅargetÑeturned SUCCESS");

231 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

232 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturnedÉrror %s",

233 
	`iscsi_gë_îr‹
(
sd
->
iscsi_˘x
));

235 
	`CU_ASSERT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_GOOD
);

237 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesidual overflow flag is set");

238 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_OVERFLOW
) {

239 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot setÑesidual "

242 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ_°©us
, 
SCSI_RESIDUAL_OVERFLOW
);

244 
	`loggög
(
LOG_VERBOSE
, "Verify we got one block ofÑesidual overflow");

245 i‡(
èsk
->
ªsiduÆ
 !
block_size
) {

246 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot set correct "

248 
block_size
, 
èsk
->
ªsiduÆ
);

250 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ
, 
block_size
);

252 
	`scsi_‰ì_scsi_èsk
(
èsk
);

253 
èsk
 = 
NULL
;

258 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhat if iSCSI EDTL > SCSI TLÅhen we only write SCSI TLámount of data");

260 
	`loggög
(
LOG_VERBOSE
, "WriteÅwo blocks of 'a'");

261 
	`mem£t
(
buf
, 'a', 10000);

262 
	`WRITE10
(
sd
, 0, 2 * 
block_size
, block_size, 0, 0, 0, 0, 0, 
buf
,

263 
EXPECT_STATUS_GOOD
);

265 
	`loggög
(
LOG_VERBOSE
, "Write one block of 'b' but set iSCSI EDTLÅo 2 blocks.");

266 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

267 
	`CU_ASSERT_PTR_NOT_NULL_FATAL
(
èsk
);

269 
	`mem£t
(
buf
, 'b', 10000);

271 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

272 
èsk
->
cdb
[0] = 
SCSI_OPCODE_WRITE_VERIFY10
;

273 
èsk
->
cdb
[1] = 2;

274 
èsk
->
cdb
[8] = 1;

275 
èsk
->
cdb_size
 = 10;

276 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

277 
èsk
->
expx„æí
 = 2 * 
block_size
;

279 
d©a
.
size
 = 
èsk
->
expx„æí
;

280 
d©a
.d©®&
buf
[0];

281 
èsk_ªt
 = 
	`iscsi_scsi_comm™d_sync
(
sd
->
iscsi_˘x
, sd->
iscsi_lun
, 
èsk
, &
d©a
);

282 
	`CU_ASSERT_PTR_NOT_NULL_FATAL
(
èsk_ªt
);

284 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅheÅargetÑeturned SUCCESS");

285 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

286 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturnedÉrror %s",

287 
	`iscsi_gë_îr‹
(
sd
->
iscsi_˘x
));

289 
	`CU_ASSERT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_GOOD
);

291 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesidual underflow flag is set");

292 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_UNDERFLOW
) {

293 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot setÑesidual "

296 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ_°©us
, 
SCSI_RESIDUAL_UNDERFLOW
);

298 
	`loggög
(
LOG_VERBOSE
, "Verify we got one block ofÑesidual underflow");

299 i‡(
èsk
->
ªsiduÆ
 !
block_size
) {

300 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot set correct "

302 
block_size
, 
èsk
->
ªsiduÆ
);

304 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ
, 
block_size
);

305 
	`scsi_‰ì_scsi_èsk
(
èsk
);

306 
èsk
 = 
NULL
;

308 
	`loggög
(
LOG_VERBOSE
, "ReadÅheÅwo blocks");

309 
	`READ10
(
sd
, 
NULL
, 0, 2* 
block_size
, block_size, 0, 0, 0, 0, 0, 
buf
,

310 
EXPECT_STATUS_GOOD
);

312 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅhe first block was changedÅo 'b'");

313 
i
 = 0; i < 
block_size
; i++) {

314 i‡(
buf
[
i
] != 'b') {

315 
	`loggög
(
LOG_NORMAL
, "First block didÇot containÉxpected 'b'");

316 
	`CU_FAIL
("Block wasÇot written correctly");

321 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅhe second block was NOT overwrittenánd still contains 'a'");

322 
i
 = 
block_size
; i < 2 * block_size; i++) {

323 i‡(
buf
[
i
] != 'a') {

324 
	`loggög
(
LOG_NORMAL
, "Second block was overwrittenándÇoÜonger contain 'a'");

325 
	`CU_FAIL
("Second block was incorrectly overwritten");

331 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhat if iSCSI EDTL < SCSI TLÅhen we only write iSCSI EDTLámount of data");

333 
	`loggög
(
LOG_VERBOSE
, "WriteÅwo blocks of 'a'");

334 
	`mem£t
(
buf
, 'a', 10000);

335 
	`WRITE10
(
sd
, 0, 2 * 
block_size
, block_size, 0, 0, 0, 0, 0, 
buf
,

336 
EXPECT_STATUS_GOOD
);

338 
	`loggög
(
LOG_VERBOSE
, "WriteÅwo blocks of 'b' but set iSCSI EDTLÅo 1 blocks.");

339 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

340 
	`CU_ASSERT_PTR_NOT_NULL_FATAL
(
èsk
);

342 
	`mem£t
(
buf
, 'b', 10000);

344 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

345 
èsk
->
cdb
[0] = 
SCSI_OPCODE_WRITE_VERIFY10
;

346 
èsk
->
cdb
[1] = 2;

347 
èsk
->
cdb
[8] = 2;

348 
èsk
->
cdb_size
 = 10;

349 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

350 
èsk
->
expx„æí
 = 
block_size
;

352 
d©a
.
size
 = 
èsk
->
expx„æí
;

353 
d©a
.d©®&
buf
[0];

354 
èsk_ªt
 = 
	`iscsi_scsi_comm™d_sync
(
sd
->
iscsi_˘x
, sd->
iscsi_lun
, 
èsk
, &
d©a
);

355 
	`CU_ASSERT_PTR_NOT_NULL_FATAL
(
èsk_ªt
);

357 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅheÅargetÑeturned SUCCESS");

358 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

359 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturnedÉrror %s",

360 
	`iscsi_gë_îr‹
(
sd
->
iscsi_˘x
));

362 
	`CU_ASSERT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_GOOD
);

364 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesidual overflow flag is set");

365 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_OVERFLOW
) {

366 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot setÑesidual "

369 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ_°©us
, 
SCSI_RESIDUAL_OVERFLOW
);

371 
	`loggög
(
LOG_VERBOSE
, "Verify we got one block ofÑesidual overflow");

372 i‡(
èsk
->
ªsiduÆ
 !
block_size
) {

373 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot set correct "

375 
block_size
, 
èsk
->
ªsiduÆ
);

377 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ
, 
block_size
);

378 
	`scsi_‰ì_scsi_èsk
(
èsk
);

379 
èsk
 = 
NULL
;

381 
	`loggög
(
LOG_VERBOSE
, "ReadÅheÅwo blocks");

382 
	`READ10
(
sd
, 
NULL
, 0, 2* 
block_size
, block_size, 0, 0, 0, 0, 0, 
buf
,

383 
EXPECT_STATUS_GOOD
);

385 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅhe first block was changedÅo 'b'");

386 
i
 = 0; i < 
block_size
; i++) {

387 i‡(
buf
[
i
] != 'b') {

388 
	`loggög
(
LOG_NORMAL
, "First block didÇot containÉxpected 'b'");

389 
	`CU_FAIL
("Block wasÇot written correctly");

394 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅhe second block was NOT overwrittenánd still contains 'a'");

395 
i
 = 
block_size
; i < 2 * block_size; i++) {

396 i‡(
buf
[
i
] != 'a') {

397 
	`loggög
(
LOG_NORMAL
, "Second block was overwrittenándÇoÜonger contain 'a'");

398 
	`CU_FAIL
("Second block was incorrectly overwritten");

402 
	}
}

	@test-tool/test_writeverify10_simple.c

19 
	~<°dio.h
>

20 
	~<°dlib.h
>

22 
	~<CUnô/CUnô.h
>

24 
	~"iscsi.h
"

25 
	~"scsi-lowÀvñ.h
"

26 
	~"iscsi-suµ‹t.h
"

27 
	~"iscsi-ã°-cu.h
"

31 
	$ã°_wrôevîify10_sim∂e
()

33 
i
;

35 
CHECK_FOR_DATALOSS
;

37 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

38 
	`loggög
(
LOG_VERBOSE
, "Test WRITEVERIFY10 of 1-256 blocksátÅhe start ofÅhe LUN");

39 
	`mem£t
(
s¸©ch
, 0xa6, 256 * 
block_size
);

40 
i
 = 1; i <= 256; i++) {

41 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

44 
	`WRITEVERIFY10
(
sd
, 0, 
i
 * 
block_size
,

45 
block_size
, 0, 0, 1, 0, 
s¸©ch
,

46 
EXPECT_STATUS_GOOD
);

49 
	`loggög
(
LOG_VERBOSE
, "Test WRITEVERIFY10 of 1-256 blocksátÅheÉnd ofÅhe LUN");

50 
i
 = 1; i <= 256; i++) {

51 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

54 
	`WRITEVERIFY10
(
sd
, 
num_blocks
 - 
i
,

55 
i
 * 
block_size
, block_size, 0, 0, 1, 0, 
s¸©ch
,

56 
EXPECT_STATUS_GOOD
);

58 
	}
}

	@test-tool/test_writeverify10_wrprotect.c

19 
	~<°dio.h
>

20 
	~<°dlib.h
>

21 
	~<°rög.h
>

22 
	~<°dlib.h
>

24 
	~<CUnô/CUnô.h
>

26 
	~"iscsi.h
"

27 
	~"scsi-lowÀvñ.h
"

28 
	~"iscsi-ã°-cu.h
"

31 
	$ã°_wrôevîify10_wΩrŸe˘
()

33 
i
;

38 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

39 
	`loggög
(
LOG_VERBOSE
, "Test WRITEVERIFY10 withÇon-zero WRPROTECT");

41 
CHECK_FOR_DATALOSS
;

42 
CHECK_FOR_SBC
;

44 
	`mem£t
(
s¸©ch
, 0xa6, 
block_size
);

45 i‡(!
öq
->
¥Ÿe˘
 || (
rc16
 !
NULL
 && !rc16->
¥Ÿ_í
)) {

46 
	`loggög
(
LOG_VERBOSE
, "Device doesÇot support/useÖrotection information. All commands should fail.");

47 
i
 = 1; i < 8; i++) {

48 
	`WRITEVERIFY10
(
sd
, 0, 
block_size
, block_size,

49 
i
, 0, 1, 0, 
s¸©ch
,

50 
EXPECT_INVALID_FIELD_IN_CDB
);

55 
	`loggög
(
LOG_NORMAL
, "NoÅests for devicesÅhat supportÖrotection information yet.");

56 
	}
}

	@test-tool/test_writeverify12_0blocks.c

19 
	~<°dio.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-ã°-cu.h
"

28 
	$ã°_wrôevîify12_0blocks
()

30 
CHECK_FOR_DATALOSS
;

32 i‡(
num_blocks
 >= 0x80000000) {

33 
	`CU_PASS
("LUN isÅoo big forÑead-beyond-eolÅests with WRITEVERIFY12. SkippingÅest.\n");

37 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

38 
	`loggög
(
LOG_VERBOSE
, "Test WRITEVERIFY12 0-blocksát LBA==0");

39 
	`WRITEVERIFY12
(
sd
, 0, 0, 
block_size
, 0, 0, 0, 0, 
NULL
,

40 
EXPECT_STATUS_GOOD
);

42 
	`loggög
(
LOG_VERBOSE
, "Test WRITEVERIFY12 0-blocks one blockÖastÉnd-of-LUN");

43 
	`WRITEVERIFY12
(
sd
, 
num_blocks
 + 1, 0, 
block_size
, 0, 0, 0, 0, 
NULL
,

44 
EXPECT_LBA_OOB
);

46 
	`loggög
(
LOG_VERBOSE
, "Test WRITEVERIFY12 0-blocksát LBA==2^31");

47 
	`WRITEVERIFY12
(
sd
, 0x80000000, 0, 
block_size
, 0, 0, 0, 0, 
NULL
,

48 
EXPECT_LBA_OOB
);

50 
	`loggög
(
LOG_VERBOSE
, "Test WRITEVERIFY12 0-blocksát LBA==-1");

51 
	`WRITEVERIFY12
(
sd
, -1, 0, 
block_size
, 0, 0, 0, 0, 
NULL
,

52 
EXPECT_LBA_OOB
);

53 
	}
}

	@test-tool/test_writeverify12_beyond_eol.c

19 
	~<°dio.h
>

20 
	~<°dlib.h
>

22 
	~<CUnô/CUnô.h
>

24 
	~"iscsi.h
"

25 
	~"scsi-lowÀvñ.h
"

26 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_wrôevîify12_bey⁄d_eﬁ
()

32 
i
;

34 
CHECK_FOR_DATALOSS
;

36 i‡(
num_blocks
 >= 0x80000000) {

37 
	`CU_PASS
("LUN isÅoo big for write-beyond-eolÅests with WRITEVERIFY12. SkippingÅest.\n");

41 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

42 
	`loggög
(
LOG_VERBOSE
, "Test WRITEVERIFY12 1-256 blocks one block beyondÅheÉnd");

43 
	`mem£t
(
s¸©ch
, 0xa6, 256 * 
block_size
);

44 
i
 = 1; i <= 256; i++) {

45 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

48 
	`WRITEVERIFY12
(
sd
, 
num_blocks
 + 1 - 
i
,

49 
i
 * 
block_size
, block_size, 0, 0, 1, 0, 
s¸©ch
,

50 
EXPECT_LBA_OOB
);

53 
	`loggög
(
LOG_VERBOSE
, "Test WRITEVERIFY12 1-256 blocksát LBA==2^31");

54 
i
 = 1; i <= 256; i++) {

55 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

58 
	`WRITEVERIFY12
(
sd
, 0x80000000,

59 
i
 * 
block_size
, block_size, 0, 0, 1, 0, 
s¸©ch
,

60 
EXPECT_LBA_OOB
);

63 
	`loggög
(
LOG_VERBOSE
, "Test WRITEVERIFY12 1-256 blocksát LBA==-1");

64 
i
 = 1; i <= 256; i++) {

65 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

68 
	`WRITEVERIFY12
(
sd
, -1, 
i
 * 
block_size
,

69 
block_size
, 0, 0, 1, 0, 
s¸©ch
,

70 
EXPECT_LBA_OOB
);

73 
	`loggög
(
LOG_VERBOSE
, "Test WRITEVERIFY12 2-256 blocksáll but one block beyondÅheÉnd");

74 
i
 = 2; i <= 256; i++) {

75 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

78 
	`WRITEVERIFY12
(
sd
, 
num_blocks
 - 1,

79 
i
 * 
block_size
, block_size, 0, 0, 1, 0, 
s¸©ch
,

80 
EXPECT_LBA_OOB
);

82 
	}
}

	@test-tool/test_writeverify12_dpo.c

19 
	~<°dio.h
>

20 
	~<°dlib.h
>

21 
	~<°rög.h
>

23 
	~<CUnô/CUnô.h
>

25 
	~"iscsi.h
"

26 
	~"scsi-lowÀvñ.h
"

27 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_wrôevîify12_dpo
()

32 
dpofua
, 
ußge_d©a_dpo
;

33 
scsi_èsk
 *
ms_èsk
 = 
NULL
;

34 
scsi_mode_£n£
 *
ms
;

35 
scsi_èsk
 *
rso_èsk
 = 
NULL
;

36 
scsi_ªp‹t_suµ‹ãd_›_codes_⁄e_comm™d
 *
rsoc
;

38 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

39 
	`loggög
(
LOG_VERBOSE
, "Test WRITEVERIFY12 DPO flag");

41 
CHECK_FOR_SBC
;

43 
	`READ10
(
sd
, 
NULL
, 0, 
block_size
, block_size, 0, 0, 0, 0, 0, 
s¸©ch
,

44 
EXPECT_STATUS_GOOD
);

46 
	`loggög
(
LOG_VERBOSE
, "ReadÅhe DPOFUA flag from mode sense data");

47 
	`MODESENSE6
(
sd
, &
ms_èsk
, 0, 
SCSI_MODESENSE_PC_CURRENT
,

48 
SCSI_MODEPAGE_RETURN_ALL_PAGES
, 0, 255,

49 
EXPECT_STATUS_GOOD
);

51 
	`loggög
(
LOG_VERBOSE
, "[SUCCESS] Mode senseÑeturned status GOOD");

52 
ms
 = 
	`scsi_d©aö_unm¨shÆl
(
ms_èsk
);

53 
dpofua
 = 
ms
 && (ms->
devi˚_•ecific_∑ømëî
 & 0x10);

54 
	`scsi_‰ì_scsi_èsk
(
ms_èsk
);

56 i‡(
dpofua
) {

57 
	`loggög
(
LOG_VERBOSE
, "DPOFUA flag is set. Device shouldállow "

60 
	`loggög
(
LOG_VERBOSE
, "DPOFUA flag is clear. Device should fail "

64 
	`loggög
(
LOG_VERBOSE
, "Test WRITEVERIFY12 with DPO==1");

65 i‡(
dpofua
) {

66 
	`WRITEVERIFY12
(
sd
, 0, 
block_size
,

67 
block_size
, 0, 1, 1, 0, 
s¸©ch
,

68 
EXPECT_STATUS_GOOD
);

70 
	`WRITEVERIFY12
(
sd
, 0, 
block_size
,

71 
block_size
, 0, 1, 1, 0, 
s¸©ch
,

72 
EXPECT_INVALID_FIELD_IN_CDB
);

75 
	`loggög
(
LOG_VERBOSE
, "Try fetching REPORT_SUPPORTED_OPCODES "

77 
	`REPORT_SUPPORTED_OPCODES
(
sd
, &
rso_èsk
,

78 0, 
SCSI_REPORT_SUPPORTING_OPCODE
,

79 
SCSI_OPCODE_WRITE_VERIFY12
,

82 
EXPECT_STATUS_GOOD
);

83 
	`loggög
(
LOG_VERBOSE
, "UnmarshallÅhe DATA-IN buffer");

84 
rsoc
 = 
	`scsi_d©aö_unm¨shÆl
(
rso_èsk
);

85 
	`CU_ASSERT_PTR_NOT_NULL_FATAL
(
rsoc
);

87 
ußge_d©a_dpo
 = 
rsoc
 ?Ñsoc->
cdb_ußge_d©a
[1] & 0x10 : -1;

88 i‡(
dpofua
) {

89 
	`loggög
(
LOG_VERBOSE
, "DPOFUA is set. VerifyÅhe DPO flag "

91 
	`CU_ASSERT_EQUAL
(
ußge_d©a_dpo
, 0x10);

93 
	`loggög
(
LOG_VERBOSE
, "DPOFUA is clear. VerifyÅhe DPO "

95 
	`CU_ASSERT_EQUAL
(
ußge_d©a_dpo
, 0x00);

98 
	`scsi_‰ì_scsi_èsk
(
rso_èsk
);

99 
	}
}

	@test-tool/test_writeverify12_flags.c

19 
	~<°dio.h
>

20 
	~<°dlib.h
>

21 
	~<°rög.h
>

22 
	~<°dlib.h
>

24 
	~<CUnô/CUnô.h
>

26 
	~"iscsi.h
"

27 
	~"scsi-lowÀvñ.h
"

28 
	~"iscsi-ã°-cu.h
"

31 
	$ã°_wrôevîify12_Êags
()

33 
CHECK_FOR_DATALOSS
;

35 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

36 
	`loggög
(
LOG_VERBOSE
, "Test WRITEVERIFY12 flags");

39 
	`loggög
(
LOG_VERBOSE
, "Test WRITEVERIFY12 with BYTCHK==1");

40 
	`mem£t
(
s¸©ch
, 0xa6, 
block_size
);

41 
	`WRITEVERIFY12
(
sd
, 0, 
block_size
, block_size, 0, 0, 1, 0, 
s¸©ch
,

42 
EXPECT_STATUS_GOOD
);

43 
	}
}

	@test-tool/test_writeverify12_residuals.c

19 
	~<°dio.h
>

20 
	~<°dlib.h
>

21 
	~<°rög.h
>

23 
	~<CUnô/CUnô.h
>

25 
	~"iscsi.h
"

26 
	~"iscsi-¥iv©e.h
"

27 
	~"scsi-lowÀvñ.h
"

28 
	~"iscsi-ã°-cu.h
"

32 
	$ã°_wrôevîify12_ªsiduÆs
()

34 
scsi_èsk
 *
èsk_ªt
;

35 
buf
[10000];

36 
iscsi_d©a
 
d©a
;

37 
ok
;

38 
i
;

40 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

41 
	`loggög
(
LOG_VERBOSE
, "Test WRITEVERIFY12 commands withÑesiduals");

42 
	`loggög
(
LOG_VERBOSE
, "Block sizêi†%zu", 
block_size
);

44 
CHECK_FOR_DATALOSS
;

45 
CHECK_FOR_SBC
;

47 i‡(
sd
->
iscsi_˘x
 =
NULL
) {

48 c⁄° *
îr
 = "[SKIPPED] This WRITEVERIFY12Åest is only "

50 
	`loggög
(
LOG_NORMAL
, "%s", 
îr
);

51 
	`CU_PASS
(
îr
);

56 
	`WRITEVERIFY12
(
sd
, 0, 0, 
block_size
, 0, 0, 0, 0, 
NULL
,

57 
EXPECT_STATUS_GOOD
);

60 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

61 
	`CU_ASSERT_PTR_NOT_NULL_FATAL
(
èsk
);

63 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

64 
èsk
->
cdb
[0] = 
SCSI_OPCODE_WRITE_VERIFY12
;

65 
èsk
->
cdb
[9] = 1;

66 
èsk
->
cdb_size
 = 12;

67 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

68 
èsk
->
expx„æí
 = 0;

74 
	`iscsi_£t_nﬂut‹ec⁄√˘
(
sd
->
iscsi_˘x
, 1);

76 
	`loggög
(
LOG_VERBOSE
, "Try writing one block but with iSCSIÉxpectedÅransferÜength==0");

78 
èsk_ªt
 = 
	`iscsi_scsi_comm™d_sync
(
sd
->
iscsi_˘x
, sd->
iscsi_lun
, 
èsk
, 
NULL
);

79 
	`CU_ASSERT_PTR_NOT_NULL_FATAL
(
èsk_ªt
);

80 
	`CU_ASSERT_NOT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_CANCELLED
);

82 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


83 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


84 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

85 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITEVERIFY12 isÇot implemented.");

86 
	`CU_PASS
("WRITEVERIFY12 isÇot implemented.");

89 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅheÅargetÑeturned SUCCESS");

90 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

91 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturnedÉrror %s",

92 
	`iscsi_gë_îr‹
(
sd
->
iscsi_˘x
));

94 
	`CU_ASSERT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_GOOD
);

96 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesidual overflow flag is set");

97 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_OVERFLOW
) {

98 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot setÑesidual "

101 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ_°©us
, 
SCSI_RESIDUAL_OVERFLOW
);

103 
	`loggög
(
LOG_VERBOSE
, "Verify we got %zu bytes ofÑesidual overflow",

104 
block_size
);

105 i‡(
èsk
->
ªsiduÆ
 !
block_size
) {

106 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot set correct "

108 
block_size
, 
èsk
->
ªsiduÆ
);

110 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ
, 
block_size
);

111 
	`scsi_‰ì_scsi_èsk
(
èsk
);

112 
èsk
 = 
NULL
;

115 
	`iscsi_£t_nﬂut‹ec⁄√˘
(
sd
->
iscsi_˘x
, 0);

118 
	`loggög
(
LOG_VERBOSE
, "Try writing one block but with iSCSIÉxpectedÅransferÜength==10000");

119 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

120 
	`CU_ASSERT_PTR_NOT_NULL_FATAL
(
èsk
);

122 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

123 
èsk
->
cdb
[0] = 
SCSI_OPCODE_WRITE_VERIFY12
;

124 
èsk
->
cdb
[9] = 1;

125 
èsk
->
cdb_size
 = 12;

126 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

127 
èsk
->
expx„æí
 = 10000;

129 
	`mem£t
(
buf
, 0xa6, (buf));

130 
d©a
.
size
 = 
èsk
->
expx„æí
;

131 
d©a
.d©®&
buf
[0];

132 
èsk_ªt
 = 
	`iscsi_scsi_comm™d_sync
(
sd
->
iscsi_˘x
, sd->
iscsi_lun
, 
èsk
, &
d©a
);

133 
	`CU_ASSERT_PTR_NOT_NULL_FATAL
(
èsk_ªt
);

135 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅheÅargetÑeturned SUCCESS");

136 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

137 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturnedÉrror %s",

138 
	`iscsi_gë_îr‹
(
sd
->
iscsi_˘x
));

140 
	`CU_ASSERT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_GOOD
);

142 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesidual underflow flag is set");

143 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_UNDERFLOW
) {

144 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot setÑesidual "

147 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ_°©us
, 
SCSI_RESIDUAL_UNDERFLOW
);

149 
	`loggög
(
LOG_VERBOSE
, "Verify we got %zu bytes ofÑesidual underflow",

150 10000 - 
block_size
);

151 i‡(
èsk
->
ªsiduÆ
 !10000 - 
block_size
) {

152 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot set correct "

154 10000 - 
block_size
, 
èsk
->
ªsiduÆ
);

156 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ
, 10000 - 
block_size
);

157 
	`scsi_‰ì_scsi_èsk
(
èsk
);

158 
èsk
 = 
NULL
;

161 
	`loggög
(
LOG_VERBOSE
, "Try writing one block but with iSCSIÉxpectedÅransferÜength==200");

162 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

163 
	`CU_ASSERT_PTR_NOT_NULL_FATAL
(
èsk
);

165 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

166 
èsk
->
cdb
[0] = 
SCSI_OPCODE_WRITE_VERIFY12
;

167 
èsk
->
cdb
[9] = 1;

168 
èsk
->
cdb_size
 = 12;

169 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

170 
èsk
->
expx„æí
 = 200;

172 
d©a
.
size
 = 
èsk
->
expx„æí
;

173 
d©a
.d©®&
buf
[0];

174 
èsk_ªt
 = 
	`iscsi_scsi_comm™d_sync
(
sd
->
iscsi_˘x
, sd->
iscsi_lun
, 
èsk
, &
d©a
);

175 
	`CU_ASSERT_PTR_NOT_NULL_FATAL
(
èsk_ªt
);

177 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅheÅargetÑeturned SUCCESS");

178 
ok
 = 
èsk
->
°©us
 =
SCSI_STATUS_GOOD
 ||

179 (
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION
 &&

180 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST
 &&

181 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_FIELD_IN_INFORMATION_UNIT
);

182 i‡(!
ok
) {

183 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturnedÉrror %s",

184 
	`iscsi_gë_îr‹
(
sd
->
iscsi_˘x
));

186 
	`CU_ASSERT
(
ok
);

188 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesidual overflow flag is set");

189 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_OVERFLOW
) {

190 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot setÑesidual "

193 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ_°©us
, 
SCSI_RESIDUAL_OVERFLOW
);

195 
	`loggög
(
LOG_VERBOSE
, "Verify we got %zu bytes ofÑesidual overflow",

196 
block_size
 - 200);

197 i‡(
èsk
->
ªsiduÆ
 !
block_size
 - 200) {

198 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot set correct "

200 
block_size
 - 200, 
èsk
->
ªsiduÆ
);

202 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ
, 
block_size
 - 200);

204 
	`scsi_‰ì_scsi_èsk
(
èsk
);

205 
èsk
 = 
NULL
;

209 
	`loggög
(
LOG_VERBOSE
, "Try writingÅwo blocks but iSCSIÉxpected "

210 "å™s„∏Àngth==%zu (==⁄êblock)", 
block_size
);

211 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

212 
	`CU_ASSERT_PTR_NOT_NULL_FATAL
(
èsk
);

214 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

215 
èsk
->
cdb
[0] = 
SCSI_OPCODE_WRITE_VERIFY12
;

216 
èsk
->
cdb
[9] = 2;

217 
èsk
->
cdb_size
 = 12;

218 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

219 
èsk
->
expx„æí
 = 
block_size
;

221 
d©a
.
size
 = 
èsk
->
expx„æí
;

222 
d©a
.d©®&
buf
[0];

223 
èsk_ªt
 = 
	`iscsi_scsi_comm™d_sync
(
sd
->
iscsi_˘x
, sd->
iscsi_lun
, 
èsk
, &
d©a
);

224 
	`CU_ASSERT_PTR_NOT_NULL_FATAL
(
èsk_ªt
);

226 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅheÅargetÑeturned SUCCESS");

227 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

228 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturnedÉrror %s",

229 
	`iscsi_gë_îr‹
(
sd
->
iscsi_˘x
));

231 
	`CU_ASSERT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_GOOD
);

233 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesidual overflow flag is set");

234 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_OVERFLOW
) {

235 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot setÑesidual "

238 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ_°©us
, 
SCSI_RESIDUAL_OVERFLOW
);

240 
	`loggög
(
LOG_VERBOSE
, "Verify we got one block ofÑesidual overflow");

241 i‡(
èsk
->
ªsiduÆ
 !
block_size
) {

242 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot set correct "

244 
block_size
, 
èsk
->
ªsiduÆ
);

246 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ
, 
block_size
);

248 
	`scsi_‰ì_scsi_èsk
(
èsk
);

249 
èsk
 = 
NULL
;

254 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhat if iSCSI EDTL > SCSI TLÅhen we only write SCSI TLámount of data");

256 
	`loggög
(
LOG_VERBOSE
, "WriteÅwo blocks of 'a'");

257 
	`mem£t
(
buf
, 'a', 10000);

258 
	`WRITE12
(
sd
, 0, 2 * 
block_size
, block_size, 0, 0, 0, 0, 0, 
buf
,

259 
EXPECT_STATUS_GOOD
);

261 
	`loggög
(
LOG_VERBOSE
, "Write one block of 'b' but set iSCSI EDTLÅo 2 blocks.");

262 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

263 
	`CU_ASSERT_PTR_NOT_NULL_FATAL
(
èsk
);

265 
	`mem£t
(
buf
, 'b', 10000);

267 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

268 
èsk
->
cdb
[0] = 
SCSI_OPCODE_WRITE_VERIFY12
;

269 
èsk
->
cdb
[9] = 1;

270 
èsk
->
cdb_size
 = 12;

271 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

272 
èsk
->
expx„æí
 = 2 * 
block_size
;

274 
d©a
.
size
 = 
èsk
->
expx„æí
;

275 
d©a
.d©®&
buf
[0];

276 
èsk_ªt
 = 
	`iscsi_scsi_comm™d_sync
(
sd
->
iscsi_˘x
, sd->
iscsi_lun
, 
èsk
, &
d©a
);

277 
	`CU_ASSERT_PTR_NOT_NULL_FATAL
(
èsk_ªt
);

279 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅheÅargetÑeturned SUCCESS");

280 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

281 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturnedÉrror %s",

282 
	`iscsi_gë_îr‹
(
sd
->
iscsi_˘x
));

284 
	`CU_ASSERT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_GOOD
);

286 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesidual underflow flag is set");

287 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_UNDERFLOW
) {

288 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot setÑesidual "

291 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ_°©us
, 
SCSI_RESIDUAL_UNDERFLOW
);

293 
	`loggög
(
LOG_VERBOSE
, "Verify we got one block ofÑesidual underflow");

294 i‡(
èsk
->
ªsiduÆ
 !
block_size
) {

295 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot set correct "

297 
block_size
, 
èsk
->
ªsiduÆ
);

299 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ
, 
block_size
);

300 
	`scsi_‰ì_scsi_èsk
(
èsk
);

301 
èsk
 = 
NULL
;

303 
	`loggög
(
LOG_VERBOSE
, "ReadÅheÅwo blocks");

304 
	`READ12
(
sd
, 
NULL
, 0, 2* 
block_size
, block_size, 0, 0, 0, 0, 0, 
buf
,

305 
EXPECT_STATUS_GOOD
);

307 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅhe first block was changedÅo 'b'");

308 
i
 = 0; i < 
block_size
; i++) {

309 i‡(
buf
[
i
] != 'b') {

310 
	`loggög
(
LOG_NORMAL
, "First block didÇot containÉxpected 'b'");

311 
	`CU_FAIL
("Block wasÇot written correctly");

316 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅhe second block was NOT overwrittenánd still contains 'a'");

317 
i
 = 
block_size
; i < 2 * block_size; i++) {

318 i‡(
buf
[
i
] != 'a') {

319 
	`loggög
(
LOG_NORMAL
, "Second block was overwrittenándÇoÜonger contain 'a'");

320 
	`CU_FAIL
("Second block was incorrectly overwritten");

326 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhat if iSCSI EDTL < SCSI TLÅhen we only write iSCSI EDTLámount of data");

328 
	`loggög
(
LOG_VERBOSE
, "WriteÅwo blocks of 'a'");

329 
	`mem£t
(
buf
, 'a', 10000);

330 
	`WRITE12
(
sd
, 0, 2 * 
block_size
, block_size, 0, 0, 0, 0, 0, 
buf
,

331 
EXPECT_STATUS_GOOD
);

333 
	`loggög
(
LOG_VERBOSE
, "WriteÅwo blocks of 'b' but set iSCSI EDTLÅo 1 blocks.");

334 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

335 
	`CU_ASSERT_PTR_NOT_NULL_FATAL
(
èsk
);

337 
	`mem£t
(
buf
, 'b', 10000);

339 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

340 
èsk
->
cdb
[0] = 
SCSI_OPCODE_WRITE_VERIFY12
;

341 
èsk
->
cdb
[9] = 2;

342 
èsk
->
cdb_size
 = 12;

343 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

344 
èsk
->
expx„æí
 = 
block_size
;

346 
d©a
.
size
 = 
èsk
->
expx„æí
;

347 
d©a
.d©®&
buf
[0];

348 
èsk_ªt
 = 
	`iscsi_scsi_comm™d_sync
(
sd
->
iscsi_˘x
, sd->
iscsi_lun
, 
èsk
, &
d©a
);

349 
	`CU_ASSERT_PTR_NOT_NULL_FATAL
(
èsk_ªt
);

351 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅheÅargetÑeturned SUCCESS");

352 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

353 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturnedÉrror %s",

354 
	`iscsi_gë_îr‹
(
sd
->
iscsi_˘x
));

356 
	`CU_ASSERT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_GOOD
);

358 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesidual overflow flag is set");

359 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_OVERFLOW
) {

360 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot setÑesidual "

363 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ_°©us
, 
SCSI_RESIDUAL_OVERFLOW
);

365 
	`loggög
(
LOG_VERBOSE
, "Verify we got one block ofÑesidual overflow");

366 i‡(
èsk
->
ªsiduÆ
 !
block_size
) {

367 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot set correct "

369 
block_size
, 
èsk
->
ªsiduÆ
);

371 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ
, 
block_size
);

372 
	`scsi_‰ì_scsi_èsk
(
èsk
);

373 
èsk
 = 
NULL
;

375 
	`loggög
(
LOG_VERBOSE
, "ReadÅheÅwo blocks");

376 
	`READ12
(
sd
, 
NULL
, 0, 2* 
block_size
, block_size, 0, 0, 0, 0, 0, 
buf
,

377 
EXPECT_STATUS_GOOD
);

379 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅhe first block was changedÅo 'b'");

380 
i
 = 0; i < 
block_size
; i++) {

381 i‡(
buf
[
i
] != 'b') {

382 
	`loggög
(
LOG_NORMAL
, "First block didÇot containÉxpected 'b'");

383 
	`CU_FAIL
("Block wasÇot written correctly");

388 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅhe second block was NOT overwrittenánd still contains 'a'");

389 
i
 = 
block_size
; i < 2 * block_size; i++) {

390 i‡(
buf
[
i
] != 'a') {

391 
	`loggög
(
LOG_NORMAL
, "Second block was overwrittenándÇoÜonger contain 'a'");

392 
	`CU_FAIL
("Second block was incorrectly overwritten");

396 
	}
}

	@test-tool/test_writeverify12_simple.c

19 
	~<°dio.h
>

20 
	~<°dlib.h
>

22 
	~<CUnô/CUnô.h
>

24 
	~"iscsi.h
"

25 
	~"scsi-lowÀvñ.h
"

26 
	~"iscsi-suµ‹t.h
"

27 
	~"iscsi-ã°-cu.h
"

31 
	$ã°_wrôevîify12_sim∂e
()

33 
i
;

35 
CHECK_FOR_DATALOSS
;

37 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

38 
	`loggög
(
LOG_VERBOSE
, "Test WRITEVERIFY12 of 1-256 blocksátÅhe start ofÅhe LUN");

39 
	`mem£t
(
s¸©ch
, 0xa6, 256 * 
block_size
);

40 
i
 = 1; i <= 256; i++) {

41 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

44 
	`WRITEVERIFY12
(
sd
, 0, 
i
 * 
block_size
,

45 
block_size
, 0, 0, 1, 0, 
s¸©ch
,

46 
EXPECT_STATUS_GOOD
);

49 
	`loggög
(
LOG_VERBOSE
, "Test WRITE12 of 1-256 blocksátÅheÉnd ofÅhe LUN");

50 
i
 = 1; i <= 256; i++) {

51 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

54 
	`WRITEVERIFY12
(
sd
, 
num_blocks
 - 
i
,

55 
i
 * 
block_size
, block_size, 0, 0, 1, 0, 
s¸©ch
,

56 
EXPECT_STATUS_GOOD
);

58 
	}
}

	@test-tool/test_writeverify12_wrprotect.c

19 
	~<°dio.h
>

20 
	~<°dlib.h
>

21 
	~<°rög.h
>

22 
	~<°dlib.h
>

24 
	~<CUnô/CUnô.h
>

26 
	~"iscsi.h
"

27 
	~"scsi-lowÀvñ.h
"

28 
	~"iscsi-ã°-cu.h
"

31 
	$ã°_wrôevîify12_wΩrŸe˘
()

33 
i
;

38 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

39 
	`loggög
(
LOG_VERBOSE
, "Test WRITEVERIFY12 withÇon-zero WRPROTECT");

41 
CHECK_FOR_DATALOSS
;

42 
CHECK_FOR_SBC
;

44 
	`mem£t
(
s¸©ch
, 0xa6, 
block_size
);

45 i‡(!
öq
->
¥Ÿe˘
 || (
rc16
 !
NULL
 && !rc16->
¥Ÿ_í
)) {

46 
	`loggög
(
LOG_VERBOSE
, "Device doesÇot support/useÖrotection information. All commands should fail.");

47 
i
 = 1; i < 8; i++) {

48 
	`WRITEVERIFY12
(
sd
, 0, 
block_size
, block_size,

49 
i
, 0, 1, 0, 
s¸©ch
,

50 
EXPECT_INVALID_FIELD_IN_CDB
);

55 
	`loggög
(
LOG_NORMAL
, "NoÅests for devicesÅhat supportÖrotection information yet.");

56 
	}
}

	@test-tool/test_writeverify16_0blocks.c

19 
	~<°dio.h
>

21 
	~<CUnô/CUnô.h
>

23 
	~"iscsi.h
"

24 
	~"scsi-lowÀvñ.h
"

25 
	~"iscsi-ã°-cu.h
"

28 
	$ã°_wrôevîify16_0blocks
()

30 
CHECK_FOR_DATALOSS
;

31 
CHECK_FOR_SBC
;

33 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

34 
	`loggög
(
LOG_VERBOSE
, "Test WRITEVERIFY16 0-blocksát LBA==0");

35 
	`WRITEVERIFY16
(
sd
, 0, 0, 
block_size
, 0, 0, 0, 0, 
NULL
,

36 
EXPECT_STATUS_GOOD
);

38 
	`loggög
(
LOG_VERBOSE
, "Test WRITEVERIFY16 0-blocks one blockÖastÉnd-of-LUN");

39 
	`WRITEVERIFY16
(
sd
, 
num_blocks
 + 1, 0, 
block_size
, 0, 0, 0, 0, 
NULL
,

40 
EXPECT_LBA_OOB
);

42 
	`loggög
(
LOG_VERBOSE
, "Test WRITEVERIFY16 0-blocksát LBA==2^63");

43 
	`WRITEVERIFY16
(
sd
, 0x8000000000000000ULL,

44 0, 
block_size
, 0, 0, 0, 0, 
NULL
,

45 
EXPECT_LBA_OOB
);

47 
	`loggög
(
LOG_VERBOSE
, "Test WRITEVERIFY16 0-blocksát LBA==-1");

48 
	`WRITEVERIFY16
(
sd
, -1, 0, 
block_size
, 0, 0, 0, 0, 
NULL
,

49 
EXPECT_LBA_OOB
);

50 
	}
}

	@test-tool/test_writeverify16_beyond_eol.c

19 
	~<°dio.h
>

20 
	~<°dlib.h
>

22 
	~<CUnô/CUnô.h
>

24 
	~"iscsi.h
"

25 
	~"scsi-lowÀvñ.h
"

26 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_wrôevîify16_bey⁄d_eﬁ
()

32 
i
;

34 
CHECK_FOR_DATALOSS
;

35 
CHECK_FOR_SBC
;

37 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

38 
	`loggög
(
LOG_VERBOSE
, "Test WRITEVERIFY16 1-256 blocks one block beyondÅheÉnd");

39 
	`mem£t
(
s¸©ch
, 0xa6, 256 * 
block_size
);

40 
i
 = 1; i <= 256; i++) {

41 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

44 
	`WRITEVERIFY16
(
sd
, 
num_blocks
 + 1 - 
i
,

45 
i
 * 
block_size
, block_size, 0, 0, 1, 0, 
s¸©ch
,

46 
EXPECT_LBA_OOB
);

49 
	`loggög
(
LOG_VERBOSE
, "Test WRITEVERIFY16 1-256 blocksát LBA==2^63");

50 
i
 = 1; i <= 256; i++) {

51 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

54 
	`WRITEVERIFY16
(
sd
, 0x8000000000000000ULL,

55 
i
 * 
block_size
, block_size, 0, 0, 1, 0, 
s¸©ch
,

56 
EXPECT_LBA_OOB
);

59 
	`loggög
(
LOG_VERBOSE
, "Test WRITEVERIFY16 1-256 blocksát LBA==-1");

60 
i
 = 1; i <= 256; i++) {

61 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

64 
	`WRITEVERIFY16
(
sd
, -1,

65 
i
 * 
block_size
, block_size, 0, 0, 1, 0, 
s¸©ch
,

66 
EXPECT_LBA_OOB
);

69 
	`loggög
(
LOG_VERBOSE
, "Test WRITEVERIFY16 2-256 blocksáll but one block beyondÅheÉnd");

70 
i
 = 2; i <= 256; i++) {

71 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

74 
	`WRITEVERIFY16
(
sd
, 
num_blocks
 - 1,

75 
i
 * 
block_size
, block_size, 0, 0, 1, 0, 
s¸©ch
,

76 
EXPECT_LBA_OOB
);

78 
	}
}

	@test-tool/test_writeverify16_dpo.c

19 
	~<°dio.h
>

20 
	~<°dlib.h
>

21 
	~<°rög.h
>

23 
	~<CUnô/CUnô.h
>

25 
	~"iscsi.h
"

26 
	~"scsi-lowÀvñ.h
"

27 
	~"iscsi-ã°-cu.h
"

30 
	$ã°_wrôevîify16_dpo
()

32 
dpofua
, 
ußge_d©a_dpo
;

33 
scsi_èsk
 *
ms_èsk
 = 
NULL
;

34 
scsi_mode_£n£
 *
ms
;

35 
scsi_èsk
 *
rso_èsk
 = 
NULL
;

36 
scsi_ªp‹t_suµ‹ãd_›_codes_⁄e_comm™d
 *
rsoc
;

38 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

39 
	`loggög
(
LOG_VERBOSE
, "Test WRITEVERIFY16 DPO flag");

41 
CHECK_FOR_SBC
;

43 
	`READ10
(
sd
, 
NULL
, 0, 
block_size
, block_size, 0, 0, 0, 0, 0, 
s¸©ch
,

44 
EXPECT_STATUS_GOOD
);

46 
	`loggög
(
LOG_VERBOSE
, "ReadÅhe DPOFUA flag from mode sense data");

47 
	`MODESENSE6
(
sd
, &
ms_èsk
, 0, 
SCSI_MODESENSE_PC_CURRENT
,

48 
SCSI_MODEPAGE_RETURN_ALL_PAGES
, 0, 255,

49 
EXPECT_STATUS_GOOD
);

51 
	`loggög
(
LOG_VERBOSE
, "[SUCCESS] Mode senseÑeturned status GOOD");

52 
ms
 = 
	`scsi_d©aö_unm¨shÆl
(
ms_èsk
);

53 
dpofua
 = 
ms
 && (ms->
devi˚_•ecific_∑ømëî
 & 0x10);

54 
	`scsi_‰ì_scsi_èsk
(
ms_èsk
);

56 i‡(
dpofua
) {

57 
	`loggög
(
LOG_VERBOSE
, "DPOFUA flag is set. Device shouldállow "

60 
	`loggög
(
LOG_VERBOSE
, "DPOFUA flag is clear. Device should fail "

64 
	`loggög
(
LOG_VERBOSE
, "Test WRITEVERIFY16 with DPO==1");

65 
	`mem£t
(
s¸©ch
, 0xa6, 
block_size
);

66 i‡(
dpofua
) {

67 
	`WRITEVERIFY16
(
sd
, 0, 
block_size
,

68 
block_size
, 0, 1, 1, 0, 
s¸©ch
,

69 
EXPECT_STATUS_GOOD
);

71 
	`WRITEVERIFY16
(
sd
, 0, 
block_size
,

72 
block_size
, 0, 1, 1, 0, 
s¸©ch
,

73 
EXPECT_INVALID_FIELD_IN_CDB
);

76 
	`loggög
(
LOG_VERBOSE
, "Try fetching REPORT_SUPPORTED_OPCODES "

78 
	`REPORT_SUPPORTED_OPCODES
(
sd
, &
rso_èsk
,

79 0, 
SCSI_REPORT_SUPPORTING_OPCODE
,

80 
SCSI_OPCODE_WRITE_VERIFY16
,

83 
EXPECT_STATUS_GOOD
);

85 
	`loggög
(
LOG_VERBOSE
, "UnmarshallÅhe DATA-IN buffer");

86 
rsoc
 = 
	`scsi_d©aö_unm¨shÆl
(
rso_èsk
);

87 
	`CU_ASSERT_PTR_NOT_NULL_FATAL
(
rsoc
);

89 
ußge_d©a_dpo
 = 
rsoc
 ?Ñsoc->
cdb_ußge_d©a
[1] & 0x10 : -1;

90 i‡(
dpofua
) {

91 
	`loggög
(
LOG_VERBOSE
, "DPOFUA is set. VerifyÅhe DPO flag "

93 
	`CU_ASSERT_EQUAL
(
ußge_d©a_dpo
, 0x10);

95 
	`loggög
(
LOG_VERBOSE
, "DPOFUA is clear. VerifyÅhe DPO "

97 
	`CU_ASSERT_EQUAL
(
ußge_d©a_dpo
, 0x00);

100 
	`scsi_‰ì_scsi_èsk
(
rso_èsk
);

101 
	}
}

	@test-tool/test_writeverify16_flags.c

19 
	~<°dio.h
>

20 
	~<°dlib.h
>

21 
	~<°rög.h
>

22 
	~<°dlib.h
>

24 
	~<CUnô/CUnô.h
>

26 
	~"iscsi.h
"

27 
	~"scsi-lowÀvñ.h
"

28 
	~"iscsi-ã°-cu.h
"

31 
	$ã°_wrôevîify16_Êags
()

33 
CHECK_FOR_DATALOSS
;

35 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

36 
	`loggög
(
LOG_VERBOSE
, "Test WRITEVERIFY16 flags");

39 
	`loggög
(
LOG_VERBOSE
, "Test WRITEVERIFY16 with BYTCHK==1");

40 
	`mem£t
(
s¸©ch
, 0xa6, 
block_size
);

41 
	`WRITEVERIFY16
(
sd
, 0, 
block_size
, block_size, 0, 0, 1, 0, 
s¸©ch
,

42 
EXPECT_STATUS_GOOD
);

43 
	}
}

	@test-tool/test_writeverify16_residuals.c

19 
	~<°dio.h
>

20 
	~<°dlib.h
>

21 
	~<°rög.h
>

23 
	~<CUnô/CUnô.h
>

25 
	~"iscsi.h
"

26 
	~"iscsi-¥iv©e.h
"

27 
	~"scsi-lowÀvñ.h
"

28 
	~"iscsi-ã°-cu.h
"

32 
	$ã°_wrôevîify16_ªsiduÆs
()

34 
scsi_èsk
 *
èsk_ªt
;

35 
buf
[10000];

36 
iscsi_d©a
 
d©a
;

37 
ok
;

38 
i
;

40 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

41 
	`loggög
(
LOG_VERBOSE
, "Test WRITEVERIFY16 commands withÑesiduals");

42 
	`loggög
(
LOG_VERBOSE
, "Block sizêi†%zu", 
block_size
);

44 
CHECK_FOR_DATALOSS
;

45 
CHECK_FOR_SBC
;

47 i‡(
sd
->
iscsi_˘x
 =
NULL
) {

48 c⁄° *
îr
 = "[SKIPPED] This WRITEVERIFY16Åest is only "

50 
	`loggög
(
LOG_NORMAL
, "%s", 
îr
);

51 
	`CU_PASS
(
îr
);

56 
	`WRITEVERIFY16
(
sd
, 0, 0, 
block_size
, 0, 0, 1, 0, 
NULL
,

57 
EXPECT_STATUS_GOOD
);

59 i‡(
sd
->
iscsi_˘x
 =
NULL
) {

60 c⁄° *
îr
 = "[SKIPPED] WRITEVERIFY16Åestsáre only "

62 
	`loggög
(
LOG_NORMAL
, "%s", 
îr
);

63 
	`CU_PASS
(
îr
);

68 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

69 
	`CU_ASSERT_PTR_NOT_NULL_FATAL
(
èsk
);

71 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

72 
èsk
->
cdb
[0] = 
SCSI_OPCODE_WRITE_VERIFY16
;

73 
èsk
->
cdb
[13] = 1;

74 
èsk
->
cdb_size
 = 16;

75 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

76 
èsk
->
expx„æí
 = 0;

82 
	`iscsi_£t_nﬂut‹ec⁄√˘
(
sd
->
iscsi_˘x
, 1);

84 
	`loggög
(
LOG_VERBOSE
, "Try writing one block but with iSCSIÉxpectedÅransferÜength==0");

86 
èsk_ªt
 = 
	`iscsi_scsi_comm™d_sync
(
sd
->
iscsi_˘x
, sd->
iscsi_lun
, 
èsk
, 
NULL
);

87 
	`CU_ASSERT_PTR_NOT_NULL_FATAL
(
èsk_ªt
);

88 
	`CU_ASSERT_NOT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_CANCELLED
);

90 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


91 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST


92 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
) {

93 
	`loggög
(
LOG_NORMAL
, "[SKIPPED] WRITEVERIFY16 isÇot implemented.");

94 
	`CU_PASS
("WRITEVERIFY16 isÇot implemented.");

97 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅheÅargetÑeturned SUCCESS");

98 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

99 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturnedÉrror %s",

100 
	`iscsi_gë_îr‹
(
sd
->
iscsi_˘x
));

102 
	`CU_ASSERT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_GOOD
);

104 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesidual overflow flag is set");

105 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_OVERFLOW
) {

106 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot setÑesidual "

109 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ_°©us
, 
SCSI_RESIDUAL_OVERFLOW
);

111 
	`loggög
(
LOG_VERBOSE
, "Verify we got %zu bytes ofÑesidual overflow",

112 
block_size
);

113 i‡(
èsk
->
ªsiduÆ
 !
block_size
) {

114 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot set correct "

116 
block_size
, 
èsk
->
ªsiduÆ
);

118 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ
, 
block_size
);

119 
	`scsi_‰ì_scsi_èsk
(
èsk
);

120 
èsk
 = 
NULL
;

123 
	`iscsi_£t_nﬂut‹ec⁄√˘
(
sd
->
iscsi_˘x
, 0);

126 
	`loggög
(
LOG_VERBOSE
, "Try writing one block but with iSCSIÉxpectedÅransferÜength==10000");

127 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

128 
	`CU_ASSERT_PTR_NOT_NULL_FATAL
(
èsk
);

130 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

131 
èsk
->
cdb
[0] = 
SCSI_OPCODE_WRITE_VERIFY16
;

132 
èsk
->
cdb
[13] = 1;

133 
èsk
->
cdb_size
 = 16;

134 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

135 
èsk
->
expx„æí
 = 10000;

137 
	`mem£t
(
buf
, 0xa6, (buf));

138 
d©a
.
size
 = 
èsk
->
expx„æí
;

139 
d©a
.d©®&
buf
[0];

140 
èsk_ªt
 = 
	`iscsi_scsi_comm™d_sync
(
sd
->
iscsi_˘x
, sd->
iscsi_lun
, 
èsk
, &
d©a
);

141 
	`CU_ASSERT_PTR_NOT_NULL_FATAL
(
èsk_ªt
);

143 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅheÅargetÑeturned SUCCESS");

144 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

145 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturnedÉrror %s",

146 
	`iscsi_gë_îr‹
(
sd
->
iscsi_˘x
));

148 
	`CU_ASSERT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_GOOD
);

150 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesidual underflow flag is set");

151 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_UNDERFLOW
) {

152 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot setÑesidual "

155 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ_°©us
, 
SCSI_RESIDUAL_UNDERFLOW
);

157 
	`loggög
(
LOG_VERBOSE
, "Verify we got %zu bytes ofÑesidual underflow",

158 10000 - 
block_size
);

159 i‡(
èsk
->
ªsiduÆ
 !10000 - 
block_size
) {

160 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot set correct "

162 10000 - 
block_size
, 
èsk
->
ªsiduÆ
);

164 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ
, 10000 - 
block_size
);

165 
	`scsi_‰ì_scsi_èsk
(
èsk
);

166 
èsk
 = 
NULL
;

169 
	`loggög
(
LOG_VERBOSE
, "Try writing one block but with iSCSIÉxpectedÅransferÜength==200");

170 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

171 
	`CU_ASSERT_PTR_NOT_NULL_FATAL
(
èsk
);

173 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

174 
èsk
->
cdb
[0] = 
SCSI_OPCODE_WRITE_VERIFY16
;

175 
èsk
->
cdb
[13] = 1;

176 
èsk
->
cdb_size
 = 16;

177 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

178 
èsk
->
expx„æí
 = 200;

180 
d©a
.
size
 = 
èsk
->
expx„æí
;

181 
d©a
.d©®&
buf
[0];

182 
èsk_ªt
 = 
	`iscsi_scsi_comm™d_sync
(
sd
->
iscsi_˘x
, sd->
iscsi_lun
, 
èsk
, &
d©a
);

183 
	`CU_ASSERT_PTR_NOT_NULL_FATAL
(
èsk_ªt
);

185 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅheÅargetÑeturned SUCCESS");

186 
ok
 = 
èsk
->
°©us
 =
SCSI_STATUS_GOOD
 ||

187 (
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION
 &&

188 
èsk
->
£n£
.
key
 =
SCSI_SENSE_ILLEGAL_REQUEST
 &&

189 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_INVALID_FIELD_IN_INFORMATION_UNIT
);

190 i‡(!
ok
) {

191 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturnedÉrror %s",

192 
	`iscsi_gë_îr‹
(
sd
->
iscsi_˘x
));

194 
	`CU_ASSERT
(
ok
);

196 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesidual overflow flag is set");

197 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_OVERFLOW
) {

198 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot setÑesidual "

201 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ_°©us
, 
SCSI_RESIDUAL_OVERFLOW
);

203 
	`loggög
(
LOG_VERBOSE
, "Verify we got %zu bytes ofÑesidual overflow",

204 
block_size
 - 200);

205 i‡(
èsk
->
ªsiduÆ
 !
block_size
 - 200) {

206 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot set correct "

208 
block_size
 - 200, 
èsk
->
ªsiduÆ
);

210 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ
, 
block_size
 - 200);

212 
	`scsi_‰ì_scsi_èsk
(
èsk
);

213 
èsk
 = 
NULL
;

217 
	`loggög
(
LOG_VERBOSE
, "Try writingÅwo blocks but iSCSIÉxpected "

218 "å™s„∏Àngth==%zu (==⁄êblock)", 
block_size
);

219 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

220 
	`CU_ASSERT_PTR_NOT_NULL_FATAL
(
èsk
);

222 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

223 
èsk
->
cdb
[0] = 
SCSI_OPCODE_WRITE_VERIFY16
;

224 
èsk
->
cdb
[13] = 2;

225 
èsk
->
cdb_size
 = 16;

226 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

227 
èsk
->
expx„æí
 = 
block_size
;

229 
d©a
.
size
 = 
èsk
->
expx„æí
;

230 
d©a
.d©®&
buf
[0];

231 
èsk_ªt
 = 
	`iscsi_scsi_comm™d_sync
(
sd
->
iscsi_˘x
, sd->
iscsi_lun
, 
èsk
, &
d©a
);

232 
	`CU_ASSERT_PTR_NOT_NULL_FATAL
(
èsk_ªt
);

234 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅheÅargetÑeturned SUCCESS");

235 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

236 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturnedÉrror %s",

237 
	`iscsi_gë_îr‹
(
sd
->
iscsi_˘x
));

239 
	`CU_ASSERT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_GOOD
);

241 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesidual overflow flag is set");

242 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_OVERFLOW
) {

243 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot setÑesidual "

246 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ_°©us
, 
SCSI_RESIDUAL_OVERFLOW
);

248 
	`loggög
(
LOG_VERBOSE
, "Verify we got one block ofÑesidual overflow");

249 i‡(
èsk
->
ªsiduÆ
 !
block_size
) {

250 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot set correct "

252 
block_size
, 
èsk
->
ªsiduÆ
);

254 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ
, 
block_size
);

256 
	`scsi_‰ì_scsi_èsk
(
èsk
);

257 
èsk
 = 
NULL
;

260 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhat if iSCSI EDTL > SCSI TLÅhen we only write SCSI TLámount of data");

262 
	`loggög
(
LOG_VERBOSE
, "WriteÅwo blocks of 'a'");

263 
	`mem£t
(
buf
, 'a', 10000);

264 
	`WRITE16
(
sd
, 0, 2 * 
block_size
, block_size, 0, 0, 0, 0, 0, 
buf
,

265 
EXPECT_STATUS_GOOD
);

267 
	`loggög
(
LOG_VERBOSE
, "Write one block of 'b' but set iSCSI EDTLÅo 2 blocks.");

268 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

269 
	`CU_ASSERT_PTR_NOT_NULL_FATAL
(
èsk
);

271 
	`mem£t
(
buf
, 'b', 10000);

273 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

274 
èsk
->
cdb
[0] = 
SCSI_OPCODE_WRITE_VERIFY16
;

275 
èsk
->
cdb
[13] = 1;

276 
èsk
->
cdb_size
 = 16;

277 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

278 
èsk
->
expx„æí
 = 2 * 
block_size
;

280 
d©a
.
size
 = 
èsk
->
expx„æí
;

281 
d©a
.d©®&
buf
[0];

282 
èsk_ªt
 = 
	`iscsi_scsi_comm™d_sync
(
sd
->
iscsi_˘x
, sd->
iscsi_lun
, 
èsk
, &
d©a
);

283 
	`CU_ASSERT_PTR_NOT_NULL_FATAL
(
èsk_ªt
);

285 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅheÅargetÑeturned SUCCESS");

286 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

287 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturnedÉrror %s",

288 
	`iscsi_gë_îr‹
(
sd
->
iscsi_˘x
));

290 
	`CU_ASSERT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_GOOD
);

292 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesidual underflow flag is set");

293 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_UNDERFLOW
) {

294 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot setÑesidual "

297 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ_°©us
, 
SCSI_RESIDUAL_UNDERFLOW
);

299 
	`loggög
(
LOG_VERBOSE
, "Verify we got one block ofÑesidual underflow");

300 i‡(
èsk
->
ªsiduÆ
 !
block_size
) {

301 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot set correct "

303 
block_size
, 
èsk
->
ªsiduÆ
);

305 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ
, 
block_size
);

306 
	`scsi_‰ì_scsi_èsk
(
èsk
);

307 
èsk
 = 
NULL
;

309 
	`loggög
(
LOG_VERBOSE
, "ReadÅheÅwo blocks");

310 
	`READ16
(
sd
, 
NULL
, 0, 2* 
block_size
, block_size, 0, 0, 0, 0, 0, 
buf
,

311 
EXPECT_STATUS_GOOD
);

313 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅhe first block was changedÅo 'b'");

314 
i
 = 0; i < 
block_size
; i++) {

315 i‡(
buf
[
i
] != 'b') {

316 
	`loggög
(
LOG_NORMAL
, "First block didÇot containÉxpected 'b'");

317 
	`CU_FAIL
("Block wasÇot written correctly");

322 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅhe second block was NOT overwrittenánd still contains 'a'");

323 
i
 = 
block_size
; i < 2 * block_size; i++) {

324 i‡(
buf
[
i
] != 'a') {

325 
	`loggög
(
LOG_NORMAL
, "Second block was overwrittenándÇoÜonger contain 'a'");

326 
	`CU_FAIL
("Second block was incorrectly overwritten");

332 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhat if iSCSI EDTL < SCSI TLÅhen we only write iSCSI EDTLámount of data");

334 
	`loggög
(
LOG_VERBOSE
, "WriteÅwo blocks of 'a'");

335 
	`mem£t
(
buf
, 'a', 10000);

336 
	`WRITE16
(
sd
, 0, 2 * 
block_size
, block_size, 0, 0, 0, 0, 0, 
buf
,

337 
EXPECT_STATUS_GOOD
);

339 
	`loggög
(
LOG_VERBOSE
, "WriteÅwo blocks of 'b' but set iSCSI EDTLÅo 1 blocks.");

340 
èsk
 = 
	`mÆloc
((
scsi_èsk
));

341 
	`CU_ASSERT_PTR_NOT_NULL_FATAL
(
èsk
);

343 
	`mem£t
(
buf
, 'b', 10000);

345 
	`mem£t
(
èsk
, 0, (
scsi_èsk
));

346 
èsk
->
cdb
[0] = 
SCSI_OPCODE_WRITE_VERIFY16
;

347 
èsk
->
cdb
[13] = 2;

348 
èsk
->
cdb_size
 = 16;

349 
èsk
->
x„r_dú
 = 
SCSI_XFER_WRITE
;

350 
èsk
->
expx„æí
 = 
block_size
;

352 
d©a
.
size
 = 
èsk
->
expx„æí
;

353 
d©a
.d©®&
buf
[0];

354 
èsk_ªt
 = 
	`iscsi_scsi_comm™d_sync
(
sd
->
iscsi_˘x
, sd->
iscsi_lun
, 
èsk
, &
d©a
);

355 
	`CU_ASSERT_PTR_NOT_NULL_FATAL
(
èsk_ªt
);

357 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅheÅargetÑeturned SUCCESS");

358 i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

359 
	`loggög
(
LOG_VERBOSE
, "[FAILED] TargetÑeturnedÉrror %s",

360 
	`iscsi_gë_îr‹
(
sd
->
iscsi_˘x
));

362 
	`CU_ASSERT_EQUAL
(
èsk
->
°©us
, 
SCSI_STATUS_GOOD
);

364 
	`loggög
(
LOG_VERBOSE
, "VerifyÑesidual overflow flag is set");

365 i‡(
èsk
->
ªsiduÆ_°©us
 !
SCSI_RESIDUAL_OVERFLOW
) {

366 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot setÑesidual "

369 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ_°©us
, 
SCSI_RESIDUAL_OVERFLOW
);

371 
	`loggög
(
LOG_VERBOSE
, "Verify we got one block ofÑesidual overflow");

372 i‡(
èsk
->
ªsiduÆ
 !
block_size
) {

373 
	`loggög
(
LOG_VERBOSE
, "[FAILED] Target didÇot set correct "

375 
block_size
, 
èsk
->
ªsiduÆ
);

377 
	`CU_ASSERT_EQUAL
(
èsk
->
ªsiduÆ
, 
block_size
);

378 
	`scsi_‰ì_scsi_èsk
(
èsk
);

379 
èsk
 = 
NULL
;

381 
	`loggög
(
LOG_VERBOSE
, "ReadÅheÅwo blocks");

382 
	`READ16
(
sd
, 
NULL
, 0, 2* 
block_size
, block_size, 0, 0, 0, 0, 0, 
buf
,

383 
EXPECT_STATUS_GOOD
);

385 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅhe first block was changedÅo 'b'");

386 
i
 = 0; i < 
block_size
; i++) {

387 i‡(
buf
[
i
] != 'b') {

388 
	`loggög
(
LOG_NORMAL
, "First block didÇot containÉxpected 'b'");

389 
	`CU_FAIL
("Block wasÇot written correctly");

394 
	`loggög
(
LOG_VERBOSE
, "VerifyÅhatÅhe second block was NOT overwrittenánd still contains 'a'");

395 
i
 = 
block_size
; i < 2 * block_size; i++) {

396 i‡(
buf
[
i
] != 'a') {

397 
	`loggög
(
LOG_NORMAL
, "Second block was overwrittenándÇoÜonger contain 'a'");

398 
	`CU_FAIL
("Second block was incorrectly overwritten");

402 
	}
}

	@test-tool/test_writeverify16_simple.c

19 
	~<°dio.h
>

20 
	~<°dlib.h
>

22 
	~<CUnô/CUnô.h
>

24 
	~"iscsi.h
"

25 
	~"scsi-lowÀvñ.h
"

26 
	~"iscsi-suµ‹t.h
"

27 
	~"iscsi-ã°-cu.h
"

31 
	$ã°_wrôevîify16_sim∂e
()

33 
i
;

35 
CHECK_FOR_DATALOSS
;

36 
CHECK_FOR_SBC
;

38 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

39 
	`loggög
(
LOG_VERBOSE
, "Test WRITEVERIFY16 of 1-256 blocksátÅhe start ofÅhe LUN");

40 
	`mem£t
(
s¸©ch
, 0xa6, 256 * 
block_size
);

41 
i
 = 1; i <= 256; i++) {

42 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

45 
	`WRITEVERIFY16
(
sd
, 0, 
i
 * 
block_size
,

46 
block_size
, 0, 0, 1, 0, 
s¸©ch
,

47 
EXPECT_STATUS_GOOD
);

50 
	`loggög
(
LOG_VERBOSE
, "Test WRITEVERIFY16 of 1-256 blocksátÅheÉnd ofÅhe LUN");

51 
i
 = 1; i <= 256; i++) {

52 i‡(
maximum_å™s„r_Àngth
 && maximum_å™s„r_Àngth < 
i
) {

55 
	`WRITEVERIFY16
(
sd
, 
num_blocks
 - 
i
,

56 
i
 * 
block_size
, block_size, 0, 0, 1, 0, 
s¸©ch
,

57 
EXPECT_STATUS_GOOD
);

59 
	}
}

	@test-tool/test_writeverify16_wrprotect.c

19 
	~<°dio.h
>

20 
	~<°dlib.h
>

21 
	~<°rög.h
>

22 
	~<°dlib.h
>

24 
	~<CUnô/CUnô.h
>

26 
	~"iscsi.h
"

27 
	~"scsi-lowÀvñ.h
"

28 
	~"iscsi-ã°-cu.h
"

32 
	$ã°_wrôevîify16_wΩrŸe˘
()

34 
i
;

39 
	`loggög
(
LOG_VERBOSE
, 
LOG_BLANK_LINE
);

40 
	`loggög
(
LOG_VERBOSE
, "Test WRITEVERIFY16 withÇon-zero WRPROTECT");

42 
CHECK_FOR_DATALOSS
;

43 
CHECK_FOR_SBC
;

45 
	`mem£t
(
s¸©ch
, 0xa6, 
block_size
);

46 i‡(!
öq
->
¥Ÿe˘
 || (
rc16
 !
NULL
 && !rc16->
¥Ÿ_í
)) {

47 
	`loggög
(
LOG_VERBOSE
, "Device doesÇot support/useÖrotection information. All commands should fail.");

48 
i
 = 1; i < 8; i++) {

49 
	`WRITEVERIFY16
(
sd
, 0, 
block_size
, block_size,

50 
i
, 0, 0, 0, 
s¸©ch
,

51 
EXPECT_INVALID_FIELD_IN_CDB
);

56 
	`loggög
(
LOG_NORMAL
, "NoÅests for devicesÅhat supportÖrotection information yet.");

57 
	}
}

	@tests/prog_header_digest.c

18 #ifde‡
HAVE_CONFIG_H


19 
	~"c⁄fig.h
"

22 #ifde‡
HAVE_POLL_H


23 
	~<pﬁl.h
>

26 #ifde‡
HAVE_UNISTD_H


27 
	~<uni°d.h
>

30 
	~<gë›t.h
>

31 
	~<°dio.h
>

32 
	~<°dlib.h
>

33 
	~<°döt.h
>

34 
	~<°rög.h
>

35 
	~<sys/time.h
>

37 
	~"iscsi.h
"

38 
	~"iscsi-¥iv©e.h
"

39 
	~"scsi-lowÀvñ.h
"

41 #i‚de‡
disˇrd_c⁄°


42 
	#disˇrd_c⁄°
(
±r
Ë((*)((
öçå_t
)’å)))

	)

45 c⁄° *
	göôüt‹
 = "iqn.2007-10.com.github:sahlberg:libiscsi:prog-header-digest";

47 
	s˛õ¡_°©e
 {

48 
	mföished
;

49 
	m°©us
;

50 
	mlun
;

53 
	#TIMER_START
(
x
Ë
	`gëtimeofday
(&x, 
NULL
)

	)

54 
	#TIMER_ELAPSED
(
x
, 
y
) do { \

55 
timevÆ
 
t
; \

56 
wøp
 = 0; \

57 
	`gëtimeofday
(&
t
, 
NULL
); \

58 i‡(
t
.
tv_u£c
 < 
x
.tv_u£cË
wøp
 = 1; \

59 
y
.
tv_£c
 = 
t
.tv_£¯- 
x
.tv_£¯- 
wøp
; \

60 
y
.
tv_u£c
 = 
wøp
 * 10000000 + 
t
.tv_u£¯- 
x
.tv_usec; \

61 } 0)

	)

63 
	$evít_lo›
(
iscsi_c⁄ãxt
 *
iscsi
, 
˛õ¡_°©e
 *
°©e
,

64 
timeout
)

66 
pﬁlfd
 
pfd
;

67 
timevÆ
 
°¨t_time
, 
ñ≠£d_time
;

69 
	`TIMER_START
(
°¨t_time
);

70 
°©e
->
föished
 == 0) {

71 
pfd
.
fd
 = 
	`iscsi_gë_fd
(
iscsi
);

72 
pfd
.
evíts
 = 
	`iscsi_which_evíts
(
iscsi
);

74 i‡(
	`pﬁl
(&
pfd
, 1, 1000) < 0) {

75 
	`Ârötf
(
°dîr
, "Poll failed");

76 
	`exô
(10);

78 i‡(
	`iscsi_£rvi˚
(
iscsi
, 
pfd
.
ªvíts
) < 0) {

79 
	`Ârötf
(
°dîr
, "iscsi_service failed with : %s\n",

80 
	`iscsi_gë_îr‹
(
iscsi
));

81 
	`exô
(10);

83 
	`TIMER_ELAPSED
(
°¨t_time
, 
ñ≠£d_time
);

84 i‡(
timeout
 && 
ñ≠£d_time
.
tv_£c
 >Åimeout) {

88 
	}
}

90 
	$tur_cb
(
iscsi_c⁄ãxt
 *
iscsi
 
_U_
, 
°©us
,

91 *
comm™d_d©a
 
_U_
, *
¥iv©e_d©a
)

93 
˛õ¡_°©e
 *
°©e
 = (˛õ¡_°©ê*)
¥iv©e_d©a
;

95 i‡(
°©us
 != 0) {

96 
	`Ârötf
(
°dîr
, "TestUnitReady failed\n");

97 
°©e
->
°©us
 = status;

100 
°©e
->
föished
 = 1;

101 
	}
}

103 
	$¥öt_ußge
()

105 
	`Ârötf
(
°dîr
, "Usage:Örog_header_digest [-?|--help] [--usage] "

108 
	`Ârötf
(
°dîr
, "\n");

109 
	`Ârötf
(
°dîr
, "This command is usedÅoÅestÅhat ifÅheÅarget "

112 
	}
}

114 
	$¥öt_hñp
()

116 
	`Ârötf
(
°dîr
, "Usage:Örog_header_digest [OPTION...] <iscsi-url>\n");

117 
	`Ârötf
(
°dîr
, " -i, --initiator-name=iqn-name "

119 
	`Ârötf
(
°dîr
, "\n");

120 
	`Ârötf
(
°dîr
, "Help options:\n");

121 
	`Ârötf
(
°dîr
, " -?, --help "

123 
	`Ârötf
(
°dîr
, " --usage "

125 
	`Ârötf
(
°dîr
, "\n");

126 
	`Ârötf
(
°dîr
, "iSCSI Portal URL format : %s\n",

127 
ISCSI_PORTAL_URL_SYNTAX
);

128 
	`Ârötf
(
°dîr
, "\n");

129 
	`Ârötf
(
°dîr
, "<host> isÉither of:\n");

130 
	`Ârötf
(
°dîr
, " \"hostname\" iscsi.example\n");

131 
	`Ârötf
(
°dîr
, " \"ipv4-address\" 10.1.1.27\n");

132 
	`Ârötf
(
°dîr
, " \"ipv6-address\" [fce0::1]\n");

133 
	}
}

135 
	$maö
(
¨gc
, *
¨gv
[])

137 
iscsi_c⁄ãxt
 *
iscsi
;

138 
iscsi_uæ
 *iscsi_uæ = 
NULL
;

139 
˛õ¡_°©e
 
°©e
;

140 c⁄° *
uæ
 = 
NULL
;

141 
c
;

142 
show_hñp
 = 0, 
show_ußge
 = 0, 
debug
 = 0;

144 
›ti⁄
 
l⁄g_›ti⁄s
[] = {

145 {"hñp", 
no_¨gumít
, 
NULL
, 'h'},

146 {"ußge", 
no_¨gumít
, 
NULL
, 'u'},

147 {"debug", 
no_¨gumít
, 
NULL
, 'd'},

148 {"öôüt‹-«me", 
ªquúed_¨gumít
, 
NULL
, 'i'},

151 
›ti⁄_ödex
;

153 (
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "h?uUdi:s", 
l⁄g_›ti⁄s
,

154 &
›ti⁄_ödex
)) != -1) {

155 
c
) {

158 
show_hñp
 = 1;

161 
show_ußge
 = 1;

164 
debug
 = 1;

167 
öôüt‹
 = 
›èrg
;

170 
	`Ârötf
(
°dîr
, "Uƒecognized o±i⁄ '%c'\n\n", 
c
);

171 
	`¥öt_hñp
();

172 
	`exô
(0);

176 i‡(
show_hñp
 != 0) {

177 
	`¥öt_hñp
();

178 
	`exô
(0);

181 i‡(
show_ußge
 != 0) {

182 
	`¥öt_ußge
();

183 
	`exô
(0);

186 i‡(
›töd
 !
¨gc
 -1) {

187 
	`¥öt_ußge
();

188 
	`exô
(0);

191 
	`mem£t
(&
°©e
, 0, (state));

193 i‡(
¨gv
[
›töd
] !
NULL
) {

194 
uæ
 = 
	`°rdup
(
¨gv
[
›töd
]);

196 i‡(
uæ
 =
NULL
) {

197 
	`Ârötf
(
°dîr
, "You must specify iscsiÅargetÖortal.\n");

198 
	`¥öt_ußge
();

199 
	`exô
(10);

202 
iscsi
 = 
	`iscsi_¸óã_c⁄ãxt
(
öôüt‹
);

203 i‡(
iscsi
 =
NULL
) {

204 
	`¥ötf
("FailedÅo create context\n");

205 
	`exô
(10);

208 i‡(
debug
 > 0) {

209 
	`iscsi_£t_log_Àvñ
(
iscsi
, 
debug
);

210 
	`iscsi_£t_log_‚
(
iscsi
, 
iscsi_log_to_°dîr
);

213 
iscsi_uæ
 = 
	`iscsi_∑r£_fuŒ_uæ
(
iscsi
, 
uæ
);

215 i‡(
uæ
) {

216 
	`‰ì
(
	`disˇrd_c⁄°
(
uæ
));

219 i‡(
iscsi_uæ
 =
NULL
) {

220 
	`Ârötf
(
°dîr
, "FailedÅoÖarse URL: %s\n",

221 
	`iscsi_gë_îr‹
(
iscsi
));

222 
	`exô
(10);

225 
	`iscsi_£t_£ssi⁄_ty≥
(
iscsi
, 
ISCSI_SESSION_NORMAL
);

226 
	`¥ötf
("Enable Header Digest\n");

227 
	`iscsi_£t_hódî_dige°
(
iscsi
, 
ISCSI_HEADER_DIGEST_CRC32C
);

229 
	`¥ötf
("Disable iscsiÑeconnect on session failure\n");

230 
	`iscsi_£t_nﬂut‹ec⁄√˘
(
iscsi
, 1);

232 
°©e
.
lun
 = 
iscsi_uæ
->lun;

233 i‡(
	`iscsi_fuŒ_c⁄√˘_sync
(
iscsi
, 
iscsi_uæ
->
p‹èl
, iscsi_uæ->
lun
)

235 
	`Ârötf
(
°dîr
, "iscsi_connect failed. %s\n",

236 
	`iscsi_gë_îr‹
(
iscsi
));

237 
	`exô
(10);

240 
	`¥ötf
("VerifyÅhatÅhe connection works\n");

241 i‡(
	`iscsi_ã°unôªady_èsk
(
iscsi
, 
°©e
.
lun
,

242 
tur_cb
, &
°©e
Ë=
NULL
) {

243 
	`Ârötf
(
°dîr
, "testunitready failed\n");

244 
	`exô
(10);

246 
	`evít_lo›
(
iscsi
, &
°©e
, 3);

248 
	`iscsi_de°roy_uæ
(
iscsi_uæ
);

249 
	`iscsi_disc⁄√˘
(
iscsi
);

250 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

252 i‡(
°©e
.
°©us
 != 0) {

253 
	`exô
(10);

256 
	}
}

	@tests/prog_noop_reply.c

18 #ifde‡
HAVE_CONFIG_H


19 
	~"c⁄fig.h
"

22 #ifde‡
HAVE_POLL_H


23 
	~<pﬁl.h
>

26 #ifde‡
HAVE_UNISTD_H


27 
	~<uni°d.h
>

30 
	~<gë›t.h
>

31 
	~<°dio.h
>

32 
	~<°dlib.h
>

33 
	~<°döt.h
>

34 
	~<°rög.h
>

35 
	~<sys/time.h
>

37 
	~"iscsi.h
"

38 
	~"iscsi-¥iv©e.h
"

39 
	~"scsi-lowÀvñ.h
"

41 #i‚de‡
disˇrd_c⁄°


42 
	#disˇrd_c⁄°
(
±r
Ë((*)((
öçå_t
)’å)))

	)

45 c⁄° *
	göôüt‹
 = "iqn.2007-10.com.github:sahlberg:libiscsi:prog-noop-reply";

47 
	s˛õ¡_°©e
 {

48 
	mföished
;

49 
	m°©us
;

50 
	mlun
;

53 
	#TIMER_START
(
x
Ë
	`gëtimeofday
(&x, 
NULL
)

	)

54 
	#TIMER_ELAPSED
(
x
, 
y
) do { \

55 
timevÆ
 
t
; \

56 
wøp
 = 0; \

57 
	`gëtimeofday
(&
t
, 
NULL
); \

58 i‡(
t
.
tv_u£c
 < 
x
.tv_u£cË
wøp
 = 1; \

59 
y
.
tv_£c
 = 
t
.tv_£¯- 
x
.tv_£¯- 
wøp
; \

60 
y
.
tv_u£c
 = 
wøp
 * 10000000 + 
t
.tv_u£¯- 
x
.tv_usec; \

61 } 0)

	)

63 
	$evít_lo›
(
iscsi_c⁄ãxt
 *
iscsi
, 
˛õ¡_°©e
 *
°©e
,

64 
timeout
)

66 
pﬁlfd
 
pfd
;

67 
timevÆ
 
°¨t_time
, 
ñ≠£d_time
;

69 
	`TIMER_START
(
°¨t_time
);

70 
°©e
->
föished
 == 0) {

71 
pfd
.
fd
 = 
	`iscsi_gë_fd
(
iscsi
);

72 
pfd
.
evíts
 = 
	`iscsi_which_evíts
(
iscsi
);

74 i‡(
	`pﬁl
(&
pfd
, 1, 1000) < 0) {

75 
	`Ârötf
(
°dîr
, "Poll failed");

76 
	`exô
(10);

78 i‡(
	`iscsi_£rvi˚
(
iscsi
, 
pfd
.
ªvíts
) < 0) {

79 
	`Ârötf
(
°dîr
, "iscsi_service failed with : %s\n",

80 
	`iscsi_gë_îr‹
(
iscsi
));

81 
	`exô
(10);

83 
	`TIMER_ELAPSED
(
°¨t_time
, 
ñ≠£d_time
);

84 i‡(
timeout
 && 
ñ≠£d_time
.
tv_£c
 >Åimeout) {

88 
	}
}

90 
	$tur_cb
(
iscsi_c⁄ãxt
 *
iscsi
 
_U_
, 
°©us
,

91 *
comm™d_d©a
 
_U_
, *
¥iv©e_d©a
)

93 
˛õ¡_°©e
 *
°©e
 = (˛õ¡_°©ê*)
¥iv©e_d©a
;

95 i‡(
°©us
 != 0) {

96 
	`Ârötf
(
°dîr
, "TestUnitReady failed\n");

97 
°©e
->
°©us
 = status;

100 
°©e
->
föished
 = 1;

101 
	}
}

103 
	$¥öt_ußge
()

105 
	`Ârötf
(
°dîr
, "Usage:Örog_noop_reply [-?|--help] [--usage] "

108 
	`Ârötf
(
°dîr
, "\n");

109 
	`Ârötf
(
°dîr
, "This command is usedÅoÅestÅhat ifÅheÅarget "

112 
	}
}

114 
	$¥öt_hñp
()

116 
	`Ârötf
(
°dîr
, "Usage:Örog_noop_reply [OPTION...] <iscsi-url>\n");

117 
	`Ârötf
(
°dîr
, " -i, --initiator-name=iqn-name "

119 
	`Ârötf
(
°dîr
, "\n");

120 
	`Ârötf
(
°dîr
, "Help options:\n");

121 
	`Ârötf
(
°dîr
, " -?, --help "

123 
	`Ârötf
(
°dîr
, " --usage "

125 
	`Ârötf
(
°dîr
, "\n");

126 
	`Ârötf
(
°dîr
, "iSCSI Portal URL format : %s\n",

127 
ISCSI_PORTAL_URL_SYNTAX
);

128 
	`Ârötf
(
°dîr
, "\n");

129 
	`Ârötf
(
°dîr
, "<host> isÉither of:\n");

130 
	`Ârötf
(
°dîr
, " \"hostname\" iscsi.example\n");

131 
	`Ârötf
(
°dîr
, " \"ipv4-address\" 10.1.1.27\n");

132 
	`Ârötf
(
°dîr
, " \"ipv6-address\" [fce0::1]\n");

133 
	}
}

135 
	$maö
(
¨gc
, *
¨gv
[])

137 
iscsi_c⁄ãxt
 *
iscsi
;

138 
iscsi_uæ
 *iscsi_uæ = 
NULL
;

139 
˛õ¡_°©e
 
°©e
;

140 c⁄° *
uæ
 = 
NULL
;

141 
c
;

142 
show_hñp
 = 0, 
show_ußge
 = 0, 
debug
 = 0;

144 
›ti⁄
 
l⁄g_›ti⁄s
[] = {

145 {"hñp", 
no_¨gumít
, 
NULL
, 'h'},

146 {"ußge", 
no_¨gumít
, 
NULL
, 'u'},

147 {"debug", 
no_¨gumít
, 
NULL
, 'd'},

148 {"öôüt‹-«me", 
ªquúed_¨gumít
, 
NULL
, 'i'},

151 
›ti⁄_ödex
;

153 (
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "h?uUdi:s", 
l⁄g_›ti⁄s
,

154 &
›ti⁄_ödex
)) != -1) {

155 
c
) {

158 
show_hñp
 = 1;

161 
show_ußge
 = 1;

164 
debug
 = 1;

167 
öôüt‹
 = 
›èrg
;

170 
	`Ârötf
(
°dîr
, "Uƒecognized o±i⁄ '%c'\n\n", 
c
);

171 
	`¥öt_hñp
();

172 
	`exô
(0);

176 i‡(
show_hñp
 != 0) {

177 
	`¥öt_hñp
();

178 
	`exô
(0);

181 i‡(
show_ußge
 != 0) {

182 
	`¥öt_ußge
();

183 
	`exô
(0);

186 i‡(
›töd
 !
¨gc
 -1) {

187 
	`¥öt_ußge
();

188 
	`exô
(0);

191 
	`mem£t
(&
°©e
, 0, (state));

193 i‡(
¨gv
[
›töd
] !
NULL
) {

194 
uæ
 = 
	`°rdup
(
¨gv
[
›töd
]);

196 i‡(
uæ
 =
NULL
) {

197 
	`Ârötf
(
°dîr
, "You must specify iscsiÅargetÖortal.\n");

198 
	`¥öt_ußge
();

199 
	`exô
(10);

202 
iscsi
 = 
	`iscsi_¸óã_c⁄ãxt
(
öôüt‹
);

203 i‡(
iscsi
 =
NULL
) {

204 
	`¥ötf
("FailedÅo create context\n");

205 
	`exô
(10);

208 i‡(
debug
 > 0) {

209 
	`iscsi_£t_log_Àvñ
(
iscsi
, 
debug
);

210 
	`iscsi_£t_log_‚
(
iscsi
, 
iscsi_log_to_°dîr
);

213 
iscsi_uæ
 = 
	`iscsi_∑r£_fuŒ_uæ
(
iscsi
, 
uæ
);

215 i‡(
uæ
) {

216 
	`‰ì
(
	`disˇrd_c⁄°
(
uæ
));

219 i‡(
iscsi_uæ
 =
NULL
) {

220 
	`Ârötf
(
°dîr
, "FailedÅoÖarse URL: %s\n",

221 
	`iscsi_gë_îr‹
(
iscsi
));

222 
	`exô
(10);

225 
	`iscsi_£t_£ssi⁄_ty≥
(
iscsi
, 
ISCSI_SESSION_NORMAL
);

227 
°©e
.
lun
 = 
iscsi_uæ
->lun;

228 i‡(
	`iscsi_fuŒ_c⁄√˘_sync
(
iscsi
, 
iscsi_uæ
->
p‹èl
, iscsi_uæ->
lun
)

230 
	`Ârötf
(
°dîr
, "iscsi_connect failed. %s\n",

231 
	`iscsi_gë_îr‹
(
iscsi
));

232 
	`exô
(10);

235 
	`¥ötf
("Disable iscsiÑeconnect on session failure\n");

236 
	`iscsi_£t_nﬂut‹ec⁄√˘
(
iscsi
, 1);

238 
	`¥ötf
("RunÅheÉventÜoopándÑeplyÅo NOPs for 5 seconds\n");

239 
	`evít_lo›
(
iscsi
, &
°©e
, 5);

241 
	`¥ötf
("VerifyÅhatÅhe connection still works\n");

242 i‡(
	`iscsi_ã°unôªady_èsk
(
iscsi
, 
°©e
.
lun
,

243 
tur_cb
, &
°©e
Ë=
NULL
) {

244 
	`Ârötf
(
°dîr
, "testunitready failed\n");

245 
	`exô
(10);

247 
	`evít_lo›
(
iscsi
, &
°©e
, 3);

249 
	`iscsi_de°roy_uæ
(
iscsi_uæ
);

250 
	`iscsi_disc⁄√˘
(
iscsi
);

251 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

253 i‡(
°©e
.
°©us
 != 0) {

254 
	`exô
(10);

257 
	}
}

	@tests/prog_read_all_pdus.c

18 #ifde‡
HAVE_CONFIG_H


19 
	~"c⁄fig.h
"

22 #ifde‡
HAVE_POLL_H


23 
	~<pﬁl.h
>

26 #ifde‡
HAVE_UNISTD_H


27 
	~<uni°d.h
>

30 
	~<°dio.h
>

31 
	~<°dlib.h
>

32 
	~<°döt.h
>

33 
	~<°rög.h
>

34 
	~<gë›t.h
>

35 
	~"iscsi.h
"

36 
	~"scsi-lowÀvñ.h
"

38 #i‚de‡
disˇrd_c⁄°


39 
	#disˇrd_c⁄°
(
±r
Ë((*)((
öçå_t
)’å)))

	)

42 c⁄° *
	göôüt‹
 = "iqn.2007-10.com.github:sahlberg:libiscsi:prog-readwrite-iov";

44 
	$¥öt_ußge
()

46 
	`Ârötf
(
°dîr
, "Usage:Örog_read_all_pdus [-?|--help] [--usage] "

49 
	`Ârötf
(
°dîr
, "\n");

50 
	`Ârötf
(
°dîr
, "This command is usedÅoÅestÅhatá single call "

53 
	}
}

55 
	$¥öt_hñp
()

57 
	`Ârötf
(
°dîr
, "Usage:Örog_read_all_pdus [OPTION...] <iscsi-url>\n");

58 
	`Ârötf
(
°dîr
, " -i, --initiator-name=iqn-name "

60 
	`Ârötf
(
°dîr
, "\n");

61 
	`Ârötf
(
°dîr
, "Help options:\n");

62 
	`Ârötf
(
°dîr
, " -?, --help "

64 
	`Ârötf
(
°dîr
, " --usage "

66 
	`Ârötf
(
°dîr
, "\n");

67 
	`Ârötf
(
°dîr
, "iSCSI Portal URL format : %s\n",

68 
ISCSI_PORTAL_URL_SYNTAX
);

69 
	`Ârötf
(
°dîr
, "\n");

70 
	`Ârötf
(
°dîr
, "<host> isÉither of:\n");

71 
	`Ârötf
(
°dîr
, " \"hostname\" iscsi.example\n");

72 
	`Ârötf
(
°dîr
, " \"ipv4-address\" 10.1.1.27\n");

73 
	`Ârötf
(
°dîr
, " \"ipv6-address\" [fce0::1]\n");

74 
	}
}

76 
	$tur_cb
(
iscsi_c⁄ãxt
 *
iscsi
 
_U_
, 
°©us
 _U_,

77 *
comm™d_d©a
 
_U_
, *
¥iv©e_d©a
)

79 *
cou¡
 = (*)
¥iv©e_d©a
;

81 (*
cou¡
)--;

82 
	}
}

84 
	$maö
(
¨gc
, *
¨gv
[])

86 
iscsi_c⁄ãxt
 *
iscsi
;

87 
iscsi_uæ
 *iscsi_uæ = 
NULL
;

88 c⁄° *
uæ
 = 
NULL
;

89 
show_hñp
 = 0, 
show_ußge
 = 0, 
debug
 = 0;

90 
c
, 
i
, 
cou¡
;

92 
›ti⁄
 
l⁄g_›ti⁄s
[] = {

93 {"hñp", 
no_¨gumít
, 
NULL
, 'h'},

94 {"ußge", 
no_¨gumít
, 
NULL
, 'u'},

95 {"debug", 
no_¨gumít
, 
NULL
, 'd'},

96 {"öôüt‹-«me", 
ªquúed_¨gumít
, 
NULL
, 'i'},

99 
›ti⁄_ödex
;

101 (
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "h?uUdi:s", 
l⁄g_›ti⁄s
,

102 &
›ti⁄_ödex
)) != -1) {

103 
c
) {

106 
show_hñp
 = 1;

109 
show_ußge
 = 1;

112 
debug
 = 1;

115 
öôüt‹
 = 
›èrg
;

118 
	`Ârötf
(
°dîr
, "Uƒecognized o±i⁄ '%c'\n\n", 
c
);

119 
	`¥öt_hñp
();

120 
	`exô
(0);

124 i‡(
show_hñp
 != 0) {

125 
	`¥öt_hñp
();

126 
	`exô
(0);

129 i‡(
show_ußge
 != 0) {

130 
	`¥öt_ußge
();

131 
	`exô
(0);

134 i‡(
›töd
 !
¨gc
 -1) {

135 
	`¥öt_ußge
();

136 
	`exô
(0);

139 i‡(
¨gv
[
›töd
] !
NULL
) {

140 
uæ
 = 
	`°rdup
(
¨gv
[
›töd
]);

142 i‡(
uæ
 =
NULL
) {

143 
	`Ârötf
(
°dîr
, "You must specify iscsiÅargetÖortal.\n");

144 
	`¥öt_ußge
();

145 
	`exô
(10);

148 
iscsi
 = 
	`iscsi_¸óã_c⁄ãxt
(
öôüt‹
);

149 i‡(
iscsi
 =
NULL
) {

150 
	`Ârötf
(
°dîr
, "FailedÅo create context\n");

151 
	`exô
(10);

154 i‡(
debug
 > 0) {

155 
	`iscsi_£t_log_Àvñ
(
iscsi
, 
debug
);

156 
	`iscsi_£t_log_‚
(
iscsi
, 
iscsi_log_to_°dîr
);

159 
iscsi_uæ
 = 
	`iscsi_∑r£_fuŒ_uæ
(
iscsi
, 
uæ
);

161 i‡(
uæ
) {

162 
	`‰ì
(
	`disˇrd_c⁄°
(
uæ
));

165 i‡(
iscsi_uæ
 =
NULL
) {

166 
	`Ârötf
(
°dîr
, "FailedÅoÖarse URL: %s\n",

167 
	`iscsi_gë_îr‹
(
iscsi
));

168 
	`exô
(10);

171 
	`iscsi_£t_£ssi⁄_ty≥
(
iscsi
, 
ISCSI_SESSION_NORMAL
);

173 i‡(
	`iscsi_fuŒ_c⁄√˘_sync
(
iscsi
, 
iscsi_uæ
->
p‹èl
, iscsi_uæ->
lun
)

175 
	`Ârötf
(
°dîr
, "iscsi_connect failed. %s\n",

176 
	`iscsi_gë_îr‹
(
iscsi
));

177 
	`exô
(10);

182 
cou¡
 = 0;

183 
i
 = 0; i < 3; i++) {

184 
cou¡
++;

185 i‡(
	`iscsi_ã°unôªady_èsk
(
iscsi
, 
iscsi_uæ
->
lun
, 
tur_cb
,

186 &
cou¡
Ë=
NULL
) {

187 
	`¥ötf
("failedÅo sendÅestunitready command : %s\n",

188 
	`iscsi_gë_îr‹
(
iscsi
));

189 
	`exô
(10);

192 
	`iscsi_£rvi˚
(
iscsi
, 
POLLOUT
);

198 
	`¶ìp
(3);

204 
	`iscsi_£rvi˚
(
iscsi
, 
POLLIN
);

206 i‡(
cou¡
) {

207 
	`exô
(10);

211 
	}
}

	@tests/prog_readwrite_iov.c

18 #ifde‡
HAVE_CONFIG_H


19 
	~"c⁄fig.h
"

22 #ifde‡
HAVE_POLL_H


23 
	~<pﬁl.h
>

26 #ifde‡
HAVE_UNISTD_H


27 
	~<uni°d.h
>

30 
	~<°dio.h
>

31 
	~<°dlib.h
>

32 
	~<°döt.h
>

33 
	~<°rög.h
>

34 
	~<gë›t.h
>

35 
	~"iscsi.h
"

36 
	~"scsi-lowÀvñ.h
"

38 #i‚de‡
disˇrd_c⁄°


39 
	#disˇrd_c⁄°
(
±r
Ë((*)((
öçå_t
)’å)))

	)

42 c⁄° *
	göôüt‹
 = "iqn.2007-10.com.github:sahlberg:libiscsi:prog-readwrite-iov";

44 
	$¥öt_ußge
()

46 
	`Ârötf
(
°dîr
, "Usage:Örog_readwrite_iov [-?|--help] [--usage] "

49 
	`Ârötf
(
°dîr
, "\n");

50 
	`Ârötf
(
°dîr
, "This command is usedÅoÅestÑeading/writing"

52 
	}
}

54 
	$¥öt_hñp
()

56 
	`Ârötf
(
°dîr
, "Usage:Örog_readwrite_iov [OPTION...] <iscsi-url>\n");

57 
	`Ârötf
(
°dîr
, " -i, --initiator-name=iqn-name "

59 
	`Ârötf
(
°dîr
, "\n");

60 
	`Ârötf
(
°dîr
, "Help options:\n");

61 
	`Ârötf
(
°dîr
, " -?, --help "

63 
	`Ârötf
(
°dîr
, " --usage "

65 
	`Ârötf
(
°dîr
, "\n");

66 
	`Ârötf
(
°dîr
, "iSCSI Portal URL format : %s\n",

67 
ISCSI_PORTAL_URL_SYNTAX
);

68 
	`Ârötf
(
°dîr
, "\n");

69 
	`Ârötf
(
°dîr
, "<host> isÉither of:\n");

70 
	`Ârötf
(
°dîr
, " \"hostname\" iscsi.example\n");

71 
	`Ârötf
(
°dîr
, " \"ipv4-address\" 10.1.1.27\n");

72 
	`Ârötf
(
°dîr
, " \"ipv6-address\" [fce0::1]\n");

73 
	}
}

75 
	$maö
(
¨gc
, *
¨gv
[])

77 
iscsi_c⁄ãxt
 *
iscsi
;

78 
iscsi_uæ
 *iscsi_uæ = 
NULL
;

79 c⁄° *
uæ
 = 
NULL
;

80 
show_hñp
 = 0, 
show_ußge
 = 0, 
debug
 = 0;

81 
scsi_èsk
 *
èsk
;

82 
scsi_iovec
 
iov
[4];

83 
i
;

84 
c
;

85 *
d©a
;

86 
scsi_ªadˇ∑côy10
 *
rc10
;

88 
›ti⁄
 
l⁄g_›ti⁄s
[] = {

89 {"hñp", 
no_¨gumít
, 
NULL
, 'h'},

90 {"ußge", 
no_¨gumít
, 
NULL
, 'u'},

91 {"debug", 
no_¨gumít
, 
NULL
, 'd'},

92 {"öôüt‹-«me", 
ªquúed_¨gumít
, 
NULL
, 'i'},

95 
›ti⁄_ödex
;

97 (
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "h?uUdi:s", 
l⁄g_›ti⁄s
,

98 &
›ti⁄_ödex
)) != -1) {

99 
c
) {

102 
show_hñp
 = 1;

105 
show_ußge
 = 1;

108 
debug
 = 1;

111 
öôüt‹
 = 
›èrg
;

114 
	`Ârötf
(
°dîr
, "Uƒecognized o±i⁄ '%c'\n\n", 
c
);

115 
	`¥öt_hñp
();

116 
	`exô
(0);

120 i‡(
show_hñp
 != 0) {

121 
	`¥öt_hñp
();

122 
	`exô
(0);

125 i‡(
show_ußge
 != 0) {

126 
	`¥öt_ußge
();

127 
	`exô
(0);

130 i‡(
›töd
 !
¨gc
 -1) {

131 
	`¥öt_ußge
();

132 
	`exô
(0);

135 i‡(
¨gv
[
›töd
] !
NULL
) {

136 
uæ
 = 
	`°rdup
(
¨gv
[
›töd
]);

138 i‡(
uæ
 =
NULL
) {

139 
	`Ârötf
(
°dîr
, "You must specify iscsiÅargetÖortal.\n");

140 
	`¥öt_ußge
();

141 
	`exô
(10);

144 
iscsi
 = 
	`iscsi_¸óã_c⁄ãxt
(
öôüt‹
);

145 i‡(
iscsi
 =
NULL
) {

146 
	`Ârötf
(
°dîr
, "FailedÅo create context\n");

147 
	`exô
(10);

150 i‡(
debug
 > 0) {

151 
	`iscsi_£t_log_Àvñ
(
iscsi
, 
debug
);

152 
	`iscsi_£t_log_‚
(
iscsi
, 
iscsi_log_to_°dîr
);

155 
iscsi_uæ
 = 
	`iscsi_∑r£_fuŒ_uæ
(
iscsi
, 
uæ
);

157 i‡(
uæ
) {

158 
	`‰ì
(
	`disˇrd_c⁄°
(
uæ
));

161 i‡(
iscsi_uæ
 =
NULL
) {

162 
	`Ârötf
(
°dîr
, "FailedÅoÖarse URL: %s\n",

163 
	`iscsi_gë_îr‹
(
iscsi
));

164 
	`exô
(10);

167 
	`iscsi_£t_£ssi⁄_ty≥
(
iscsi
, 
ISCSI_SESSION_NORMAL
);

169 i‡(
	`iscsi_fuŒ_c⁄√˘_sync
(
iscsi
, 
iscsi_uæ
->
p‹èl
, iscsi_uæ->
lun
)

171 
	`Ârötf
(
°dîr
, "iscsi_connect failed. %s\n",

172 
	`iscsi_gë_îr‹
(
iscsi
));

173 
	`exô
(10);

176 
èsk
 = 
	`iscsi_ªadˇ∑côy10_sync
(
iscsi
, 
iscsi_uæ
->
lun
, 0, 0);

177 i‡(
èsk
 =
NULL
 ||Åask->
°©us
 !
SCSI_STATUS_GOOD
) {

178 
	`Ârötf
(
°dîr
, "failedÅo sendÑeadcapacity command\n");

179 
	`exô
(10);

181 
rc10
 = 
	`scsi_d©aö_unm¨shÆl
(
èsk
);

182 i‡(
rc10
 =
NULL
 ||Ñc10->
block_size
 == 0) {

183 
	`Ârötf
(
°dîr
, "failedÅo unmarshallÑeadcapacity10 data\n");

184 
	`exô
(10);

186 
d©a
 = 
	`mÆloc
(
rc10
->
block_size
);

189 
i
 = 0; i < 
rc10
->
block_size
; i++) {

190 
d©a
[
i
] = i & 0xff;

193 
iov
[0].
iov_ba£
 = 
d©a
;

194 
iov
[0].
iov_Àn
 = 3;

195 
iov
[1].
iov_ba£
 = 
d©a
 + 3;

196 
iov
[1].
iov_Àn
 = 100;

197 
iov
[2].
iov_ba£
 = 
d©a
 + 103;

198 
iov
[2].
iov_Àn
 = 153;

199 
iov
[3].
iov_ba£
 = 
d©a
 + 256;

200 
iov
[3].
iov_Àn
 = 
rc10
->
block_size
 - 256;

202 
èsk
 = 
	`iscsi_wrôe16_iov_sync
(
iscsi
, 
iscsi_uæ
->
lun
, 0, 
NULL
,

203 
rc10
->
block_size
,Ñc10->block_size,

205 
iov
, 4);

206 i‡(
èsk
 =
NULL
 ||Åask->
°©us
 !
SCSI_STATUS_GOOD
) {

207 
	`Ârötf
(
°dîr
, "FailedÅo send WRITE16\n");

208 
	`exô
(10);

211 
	`mem£t
(
d©a
, 0, 
rc10
->
block_size
);

214 
iov
[0].
iov_ba£
 = 
d©a
;

215 
iov
[0].
iov_Àn
 = 16;

216 
iov
[1].
iov_ba£
 = 
d©a
 + 16;

217 
iov
[1].
iov_Àn
 = 16;

218 
iov
[2].
iov_ba£
 = 
d©a
 + 32;

219 
iov
[2].
iov_Àn
 = 32;

220 
iov
[3].
iov_ba£
 = 
d©a
 + 64;

221 
iov
[3].
iov_Àn
 = 
rc10
->
block_size
 - 64;

223 
èsk
 = 
	`iscsi_ªad16_iov_sync
(
iscsi
, 
iscsi_uæ
->
lun
, 0,

224 
rc10
->
block_size
,Ñc10->block_size,

226 
iov
, 4);

227 i‡(
èsk
 =
NULL
 ||Åask->
°©us
 !
SCSI_STATUS_GOOD
) {

228 
	`Ârötf
(
°dîr
, "FailedÅo send READ16\n");

229 
	`exô
(10);

233 
i
 = 0; i < 
rc10
->
block_size
; i++) {

234 i‡(
d©a
[
i
] != (i & 0xff)) {

235 
	`Ârötf
(
°dîr
, "Data mismatch\n");

236 
	`exô
(10);

241 
	}
}

	@tests/prog_reconnect.c

18 #ifde‡
HAVE_CONFIG_H


19 
	~"c⁄fig.h
"

22 #ifde‡
HAVE_POLL_H


23 
	~<pﬁl.h
>

26 #ifde‡
HAVE_UNISTD_H


27 
	~<uni°d.h
>

30 
	~<°dio.h
>

31 
	~<°dlib.h
>

32 
	~<°döt.h
>

33 
	~<°rög.h
>

34 
	~<gë›t.h
>

35 
	~"iscsi.h
"

36 
	~"scsi-lowÀvñ.h
"

38 #i‚de‡
disˇrd_c⁄°


39 
	#disˇrd_c⁄°
(
±r
Ë((*)((
öçå_t
)’å)))

	)

42 c⁄° *
	göôüt‹
 = "iqn.2007-10.com.github:sahlberg:libiscsi:prog-reconnect";

44 
	s˛õ¡_°©e
 {

45 
	mföished
;

46 
	m°©us
;

47 
	mlun
;

48 
	mc⁄cuºícy
;

49 
	mªad_pos
;

50 
	mnum_ªmaöög
;

51 
uöt32_t
 
	mblock_size
;

52 
uöt32_t
 
	mnum_lbas
;

55 
	sªad16_°©e
 {

56 
uöt32_t
 
	mlba
;

57 
˛õ¡_°©e
 *
	m˛õ¡
;

60 
	$evít_lo›
(
iscsi_c⁄ãxt
 *
iscsi
, 
˛õ¡_°©e
 *
°©e
)

62 
pﬁlfd
 
pfd
;

64 
°©e
->
föished
 == 0) {

65 
pfd
.
fd
 = 
	`iscsi_gë_fd
(
iscsi
);

66 
pfd
.
evíts
 = 
	`iscsi_which_evíts
(
iscsi
);

68 i‡(
	`pﬁl
(&
pfd
, 1, -1) < 0) {

69 
	`Ârötf
(
°dîr
, "Poll failed");

70 
	`exô
(10);

72 i‡(
	`iscsi_£rvi˚
(
iscsi
, 
pfd
.
ªvíts
) < 0) {

73 
	`Ârötf
(
°dîr
, "iscsi_service failed with : %s\n",

74 
	`iscsi_gë_îr‹
(
iscsi
));

75 
	`exô
(10);

78 
	}
}

80 
	$logout_cb
(
iscsi_c⁄ãxt
 *
iscsi
, 
°©us
,

81 *
comm™d_d©a
 
_U_
, *
¥iv©e_d©a
)

83 
˛õ¡_°©e
 *
°©e
 = (˛õ¡_°©ê*)
¥iv©e_d©a
;

85 i‡(
°©us
 != 0) {

86 
	`Ârötf
(
°dîr
, "FailedÅoÜogout fromÅarget. : %s\n",

87 
	`iscsi_gë_îr‹
(
iscsi
));

88 
	`exô
(10);

91 i‡(
	`iscsi_disc⁄√˘
(
iscsi
) != 0) {

92 
	`Ârötf
(
°dîr
, "FailedÅo disconnect old socket\n");

93 
	`exô
(10);

96 
°©e
->
föished
 = 1;

97 
	}
}

99 
	$ªad_cb
(
iscsi_c⁄ãxt
 *
iscsi
, 
°©us
,

100 *
comm™d_d©a
, *
¥iv©e_d©a
)

102 
ªad16_°©e
 *
r16_°©e
 = 
¥iv©e_d©a
;

103 
˛õ¡_°©e
 *
°©e
 = 
r16_°©e
->
˛õ¡
;

104 
scsi_èsk
 *
èsk
 = 
comm™d_d©a
;

106 
	`¥ötf
("READÑëu∫ed f‹ LBA %d\n", ()
r16_°©e
->
lba
);

107 i‡(
°©us
 =
SCSI_STATUS_CHECK_CONDITION
 &&

108 
èsk
->
£n£
.
key
 =
SCSI_SENSE_UNIT_ATTENTION
) {

109 
	`¥ötf
("Received UNIT_ATTENTION. Ignoring.\n");

110 } i‡(
°©us
 != 0) {

111 
	`Ârötf
(
°dîr
, "READ16 faûed. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

112 
	`scsi_‰ì_scsi_èsk
(
èsk
);

113 
	`exô
(10);

116 i‡(
°©e
->
ªad_pos
 == 6) {

117 
buf
[256];

118 
ssize_t
 
cou¡
;

120 
	`¥ötf
("write garbageÅoÅhe socketÅoÅriggerá server "

122 
	`mem£t
(
buf
, 0, (buf));

123 
cou¡
 = 
	`wrôe
(
	`iscsi_gë_fd
(
iscsi
), 
buf
, (buf));

124 i‡(
cou¡
 < (
ssize_t
)(
buf
)) {

125 
	`Ârötf
(
°dîr
, "write failed.\n");

126 
	`scsi_‰ì_scsi_èsk
(
èsk
);

127 
	`exô
(10);

130 
	`‰ì
(
r16_°©e
);

131 
	`scsi_‰ì_scsi_èsk
(
èsk
);

133 i‡(
°©e
->
num_ªmaöög
 > sèã->
c⁄cuºícy
) {

134 
r16_°©e
 = 
	`mÆloc
((
ªad16_°©e
));

135 
r16_°©e
->
lba
 = 
°©e
->
ªad_pos
++;

136 
r16_°©e
->
˛õ¡
 = 
°©e
;

138 
	`¥ötf
("SENT READ f‹ LBA %d\n", 
r16_°©e
->
lba
);

139 i‡(
	`iscsi_ªad16_èsk
(
iscsi
,

140 
°©e
->
lun
, 
r16_°©e
->
lba
,

141 
°©e
->
block_size
,

142 
°©e
->
block_size
, 0, 0, 0, 0, 0,

143 
ªad_cb
, 
r16_°©e
Ë=
NULL
) {

144 
	`Ârötf
(
°dîr
, "iscsi_read16_task failed : %s\n",

145 
	`iscsi_gë_îr‹
(
iscsi
));

146 
	`exô
(10);

150 i‡(--
°©e
->
num_ªmaöög
) {

154 i‡(
	`iscsi_logout_async
(
iscsi
, 
logout_cb
, 
°©e
) != 0) {

155 
	`Ârötf
(
°dîr
, "iscsi_logout_async failed : %s\n",

156 
	`iscsi_gë_îr‹
(
iscsi
));

157 
	`exô
(10);

159 
	}
}

161 
	$¥öt_ußge
()

163 
	`Ârötf
(
°dîr
, "Usage:Örog_reconnect [-?|--help] [--usage] "

166 
	`Ârötf
(
°dîr
, "\n");

167 
	`Ârötf
(
°dîr
, "This command is usedÅoÅestÅhat ifÅheÅarget "

170 
	}
}

172 
	$¥öt_hñp
()

174 
	`Ârötf
(
°dîr
, "Usage:Örog_reconnect [OPTION...] <iscsi-url>\n");

175 
	`Ârötf
(
°dîr
, " -i, --initiator-name=iqn-name "

177 
	`Ârötf
(
°dîr
, "\n");

178 
	`Ârötf
(
°dîr
, "Help options:\n");

179 
	`Ârötf
(
°dîr
, " -?, --help "

181 
	`Ârötf
(
°dîr
, " --usage "

183 
	`Ârötf
(
°dîr
, "\n");

184 
	`Ârötf
(
°dîr
, "iSCSI Portal URL format : %s\n",

185 
ISCSI_PORTAL_URL_SYNTAX
);

186 
	`Ârötf
(
°dîr
, "\n");

187 
	`Ârötf
(
°dîr
, "<host> isÉither of:\n");

188 
	`Ârötf
(
°dîr
, " \"hostname\" iscsi.example\n");

189 
	`Ârötf
(
°dîr
, " \"ipv4-address\" 10.1.1.27\n");

190 
	`Ârötf
(
°dîr
, " \"ipv6-address\" [fce0::1]\n");

191 
	}
}

193 
	$maö
(
¨gc
, *
¨gv
[])

195 
iscsi_c⁄ãxt
 *
iscsi
;

196 
iscsi_uæ
 *iscsi_uæ = 
NULL
;

197 
˛õ¡_°©e
 
°©e
;

198 c⁄° *
uæ
 = 
NULL
;

199 
i
, 
c
;

200 
show_hñp
 = 0, 
show_ußge
 = 0, 
debug
 = 0;

201 
scsi_ªadˇ∑côy10
 *
rc10
;

202 
scsi_èsk
 *
èsk
;

204 
›ti⁄
 
l⁄g_›ti⁄s
[] = {

205 {"hñp", 
no_¨gumít
, 
NULL
, 'h'},

206 {"ußge", 
no_¨gumít
, 
NULL
, 'u'},

207 {"debug", 
no_¨gumít
, 
NULL
, 'd'},

208 {"öôüt‹-«me", 
ªquúed_¨gumít
, 
NULL
, 'i'},

211 
›ti⁄_ödex
;

213 (
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "h?uUdi:s", 
l⁄g_›ti⁄s
,

214 &
›ti⁄_ödex
)) != -1) {

215 
c
) {

218 
show_hñp
 = 1;

221 
show_ußge
 = 1;

224 
debug
 = 1;

227 
öôüt‹
 = 
›èrg
;

230 
	`Ârötf
(
°dîr
, "Uƒecognized o±i⁄ '%c'\n\n", 
c
);

231 
	`¥öt_hñp
();

232 
	`exô
(0);

236 i‡(
show_hñp
 != 0) {

237 
	`¥öt_hñp
();

238 
	`exô
(0);

241 i‡(
show_ußge
 != 0) {

242 
	`¥öt_ußge
();

243 
	`exô
(0);

246 i‡(
›töd
 !
¨gc
 -1) {

247 
	`¥öt_ußge
();

248 
	`exô
(0);

251 
	`mem£t
(&
°©e
, 0, (state));

253 i‡(
¨gv
[
›töd
] !
NULL
) {

254 
uæ
 = 
	`°rdup
(
¨gv
[
›töd
]);

256 i‡(
uæ
 =
NULL
) {

257 
	`Ârötf
(
°dîr
, "You must specify iscsiÅargetÖortal.\n");

258 
	`¥öt_ußge
();

259 
	`exô
(10);

262 
iscsi
 = 
	`iscsi_¸óã_c⁄ãxt
(
öôüt‹
);

263 i‡(
iscsi
 =
NULL
) {

264 
	`¥ötf
("FailedÅo create context\n");

265 
	`exô
(10);

268 i‡(
debug
 > 0) {

269 
	`iscsi_£t_log_Àvñ
(
iscsi
, 
debug
);

270 
	`iscsi_£t_log_‚
(
iscsi
, 
iscsi_log_to_°dîr
);

273 
iscsi_uæ
 = 
	`iscsi_∑r£_fuŒ_uæ
(
iscsi
, 
uæ
);

275 i‡(
uæ
) {

276 
	`‰ì
(
	`disˇrd_c⁄°
(
uæ
));

279 i‡(
iscsi_uæ
 =
NULL
) {

280 
	`Ârötf
(
°dîr
, "FailedÅoÖarse URL: %s\n",

281 
	`iscsi_gë_îr‹
(
iscsi
));

282 
	`exô
(10);

285 
	`iscsi_£t_£ssi⁄_ty≥
(
iscsi
, 
ISCSI_SESSION_NORMAL
);

287 
°©e
.
lun
 = 
iscsi_uæ
->lun;

288 i‡(
	`iscsi_fuŒ_c⁄√˘_sync
(
iscsi
, 
iscsi_uæ
->
p‹èl
, iscsi_uæ->
lun
)

290 
	`Ârötf
(
°dîr
, "iscsi_connect failed. %s\n",

291 
	`iscsi_gë_îr‹
(
iscsi
));

292 
	`exô
(10);

294 
èsk
 = 
	`iscsi_ªadˇ∑côy10_sync
(
iscsi
, 
iscsi_uæ
->
lun
, 0, 0);

295 i‡(
èsk
 =
NULL
 ||Åask->
°©us
 !
SCSI_STATUS_GOOD
) {

296 
	`Ârötf
(
°dîr
, "failedÅo sendÑeadcapacity command\n");

297 
	`exô
(10);

299 
rc10
 = 
	`scsi_d©aö_unm¨shÆl
(
èsk
);

300 i‡(
rc10
 =
NULL
) {

301 
	`Ârötf
(
°dîr
, "failedÅo unmarshallÑeadcapacity10 data\n");

302 
	`exô
(10);

304 
°©e
.
block_size
 = 
rc10
->block_size;

305 
°©e
.
num_lbas
 = 
rc10
->
lba
;

306 
	`scsi_‰ì_scsi_èsk
(
èsk
);

308 
°©e
.
num_ªmaöög
 = 10;

309 
°©e
.
c⁄cuºícy
 = 3;

315 
i
 = 0; i < 
°©e
.
c⁄cuºícy
; i++) {

316 
ªad16_°©e
 *
r16_°©e
;

317 
r16_°©e
 = 
	`mÆloc
((
ªad16_°©e
));

318 
r16_°©e
->
lba
 = 
°©e
.
ªad_pos
++;

319 
r16_°©e
->
˛õ¡
 = &
°©e
;

320 
	`¥ötf
("SENT READ f‹ LBA %d\n", 
r16_°©e
->
lba
);

321 i‡(
	`iscsi_ªad16_èsk
(
iscsi
,

322 
°©e
.
lun
,

323 
r16_°©e
->
lba
,

324 
°©e
.
block_size
,

325 
°©e
.
block_size
, 0, 0, 0, 0, 0,

326 
ªad_cb
, 
r16_°©e
Ë=
NULL
) {

327 
	`Ârötf
(
°dîr
, "iscsi_read16_task failed : %s\n",

328 
	`iscsi_gë_îr‹
(
iscsi
));

329 
	`exô
(10);

333 
	`evít_lo›
(
iscsi
, &
°©e
);

335 
	`iscsi_de°roy_uæ
(
iscsi_uæ
);

336 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

338 
	}
}

	@tests/prog_reconnect_timeout.c

18 #ifde‡
HAVE_CONFIG_H


19 
	~"c⁄fig.h
"

22 #ifde‡
HAVE_POLL_H


23 
	~<pﬁl.h
>

26 #ifde‡
HAVE_UNISTD_H


27 
	~<uni°d.h
>

30 
	~<°dio.h
>

31 
	~<°dlib.h
>

32 
	~<°döt.h
>

33 
	~<°rög.h
>

34 
	~<gë›t.h
>

35 
	~"iscsi.h
"

36 
	~"scsi-lowÀvñ.h
"

38 #i‚de‡
disˇrd_c⁄°


39 
	#disˇrd_c⁄°
(
±r
Ë((*)((
öçå_t
)’å)))

	)

42 c⁄° *
	göôüt‹
 = "iqn.2007-10.com.github:sahlberg:libiscsi:prog-reconnect-timeout";

44 
	s˛õ¡_°©e
 {

45 
	mföished
;

46 
	m°©us
;

47 
	mlun
;

48 
	mc⁄cuºícy
;

49 
	mªad_pos
;

50 
	mnum_ªmaöög
;

51 
uöt32_t
 
	mblock_size
;

52 
uöt32_t
 
	mnum_lbas
;

53 
	mp‹èl
[
MAX_STRING_SIZE
];

54 
	mgŸ_zîo_evíts
;

57 
	sªad16_°©e
 {

58 
uöt32_t
 
	mlba
;

59 
˛õ¡_°©e
 *
	m˛õ¡
;

62 
	$evít_lo›
(
iscsi_c⁄ãxt
 *
iscsi
, 
˛õ¡_°©e
 *
°©e
)

64 
pﬁlfd
 
pfd
;

66 
°©e
->
föished
 == 0) {

67 
pfd
.
fd
 = 
	`iscsi_gë_fd
(
iscsi
);

68 
pfd
.
evíts
 = 
	`iscsi_which_evíts
(
iscsi
);

70 i‡(
pfd
.
evíts
 == 0) {

71 
°©e
->
gŸ_zîo_evíts
 = 1;

72 
	`¥ötf
("iscsi_which_events()Ñeturned 0\n");

73 
	`¶ìp
(1);

74 
	`¥ötf
("changeÖortal backÅoÅheÑightÖortal\n");

75 
	`iscsi_fuŒ_c⁄√˘_async
(
iscsi
, 
°©e
->
p‹èl
,

76 
°©e
->
lun
, 
NULL
, NULL);

78 i‡(
	`pﬁl
(&
pfd
, 1, -1) < 0) {

79 
	`Ârötf
(
°dîr
, "Poll failed");

80 
	`exô
(10);

82 i‡(
	`iscsi_£rvi˚
(
iscsi
, 
pfd
.
ªvíts
) < 0) {

83 
	`Ârötf
(
°dîr
, "iscsi_service failed with : %s\n",

84 
	`iscsi_gë_îr‹
(
iscsi
));

85 
	`exô
(10);

88 
	}
}

90 
	$logout_cb
(
iscsi_c⁄ãxt
 *
iscsi
, 
°©us
,

91 *
comm™d_d©a
 
_U_
, *
¥iv©e_d©a
)

93 
˛õ¡_°©e
 *
°©e
 = (˛õ¡_°©ê*)
¥iv©e_d©a
;

95 i‡(
°©us
 != 0) {

96 
	`Ârötf
(
°dîr
, "FailedÅoÜogout fromÅarget. : %s\n",

97 
	`iscsi_gë_îr‹
(
iscsi
));

98 
	`exô
(10);

101 i‡(
	`iscsi_disc⁄√˘
(
iscsi
) != 0) {

102 
	`Ârötf
(
°dîr
, "FailedÅo disconnect old socket\n");

103 
	`exô
(10);

106 
°©e
->
föished
 = 1;

107 
	}
}

109 
	$ªad_cb
(
iscsi_c⁄ãxt
 *
iscsi
, 
°©us
,

110 *
comm™d_d©a
, *
¥iv©e_d©a
)

112 
ªad16_°©e
 *
r16_°©e
 = 
¥iv©e_d©a
;

113 
˛õ¡_°©e
 *
°©e
 = 
r16_°©e
->
˛õ¡
;

114 
scsi_èsk
 *
èsk
 = 
comm™d_d©a
;

116 
	`¥ötf
("READÑëu∫ed f‹ LBA %d\n", ()
r16_°©e
->
lba
);

117 i‡(
°©us
 =
SCSI_STATUS_CHECK_CONDITION
 &&

118 
èsk
->
£n£
.
key
 =
SCSI_SENSE_UNIT_ATTENTION
) {

119 
	`¥ötf
("Received UNIT_ATTENTION. Ignoring.\n");

120 } i‡(
°©us
 != 0) {

121 
	`Ârötf
(
°dîr
, "READ16 faûed. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

122 
	`scsi_‰ì_scsi_èsk
(
èsk
);

123 
	`exô
(10);

126 i‡(
°©e
->
ªad_pos
 == 6) {

127 
buf
[256];

128 
ssize_t
 
cou¡
;

130 
	`¥ötf
("write garbageÅoÅhe socketÅoÅriggerá server "

132 
	`mem£t
(
buf
, 0, (buf));

141 
	`¥ötf
("changeÖortalÅoÖointÅoá closed socket\n");

142 
	`iscsi_fuŒ_c⁄√˘_async
(
iscsi
, "127.0.0.1:1", 
°©e
->
lun
,

143 
NULL
, NULL);

145 
cou¡
 = 
	`wrôe
(
	`iscsi_gë_fd
(
iscsi
), 
buf
, (buf));

146 i‡(
cou¡
 < (
ssize_t
)(
buf
)) {

147 
	`Ârötf
(
°dîr
, "write failed.\n");

148 
	`scsi_‰ì_scsi_èsk
(
èsk
);

149 
	`exô
(10);

152 
	`‰ì
(
r16_°©e
);

153 
	`scsi_‰ì_scsi_èsk
(
èsk
);

155 i‡(
°©e
->
num_ªmaöög
 > sèã->
c⁄cuºícy
) {

156 
r16_°©e
 = 
	`mÆloc
((
ªad16_°©e
));

157 
r16_°©e
->
lba
 = 
°©e
->
ªad_pos
++;

158 
r16_°©e
->
˛õ¡
 = 
°©e
;

160 
	`¥ötf
("SENT READ f‹ LBA %d\n", 
r16_°©e
->
lba
);

161 i‡(
	`iscsi_ªad16_èsk
(
iscsi
,

162 
°©e
->
lun
, 
r16_°©e
->
lba
,

163 
°©e
->
block_size
,

164 
°©e
->
block_size
, 0, 0, 0, 0, 0,

165 
ªad_cb
, 
r16_°©e
Ë=
NULL
) {

166 
	`Ârötf
(
°dîr
, "iscsi_read16_task failed : %s\n",

167 
	`iscsi_gë_îr‹
(
iscsi
));

168 
	`exô
(10);

172 i‡(--
°©e
->
num_ªmaöög
) {

176 i‡(
	`iscsi_logout_async
(
iscsi
, 
logout_cb
, 
°©e
) != 0) {

177 
	`Ârötf
(
°dîr
, "iscsi_logout_async failed : %s\n",

178 
	`iscsi_gë_îr‹
(
iscsi
));

179 
	`exô
(10);

181 
	}
}

183 
	$¥öt_ußge
()

185 
	`Ârötf
(
°dîr
, "Usage:Örog_reconnect_timeout [-?|--help] [--usage] "

188 
	`Ârötf
(
°dîr
, "\n");

189 
	`Ârötf
(
°dîr
, "This command is usedÅoÅestÅhat duringÑeconnect,"

193 
	}
}

195 
	$¥öt_hñp
()

197 
	`Ârötf
(
°dîr
, "Usage:Örog_reconnect_timeout [OPTION...] <iscsi-url>\n");

198 
	`Ârötf
(
°dîr
, " -i, --initiator-name=iqn-name "

200 
	`Ârötf
(
°dîr
, "\n");

201 
	`Ârötf
(
°dîr
, "Help options:\n");

202 
	`Ârötf
(
°dîr
, " -?, --help "

204 
	`Ârötf
(
°dîr
, " --usage "

206 
	`Ârötf
(
°dîr
, "\n");

207 
	`Ârötf
(
°dîr
, "iSCSI Portal URL format : %s\n",

208 
ISCSI_PORTAL_URL_SYNTAX
);

209 
	`Ârötf
(
°dîr
, "\n");

210 
	`Ârötf
(
°dîr
, "<host> isÉither of:\n");

211 
	`Ârötf
(
°dîr
, " \"hostname\" iscsi.example\n");

212 
	`Ârötf
(
°dîr
, " \"ipv4-address\" 10.1.1.27\n");

213 
	`Ârötf
(
°dîr
, " \"ipv6-address\" [fce0::1]\n");

214 
	}
}

216 
	$maö
(
¨gc
, *
¨gv
[])

218 
iscsi_c⁄ãxt
 *
iscsi
;

219 
iscsi_uæ
 *iscsi_uæ = 
NULL
;

220 
˛õ¡_°©e
 
°©e
;

221 c⁄° *
uæ
 = 
NULL
;

222 
i
, 
c
;

223 
show_hñp
 = 0, 
show_ußge
 = 0, 
debug
 = 0;

224 
scsi_ªadˇ∑côy10
 *
rc10
;

225 
scsi_èsk
 *
èsk
;

227 
›ti⁄
 
l⁄g_›ti⁄s
[] = {

228 {"hñp", 
no_¨gumít
, 
NULL
, 'h'},

229 {"ußge", 
no_¨gumít
, 
NULL
, 'u'},

230 {"debug", 
no_¨gumít
, 
NULL
, 'd'},

231 {"öôüt‹-«me", 
ªquúed_¨gumít
, 
NULL
, 'i'},

234 
›ti⁄_ödex
;

236 (
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "h?uUdi:s", 
l⁄g_›ti⁄s
,

237 &
›ti⁄_ödex
)) != -1) {

238 
c
) {

241 
show_hñp
 = 1;

244 
show_ußge
 = 1;

247 
debug
 = 1;

250 
öôüt‹
 = 
›èrg
;

253 
	`Ârötf
(
°dîr
, "Uƒecognized o±i⁄ '%c'\n\n", 
c
);

254 
	`¥öt_hñp
();

255 
	`exô
(0);

259 i‡(
show_hñp
 != 0) {

260 
	`¥öt_hñp
();

261 
	`exô
(0);

264 i‡(
show_ußge
 != 0) {

265 
	`¥öt_ußge
();

266 
	`exô
(0);

269 i‡(
›töd
 !
¨gc
 -1) {

270 
	`¥öt_ußge
();

271 
	`exô
(0);

274 
	`mem£t
(&
°©e
, 0, (state));

276 i‡(
¨gv
[
›töd
] !
NULL
) {

277 
uæ
 = 
	`°rdup
(
¨gv
[
›töd
]);

279 i‡(
uæ
 =
NULL
) {

280 
	`Ârötf
(
°dîr
, "You must specify iscsiÅargetÖortal.\n");

281 
	`¥öt_ußge
();

282 
	`exô
(10);

285 
iscsi
 = 
	`iscsi_¸óã_c⁄ãxt
(
öôüt‹
);

286 i‡(
iscsi
 =
NULL
) {

287 
	`¥ötf
("FailedÅo create context\n");

288 
	`exô
(10);

291 i‡(
debug
 > 0) {

292 
	`iscsi_£t_log_Àvñ
(
iscsi
, 
debug
);

293 
	`iscsi_£t_log_‚
(
iscsi
, 
iscsi_log_to_°dîr
);

296 
iscsi_uæ
 = 
	`iscsi_∑r£_fuŒ_uæ
(
iscsi
, 
uæ
);

298 i‡(
uæ
) {

299 
	`‰ì
(
	`disˇrd_c⁄°
(
uæ
));

302 i‡(
iscsi_uæ
 =
NULL
) {

303 
	`Ârötf
(
°dîr
, "FailedÅoÖarse URL: %s\n",

304 
	`iscsi_gë_îr‹
(
iscsi
));

305 
	`exô
(10);

308 
	`iscsi_£t_£ssi⁄_ty≥
(
iscsi
, 
ISCSI_SESSION_NORMAL
);

310 
°©e
.
lun
 = 
iscsi_uæ
->lun;

311 i‡(
	`iscsi_fuŒ_c⁄√˘_sync
(
iscsi
, 
iscsi_uæ
->
p‹èl
, iscsi_uæ->
lun
)

313 
	`Ârötf
(
°dîr
, "iscsi_connect failed. %s\n",

314 
	`iscsi_gë_îr‹
(
iscsi
));

315 
	`exô
(10);

317 
èsk
 = 
	`iscsi_ªadˇ∑côy10_sync
(
iscsi
, 
iscsi_uæ
->
lun
, 0, 0);

318 i‡(
èsk
 =
NULL
 ||Åask->
°©us
 !
SCSI_STATUS_GOOD
) {

319 
	`Ârötf
(
°dîr
, "failedÅo sendÑeadcapacity command\n");

320 
	`exô
(10);

322 
rc10
 = 
	`scsi_d©aö_unm¨shÆl
(
èsk
);

323 i‡(
rc10
 =
NULL
) {

324 
	`Ârötf
(
°dîr
, "failedÅo unmarshallÑeadcapacity10 data\n");

325 
	`exô
(10);

327 
°©e
.
block_size
 = 
rc10
->block_size;

328 
°©e
.
num_lbas
 = 
rc10
->
lba
;

329 
	`scsi_‰ì_scsi_èsk
(
èsk
);

331 
°©e
.
num_ªmaöög
 = 10;

332 
°©e
.
c⁄cuºícy
 = 3;

333 
	`°∫˝y
(
°©e
.
p‹èl
, 
iscsi_uæ
->p‹èl, 
MAX_STRING_SIZE
);

339 
i
 = 0; i < 
°©e
.
c⁄cuºícy
; i++) {

340 
ªad16_°©e
 *
r16_°©e
;

341 
r16_°©e
 = 
	`mÆloc
((
ªad16_°©e
));

342 
r16_°©e
->
lba
 = 
°©e
.
ªad_pos
++;

343 
r16_°©e
->
˛õ¡
 = &
°©e
;

344 
	`¥ötf
("SENT READ f‹ LBA %d\n", 
r16_°©e
->
lba
);

345 i‡(
	`iscsi_ªad16_èsk
(
iscsi
,

346 
°©e
.
lun
,

347 
r16_°©e
->
lba
,

348 
°©e
.
block_size
,

349 
°©e
.
block_size
, 0, 0, 0, 0, 0,

350 
ªad_cb
, 
r16_°©e
Ë=
NULL
) {

351 
	`Ârötf
(
°dîr
, "iscsi_read16_task failed : %s\n",

352 
	`iscsi_gë_îr‹
(
iscsi
));

353 
	`exô
(10);

357 
	`evít_lo›
(
iscsi
, &
°©e
);

359 
	`iscsi_de°roy_uæ
(
iscsi_uæ
);

360 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

362 i‡(
°©e
.
gŸ_zîo_evíts
 != 1) {

363 
	`Ârötf
(
°dîr
, "iscsi_which_events()ÇeverÑeturned 0\n");

364 
	`exô
(10);

367 
	}
}

	@tests/prog_timeout.c

18 #ifde‡
HAVE_CONFIG_H


19 
	~"c⁄fig.h
"

22 #ifde‡
HAVE_POLL_H


23 
	~<pﬁl.h
>

26 #ifde‡
HAVE_UNISTD_H


27 
	~<uni°d.h
>

29 
	~<gë›t.h
>

31 
	~<°dio.h
>

32 
	~<°dlib.h
>

33 
	~<°döt.h
>

34 
	~<°rög.h
>

35 
	~<sys/ty≥s.h
>

36 
	~<sys/°©.h
>

37 
	~<f˙é.h
>

38 
	~"iscsi.h
"

39 
	~"iscsi-¥iv©e.h
"

40 
	~"scsi-lowÀvñ.h
"

42 #i‚de‡
disˇrd_c⁄°


43 
	#disˇrd_c⁄°
(
±r
Ë((*)((
öçå_t
)’å)))

	)

46 c⁄° *
	göôüt‹
 = "iqn.2007-10.com.github:sahlberg:libiscsi:prog-timeout";

48 
	$¥öt_ußge
()

50 
	`Ârötf
(
°dîr
, "Usage:Örog_timeout [-?|--help] [--usage] "

53 
	`Ârötf
(
°dîr
, "\n");

54 
	`Ârötf
(
°dîr
, "This command is usedÅoÅestÅhat if we doÇot "

57 
	}
}

59 
	$¥öt_hñp
()

61 
	`Ârötf
(
°dîr
, "Usage:Örog_timeout [OPTION...] <iscsi-url>\n");

62 
	`Ârötf
(
°dîr
, " -i, --initiator-name=iqn-name "

64 
	`Ârötf
(
°dîr
, "\n");

65 
	`Ârötf
(
°dîr
, "Help options:\n");

66 
	`Ârötf
(
°dîr
, " -?, --help "

68 
	`Ârötf
(
°dîr
, " --usage "

70 
	`Ârötf
(
°dîr
, "\n");

71 
	`Ârötf
(
°dîr
, "iSCSI Portal URL format : %s\n",

72 
ISCSI_PORTAL_URL_SYNTAX
);

73 
	`Ârötf
(
°dîr
, "\n");

74 
	`Ârötf
(
°dîr
, "<host> isÉither of:\n");

75 
	`Ârötf
(
°dîr
, " \"hostname\" iscsi.example\n");

76 
	`Ârötf
(
°dîr
, " \"ipv4-address\" 10.1.1.27\n");

77 
	`Ârötf
(
°dîr
, " \"ipv6-address\" [fce0::1]\n");

78 
	}
}

80 
	$tur_cb
(
iscsi_c⁄ãxt
 *
iscsi
 
_U_
, 
°©us
, *
comm™d_d©a
 _U_, *
¥iv©e_d©a
)

82 
uöt32_t
 *
i
 = 
¥iv©e_d©a
;

84 (*
i
)--;

86 
	`¥ötf
("testunitready cb\n");

87 i‡(
°©us
 !
SCSI_STATUS_TIMEOUT
) {

88 
	`¥ötf
("Failed. We did NOT getá TIMEOUTÉrror forÅhe SCSI "

90 
	`exô
(10);

92 
	}
}

94 
	$logout_cb
(
iscsi_c⁄ãxt
 *
iscsi
 
_U_
, 
°©us
, *
comm™d_d©a
 _U_, *
¥iv©e_d©a
)

96 
uöt32_t
 *
i
 = 
¥iv©e_d©a
;

98 (*
i
)--;

100 
	`¥ötf
("logout command cb\n");

101 i‡(
°©us
 !
SCSI_STATUS_TIMEOUT
) {

102 
	`¥ötf
("Failed. We did NOT getá TIMEOUTÉrror forÅhe iSCSI "

104 
	`exô
(10);

106 
	}
}

108 
	$maö
(
¨gc
, *
¨gv
[])

110 
iscsi_c⁄ãxt
 *
iscsi
;

111 
iscsi_uæ
 *iscsi_uæ = 
NULL
;

112 c⁄° *
uæ
 = 
NULL
;

113 
c
;

114 
show_hñp
 = 0, 
show_ußge
 = 0, 
debug
 = 0;

115 
uöt32_t
 
cou¡
;

117 
›ti⁄
 
l⁄g_›ti⁄s
[] = {

118 {"hñp", 
no_¨gumít
, 
NULL
, 'h'},

119 {"ußge", 
no_¨gumít
, 
NULL
, 'u'},

120 {"debug", 
no_¨gumít
, 
NULL
, 'd'},

121 {"öôüt‹-«me", 
ªquúed_¨gumít
, 
NULL
, 'i'},

124 
›ti⁄_ödex
;

126 (
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "h?uUdi:s", 
l⁄g_›ti⁄s
,

127 &
›ti⁄_ödex
)) != -1) {

128 
c
) {

131 
show_hñp
 = 1;

134 
show_ußge
 = 1;

137 
debug
 = 1;

140 
öôüt‹
 = 
›èrg
;

143 
	`Ârötf
(
°dîr
, "Uƒecognized o±i⁄ '%c'\n\n", 
c
);

144 
	`¥öt_hñp
();

145 
	`exô
(0);

149 i‡(
show_hñp
 != 0) {

150 
	`¥öt_hñp
();

151 
	`exô
(0);

154 i‡(
show_ußge
 != 0) {

155 
	`¥öt_ußge
();

156 
	`exô
(0);

159 i‡(
›töd
 !
¨gc
 -1) {

160 
	`¥öt_ußge
();

161 
	`exô
(0);

164 i‡(
¨gv
[
›töd
] !
NULL
) {

165 
uæ
 = 
	`°rdup
(
¨gv
[
›töd
]);

167 i‡(
uæ
 =
NULL
) {

168 
	`Ârötf
(
°dîr
, "You must specify iscsiÅargetÖortal.\n");

169 
	`¥öt_ußge
();

170 
	`exô
(10);

173 
iscsi
 = 
	`iscsi_¸óã_c⁄ãxt
(
öôüt‹
);

174 i‡(
iscsi
 =
NULL
) {

175 
	`¥ötf
("FailedÅo create context\n");

176 
	`exô
(10);

179 i‡(
debug
 > 0) {

180 
	`iscsi_£t_log_Àvñ
(
iscsi
, 
debug
);

181 
	`iscsi_£t_log_‚
(
iscsi
, 
iscsi_log_to_°dîr
);

184 
iscsi_uæ
 = 
	`iscsi_∑r£_fuŒ_uæ
(
iscsi
, 
uæ
);

186 i‡(
uæ
) {

187 
	`‰ì
(
	`disˇrd_c⁄°
(
uæ
));

190 i‡(
iscsi_uæ
 =
NULL
) {

191 
	`Ârötf
(
°dîr
, "FailedÅoÖarse URL: %s\n",

192 
	`iscsi_gë_îr‹
(
iscsi
));

193 
	`exô
(10);

196 
	`iscsi_£t_£ssi⁄_ty≥
(
iscsi
, 
ISCSI_SESSION_NORMAL
);

198 i‡(
	`iscsi_fuŒ_c⁄√˘_sync
(
iscsi
, 
iscsi_uæ
->
p‹èl
, iscsi_uæ->
lun
)

200 
	`Ârötf
(
°dîr
, "iscsi_connect failed. %s\n",

201 
	`iscsi_gë_îr‹
(
iscsi
));

202 
	`exô
(10);

205 
	`iscsi_£t_timeout
(
iscsi
, 3);

206 
cou¡
=0;

208 
	`¥ötf
("Sendá TUR we willÇever getáÑeply for\n");

209 
cou¡
++;

210 
	`iscsi_ã°unôªady_èsk
(
iscsi
, 
iscsi_uæ
->
lun
, 
tur_cb
, &
cou¡
);

212 
	`¥ötf
("Sendá LOGOUT we willÇever getáÑeply for\n");

213 
cou¡
++;

214 
	`iscsi_logout_async
(
iscsi
, 
logout_cb
, &
cou¡
);

217 
	`¥ötf
("Spin on iscsi_service(iscsi, 0) untiláll callbacksáre "

219 
cou¡
) {

220 
	`iscsi_£rvi˚
(
iscsi
, 0);

221 
	`¶ìp
(1);

223 
	`¥ötf
("yey, we gotállÅimeouts weÉxpected\n");

225 
	`iscsi_de°roy_uæ
(
iscsi_uæ
);

226 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

228 
	}
}

	@utils/iscsi-inq.c

18 #ifde‡
HAVE_CONFIG_H


19 
	~"c⁄fig.h
"

22 #ifde‡
HAVE_POLL_H


23 
	~<pﬁl.h
>

26 
	~<°dio.h
>

27 
	~<°dlib.h
>

28 
	~<°döt.h
>

29 
	~<°rög.h
>

30 
	~<gë›t.h
>

31 
	~<öây≥s.h
>

32 
	~"iscsi.h
"

33 
	~"scsi-lowÀvñ.h
"

35 #i‚de‡
disˇrd_c⁄°


36 
	#disˇrd_c⁄°
(
±r
Ë((*)((
öçå_t
)’å)))

	)

39 c⁄° *
	göôüt‹
 = "iqn.2007-10.com.github:sahlberg:libiscsi:iscsi-inq";

41 
	$öquúy_block_limôs
(
scsi_öquúy_block_limôs
 *
öq
)

43 
	`¥ötf
("w¢z:%d\n", 
öq
->
w¢z
);

44 
	`¥ötf
("maximum com∑ªánd wrôêÀngth:%" 
PRIu8
 "\n", 
öq
->
max_cmp
);

45 
	`¥ötf
("›timÆÅøns„∏Àngth gønuœrôy:%" 
PRIu16
 "\n", 
öq
->
›t_gøn
);

46 
	`¥ötf
("maximumÅøns„∏Àngth:%" 
PRIu32
 "\n", 
öq
->
max_x„r_Àn
);

47 
	`¥ötf
("›timÆÅøns„∏Àngth:%" 
PRIu32
 "\n",
öq
->
›t_x„r_Àn
);

48 
	`¥ötf
("maximumÖª„tch xdªad xdwrôêå™s„∏Àngth:%" 
PRIu32
 "\n", 
öq
->
max_¥e„tch
);

49 
	`¥ötf
("maximum unm≠Üb®cou¡:%" 
PRIu32
 "\n", 
öq
->
max_unm≠
);

50 
	`¥ötf
("maximum unm≠ block des¸ùt‹ cou¡:%" 
PRIu32
 "\n", 
öq
->
max_unm≠_bdc
);

51 
	`¥ötf
("›timÆ unm≠ gønuœrôy:%" 
PRIu32
 "\n", 
öq
->
›t_unm≠_gøn
);

52 
	`¥ötf
("ugavÆid:%d\n", 
öq
->
ugavÆid
);

53 
	`¥ötf
("unm≠ gønuœrôyálignmít:%" 
PRIu32
 "\n", 
öq
->
unm≠_gøn_Æign
);

54 
	`¥ötf
("maximum wrôêßmêÀngth:%" 
PRIu64
 "\n", 
öq
->
max_ws_Àn
);

55 
	}
}

57 
	$öquúy_logiˇl_block_¥ovisi⁄ög
(
scsi_öquúy_logiˇl_block_¥ovisi⁄ög
 *
öq
)

59 
	`¥ötf
("Thªshﬁd Exp⁄ít:%d\n", 
öq
->
thªshﬁd_exp⁄ít
);

60 
	`¥ötf
("lbpu:%d\n", 
öq
->
lbpu
);

61 
	`¥ötf
("lbpws:%d\n", 
öq
->
lbpws
);

62 
	`¥ötf
("lbpws10:%d\n", 
öq
->
lbpws10
);

63 
	`¥ötf
("lb¥z:%d\n", 
öq
->
lb¥z
);

64 
	`¥ötf
("™c_sup:%d\n", 
öq
->
™c_sup
);

65 
	`¥ötf
("dp:%d\n", 
öq
->
dp
);

66 
	`¥ötf
("¥ovisi⁄ögÅy≥:%d\n", 
öq
->
¥ovisi⁄ög_ty≥
);

67 
	}
}

69 
	$öquúy_block_devi˚_ch¨a˘îi°ics
(
scsi_öquúy_block_devi˚_ch¨a˘îi°ics
 *
öq
)

71 
	`¥ötf
("Medium RŸ©i⁄ R©e:%dRPM\n", 
öq
->
medium_rŸ©i⁄_øã
);

72 
	}
}

74 
	$öquúy_devi˚_idítifiˇti⁄
(
scsi_öquúy_devi˚_idítifiˇti⁄
 *
öq
)

76 
scsi_öquúy_devi˚_desig«t‹
 *
dev
;

77 
i
;

79 
	`¥ötf
("Peripheral Qualifier:%s\n",

80 
	`scsi_devquÆifõr_to_°r
(
öq
->
quÆifõr
));

81 
	`¥ötf
("Peripheral Device Type:%s\n",

82 
	`scsi_devty≥_to_°r
(
öq
->
devi˚_ty≥
));

83 
	`¥ötf
("Page Code:(0x%02x) %s\n",

84 
öq
->
∑gecode
, 
	`scsi_öquúy_∑gecode_to_°r
(inq->pagecode));

86 
i
=0, 
dev
 = 
öq
->
desig«t‹s
; dev; i++, dev = dev->
√xt
) {

87 
	`¥ötf
("DEVICE DESIGNATOR #%d\n", 
i
);

88 i‡(
dev
->
piv
 != 0) {

89 
	`¥ötf
("Devi˚ PrŸocﬁ Idítifõr:(%dË%s\n", 
dev
->
¥Ÿocﬁ_idítifõr
, 
	`scsi_¥Ÿocﬁ_idítifõr_to_°r
(dev->protocol_identifier));

91 
	`¥ötf
("CodêSë:(%dË%s\n", 
dev
->
code_£t
, 
	`scsi_code£t_to_°r
(dev->code_set));

92 
	`¥ötf
("PIV:%d\n", 
dev
->
piv
);

93 
	`¥ötf
("Assocüti⁄:(%dË%s\n", 
dev
->
assocüti⁄
, 
	`scsi_assocüti⁄_to_°r
(dev->association));

94 
	`¥ötf
("Desig«t‹ Ty≥:(%dË%s\n", 
dev
->
desig«t‹_ty≥
, 
	`scsi_desig«t‹_ty≥_to_°r
(dev->designator_type));

95 
	`¥ötf
("Desig«t‹:[%s]\n", 
dev
->
desig«t‹
);

97 
	}
}

99 
	$öquúy_unô_£rül_numbî
(
scsi_öquúy_unô_£rül_numbî
 *
öq
)

101 
	`¥ötf
("Unô Sîü»Numbî:[%s]\n", 
öq
->
u¢
);

102 
	}
}

104 
	$öquúy_suµ‹ãd_∑ges
(
scsi_öquúy_suµ‹ãd_∑ges
 *
öq
)

106 
i
;

108 
i
 = 0; i < 
öq
->
num_∑ges
; i++) {

109 
	`¥ötf
("Page:0x%02x %s\n", 
öq
->
∑ges
[
i
], 
	`scsi_öquúy_∑gecode_to_°r
(inq->pages[i]));

111 
	}
}

113 
	$öquúy_°™d¨d
(
scsi_öquúy_°™d¨d
 *
öq
)

115 
i
;

117 
	`¥ötf
("Peripheral Qualifier:%s\n",

118 
	`scsi_devquÆifõr_to_°r
(
öq
->
quÆifõr
));

119 
	`¥ötf
("Peripheral Device Type:%s\n",

120 
	`scsi_devty≥_to_°r
(
öq
->
devi˚_ty≥
));

121 
	`¥ötf
("RemovabÀ:%d\n", 
öq
->
rmb
);

122 
	`¥ötf
("Vîsi⁄:%d %s\n", 
öq
->
vîsi⁄
, 
	`scsi_vîsi⁄_to_°r
(inq->version));

123 
	`¥ötf
("N‹mACA:%d\n", 
öq
->
n‹maˇ
);

124 
	`¥ötf
("HiSup:%d\n", 
öq
->
hisup
);

125 
	`¥ötf
("Rï⁄£D©aF‹m©:%d\n", 
öq
->
ª•⁄£_d©a_f‹m©
);

126 
	`¥ötf
("SCCS:%d\n", 
öq
->
sccs
);

127 
	`¥ötf
("ACC:%d\n", 
öq
->
acc
);

128 
	`¥ötf
("TPGS:%d\n", 
öq
->
çgs
);

129 
	`¥ötf
("3PC:%d\n", 
öq
->
thªïc
);

130 
	`¥ötf
("PrŸe˘:%d\n", 
öq
->
¥Ÿe˘
);

131 
	`¥ötf
("EncSîv:%d\n", 
öq
->
íc£rv
);

132 
	`¥ötf
("Mu…iP:%d\n", 
öq
->
mu…ù
);

133 
	`¥ötf
("SYNC:%d\n", 
öq
->
sync
);

134 
	`¥ötf
("CmdQue:%d\n", 
öq
->
cmdque
);

135 
	`¥ötf
("Víd‹:%s\n", 
öq
->
víd‹_idítifiˇti⁄
);

136 
	`¥ötf
("Produ˘:%s\n", 
öq
->
¥odu˘_idítifiˇti⁄
);

137 
	`¥ötf
("Revisi⁄:%s\n", 
öq
->
¥odu˘_ªvisi⁄_Àvñ
);

139 
i
 = 0; i < 8; i++) {

140 i‡(
öq
->
vîsi⁄_des¸ùt‹
[
i
] == 0) {

144 
	`¥ötf
("Version Descriptor:%04x %s\n",

145 
öq
->
vîsi⁄_des¸ùt‹
[
i
],

146 
	`scsi_vîsi⁄_des¸ùt‹_to_°r
(

147 
öq
->
vîsi⁄_des¸ùt‹
[
i
]));

149 
	}
}

151 
	$do_öquúy
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
, 
evpd
, 
pc
)

153 
scsi_èsk
 *
èsk
;

154 
fuŒ_size
;

155 *
öq
;

158 
èsk
 = 
	`iscsi_öquúy_sync
(
iscsi
, 
lun
, 
evpd
, 
pc
, 64);

159 i‡(
èsk
 =
NULL
 ||Åask->
°©us
 !
SCSI_STATUS_GOOD
) {

160 
	`Ârötf
(
°dîr
, "Inquúy comm™d faûed : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

161 
	`exô
(10);

164 
fuŒ_size
 = 
	`scsi_d©aö_gëfuŒsize
(
èsk
);

165 i‡(
fuŒ_size
 > 
èsk
->
d©aö
.
size
) {

166 
	`scsi_‰ì_scsi_èsk
(
èsk
);

169 i‡((
èsk
 = 
	`iscsi_öquúy_sync
(
iscsi
, 
lun
, 
evpd
, 
pc
, 
fuŒ_size
)Ë=
NULL
) {

170 
	`Ârötf
(
°dîr
, "Inquúy comm™d faûed : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

171 
	`exô
(10);

175 
öq
 = 
	`scsi_d©aö_unm¨shÆl
(
èsk
);

176 i‡(
öq
 =
NULL
) {

177 
	`Ârötf
(
°dîr
, "failedÅo unmarshall inquiry datain blob\n");

178 
	`exô
(10);

181 i‡(
evpd
 == 0) {

182 
	`öquúy_°™d¨d
(
öq
);

184 
pc
) {

185 
SCSI_INQUIRY_PAGECODE_SUPPORTED_VPD_PAGES
:

186 
	`öquúy_suµ‹ãd_∑ges
(
öq
);

188 
SCSI_INQUIRY_PAGECODE_UNIT_SERIAL_NUMBER
:

189 
	`öquúy_unô_£rül_numbî
(
öq
);

191 
SCSI_INQUIRY_PAGECODE_DEVICE_IDENTIFICATION
:

192 
	`öquúy_devi˚_idítifiˇti⁄
(
öq
);

194 
SCSI_INQUIRY_PAGECODE_BLOCK_LIMITS
:

195 
	`öquúy_block_limôs
(
öq
);

197 
SCSI_INQUIRY_PAGECODE_BLOCK_DEVICE_CHARACTERISTICS
:

198 
	`öquúy_block_devi˚_ch¨a˘îi°ics
(
öq
);

200 
SCSI_INQUIRY_PAGECODE_LOGICAL_BLOCK_PROVISIONING
:

201 
	`öquúy_logiˇl_block_¥ovisi⁄ög
(
öq
);

204 
	`Ârötf
(
°dîr
, "Usuµ‹ãdÖagecode:0x%02x\n", 
pc
);

207 
	`scsi_‰ì_scsi_èsk
(
èsk
);

208 
	}
}

211 
	$¥öt_ußge
()

213 
	`Ârötf
(
°dîr
, "Usage: iscsi-inq [-?] [-?|--help] [--usage] [-i|--initiator-name=iqn-name]\n"

215 
	}
}

217 
	$¥öt_hñp
()

219 
	`Ârötf
(
°dîr
, "Usage: iscsi-inq [OPTION...] <iscsi-url>\n");

220 
	`Ârötf
(
°dîr
, " -i, --initiator-name=iqn-name InitiatornameÅo use\n");

221 
	`Ârötf
(
°dîr
, " -e, --evpd=integerÉvpd\n");

222 
	`Ârötf
(
°dîr
, " -c, --pagecode=integerÖage code\n");

223 
	`Ârötf
(
°dîr
, " -d, --debug=integer debugÜevel (0=disabled)\n");

224 
	`Ârötf
(
°dîr
, "\n");

225 
	`Ârötf
(
°dîr
, "Help options:\n");

226 
	`Ârötf
(
°dîr
, " -?, --help ShowÅhis help message\n");

227 
	`Ârötf
(
°dîr
, " --usage Display brief usage message\n");

228 
	`Ârötf
(
°dîr
, "\n");

229 
	`Ârötf
(
°dîr
, "iSCSI URL f‹m© : %s\n", 
ISCSI_URL_SYNTAX
);

230 
	`Ârötf
(
°dîr
, "\n");

231 
	`Ârötf
(
°dîr
, "<host> isÉither of:\n");

232 
	`Ârötf
(
°dîr
, " \"hostname\" iscsi.example\n");

233 
	`Ârötf
(
°dîr
, " \"ipv4-address\" 10.1.1.27\n");

234 
	`Ârötf
(
°dîr
, " \"ipv6-address\" [fce0::1]\n");

235 
	}
}

237 
	$maö
(
¨gc
, *
¨gv
[])

239 
iscsi_c⁄ãxt
 *
iscsi
;

240 c⁄° *
uæ
 = 
NULL
;

241 
iscsi_uæ
 *iscsi_uæ = 
NULL
;

242 
evpd
 = 0, 
∑gecode
 = 0;

243 
show_hñp
 = 0, 
show_ußge
 = 0, 
debug
 = 0;

244 
c
;

246 
›ti⁄
 
l⁄g_›ti⁄s
[] = {

247 {"hñp", 
no_¨gumít
, 
NULL
, 'h'},

248 {"ußge", 
no_¨gumít
, 
NULL
, 'u'},

249 {"debug", 
no_¨gumít
, 
NULL
, 'd'},

250 {"öôüt‹-«me", 
ªquúed_¨gumít
, 
NULL
, 'i'},

251 {"evpd", 
ªquúed_¨gumít
, 
NULL
, 'e'},

252 {"∑gecode", 
ªquúed_¨gumít
, 
NULL
, 'c'},

255 
›ti⁄_ödex
;

257 
	`¥ötf
("\nISCSI INQ:");

258 (
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "h?udi:e:c:", 
l⁄g_›ti⁄s
,

259 &
›ti⁄_ödex
)) != -1) {

260 
c
) {

263 
show_hñp
 = 1;

266 
show_ußge
 = 1;

269 
debug
 = 1;

272 
öôüt‹
 = 
›èrg
;

275 
evpd
 = 
	`©oi
(
›èrg
);

278 
∑gecode
 = 
	`©oi
(
›èrg
);

281 
	`Ârötf
(
°dîr
, "Uƒecognized o±i⁄ '%c'\n\n", 
c
);

282 
	`¥öt_hñp
();

283 
	`exô
(0);

287 i‡(
show_hñp
 != 0) {

288 
	`¥öt_hñp
();

289 
	`exô
(0);

292 i‡(
show_ußge
 != 0) {

293 
	`¥öt_ußge
();

294 
	`exô
(0);

297 
iscsi
 = 
	`iscsi_¸óã_c⁄ãxt
(
öôüt‹
);

298 i‡(
iscsi
 =
NULL
) {

299 
	`Ârötf
(
°dîr
, "FailedÅo create context\n");

300 
	`exô
(10);

303 i‡(
debug
 > 0) {

304 
	`iscsi_£t_log_Àvñ
(
iscsi
, 
debug
);

305 
	`iscsi_£t_log_‚
(
iscsi
, 
iscsi_log_to_°dîr
);

308 i‡(
¨gv
[
›töd
] !
NULL
) {

309 
uæ
 = 
	`°rdup
(
¨gv
[
›töd
]);

311 i‡(
uæ
 =
NULL
) {

312 
	`Ârötf
(
°dîr
, "You must specifyÅhe URL\n");

313 
	`¥öt_ußge
();

314 
	`exô
(10);

316 
iscsi_uæ
 = 
	`iscsi_∑r£_fuŒ_uæ
(
iscsi
, 
uæ
);

318 i‡(
uæ
) {

319 
	`‰ì
(
	`disˇrd_c⁄°
(
uæ
));

322 i‡(
iscsi_uæ
 =
NULL
) {

323 
	`Ârötf
(
°dîr
, "FailedÅoÖarse URL: %s\n",

324 
	`iscsi_gë_îr‹
(
iscsi
));

325 
	`exô
(10);

328 
	`iscsi_£t_£ssi⁄_ty≥
(
iscsi
, 
ISCSI_SESSION_NORMAL
);

329 
	`iscsi_£t_hódî_dige°
(
iscsi
, 
ISCSI_HEADER_DIGEST_NONE_CRC32C
);

331 
	`¥ötf
("\n#### Calling iscsi_full_connect_sync\n");

332 i‡(
	`iscsi_fuŒ_c⁄√˘_sync
(
iscsi
, 
iscsi_uæ
->
p‹èl
, iscsi_uæ->
lun
) != 0) {

333 
	`Ârötf
(
°dîr
, "Logö Faûed. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

334 
	`iscsi_de°roy_uæ
(
iscsi_uæ
);

335 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

336 
	`exô
(10);

339 
	`do_öquúy
(
iscsi
, 
iscsi_uæ
->
lun
, 
evpd
, 
∑gecode
);

340 
	`iscsi_de°roy_uæ
(
iscsi_uæ
);

342 
	`iscsi_logout_sync
(
iscsi
);

343 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

345 
	}
}

	@utils/iscsi-ls.c

18 #ifde‡
HAVE_CONFIG_H


19 
	~"c⁄fig.h
"

22 #i‡
deföed
(
_WIN32
)

23 
	~<wösock2.h
>

24 
	~"wö32_com∑t.h
"

25 #¥agm®
commít
(
lib
, "ws2_32.lib")

26 
WSADATA
 
	gwßD©a
;

29 #ifde‡
HAVE_POLL_H


30 
	~<pﬁl.h
>

33 #ifde‡
HAVE_UNISTD_H


34 
	~<uni°d.h
>

37 
	~<°dio.h
>

38 
	~<°dlib.h
>

39 
	~<°döt.h
>

40 
	~<°rög.h
>

41 
	~"iscsi.h
"

42 
	~"scsi-lowÀvñ.h
"

44 #i‚de‡
disˇrd_c⁄°


45 
	#disˇrd_c⁄°
(
±r
Ë((*)((
öçå_t
)’å)))

	)

48 
	gshowluns
;

49 
	gu£uæs
;

50 c⁄° *
	göôüt‹
 = "iqn.2007-10.com.github:sahlberg:libiscsi:iscsi-ls";

52 
	s˛õ¡_°©e
 {

53 
	mföished
;

54 
	m°©us
;

55 
	mlun
;

56 
	mty≥
;

57 c⁄° *
	mu£∫ame
;

58 c⁄° *
	m∑ssw‹d
;

62 
	$evít_lo›
(
iscsi_c⁄ãxt
 *
iscsi
, 
˛õ¡_°©e
 *
°©e
)

64 
pﬁlfd
 
pfd
;

66 
°©e
->
föished
 == 0) {

67 
pfd
.
fd
 = 
	`iscsi_gë_fd
(
iscsi
);

68 
pfd
.
evíts
 = 
	`iscsi_which_evíts
(
iscsi
);

70 i‡(!
pfd
.
evíts
) {

71 
	`¶ìp
(1);

75 i‡(
	`pﬁl
(&
pfd
, 1, -1) < 0) {

76 
	`Ârötf
(
°dîr
, "Poll failed");

77 
	`exô
(10);

79 i‡(
	`iscsi_£rvi˚
(
iscsi
, 
pfd
.
ªvíts
) < 0) {

80 
	`Ârötf
(
°dîr
, "iscsi_£rvi˚ faûed wôh : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

81 
	`exô
(10);

84 
	}
}

86 
	$show_lun
(
iscsi_c⁄ãxt
 *
iscsi
, 
lun
)

88 
scsi_èsk
 *
èsk
;

89 
scsi_öquúy_°™d¨d
 *
öq
;

90 
ty≥
, 
no_medü
;

91 
size
 = 0;

92 
size_pf
 = 0;

93 c⁄° 
sf
[] = {' ', 'k', 'M', 'G', 'T' };

96 
tur_åy_agaö
:

97 i‡((
èsk
 = 
	`iscsi_ã°unôªady_sync
(
iscsi
, 
lun
)Ë=
NULL
) {

98 
	`Ârötf
(
°dîr
, "testunitready failed\n");

99 
	`exô
(10);

101 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION
) {

102 i‡(
èsk
->
£n£
.
key
 =
SCSI_SENSE_UNIT_ATTENTION
 &&Åask->£n£.
ascq
 =
SCSI_SENSE_ASCQ_BUS_RESET
) {

103 
	`scsi_‰ì_scsi_èsk
(
èsk
);

104 
tur_åy_agaö
;

108 
no_medü
 = 0;

109 i‡(
èsk
->
°©us
 =
SCSI_STATUS_CHECK_CONDITION


110 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_NOT_READY


111 && 
èsk
->
£n£
.
ascq
 =
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT
) {

113 
no_medü
 = 1;

114 } i‡(
èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

115 
	`Ârötf
(
°dîr
, "TESTUNITREADY faûed wôh %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

116 
	`exô
(10);

118 
	`scsi_‰ì_scsi_èsk
(
èsk
);

123 
èsk
 = 
	`iscsi_öquúy_sync
(
iscsi
, 
lun
, 0, 0, 64);

124 i‡(
èsk
 =
NULL
 ||Åask->
°©us
 !
SCSI_STATUS_GOOD
) {

125 
	`Ârötf
(
°dîr
, "ÁûedÅÿ£nd inquúy comm™d : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

126 
	`exô
(10);

128 
öq
 = 
	`scsi_d©aö_unm¨shÆl
(
èsk
);

129 i‡(
öq
 =
NULL
) {

130 
	`Ârötf
(
°dîr
, "failedÅo unmarshall inquiry datain blob\n");

131 
	`exô
(10);

133 
ty≥
 = 
öq
->
devi˚_ty≥
;

134 
	`scsi_‰ì_scsi_èsk
(
èsk
);

138 i‡(
ty≥
 =
SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_DIRECT_ACCESS
) {

139 
scsi_ªadˇ∑côy10
 *
rc10
;

141 
èsk
 = 
	`iscsi_ªadˇ∑côy10_sync
(
iscsi
, 
lun
, 0, 0);

142 i‡(
èsk
 =
NULL
 ||Åask->
°©us
 !
SCSI_STATUS_GOOD
) {

143 
	`Ârötf
(
°dîr
, "failedÅo sendÑeadcapacity command\n");

144 
	`exô
(10);

147 
rc10
 = 
	`scsi_d©aö_unm¨shÆl
(
èsk
);

148 i‡(
rc10
 =
NULL
) {

149 
	`Ârötf
(
°dîr
, "failedÅo unmarshallÑeadcapacity10 data\n");

150 
	`exô
(10);

153 
size
 = 
rc10
->
block_size
;

154 
size
 *
rc10
->
lba
;

156 
size_pf
=0; size_pf<4 && 
size
 > 1024; size_pf++) {

157 
size
 /= 1024;

160 
	`scsi_‰ì_scsi_èsk
(
èsk
);

164 
	`¥ötf
("Lun:%-4d Ty≥:%s", 
lun
, 
	`scsi_devty≥_to_°r
(
ty≥
));

165 i‡(
ty≥
 =
SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_DIRECT_ACCESS
) {

166 
	`¥ötf
(" (Size:%Œd%c)", 
size
, 
sf
[
size_pf
]);

168 i‡(
no_medü
) {

169 
	`¥ötf
(" (No mediaÜoaded)");

171 
	`¥ötf
("\n");

172 
	}
}

174 
	$li°_luns
(
˛õ¡_°©e
 *
˛¡
, c⁄° *
èrgë
, c⁄° *
p‹èl
)

176 
iscsi_c⁄ãxt
 *
iscsi
;

177 
scsi_èsk
 *
èsk
;

178 
scsi_ªp‹éuns_li°
 *
li°
;

179 
fuŒ_ªp‹t_size
;

180 
i
;

182 i‡(
	`°∫ˇ£cmp
(
p‹èl
, "[fe80:", 6) == 0) {

183 
	`Ârötf
(
°dîr
, "skippingÜink-localáddress\n");

187 
iscsi
 = 
	`iscsi_¸óã_c⁄ãxt
(
öôüt‹
);

188 i‡(
iscsi
 =
NULL
) {

189 
	`¥ötf
("FailedÅo create context\n");

190 
	`exô
(10);

193 
	`iscsi_£t_öôüt‹_u£∫ame_pwd
(
iscsi
, 
˛¡
->
u£∫ame
, c t->
∑ssw‹d
);

194 i‡(
	`iscsi_£t_èrgë«me
(
iscsi
, 
èrgë
)) {

195 
	`Ârötf
(
°dîr
, "FailedÅo setÅargetÇame\n");

196 
	`exô
(10);

198 
	`iscsi_£t_£ssi⁄_ty≥
(
iscsi
, 
ISCSI_SESSION_NORMAL
);

199 
	`iscsi_£t_hódî_dige°
(
iscsi
, 
ISCSI_HEADER_DIGEST_NONE_CRC32C
);

201 i‡(
	`iscsi_fuŒ_c⁄√˘_sync
(
iscsi
, 
p‹èl
, -1) != 0) {

202 
	`¥ötf
("list_luns: iscsi_connect failed. %s\n",

203 
	`iscsi_gë_îr‹
(
iscsi
));

204 
	`exô
(10);

210 i‡((
èsk
 = 
	`iscsi_ªp‹éuns_sync
(
iscsi
, 0, 16)Ë=
NULL
) {

211 
	`Ârötf
(
°dîr
, "ªp‹éun†Áûed : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

212 
	`exô
(10);

214 
fuŒ_ªp‹t_size
 = 
	`scsi_d©aö_gëfuŒsize
(
èsk
);

215 i‡(
fuŒ_ªp‹t_size
 > 
èsk
->
d©aö
.
size
) {

216 
	`scsi_‰ì_scsi_èsk
(
èsk
);

219 i‡((
èsk
 = 
	`iscsi_ªp‹éuns_sync
(
iscsi
, 0, 
fuŒ_ªp‹t_size
)Ë=
NULL
) {

220 
	`Ârötf
(
°dîr
, "ªp‹éun†Áûed : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

221 
	`exô
(10);

225 
li°
 = 
	`scsi_d©aö_unm¨shÆl
(
èsk
);

226 i‡(
li°
 =
NULL
) {

227 
	`Ârötf
(
°dîr
, "failedÅo unmarshallÑeportluns datain blob\n");

228 
	`exô
(10);

230 
i
=0; i < ()
li°
->
num
; i++) {

231 
	`show_lun
(
iscsi
, 
li°
->
luns
[
i
]);

234 
	`scsi_‰ì_scsi_èsk
(
èsk
);

235 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

236 
	}
}

241 
	$discovîylogout_cb
(
iscsi_c⁄ãxt
 *
iscsi
, 
°©us
, *
comm™d_d©a
 
_U_
, *
¥iv©e_d©a
)

243 
˛õ¡_°©e
 *
°©e
 = (˛õ¡_°©ê*)
¥iv©e_d©a
;

245 i‡(
°©us
 != 0) {

246 
	`Ârötf
(
°dîr
, "FaûedÅÿlogouà‰omÅ¨gë. : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

247 
	`exô
(10);

250 i‡(
	`iscsi_disc⁄√˘
(
iscsi
) != 0) {

251 
	`Ârötf
(
°dîr
, "FailedÅo disconnect old socket\n");

252 
	`exô
(10);

255 
°©e
->
föished
 = 1;

256 
	}
}

258 
	$discovîy_cb
(
iscsi_c⁄ãxt
 *
iscsi
, 
°©us
, *
comm™d_d©a
, *
¥iv©e_d©a
)

260 
iscsi_discovîy_addªss
 *
addr
;

262 i‡(
°©us
 != 0) {

263 
	`Ârötf
(
°dîr
, "FaûedÅÿdÿdiscovîy o¿èrgë. : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

264 
	`exô
(10);

267 
addr
=
comm™d_d©a
;áddr;áddr˜ddr->
√xt
) {

268 
iscsi_èrgë_p‹èl
 *
p‹èl
 = 
addr
->
p‹èls
;

270 
p‹èl
 !
NULL
) {

271 i‡(
u£uæs
 =1 && 
showluns
 == 0) {

272 *
°r
 = 
	`°ºchr
(
p‹èl
->portal, ',');

273 i‡(
°r
 !
NULL
) {

274 
°r
[0] = 0;

276 
	`¥ötf
("iscsi://%s/%s/0\n", 
p‹èl
->p‹èl, 
addr
->
èrgë_«me
);

278 
	`¥ötf
("T¨gë:%†P‹èl:%s\n", 
addr
->
èrgë_«me
, 
p‹èl
->portal);

280 i‡(
showluns
 != 0) {

281 
	`li°_luns
(
¥iv©e_d©a
, 
addr
->
èrgë_«me
, 
p‹èl
->portal);

283 
p‹èl
 =Ö‹èl->
√xt
;

287 i‡(
	`iscsi_logout_async
(
iscsi
, 
discovîylogout_cb
, 
¥iv©e_d©a
) != 0) {

288 
	`Ârötf
(
°dîr
, "iscsi_logout_asyn¯Áûed : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

289 
	`exô
(10);

291 
	}
}

294 
	$discovîylogö_cb
(
iscsi_c⁄ãxt
 *
iscsi
, 
°©us
, *
comm™d_d©a
 
_U_
, *
¥iv©e_d©a
)

296 i‡(
°©us
 != 0) {

297 
	`Ârötf
(
°dîr
, "Logö faûed. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

298 
	`exô
(10);

301 i‡(
	`iscsi_discovîy_async
(
iscsi
, 
discovîy_cb
, 
¥iv©e_d©a
) != 0) {

302 
	`Ârötf
(
°dîr
, "ÁûedÅÿ£nd discovîy comm™d : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

303 
	`exô
(10);

305 
	}
}

307 
	$discovîyc⁄√˘_cb
(
iscsi_c⁄ãxt
 *
iscsi
, 
°©us
, *
comm™d_d©a
 
_U_
, *
¥iv©e_d©a
)

309 i‡(
°©us
 != 0) {

310 
	`Ârötf
(
°dîr
, "discovîyc⁄√˘_cb: c⁄√˘i⁄ faûed : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

311 
	`exô
(10);

314 i‡(
	`iscsi_logö_async
(
iscsi
, 
discovîylogö_cb
, 
¥iv©e_d©a
) != 0) {

315 
	`Ârötf
(
°dîr
, "iscsi_logö_asyn¯Áûed : %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

316 
	`exô
(10);

318 
	}
}

320 
	$¥öt_ußge
()

322 
	`Ârötf
(
°dîr
, "Usage: iscsi-ls [-?|--help] [-d|--debug] "

325 
	}
}

327 
	$¥öt_hñp
()

329 
	`Ârötf
(
°dîr
, "Usage: iscsi-ls [OPTION...] <iscsi-url>\n");

330 
	`Ârötf
(
°dîr
, " -i, --initiator-name=iqn-name InitiatornameÅo use\n");

331 
	`Ârötf
(
°dîr
, " -d, --debug Print debug information\n");

332 
	`Ârötf
(
°dîr
, " -s, --show-luns ShowÅheÜuns forÉachÅarget\n");

333 
	`Ârötf
(
°dîr
, " --url OutputÅargets in URL format\n");

334 
	`Ârötf
(
°dîr
, " (doesÇot work with -s)\n");

335 
	`Ârötf
(
°dîr
, "\n");

336 
	`Ârötf
(
°dîr
, "Help options:\n");

337 
	`Ârötf
(
°dîr
, " -?, --help ShowÅhis help message\n");

338 
	`Ârötf
(
°dîr
, " --usage Display brief usage message\n");

339 
	`Ârötf
(
°dîr
, "\n");

340 
	`Ârötf
(
°dîr
, "iSCSI P‹è»URL f‹m© : %s\n", 
ISCSI_PORTAL_URL_SYNTAX
);

341 
	`Ârötf
(
°dîr
, "\n");

342 
	`Ârötf
(
°dîr
, "<host> isÉither of:\n");

343 
	`Ârötf
(
°dîr
, " \"hostname\" iscsi.example\n");

344 
	`Ârötf
(
°dîr
, " \"ipv4-address\" 10.1.1.27\n");

345 
	`Ârötf
(
°dîr
, " \"ipv6-address\" [fce0::1]\n");

346 
	}
}

348 
	$maö
(
¨gc
, *
¨gv
[])

350 
iscsi_c⁄ãxt
 *
iscsi
;

351 
iscsi_uæ
 *iscsi_uæ = 
NULL
;

352 
˛õ¡_°©e
 
°©e
;

353 c⁄° *
uæ
 = 
NULL
;

354 
i
;

355 
show_hñp
 = 0, 
show_ußge
 = 0, 
debug
 = 0;

357 #ifde‡
_WIN32


358 i‡(
	`WSASèπup
(
	`MAKEWORD
(2,2), &
wßD©a
) != 0) {

359 
	`¥ötf
("FailedÅo start Winsock2\n");

360 
	`exô
(10);

364 
i
 = 1; i < 
¨gc
; i++) {

365 i‡(!
	`°rcmp
(
¨gv
[
i
], "-?") ||

366 !
	`°rcmp
(
¨gv
[
i
], "-h") ||

367 !
	`°rcmp
(
¨gv
[
i
], "--help")) {

368 
show_hñp
 = 1;

369 } i‡(!
	`°rcmp
(
¨gv
[
i
], "-u") ||

370 !
	`°rcmp
(
¨gv
[
i
], "-usage")) {

371 
show_ußge
 = 1;

372 } i‡(!
	`°rcmp
(
¨gv
[
i
], "-d") ||

373 !
	`°rcmp
(
¨gv
[
i
], "--debug")) {

374 
debug
 = 1;

375 } i‡(!
	`°rcmp
(
¨gv
[
i
], "-i") ||

376 !
	`°rcmp
(
¨gv
[
i
], "--initiator-name")) {

377 
öôüt‹
 = 
¨gv
[++
i
];

378 } i‡(!
	`°rcmp
(
¨gv
[
i
], "-s") ||

379 !
	`°rcmp
(
¨gv
[
i
], "--show-luns")) {

380 
showluns
 = 1;

381 } i‡(!
	`°rcmp
(
¨gv
[
i
], "-U") ||

382 !
	`°rcmp
(
¨gv
[
i
], "--url")) {

383 
u£uæs
 = 1;

384 } i‡(!
	`°∫cmp
("iscsi://", 
¨gv
[
i
], 8)) {

385 
uæ
 = 
	`°rdup
(
¨gv
[
i
]);

389 i‡(
show_hñp
 != 0) {

390 
	`¥öt_hñp
();

391 
	`exô
(0);

394 i‡(
show_ußge
 != 0) {

395 
	`¥öt_ußge
();

396 
	`exô
(0);

399 
	`mem£t
(&
°©e
, 0, (state));

401 i‡(
uæ
 =
NULL
) {

402 
	`Ârötf
(
°dîr
, "You must specify iscsiÅargetÖortal.\n");

403 
	`¥öt_ußge
();

404 
	`exô
(10);

407 
iscsi
 = 
	`iscsi_¸óã_c⁄ãxt
(
öôüt‹
);

408 i‡(
iscsi
 =
NULL
) {

409 
	`¥ötf
("FailedÅo create context\n");

410 
	`exô
(10);

413 
	`iscsi_£t_£ssi⁄_ty≥
(
iscsi
, 
ISCSI_SESSION_DISCOVERY
);

414 
	`iscsi_£t_hódî_dige°
(
iscsi
, 
ISCSI_HEADER_DIGEST_NONE
);

416 i‡(
debug
 > 0) {

417 
	`iscsi_£t_log_Àvñ
(
iscsi
, 
debug
);

418 
	`iscsi_£t_log_‚
(
iscsi
, 
iscsi_log_to_°dîr
);

421 
iscsi_uæ
 = 
	`iscsi_∑r£_p‹èl_uæ
(
iscsi
, 
uæ
);

423 i‡(
uæ
) {

424 
	`‰ì
(
	`disˇrd_c⁄°
(
uæ
));

427 i‡(
iscsi_uæ
 =
NULL
) {

428 
	`Ârötf
(
°dîr
, "FailedÅoÖarse URL: %s\n",

429 
	`iscsi_gë_îr‹
(
iscsi
));

430 
	`exô
(10);

433 
°©e
.
u£∫ame
 = 
iscsi_uæ
->
u£r
;

434 
°©e
.
∑ssw‹d
 = 
iscsi_uæ
->
∑sswd
;

436 i‡(
	`iscsi_c⁄√˘_async
(
iscsi
, 
iscsi_uæ
->
p‹èl
, 
discovîyc⁄√˘_cb
, &
°©e
) != 0) {

437 
	`Ârötf
(
°dîr
, "connect_async: iscsi_connect failed. %s\n",

438 
	`iscsi_gë_îr‹
(
iscsi
));

439 
	`exô
(10);

442 
	`evít_lo›
(
iscsi
, &
°©e
);

444 
	`iscsi_de°roy_uæ
(
iscsi_uæ
);

445 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

447 
	}
}

	@utils/iscsi-perf.c

18 #ifde‡
HAVE_CONFIG_H


19 
	~"c⁄fig.h
"

22 
	~<°dio.h
>

23 
	~<°dlib.h
>

24 
	~<°döt.h
>

25 
	~<öây≥s.h
>

26 
	~<°rög.h
>

27 
	~<pﬁl.h
>

28 
	~<gë›t.h
>

29 
	~<time.h
>

30 
	~<sig«l.h
>

31 
	~<uni°d.h
>

32 
	~"iscsi.h
"

33 
	~"scsi-lowÀvñ.h
"

35 #i‚de‡
HAVE_CLOCK_GETTIME


36 
	~<sys/time.h
>

39 
	#PERF_VERSION
 "0.1"

	)

41 
	#NOP_INTERVAL
 5

	)

42 
	#MAX_NOP_FAILURES
 3

	)

44 c⁄° *
	göôüt‹
 = "iqn.2010-11.libiscsi:iscsi-perf";

45 
	g¥oc_Æ¨m
 = 0;

46 
	gmax_ö_Êight
 = 32;

47 
	gblocks_≥r_io
 = 8;

48 
uöt64_t
 
	gru¡ime
 = 0;

49 
uöt64_t
 
	gföished
 = 0;

50 
	gloggög
 = 0;

52 
	s˛õ¡
 {

53 
	mföished
;

54 
	mö_Êight
;

55 
	møndom
;

56 
	møndom_blocks
;

58 
iscsi_c⁄ãxt
 *
	miscsi
;

59 
scsi_iovec
 
	m≥rf_iov
;

61 
	mlun
;

62 
	mblocksize
;

63 
uöt64_t
 
	mnum_blocks
;

64 
uöt64_t
 
	mpos
;

65 
uöt64_t
 
	mœ°_ns
;

66 
uöt64_t
 
	mfú°_ns
;

67 
uöt64_t
 
	mi›s
;

68 
uöt64_t
 
	mœ°_i›s
;

69 
uöt64_t
 
	mbyãs
;

70 
uöt64_t
 
	mœ°_byãs
;

72 
	mign‹e_îr‹s
;

73 
	mmax_ªc⁄√˘s
;

74 
	mbusy_˙t
;

75 
	mîr_˙t
;

76 
	mªåy_˙t
;

79 
uöt64_t
 
	$gë_˛ock_ns
() {

80 
ªs
;

81 
uöt64_t
 
ns
;

83 #ifde‡
HAVE_CLOCK_GETTIME


84 
time•ec
 
ts
;

85 
ªs
 = 
	`˛ock_gëtime
 (
CLOCK_MONOTONIC
, &
ts
);

86 
ns
 = 
ts
.
tv_£c
 * 1000000000ULL +Ås.
tv_n£c
;

88 
timevÆ
 
tv
;

89 
ªs
 = 
	`gëtimeofday
(&
tv
, 
NULL
);

90 
ns
 = 
tv
.
tv_£c
 * 1000000000ULL +Åv.
tv_u£c
 * 1000;

92 i‡(
ªs
 == -1) {

93 
	`Ârötf
(
°dîr
,"couldÇot getÑequested clock\n");

94 
	`exô
(10);

96  
ns
;

97 
	}
}

99 
fûl_ªad_queue
(
˛õ¡
 *client);

101 
	$¥ogªss
(
˛õ¡
 *client) {

102 
uöt64_t
 
now
 = 
	`gë_˛ock_ns
();

103 i‡(
now
 - 
˛õ¡
->
œ°_ns
 < 1000000000ULL) ;

105 
uöt64_t
 
_ru¡ime
 = (
now
 - 
˛õ¡
->
fú°_ns
) / 1000000000ULL;

106 i‡(
ru¡ime
Ë
_ru¡ime
 =Ñuntime - _runtime;

108 
	`¥ötf
 ("\r");

109 
uöt64_t
 
ai›s
 = 1000000000.0 * (
˛õ¡
->
i›s
Ë/ (
now
 - clõ¡->
fú°_ns
);

110 
uöt64_t
 
ambps
 = 1000000000.0 * (
˛õ¡
->
byãs
Ë/ (
now
 - clõ¡->
fú°_ns
);

111 i‡(!
_ru¡ime
) {

112 
föished
 = 1;

113 
	`¥ötf
 ("i›†avîagê%" 
PRIu64
 " (%" PRIu64 " MB/sË ", 
ai›s
, (ai›†* 
blocks_≥r_io
 * 
˛õ¡
->
blocksize
) >> 20);

115 
uöt64_t
 
i›s
 = 1000000000ULL * (
˛õ¡
->i›†- clõ¡->
œ°_i›s
Ë/ (
now
 - clõ¡->
œ°_ns
);

116 
uöt64_t
 
mbps
 = 1000000000ULL * (
˛õ¡
->
byãs
 - clõ¡->
œ°_byãs
Ë/ (
now
 - clõ¡->
œ°_ns
);

117 
	`¥ötf
 ("%02" 
PRIu64
 ":%02" PRIu64 ":%02" PRIu64 " - ", 
_ru¡ime
 / 3600, (_runtime % 3600) / 60, _runtime % 60);

118 
	`¥ötf
 ("lb®%" 
PRIu64
 ", i›†cuºíà%" PRIu64 " (%" PRIu64 " MB/s), ", 
˛õ¡
->
pos
, 
i›s
, 
mbps
 >> 20);

119 
	`¥ötf
 ("i›†avîagê%" 
PRIu64
 " (%" PRIu64 " MB/s), in_Êighà%d, busy %d ", 
ai›s
, 
ambps
 >> 20, 
˛õ¡
->
ö_Êight
, clõ¡->
busy_˙t
);

121 i‡(
loggög
) {

122 
	`¥ötf
 ("\n");

124 
	`fÊush
(
°dout
);

125 
˛õ¡
->
œ°_ns
 = 
now
;

126 
˛õ¡
->
œ°_i›s
 = clõ¡->
i›s
;

127 
˛õ¡
->
œ°_byãs
 = clõ¡->
byãs
;

128 
	}
}

130 
	$cb
(
iscsi_c⁄ãxt
 *
iscsi
 
_U_
, 
°©us
, *
comm™d_d©a
, *
¥iv©e_d©a
)

132 
˛õ¡
 *˛õ¡ = (˛õ¡ *)
¥iv©e_d©a
;

133 
scsi_èsk
 *
èsk
 = 
comm™d_d©a
, *
èsk2
 = 
NULL
;

134 
scsi_ªad16_cdb
 *
ªad16_cdb
 = 
NULL
;

136 
ªad16_cdb
 = 
	`scsi_cdb_unm¨shÆl
(
èsk
, 
SCSI_OPCODE_READ16
);

137 i‡(
ªad16_cdb
 =
NULL
) {

138 
	`Ârötf
(
°dîr
, "FailedÅo unmarshall READ16 CDB.\n");

139 
˛õ¡
->
îr_˙t
++;

140 
out
;

143 i‡(
°©us
 =
SCSI_STATUS_BUSY
 ||

144 (
°©us
 =
SCSI_STATUS_CHECK_CONDITION
 && 
èsk
->
£n£
.
key
 =
SCSI_SENSE_UNIT_ATTENTION
)) {

145 i‡(
˛õ¡
->
ªåy_˙t
++ > 4 * 
max_ö_Êight
) {

146 
	`Ârötf
(
°dîr
, "maxiumÇumber of commandÑetriesÑeached...\n");

147 
˛õ¡
->
îr_˙t
++;

148 
out
;

150 
èsk2
 = 
	`iscsi_ªad16_èsk
(
˛õ¡
->
iscsi
,

151 
˛õ¡
->
lun
, 
ªad16_cdb
->
lba
,

152 
ªad16_cdb
->
å™s„r_Àngth
 * 
˛õ¡
->
blocksize
,

153 
˛õ¡
->
blocksize
, 0, 0, 0, 0, 0,

154 
cb
, 
˛õ¡
);

155 i‡(
èsk2
 =
NULL
) {

156 
	`Ârötf
(
°dîr
, "failedÅo sendÑead16 command\n");

157 
˛õ¡
->
îr_˙t
++;

159 
	`scsi_èsk_£t_iov_ö
(
èsk2
, &
˛õ¡
->
≥rf_iov
, 1);

160 i‡(
°©us
 =
SCSI_STATUS_BUSY
) {

161 
˛õ¡
->
busy_˙t
++;

163 } i‡(
°©us
 =
SCSI_STATUS_CANCELLED
) {

164 
˛õ¡
->
îr_˙t
++;

165 } i‡(
°©us
 =
SCSI_STATUS_GOOD
) {

166 
˛õ¡
->
ªåy_˙t
 = 0;

167 
˛õ¡
->
byãs
 +
ªad16_cdb
->
å™s„r_Àngth
 * clõ¡->
blocksize
;

169 
	`Ârötf
(
°dîr
, "Ród16 faûed wôh %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

170 i‡(!
˛õ¡
->
ign‹e_îr‹s
) {

171 
˛õ¡
->
îr_˙t
++;

175 
out
:

176 
	`scsi_‰ì_scsi_èsk
(
èsk
);

178 i‡(!
˛õ¡
->
îr_˙t
) {

179 
	`¥ogªss
(
˛õ¡
);

180 
˛õ¡
->
i›s
++;

181 
˛õ¡
->
ö_Êight
--;

182 
	`fûl_ªad_queue
(
˛õ¡
);

184 
	}
}

187 
	$fûl_ªad_queue
(
˛õ¡
 *client)

189 
öt64_t
 
num_blocks
;

191 i‡(
föished
) ;

193 i‡(
˛õ¡
->
pos
 >˛õ¡->
num_blocks
) client->pos = 0;

194 
˛õ¡
->
ö_Êight
 < 
max_ö_Êight
 && clõ¡->
pos
 < clõ¡->
num_blocks
) {

195 
scsi_èsk
 *
èsk
;

196 
˛õ¡
->
ö_Êight
++;

198 i‡(
˛õ¡
->
øndom
) {

199 
˛õ¡
->
pos
 = 
	`ønd
(Ë% clõ¡->
num_blocks
;

202 
num_blocks
 = 
˛õ¡
->num_block†- clõ¡->
pos
;

203 i‡(
num_blocks
 > 
blocks_≥r_io
) {

204 
num_blocks
 = 
blocks_≥r_io
;

207 i‡(
˛õ¡
->
øndom_blocks
) {

208 
num_blocks
 = 
	`ønd
() %Çum_blocks + 1;

211 
èsk
 = 
	`iscsi_ªad16_èsk
(
˛õ¡
->
iscsi
,

212 
˛õ¡
->
lun
, clõ¡->
pos
,

213 (
uöt32_t
)(
num_blocks
 * 
˛õ¡
->
blocksize
),

214 
˛õ¡
->
blocksize
, 0, 0, 0, 0, 0,

215 
cb
, 
˛õ¡
);

216 i‡(
èsk
 =
NULL
) {

217 
	`Ârötf
(
°dîr
, "failedÅo sendÑead16 command\n");

218 
	`iscsi_de°roy_c⁄ãxt
(
˛õ¡
->
iscsi
);

219 
	`exô
(10);

221 
	`scsi_èsk_£t_iov_ö
(
èsk
, &
˛õ¡
->
≥rf_iov
, 1);

222 
˛õ¡
->
pos
 +
num_blocks
;

224 
	}
}

226 
	$ußge
() {

227 
	`Ârötf
(
°dîr
,"Usage: iscsi-perf [-i <initiator-name>] [-m <max_requests>] [-b blocks_per_request] [-tÅimeout] [-r|--random] [-l|--logging] [-n|--ignore-errors] [-x <max_reconnects>] <LUN>\n");

228 
	`exô
(1);

229 
	}
}

231 
	$sig_h™dÀr
 (
signum
 ) {

232 i‡(
signum
 =
SIGALRM
) {

233 i‡(
¥oc_Æ¨m
) {

234 
	`Ârötf
(
°dîr
, "\n\nABORT: Lastálarm wasÇotÖrocessed.\n");

235 
	`exô
(10);

237 
¥oc_Æ¨m
 = 1;

238 
	`Æ¨m
(
NOP_INTERVAL
);

240 
föished
++;

242 
	}
}

244 
	$maö
(
¨gc
, *
¨gv
[])

246 *
uæ
 = 
NULL
;

247 
iscsi_uæ
 *iscsi_url;

248 
scsi_èsk
 *
èsk
;

249 
scsi_ªadˇ∑côy16
 *
rc16
;

250 
c
;

251 
pﬁlfd
 
pfd
[1];

252 
˛õ¡
 client;

254 
›ti⁄
 
l⁄g_›ti⁄s
[] = {

255 {"öôüt‹-«me", 
ªquúed_¨gumít
, 
NULL
, 'i'},

256 {"max", 
ªquúed_¨gumít
, 
NULL
, 'm'},

257 {"blocks", 
ªquúed_¨gumít
, 
NULL
, 'b'},

258 {"ru¡ime", 
ªquúed_¨gumít
, 
NULL
, 't'},

259 {"øndom", 
no_¨gumít
, 
NULL
, 'r'},

260 {"øndom-blocks", 
no_¨gumít
, 
NULL
, 'R'},

261 {"loggög", 
no_¨gumít
, 
NULL
, 'l'},

262 {"ign‹e-îr‹s", 
no_¨gumít
, 
NULL
, 'n'},

265 
›ti⁄_ödex
;

267 
	`mem£t
(&
˛õ¡
, 0, (client));

268 
˛õ¡
.
max_ªc⁄√˘s
 = -1;

270 
	`§™d
(
	`time
(
NULL
));

272 
	`¥ötf
("iscsi-≥r‡vîsi⁄ %†- (cË2014-2015 by Pëî Lõví <∂@ƒ∏amp.de>\n\n", 
PERF_VERSION
);

274 (
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "i:m:b:t: rRx:", 
l⁄g_›ti⁄s
,

275 &
›ti⁄_ödex
)) != -1) {

276 
c
) {

278 
öôüt‹
 = 
›èrg
;

281 
max_ö_Êight
 = 
	`©oi
(
›èrg
);

284 
ru¡ime
 = 
	`©oi
(
›èrg
);

287 
blocks_≥r_io
 = 
	`©oi
(
›èrg
);

290 
˛õ¡
.
ign‹e_îr‹s
 = 1;

293 
˛õ¡
.
øndom
 = 1;

296 
˛õ¡
.
øndom_blocks
 = 1;

299 
loggög
 = 1;

302 
˛õ¡
.
max_ªc⁄√˘s
 = 
	`©oi
(
›èrg
);

305 
	`Ârötf
(
°dîr
, "Uƒecognized o±i⁄ '%c'\n\n", 
c
);

306 
	`ußge
();

310 i‡(
›töd
 !
¨gc
 -1 ) 
	`ußge
();

312 i‡(
¨gv
[
›töd
] !
NULL
) {

313 
uæ
 = 
	`°rdup
(
¨gv
[
›töd
]);

316 i‡(
uæ
 =
NULL
Ë
	`ußge
();

318 
˛õ¡
.
iscsi
 = 
	`iscsi_¸óã_c⁄ãxt
(
öôüt‹
);

319 i‡(
˛õ¡
.
iscsi
 =
NULL
) {

320 
	`Ârötf
(
°dîr
, "FailedÅo create context\n");

321 
	`exô
(10);

324 
iscsi_uæ
 = 
	`iscsi_∑r£_fuŒ_uæ
(
˛õ¡
.
iscsi
, 
uæ
);

325 i‡(
iscsi_uæ
 =
NULL
) {

326 
	`Ârötf
(
°dîr
, "FailedÅoÖarse URL: %s\n",

327 
	`iscsi_gë_îr‹
(
˛õ¡
.
iscsi
));

328 
	`exô
(10);

331 
	`iscsi_£t_£ssi⁄_ty≥
(
˛õ¡
.
iscsi
, 
ISCSI_SESSION_NORMAL
);

332 
	`iscsi_£t_hódî_dige°
(
˛õ¡
.
iscsi
, 
ISCSI_HEADER_DIGEST_NONE_CRC32C
);

334 i‡(
	`iscsi_fuŒ_c⁄√˘_sync
(
˛õ¡
.
iscsi
, 
iscsi_uæ
->
p‹èl
, iscsi_uæ->
lun
) != 0) {

335 
	`Ârötf
(
°dîr
, "Logö Faûed. %s\n", 
	`iscsi_gë_îr‹
(
˛õ¡
.
iscsi
));

336 
	`iscsi_de°roy_uæ
(
iscsi_uæ
);

337 
	`iscsi_de°roy_c⁄ãxt
(
˛õ¡
.
iscsi
);

338 
	`exô
(10);

341 
	`¥ötf
("c⁄√˘edÅÿ%s\n", 
uæ
);

342 
	`‰ì
(
uæ
);

344 
˛õ¡
.
lun
 = 
iscsi_uæ
->lun;

345 
	`iscsi_de°roy_uæ
(
iscsi_uæ
);

347 
èsk
 = 
	`iscsi_ªadˇ∑côy16_sync
(
˛õ¡
.
iscsi
, clõ¡.
lun
);

348 i‡(
èsk
 =
NULL
 ||Åask->
°©us
 !
SCSI_STATUS_GOOD
) {

349 
	`Ârötf
(
°dîr
, "failedÅo sendÑeadcapacity command\n");

350 
	`exô
(10);

353 
rc16
 = 
	`scsi_d©aö_unm¨shÆl
(
èsk
);

354 i‡(
rc16
 =
NULL
) {

355 
	`Ârötf
(
°dîr
, "failedÅo unmarshallÑeadcapacity16 data\n");

356 
	`exô
(10);

359 
˛õ¡
.
blocksize
 = 
rc16
->
block_Àngth
;

360 
˛õ¡
.
num_blocks
 = 
rc16
->
ªtu∫ed_lba
 + 1;

362 
	`scsi_‰ì_scsi_èsk
(
èsk
);

364 
˛õ¡
.
≥rf_iov
.
iov_ba£
 = 
	`mÆloc
(
blocks_≥r_io
 * clõ¡.
blocksize
);

365 i‡(!
˛õ¡
.
≥rf_iov
.
iov_ba£
) {

366 
	`Ârötf
(
°dîr
, "Out of Memory\n");

367 
	`exô
(10);

369 
˛õ¡
.
≥rf_iov
.
iov_Àn
 = 
blocks_≥r_io
 * clõ¡.
blocksize
;

371 
	`¥ötf
("ˇ∑côy i†%" 
PRIu64
 " block†‹ %" PRIu64 " byã (%" PRIu64 " MB)\n", 
˛õ¡
.
num_blocks
, clõ¡.num_block†* clõ¡.
blocksize
,

372 (
˛õ¡
.
num_blocks
 * clõ¡.
blocksize
) >> 20);

374 
	`¥ötf
("≥rf‹mög %†READ wôh %dÖ¨ÆÀ»ªque°s\n", 
˛õ¡
.
øndom
 ? "RANDOM" : "SEQUENTIAL", 
max_ö_Êight
);

376 i‡(
˛õ¡
.
øndom_blocks
) {

377 
	`¥ötf
("RANDOMÅøns„∏sizêo‡1 - %d block†(%d - %d byã)\n", 
blocks_≥r_io
, 
˛õ¡
.
blocksize
, blocks_per_io * client.blocksize);

379 
	`¥ötf
("FIXEDÅøns„∏sizêo‡%d block†(%d byã)\n", 
blocks_≥r_io
, blocks_≥r_iÿ* 
˛õ¡
.
blocksize
);

382 i‡(
ru¡ime
) {

383 
	`¥ötf
("wû»ru¿f‹ %" 
PRIu64
 " sec⁄ds.\n", 
ru¡ime
);

385 
	`¥ötf
("infiniteÑuntime -Öress CTRL-CÅoábort.\n");

388 
siga˘i⁄
 
ß
;

389 
ß
.
ß_h™dÀr
 = &
sig_h™dÀr
;

390 
ß
.
ß_Êags
 = 
SA_RESTART
;

391 
	`sigem±y£t
(&
ß
.
ß_mask
);

393 
	`siga˘i⁄
(
SIGINT
, &
ß
, 
NULL
);

394 
	`siga˘i⁄
(
SIGTERM
, &
ß
, 
NULL
);

395 
	`siga˘i⁄
(
SIGALRM
, &
ß
, 
NULL
);

397 
	`¥ötf
("\n");

399 
˛õ¡
.
fú°_ns
 = clõ¡.
œ°_ns
 = 
	`gë_˛ock_ns
();

401 
	`iscsi_£t_ªc⁄√˘_max_ªåõs
(
˛õ¡
.
iscsi
, clõ¡.
max_ªc⁄√˘s
);

403 
	`fûl_ªad_queue
(&
˛õ¡
);

405 
	`Æ¨m
(
NOP_INTERVAL
);

407 
˛õ¡
.
ö_Êight
 && !˛õ¡.
îr_˙t
 && 
föished
 < 2) {

408 
pfd
[0].
fd
 = 
	`iscsi_gë_fd
(
˛õ¡
.
iscsi
);

409 
pfd
[0].
evíts
 = 
	`iscsi_which_evíts
(
˛õ¡
.
iscsi
);

411 i‡(
¥oc_Æ¨m
) {

412 i‡(
	`iscsi_gë_n›s_ö_Êight
(
˛õ¡
.
iscsi
Ë> 
MAX_NOP_FAILURES
) {

413 
	`iscsi_ªc⁄√˘
(
˛õ¡
.
iscsi
);

415 
	`iscsi_n›_out_async
(
˛õ¡
.
iscsi
, 
NULL
, NULL, 0, NULL);

417 i‡(!
	`iscsi_gë_n›s_ö_Êight
(
˛õ¡
.
iscsi
)) {

418 
föished
 = 0;

420 
¥oc_Æ¨m
 = 0;

423 i‡(!
pfd
[0].
evíts
) {

424 
	`¶ìp
(1);

428 i‡(
	`pﬁl
(&
pfd
[0], 1, -1) < 0) {

431 i‡(
	`iscsi_£rvi˚
(
˛õ¡
.
iscsi
, 
pfd
[0].
ªvíts
) < 0) {

432 
	`Ârötf
(
°dîr
, "iscsi_£rvi˚ faûed wôh : %s\n", 
	`iscsi_gë_îr‹
(
˛õ¡
.
iscsi
));

437 
	`Æ¨m
(0);

439 
	`¥ogªss
(&
˛õ¡
);

441 i‡(!
˛õ¡
.
îr_˙t
 && 
föished
 < 2) {

442 
	`¥ötf
 ("\n\nfinished.\n");

443 
	`iscsi_logout_sync
(
˛õ¡
.
iscsi
);

445 
	`¥ötf
 ("\nABORTED!\n");

447 
	`iscsi_de°roy_c⁄ãxt
(
˛õ¡
.
iscsi
);

449 
	`‰ì
(
˛õ¡
.
≥rf_iov
.
iov_ba£
);

451  
˛õ¡
.
îr_˙t
 ? 1 : 0;

452 
	}
}

	@utils/iscsi-readcapacity16.c

20 
	~<°dio.h
>

21 
	~<°dlib.h
>

22 
	~<°döt.h
>

23 
	~<öây≥s.h
>

24 
	~<°rög.h
>

25 
	~<pﬁl.h
>

26 
	~<gë›t.h
>

27 
	~"iscsi.h
"

28 
	~"scsi-lowÀvñ.h
"

30 #i‚de‡
disˇrd_c⁄°


31 
	#disˇrd_c⁄°
(
±r
Ë((*)((
öçå_t
)’å)))

	)

34 c⁄° *
	göôüt‹
 = "iqn.2007-10.com.github:sahlberg:libiscsi:iscsi-readcapacity16";

36 
	$¥öt_ußge
()

38 
	`Ârötf
(
°dîr
, "Usage: iscsi-readcapacity16 [-?] [-?|--help] [--usage] [-i|--initiator-name=iqn-name] [-s] <iscsi-url>\n");

39 
	}
}

41 
	$¥öt_hñp
()

43 
	`Ârötf
(
°dîr
, "Usage: iscsi_readcapacity16 [OPTION...] <iscsi-url>\n");

44 
	`Ârötf
(
°dîr
, " -i, --initiator-name=iqn-name InitiatornameÅo use\n");

45 
	`Ârötf
(
°dîr
, " -s, --sizeÖrintÅarget size only\n");

46 
	`Ârötf
(
°dîr
, " -d, --debug=integer debugÜevel (0=disabled)\n");

47 
	`Ârötf
(
°dîr
, "\n");

48 
	`Ârötf
(
°dîr
, "Help options:\n");

49 
	`Ârötf
(
°dîr
, " -?, --help ShowÅhis help message\n");

50 
	`Ârötf
(
°dîr
, " --usage Display brief usage message\n");

51 
	`Ârötf
(
°dîr
, "\n");

52 
	`Ârötf
(
°dîr
, "iSCSI URL f‹m© : %s\n", 
ISCSI_URL_SYNTAX
);

53 
	`Ârötf
(
°dîr
, "\n");

54 
	`Ârötf
(
°dîr
, "<host> isÉither of:\n");

55 
	`Ârötf
(
°dîr
, " \"hostname\" iscsi.example\n");

56 
	`Ârötf
(
°dîr
, " \"ipv4-address\" 10.1.1.27\n");

57 
	`Ârötf
(
°dîr
, " \"ipv6-address\" [fce0::1]\n");

58 
	}
}

60 
	$maö
(
¨gc
, *
¨gv
[])

62 
iscsi_c⁄ãxt
 *
iscsi
;

63 c⁄° *
uæ
 = 
NULL
;

64 
iscsi_uæ
 *iscsi_uæ = 
NULL
;

65 
show_hñp
 = 0, 
show_ußge
 = 0, 
debug
 = 0, 
size_⁄ly
=0;

66 
c
;

67 
scsi_èsk
 *
èsk
;

68 
scsi_ªadˇ∑côy16
 *
rc16
;

70 
›ti⁄
 
l⁄g_›ti⁄s
[] = {

71 {"hñp", 
no_¨gumít
, 
NULL
, 'h'},

72 {"ußge", 
no_¨gumít
, 
NULL
, 'u'},

73 {"debug", 
no_¨gumít
, 
NULL
, 'd'},

74 {"size", 
no_¨gumít
, 
NULL
, 's'},

75 {"öôüt‹-«me", 
ªquúed_¨gumít
, 
NULL
, 'i'},

76 {"evpd", 
ªquúed_¨gumít
, 
NULL
, 'e'},

77 {"∑gecode", 
ªquúed_¨gumít
, 
NULL
, 'c'},

80 
›ti⁄_ödex
;

82 (
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "h?udi:s", 
l⁄g_›ti⁄s
,

83 &
›ti⁄_ödex
)) != -1) {

84 
c
) {

87 
show_hñp
 = 1;

90 
show_ußge
 = 1;

93 
size_⁄ly
 = 1;

96 
debug
 = 1;

99 
öôüt‹
 = 
›èrg
;

102 
	`Ârötf
(
°dîr
, "Uƒecognized o±i⁄ '%c'\n\n", 
c
);

103 
	`¥öt_hñp
();

104 
	`exô
(0);

108 i‡(
show_hñp
 != 0) {

109 
	`¥öt_hñp
();

110 
	`exô
(0);

113 i‡(
show_ußge
 != 0) {

114 
	`¥öt_ußge
();

115 
	`exô
(0);

118 
iscsi
 = 
	`iscsi_¸óã_c⁄ãxt
(
öôüt‹
);

119 i‡(
iscsi
 =
NULL
) {

120 
	`Ârötf
(
°dîr
, "FailedÅo create context\n");

121 
	`exô
(10);

124 i‡(
debug
 > 0) {

125 
	`iscsi_£t_log_‚
(
iscsi
, 
iscsi_log_to_°dîr
);

126 
	`iscsi_£t_log_Àvñ
(
iscsi
, 
debug
);

129 i‡(
¨gv
[
›töd
] !
NULL
) {

130 
uæ
 = 
	`°rdup
(
¨gv
[
›töd
]);

132 i‡(
uæ
 =
NULL
) {

133 
	`Ârötf
(
°dîr
, "You must specifyÅhe URL\n");

134 
	`¥öt_ußge
();

135 
	`exô
(10);

137 
iscsi_uæ
 = 
	`iscsi_∑r£_fuŒ_uæ
(
iscsi
, 
uæ
);

139 i‡(
uæ
) {

140 
	`‰ì
(
	`disˇrd_c⁄°
(
uæ
));

143 i‡(
iscsi_uæ
 =
NULL
) {

144 
	`Ârötf
(
°dîr
, "FailedÅoÖarse URL: %s\n",

145 
	`iscsi_gë_îr‹
(
iscsi
));

146 
	`exô
(10);

149 
	`iscsi_£t_£ssi⁄_ty≥
(
iscsi
, 
ISCSI_SESSION_NORMAL
);

150 
	`iscsi_£t_hódî_dige°
(
iscsi
, 
ISCSI_HEADER_DIGEST_NONE_CRC32C
);

152 i‡(
	`iscsi_fuŒ_c⁄√˘_sync
(
iscsi
, 
iscsi_uæ
->
p‹èl
, iscsi_uæ->
lun
) != 0) {

153 
	`Ârötf
(
°dîr
, "Logö Faûed. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

154 
	`iscsi_de°roy_uæ
(
iscsi_uæ
);

155 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

156 
	`exô
(10);

159 
èsk
 = 
	`iscsi_ªadˇ∑côy16_sync
(
iscsi
, 
iscsi_uæ
->
lun
);

160 i‡(
èsk
 =
NULL
 ||Åask->
°©us
 !
SCSI_STATUS_GOOD
) {

161 
	`Ârötf
(
°dîr
,"failedÅo sendÑeadcapacity command\n");

162 
	`iscsi_de°roy_uæ
(
iscsi_uæ
);

163 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

164 
	`exô
(10);

167 
rc16
 = 
	`scsi_d©aö_unm¨shÆl
(
èsk
);

168 i‡(
rc16
 =
NULL
) {

169 
	`Ârötf
(
°dîr
,"failedÅo unmarshallÑeadcapacity16 data\n");

170 
	`scsi_‰ì_scsi_èsk
(
èsk
);

171 
	`iscsi_de°roy_uæ
(
iscsi_uæ
);

172 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

173 
	`exô
(10);

176 i‡(!
size_⁄ly
) {

177 
	`¥ötf
("RETURNED LOGICAL BLOCK ADDRESS:%" 
PRIu64
 "\n", 
rc16
->
ªtu∫ed_lba
);

178 
	`¥ötf
("LOGICAL BLOCK LENGTH IN BYTES:%u\n", 
rc16
->
block_Àngth
);

179 
	`¥ötf
("P_TYPE:%d PROT_EN:%d\n", 
rc16
->
p_ty≥
,Ñc16->
¥Ÿ_í
);

180 
	`¥ötf
("P_I_EXPONENT:%d LOGICAL BLOCKS PER PHYSICAL BLOCK EXPONENT:%d\n", 
rc16
->
p_i_exp
,Ñc16->
lbµbe
);

181 
	`¥ötf
("LBPME:%d LBPRZ:%d\n", 
rc16
->
lbpme
,Ñc16->
lb¥z
);

182 
	`¥ötf
("LOWEST ALIGNED LOGICAL BLOCK ADDRESS:%d\n", 
rc16
->
œlba
);

184 
	`¥ötf
("TŸÆ size:%" 
PRIu64
 "\n", 
rc16
->
block_Àngth
 * (rc16->
ªtu∫ed_lba
 + 1));

188 
	`¥ötf
("%" 
PRIu64
 "\n", 
rc16
->
block_Àngth
 * (rc16->
ªtu∫ed_lba
 + 1));

191 
	`scsi_‰ì_scsi_èsk
(
èsk
);

192 
	`iscsi_de°roy_uæ
(
iscsi_uæ
);

194 
	`iscsi_logout_sync
(
iscsi
);

195 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

197 
	}
}

	@utils/iscsi-swp.c

18 #ifde‡
HAVE_CONFIG_H


19 
	~"c⁄fig.h
"

22 #ifde‡
HAVE_POLL_H


23 
	~<pﬁl.h
>

26 
	~<°dio.h
>

27 
	~<°dlib.h
>

28 
	~<°döt.h
>

29 
	~<°rög.h
>

30 
	~<gë›t.h
>

31 
	~"iscsi.h
"

32 
	~"scsi-lowÀvñ.h
"

34 #i‚de‡
disˇrd_c⁄°


35 
	#disˇrd_c⁄°
(
±r
Ë((*)((
öçå_t
)’å)))

	)

38 c⁄° *
	göôüt‹
 = "iqn.2007-10.com.github:sahlberg:libiscsi:iscsi-swp";

41 
	$¥öt_ußge
()

43 
	`Ârötf
(
°dîr
, "Usage: iscsi-swp [-?] [-?|--help] [--usage] [-i|--initiator-name=iqn-name]\n"

45 
	}
}

47 
	$¥öt_hñp
()

49 
	`Ârötf
(
°dîr
, "Usage: iscsi-swp [OPTION...] <iscsi-url>\n");

50 
	`Ârötf
(
°dîr
, " -i, --initiator-name=iqn-name InitiatornameÅo use\n");

51 
	`Ârötf
(
°dîr
, " -s, --swp={on|off} Turn software writeÖrotect on/off\n");

52 
	`Ârötf
(
°dîr
, " -d, --debug=integer debugÜevel (0=disabled)\n");

53 
	`Ârötf
(
°dîr
, "\n");

54 
	`Ârötf
(
°dîr
, "Help options:\n");

55 
	`Ârötf
(
°dîr
, " -?, --help ShowÅhis help message\n");

56 
	`Ârötf
(
°dîr
, " --usage Display brief usage message\n");

57 
	`Ârötf
(
°dîr
, "\n");

58 
	`Ârötf
(
°dîr
, "iSCSI URL f‹m© : %s\n", 
ISCSI_URL_SYNTAX
);

59 
	`Ârötf
(
°dîr
, "\n");

60 
	`Ârötf
(
°dîr
, "<host> isÉither of:\n");

61 
	`Ârötf
(
°dîr
, " \"hostname\" iscsi.example\n");

62 
	`Ârötf
(
°dîr
, " \"ipv4-address\" 10.1.1.27\n");

63 
	`Ârötf
(
°dîr
, " \"ipv6-address\" [fce0::1]\n");

64 
	}
}

66 
	$maö
(
¨gc
, *
¨gv
[])

68 
iscsi_c⁄ãxt
 *
iscsi
;

69 c⁄° *
uæ
 = 
NULL
;

70 
iscsi_uæ
 *iscsi_uæ = 
NULL
;

71 
show_hñp
 = 0, 
show_ußge
 = 0, 
debug
 = 0;

72 
c
;

73 
ªt
 = 0;

74 
swp
 = 0;

75 
scsi_èsk
 *
£n£_èsk
 = 
NULL
;

76 
scsi_èsk
 *
£À˘_èsk
 = 
NULL
;

77 
scsi_mode_£n£
 *
ms
;

78 
scsi_mode_∑ge
 *
mp
;

80 
›ti⁄
 
l⁄g_›ti⁄s
[] = {

81 {"hñp", 
no_¨gumít
, 
NULL
, 'h'},

82 {"ußge", 
no_¨gumít
, 
NULL
, 'u'},

83 {"debug", 
no_¨gumít
, 
NULL
, 'd'},

84 {"öôüt‹-«me", 
ªquúed_¨gumít
, 
NULL
, 'i'},

85 {"swp", 
ªquúed_¨gumít
, 
NULL
, 's'},

88 
›ti⁄_ödex
;

90 (
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "h?udi:s:", 
l⁄g_›ti⁄s
,

91 &
›ti⁄_ödex
)) != -1) {

92 
c
) {

95 
show_hñp
 = 1;

98 
show_ußge
 = 1;

101 
debug
 = 1;

104 
öôüt‹
 = 
›èrg
;

107 i‡(!
	`°rcmp
(
›èrg
, "on") || !strcmp(optarg, "ON")) {

108 
swp
 = 1;

110 i‡(!
	`°rcmp
(
›èrg
, "off") || !strcmp(optarg, "OFF")) {

111 
swp
 = 2;

115 
	`Ârötf
(
°dîr
, "Uƒecognized o±i⁄ '%c'\n\n", 
c
);

116 
	`¥öt_hñp
();

117 
	`exô
(0);

121 i‡(
show_hñp
 != 0) {

122 
	`¥öt_hñp
();

123 
	`exô
(0);

126 i‡(
show_ußge
 != 0) {

127 
	`¥öt_ußge
();

128 
	`exô
(0);

131 
iscsi
 = 
	`iscsi_¸óã_c⁄ãxt
(
öôüt‹
);

132 i‡(
iscsi
 =
NULL
) {

133 
	`Ârötf
(
°dîr
, "FailedÅo create context\n");

134 
	`exô
(10);

137 i‡(
debug
 > 0) {

138 
	`iscsi_£t_log_Àvñ
(
iscsi
, 
debug
);

139 
	`iscsi_£t_log_‚
(
iscsi
, 
iscsi_log_to_°dîr
);

142 i‡(
¨gv
[
›töd
] !
NULL
) {

143 
uæ
 = 
	`°rdup
(
¨gv
[
›töd
]);

145 i‡(
uæ
 =
NULL
) {

146 
	`Ârötf
(
°dîr
, "You must specifyÅhe URL\n");

147 
	`¥öt_ußge
();

148 
ªt
 = 10;

149 
föished
;

151 
iscsi_uæ
 = 
	`iscsi_∑r£_fuŒ_uæ
(
iscsi
, 
uæ
);

153 
	`‰ì
(
	`disˇrd_c⁄°
(
uæ
));

155 i‡(
iscsi_uæ
 =
NULL
) {

156 
	`Ârötf
(
°dîr
, "FailedÅoÖarse URL: %s\n",

157 
	`iscsi_gë_îr‹
(
iscsi
));

158 
ªt
 = 10;

159 
föished
;

162 
	`iscsi_£t_£ssi⁄_ty≥
(
iscsi
, 
ISCSI_SESSION_NORMAL
);

163 
	`iscsi_£t_hódî_dige°
(
iscsi
, 
ISCSI_HEADER_DIGEST_NONE_CRC32C
);

165 i‡(
	`iscsi_fuŒ_c⁄√˘_sync
(
iscsi
, 
iscsi_uæ
->
p‹èl
, iscsi_uæ->
lun
) != 0) {

166 
	`Ârötf
(
°dîr
, "Logö Faûed. %s\n", 
	`iscsi_gë_îr‹
(
iscsi
));

167 
ªt
 = 10;

168 
föished
;

172 
£n£_èsk
 = 
	`iscsi_mode£n£10_sync
(
iscsi
, 
iscsi_uæ
->
lun
,

173 0, 1, 
SCSI_MODESENSE_PC_CURRENT
,

174 
SCSI_MODEPAGE_CONTROL
,

176 i‡(
£n£_èsk
 =
NULL
) {

177 
	`¥ötf
("FailedÅo send MODE_SENSE10 command: %s\n",

178 
	`iscsi_gë_îr‹
(
iscsi
));

179 
ªt
 = 10;

180 
föished
;

182 i‡(
£n£_èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

183 
	`¥ötf
("MODE_SENSE10 failed: %s\n",

184 
	`iscsi_gë_îr‹
(
iscsi
));

185 
ªt
 = 10;

186 
föished
;

188 
ms
 = 
	`scsi_d©aö_unm¨shÆl
(
£n£_èsk
);

189 i‡(
ms
 =
NULL
) {

190 
	`¥ötf
("failedÅo unmarshall mode sense datain blob\n");

191 
ªt
 = 10;

192 
föished
;

194 
mp
 = 
	`scsi_mode£n£_gë_∑ge
(
ms
, 
SCSI_MODEPAGE_CONTROL
, 0);

195 i‡(
mp
 =
NULL
) {

196 
	`¥ötf
("failedÅoÑead control modeÖage\n");

197 
ªt
 = 10;

198 
föished
;

202 
mp
->
ps
 = 0;

204 
	`¥ötf
("SWP:%d\n", 
mp
->
c⁄åﬁ
.
swp
);

206 
swp
) {

208 
mp
->
c⁄åﬁ
.
swp
 = 1;

211 
mp
->
c⁄åﬁ
.
swp
 = 0;

214 
föished
;

217 
	`¥ötf
("Tu∫ög SWP %s\n", (
swp
 == 1) ? "ON" : "OFF");

218 
£À˘_èsk
 = 
	`iscsi_mode£À˘10_sync
(
iscsi
, 
iscsi_uæ
->
lun
,

219 1, 0, 
mp
);

220 i‡(
£À˘_èsk
 =
NULL
) {

221 
	`¥ötf
("FailedÅo send MODE_SELECT10 command: %s\n",

222 
	`iscsi_gë_îr‹
(
iscsi
));

223 
ªt
 = 10;

224 
föished
;

226 i‡(
£À˘_èsk
->
°©us
 !
SCSI_STATUS_GOOD
) {

227 
	`¥ötf
("MODE_SELECT10 failed: %s\n",

228 
	`iscsi_gë_îr‹
(
iscsi
));

229 
ªt
 = 10;

230 
föished
;

234 
föished
:

235 i‡(
£n£_èsk
 !
NULL
) {

236 
	`scsi_‰ì_scsi_èsk
(
£n£_èsk
);

238 i‡(
£À˘_èsk
 !
NULL
) {

239 
	`scsi_‰ì_scsi_èsk
(
£À˘_èsk
);

241 i‡(
iscsi_uæ
 !
NULL
) {

242 
	`iscsi_de°roy_uæ
(
iscsi_uæ
);

244 
	`iscsi_logout_sync
(
iscsi
);

245 
	`iscsi_de°roy_c⁄ãxt
(
iscsi
);

246  
ªt
;

247 
	}
}

	@win32/win32_compat.c

24 #i‚de‡
_WIN32


26 
dummy
 
ATTRIBUTE
((
unu£d
));

29 
	~"wö32_com∑t.h
"

30 
	~<î∫o.h
>

31 
	~<°dio.h
>

32 
	~<Åime.h 
>

34 #unde‡
pﬁl


35 #unde‡
sockë


36 #unde‡
c⁄√˘


37 #unde‡
ac˚±


38 #unde‡
shutdown


39 #unde‡
gë≥î«me


40 #unde‡
¶ìp


41 #unde‡
öë_©⁄


42 #unde‡
gëtimeofday


43 #unde‡
°©


44 
	#as£π
(
a
)

	)

47 
	~<˘y≥.h
>

49 
	$wö32_öë_±⁄
(
af
, c⁄° * 
§c
, * 
d°
)

51 
sockaddr_ö
 
ß
;

52 
Àn
 = (
SOCKADDR
);

53 
ªt
 = -1;

54 
°rLí
 = 
	`°æí
(
§c
) + 1;

55 #ifde‡
UNICODE


56 
wch¨_t
 *
§cN⁄C⁄°
 = (wch¨_à*)
	`mÆloc
(
°rLí
*(wchar_t));

57 
	`mem£t
(
§cN⁄C⁄°
, 0, 
°rLí
);

58 
	`Mu…iByãToWideCh¨
(
CP_ACP
, 0, 
§c
, -1, 
§cN⁄C⁄°
, 
°rLí
);

60 *
§cN⁄C⁄°
 = (*)
	`mÆloc
(
°rLí
);

61 
	`mem£t
(
§cN⁄C⁄°
, 0, 
°rLí
);

62 
	`°∫˝y
(
§cN⁄C⁄°
, 
§c
, 
°rLí
);

65 if–
	`WSASåögToAddªss
(
§cN⁄C⁄°
,
af
,
NULL
,(
LPSOCKADDR
)&
ß
,&
Àn
) == 0 )

67 
ªt
 = 1;

71 if–
	`WSAGëLa°Eº‹
(Ë=
WSAEINVAL
 )

73 
ªt
 = -1;

76 
	`‰ì
(
§cN⁄C⁄°
);

77 
	`mem˝y
(
d°
, &
ß
.
sö_addr
, (
ö_addr
));

78  
ªt
;

79 
	}
}

81 
	$wö32_pﬁl
(
pﬁlfd
 *
fds
, 
nfds
, 
timo
)

83 
timevÆ
 
timeout
, *
t›å
;

84 
fd_£t
 
ifds
, 
ofds
, 
efds
, *
ù
, *
›
;

85 
i
;

86 
rc
;

89 
	`FD_ZERO
(&
ifds
);

90 
	`FD_ZERO
(&
ofds
);

91 
	`FD_ZERO
(&
efds
);

92 
i
 = 0, 
›
 = 
ù
 = 0; i < 
nfds
; ++i)

94 
fds
[
i
].
ªvíts
 = 0;

95 if(
fds
[
i
].
evíts
 & (
POLLIN
|
POLLPRI
))

97 
ù
 = &
ifds
;

98 
	`FD_SET
(
fds
[
i
].
fd
, 
ù
);

100 if(
fds
[
i
].
evíts
 & 
POLLOUT
)

102 
›
 = &
ofds
;

103 
	`FD_SET
(
fds
[
i
].
fd
, 
›
);

105 
	`FD_SET
(
fds
[
i
].
fd
, &
efds
);

109 if(
timo
 < 0)

111 
t›å
 = 0;

115 
t›å
 = &
timeout
;

116 
timeout
.
tv_£c
 = 
timo
 / 1000;

117 
timeout
.
tv_u£c
 = (
timo
 -Åimeout.
tv_£c
 * 1000) * 1000;

120 #ifde‡
DEBUG_POLL


121 
	`¥ötf
("Entering select() sec=%ld usec=%ld ip=%lx op=%lx\n",

122 ()
timeout
.
tv_£c
, (Èimeout.
tv_u£c
, ()
ù
, ()
›
);

124 
rc
 = 
	`£À˘
(0, 
ù
, 
›
, &
efds
, 
t›å
);

125 #ifde‡
DEBUG_POLL


126 
	`¥ötf
("Exôög sñe˘Ñc=%d\n", 
rc
);

129 if(
rc
 <= 0)

130  
rc
;

132 if(
rc
 > 0)

134 
i
 = 0; i < 
nfds
; ++i)

136 
fd
 = 
fds
[
i
].fd;

137 if(
fds
[
i
].
evíts
 & (
POLLIN
|
POLLPRI
Ë&& 
	`FD_ISSET
(
fd
, &
ifds
))

138 
fds
[
i
].
ªvíts
 |
POLLIN
;

139 if(
fds
[
i
].
evíts
 & 
POLLOUT
 && 
	`FD_ISSET
(
fd
, &
ofds
))

140 
fds
[
i
].
ªvíts
 |
POLLOUT
;

141 if(
	`FD_ISSET
(
fd
, &
efds
))

142 
fds
[
i
].
ªvíts
 |
POLLHUP
;

143 #ifde‡
DEBUG_POLL


144 
	`¥ötf
("%d %d %dÑevent = %x\n",

145 
	`FD_ISSET
(
fd
, &
ifds
), FD_ISSET(fd, &
ofds
), FD_ISSET(fd, &
efds
),

146 
fds
[
i
].
ªvíts


151  
rc
;

152 
	}
}

154 #i‡
deföed
(
_MSC_VER
Ë|| deföed(
_MSC_EXTENSIONS
)

155 
	#DELTA_EPOCH_IN_MICROSECS
 11644473600000000U
i64


	)

157 
	#DELTA_EPOCH_IN_MICROSECS
 11644473600000000ULL

	)

160 
	stimez⁄e


162 
	mtz_möuãswe°
;

163 
	mtz_d°time
;

166 
	$wö32_gëtimeofday
(
timevÆ
 *
tv
, 
timez⁄e
 *
tz
)

168 
FILETIME
 
·
;

169 
__öt64
 
tm¥es
 = 0;

170 
tzÊag
;

172 i‡(
NULL
 !
tv
)

174 
	`GëSy°emTimeAsFûeTime
(&
·
);

176 
tm¥es
 |
·
.
dwHighD©eTime
;

177 
tm¥es
 <<= 32;

178 
tm¥es
 |
·
.
dwLowD©eTime
;

181 
tm¥es
 -
DELTA_EPOCH_IN_MICROSECS
;

182 
tm¥es
 /= 10;

183 
tv
->
tv_£c
 = ()(
tm¥es
 / 1000000UL);

184 
tv
->
tv_u£c
 = ()(
tm¥es
 % 1000000UL);

187 i‡(
NULL
 !
tz
)

189 i‡(!
tzÊag
)

191 
	`_tz£t
();

192 
tzÊag
++;

194 
tz
->
tz_möuãswe°
 = 
_timez⁄e
 / 60;

195 
tz
->
tz_d°time
 = 
_daylight
;

199 
	}
}

201 
ssize_t
 
	$wö32_ªadv
(
fd
, c⁄° 
iovec
 *
iov
, 
iov˙t
)

203  
	`ªcv
(
fd
, 
iov
[0].
iov_ba£
, iov[0].
iov_Àn
, 0);

204 
	}
}

206 
ssize_t
 
	$wö32_wrôev
(
fd
, c⁄° 
iovec
 *
iov
, 
iov˙t
)

208  
	`£nd
(
fd
, 
iov
[0].
iov_ba£
, iov[0].
iov_Àn
, 0);

209 
	}
}

222 
	$wö32_dup2
(
ﬁdfd
, 
√wfd
)

225 
	}
}

	@win32/win32_compat.h

25 #i‚de‡
wö32_COMPAT_H_


26 
	#wö32_COMPAT_H_


	)

28 #ifde‡
_WIN32


29 
	#NO_IPv6
 1

	)

31 
	~<wösock2.h
>

32 
	~<ws2t˝ù.h
>

33 
	~<Ws2ùdef.h
>

34 
	~<ba£tsd.h
>

35 
	~<io.h
>

36 
	~<mÆloc.h
>

37 
	~<sys/°©.h
>

39 
	#SOL_TCP
 
IPPROTO_TCP


	)

41 #if(
_WIN32_WINNT
 < 0x0600)

43 
	#POLLIN
 0x0001

	)

44 
	#POLLPRI
 0x0002

	)

45 
	#POLLOUT
 0x0004

	)

46 
	#POLLERR
 0x0008

	)

47 
	#POLLHUP
 0x0010

	)

48 
	#POLLNVAL
 0x0020

	)

50 
	spﬁlfd
 {

51 
SOCKET
 
	mfd
;

52 
	mevíts
;

53 
	mªvíts
;

57 
	tssize_t
;

58 
	tuid_t
;

59 
	tgid_t
;

60 
	tsockÀn_t
;

63 
	#˛o£
 
˛o£sockë


	)

64 
	#io˘l
 
io˘lsockë


	)

65 
	#ªadv
 
wö32_ªadv


	)

66 
	#wrôev
 
wö32_wrôev


	)

67 
	#°∫ˇ£cmp
 
_°∫icmp


	)

68 
	#°rdup
 
_°rdup


	)

69 
	#dup2
(
x
, 
y
Ë
	`wö32_dup2
(x, y)

	)

70 
	#pﬁl
(
x
, 
y
, 
z
Ë
	`wö32_pﬁl
(x, y, z)

	)

71 
	#öë_±⁄
(
x
,
y
,
z
Ë
	`wö32_öë_±⁄
(x,y,z)

	)

72 
	#¶ìp
(
x
Ë
	`SÀï
(x * 1000)

	)

73 
	#gëpid
 
GëCuºítPro˚ssId


	)

75 #i‡
deföed
(
_MSC_VER
) && _MSC_VER < 1900

76 
	#¢¥ötf
(
a
, 
b
, 
c
, ...Ë
	`_¢¥ötf_s
◊, b, b, c, ## 
__VA_ARGS__
)

	)

79 
wö32_öë_±⁄
(
af
, c⁄° * 
§c
, * 
d°
);

80 
wö32_pﬁl
(
pﬁlfd
 *
fds
, 
nfsd
, 
timeout
);

81 
wö32_gëtimeofday
(
timevÆ
 *
tv
, 
timez⁄e
 *
tz
);

82 
ssize_t
 
wö32_wrôev
(
fd
, c⁄° 
iovec
 *
iov
, 
iov˙t
);

83 
ssize_t
 
wö32_ªadv
(
fd
, c⁄° 
iovec
 *
iov
, 
iov˙t
);

84 
wö32_dup2
(
ﬁdfd
, 
√wfd
);

86 
	siovec
 {

87 *
	miov_ba£
;

88 
size_t
 
	miov_Àn
;

91 
	#ölöe


	)

	@/usr/include/CUnit/Automated.h

38 #i‚de‡
CUNIT_AUTOMATED_H_SEEN


39 
	#CUNIT_AUTOMATED_H_SEEN


	)

41 
	~"CUnô.h
"

42 
	~"Te°DB.h
"

44 #ifde‡
__˝lu•lus


48 
CU_EXPORT
 
CU_autom©ed_run_ã°s
();

59 
CU_EXPORT
 
CU_Eº‹Code
 
CU_li°_ã°s_to_fûe
();

69 
CU_EXPORT
 
CU_£t_ouçut_fûíame
(c⁄° * 
szFûíameRoŸ
);

79 #ifde‡
USE_DEPRECATED_CUNIT_NAMES


81 
	#autom©ed_run_ã°s
(Ë
	`CU_autom©ed_run_ã°s
()

	)

83 
	#£t_ouçut_fûíame
(
x
Ë
	`CU_£t_ouçut_fûíame
((x))

	)

86 
CU_autom©ed_íabÀ_junô_xml
(
CU_BOOL
 
bFœg
);

88 
CU_autom©ed_∑ckage_«me_£t
(c⁄° *
pName
);

90 c⁄° *
CU_autom©ed_∑ckage_«me_gë
();

92 #ifde‡
__˝lu•lus


	@/usr/include/CUnit/Basic.h

33 #i‚de‡
CUNIT_BASIC_H_SEEN


34 
	#CUNIT_BASIC_H_SEEN


	)

36 
	~"CUnô.h
"

37 
	~"Te°DB.h
"

39 #ifde‡
__˝lu•lus


45 
CU_BRM_NORMAL
 = 0,

46 
CU_BRM_SILENT
,

47 
CU_BRM_VERBOSE


48 } 
	tCU_BasicRunMode
;

50 
CU_EXPORT
 
CU_Eº‹Code
 
CU_basic_run_ã°s
();

61 
CU_EXPORT
 
CU_Eº‹Code
 
CU_basic_run_suôe
(
CU_pSuôe
 
pSuôe
);

73 
CU_EXPORT
 
CU_Eº‹Code
 
CU_basic_run_ã°
(
CU_pSuôe
 
pSuôe
, 
CU_pTe°
 
pTe°
);

87 
CU_EXPORT
 
CU_basic_£t_mode
(
CU_BasicRunMode
 
mode
);

93 
CU_EXPORT
 
CU_BasicRunMode
 
CU_basic_gë_mode
();

99 
CU_EXPORT
 
CU_basic_show_Áûuªs
(
CU_pFaûuªRec‹d
 
pFaûuª
);

109 #ifde‡
__˝lu•lus


	@/usr/include/CUnit/CUnit.h

50 #i‚de‡
CUNIT_CUNIT_H_SEEN


51 
	#CUNIT_CUNIT_H_SEEN


	)

53 
	~<°rög.h
>

54 
	~<m©h.h
>

57 
	#CU_VERSION
 "2.1-3"

	)

61 
	#CU_MAX_TEST_NAME_LENGTH
 256

	)

63 
	#CU_MAX_SUITE_NAME_LENGTH
 256

	)

66 #i‚de‡
CU_BOOL


68 
	#CU_BOOL
 

	)

71 #i‚de‡
CU_TRUE


73 
	#CU_TRUE
 1

	)

76 #i‚de‡
CU_FALSE


78 
	#CU_FALSE
 0

	)

81 #i‚de‡
CU_UNREFERENCED_PARAMETER


83 
	#CU_UNREFERENCED_PARAMETER
(
x
Ë()
	)
x

86 #i‚de‡
CU_MAX


87 
	#CU_MAX
(
a
,
b
Ë((◊Ë>(b)Ë? (aË: (b))

	)

90 #i‚de‡
CU_MIN


91 
	#CU_MIN
(
a
,
b
Ë((◊Ë>(b)Ë? (bË: (a))

	)

94 #i‡
deföed
(
WIN32
Ë|| deföed(
_WIN32
Ë|| deföed(
__WIN32
Ë|| deföed(
__WIN32__
)

95 #ifde‡
CU_DLL


96 #ifde‡
CU_BUILD_DLL


97 
	#CU_EXPORT
 
	`__de˛•ec
(
dŒexp‹t
)

	)

99 
	#CU_EXPORT
 
	`__de˛•ec
(
dŒimp‹t
)

	)

102 
	#CU_EXPORT


	)

104 #ifde‡
_MSC_VER


105 
	#¢¥ötf
 
_¢¥ötf


	)

108 
	#CU_EXPORT


	)

111 
	~"CUEº‹.h
"

112 
	~"Te°DB.h
"

113 
	~"Te°Run.h
"

116 
	#CU_PASS
(
msg
) \

117 { 
	`CU_as£πIm∂emíèti⁄
(
CU_TRUE
, 
__LINE__
, ("CU_PASS(" #msg ")"), 
__FILE__
, "", 
CU_FALSE
); }

	)

122 
	#CU_ASSERT
(
vÆue
) \

123 { 
	`CU_as£πIm∂emíèti⁄
((
vÆue
), 
__LINE__
, #vÆue, 
__FILE__
, "", 
CU_FALSE
); }

	)

128 
	#CU_ASSERT_FATAL
(
vÆue
) \

129 { 
	`CU_as£πIm∂emíèti⁄
((
vÆue
), 
__LINE__
, #vÆue, 
__FILE__
, "", 
CU_TRUE
); }

	)

134 
	#CU_TEST
(
vÆue
) \

135 { 
	`CU_as£πIm∂emíèti⁄
((
vÆue
), 
__LINE__
, #vÆue, 
__FILE__
, "", 
CU_FALSE
); }

	)

140 
	#CU_TEST_FATAL
(
vÆue
) \

141 { 
	`CU_as£πIm∂emíèti⁄
((
vÆue
), 
__LINE__
, #vÆue, 
__FILE__
, "", 
CU_TRUE
); }

	)

144 
	#CU_FAIL
(
msg
) \

145 { 
	`CU_as£πIm∂emíèti⁄
(
CU_FALSE
, 
__LINE__
, ("CU_FAIL(" #msg ")"), 
__FILE__
, "", CU_FALSE); }

	)

148 
	#CU_FAIL_FATAL
(
msg
) \

149 { 
	`CU_as£πIm∂emíèti⁄
(
CU_FALSE
, 
__LINE__
, ("CU_FAIL_FATAL(" #msg ")"), 
__FILE__
, "", 
CU_TRUE
); }

	)

154 
	#CU_ASSERT_TRUE
(
vÆue
) \

155 { 
	`CU_as£πIm∂emíèti⁄
((
vÆue
), 
__LINE__
, ("CU_ASSERT_TRUE(" #vÆuê")"), 
__FILE__
, "", 
CU_FALSE
); }

	)

160 
	#CU_ASSERT_TRUE_FATAL
(
vÆue
) \

161 { 
	`CU_as£πIm∂emíèti⁄
((
vÆue
), 
__LINE__
, ("CU_ASSERT_TRUE_FATAL(" #vÆuê")"), 
__FILE__
, "", 
CU_TRUE
); }

	)

166 
	#CU_ASSERT_FALSE
(
vÆue
) \

167 { 
	`CU_as£πIm∂emíèti⁄
(!(
vÆue
), 
__LINE__
, ("CU_ASSERT_FALSE(" #vÆuê")"), 
__FILE__
, "", 
CU_FALSE
); }

	)

172 
	#CU_ASSERT_FALSE_FATAL
(
vÆue
) \

173 { 
	`CU_as£πIm∂emíèti⁄
(!(
vÆue
), 
__LINE__
, ("CU_ASSERT_FALSE_FATAL(" #vÆuê")"), 
__FILE__
, "", 
CU_TRUE
); }

	)

178 
	#CU_ASSERT_EQUAL
(
a˘uÆ
, 
ex≥˘ed
) \

179 { 
	`CU_as£πIm∂emíèti⁄
(((
a˘uÆ
Ë=(
ex≥˘ed
)), 
__LINE__
, ("CU_ASSERT_EQUAL(" #a˘uÆ "," #ex≥˘ed ")"), 
__FILE__
, "", 
CU_FALSE
); }

	)

184 
	#CU_ASSERT_EQUAL_FATAL
(
a˘uÆ
, 
ex≥˘ed
) \

185 { 
	`CU_as£πIm∂emíèti⁄
(((
a˘uÆ
Ë=(
ex≥˘ed
)), 
__LINE__
, ("CU_ASSERT_EQUAL_FATAL(" #a˘uÆ "," #ex≥˘ed ")"), 
__FILE__
, "", 
CU_TRUE
); }

	)

190 
	#CU_ASSERT_NOT_EQUAL
(
a˘uÆ
, 
ex≥˘ed
) \

191 { 
	`CU_as£πIm∂emíèti⁄
(((
a˘uÆ
Ë!(
ex≥˘ed
)), 
__LINE__
, ("CU_ASSERT_NOT_EQUAL(" #a˘uÆ "," #ex≥˘ed ")"), 
__FILE__
, "", 
CU_FALSE
); }

	)

196 
	#CU_ASSERT_NOT_EQUAL_FATAL
(
a˘uÆ
, 
ex≥˘ed
) \

197 { 
	`CU_as£πIm∂emíèti⁄
(((
a˘uÆ
Ë!(
ex≥˘ed
)), 
__LINE__
, ("CU_ASSERT_NOT_EQUAL_FATAL(" #a˘uÆ "," #ex≥˘ed ")"), 
__FILE__
, "", 
CU_TRUE
); }

	)

202 
	#CU_ASSERT_PTR_EQUAL
(
a˘uÆ
, 
ex≥˘ed
) \

203 { 
	`CU_as£πIm∂emíèti⁄
(((c⁄° *)(
a˘uÆ
Ë=(c⁄° *)(
ex≥˘ed
)), 
__LINE__
, ("CU_ASSERT_PTR_EQUAL(" #a˘uÆ "," #ex≥˘ed ")"), 
__FILE__
, "", 
CU_FALSE
); }

	)

208 
	#CU_ASSERT_PTR_EQUAL_FATAL
(
a˘uÆ
, 
ex≥˘ed
) \

209 { 
	`CU_as£πIm∂emíèti⁄
(((c⁄° *)(
a˘uÆ
Ë=(c⁄° *)(
ex≥˘ed
)), 
__LINE__
, ("CU_ASSERT_PTR_EQUAL_FATAL(" #a˘uÆ "," #ex≥˘ed ")"), 
__FILE__
, "", 
CU_TRUE
); }

	)

214 
	#CU_ASSERT_PTR_NOT_EQUAL
(
a˘uÆ
, 
ex≥˘ed
) \

215 { 
	`CU_as£πIm∂emíèti⁄
(((c⁄° *)(
a˘uÆ
Ë!(c⁄° *)(
ex≥˘ed
)), 
__LINE__
, ("CU_ASSERT_PTR_NOT_EQUAL(" #a˘uÆ "," #ex≥˘ed ")"), 
__FILE__
, "", 
CU_FALSE
); }

	)

220 
	#CU_ASSERT_PTR_NOT_EQUAL_FATAL
(
a˘uÆ
, 
ex≥˘ed
) \

221 { 
	`CU_as£πIm∂emíèti⁄
(((c⁄° *)(
a˘uÆ
Ë!(c⁄° *)(
ex≥˘ed
)), 
__LINE__
, ("CU_ASSERT_PTR_NOT_EQUAL_FATAL(" #a˘uÆ "," #ex≥˘ed ")"), 
__FILE__
, "", 
CU_TRUE
); }

	)

226 
	#CU_ASSERT_PTR_NULL
(
vÆue
) \

227 { 
	`CU_as£πIm∂emíèti⁄
((
NULL
 =(c⁄° *)(
vÆue
)), 
__LINE__
, ("CU_ASSERT_PTR_NULL(" #vÆue")"), 
__FILE__
, "", 
CU_FALSE
); }

	)

232 
	#CU_ASSERT_PTR_NULL_FATAL
(
vÆue
) \

233 { 
	`CU_as£πIm∂emíèti⁄
((
NULL
 =(c⁄° *)(
vÆue
)), 
__LINE__
, ("CU_ASSERT_PTR_NULL_FATAL(" #vÆue")"), 
__FILE__
, "", 
CU_TRUE
); }

	)

238 
	#CU_ASSERT_PTR_NOT_NULL
(
vÆue
) \

239 { 
	`CU_as£πIm∂emíèti⁄
((
NULL
 !(c⁄° *)(
vÆue
)), 
__LINE__
, ("CU_ASSERT_PTR_NOT_NULL(" #vÆue")"), 
__FILE__
, "", 
CU_FALSE
); }

	)

244 
	#CU_ASSERT_PTR_NOT_NULL_FATAL
(
vÆue
) \

245 { 
	`CU_as£πIm∂emíèti⁄
((
NULL
 !(c⁄° *)(
vÆue
)), 
__LINE__
, ("CU_ASSERT_PTR_NOT_NULL_FATAL(" #vÆue")"), 
__FILE__
, "", 
CU_TRUE
); }

	)

250 
	#CU_ASSERT_STRING_EQUAL
(
a˘uÆ
, 
ex≥˘ed
) \

251 { 
	`CU_as£πIm∂emíèti⁄
(!(
	`°rcmp
((c⁄° *)(
a˘uÆ
), (c⁄° *)(
ex≥˘ed
))), 
__LINE__
, ("CU_ASSERT_STRING_EQUAL(" #a˘uÆ "," #ex≥˘ed ")"), 
__FILE__
, "", 
CU_FALSE
); }

	)

256 
	#CU_ASSERT_STRING_EQUAL_FATAL
(
a˘uÆ
, 
ex≥˘ed
) \

257 { 
	`CU_as£πIm∂emíèti⁄
(!(
	`°rcmp
((c⁄° *)(
a˘uÆ
), (c⁄° *)(
ex≥˘ed
))), 
__LINE__
, ("CU_ASSERT_STRING_EQUAL_FATAL(" #a˘uÆ "," #ex≥˘ed ")"), 
__FILE__
, "", 
CU_TRUE
); }

	)

262 
	#CU_ASSERT_STRING_NOT_EQUAL
(
a˘uÆ
, 
ex≥˘ed
) \

263 { 
	`CU_as£πIm∂emíèti⁄
((
	`°rcmp
((c⁄° *)(
a˘uÆ
), (c⁄° *)(
ex≥˘ed
))), 
__LINE__
, ("CU_ASSERT_STRING_NOT_EQUAL(" #a˘uÆ "," #ex≥˘ed ")"), 
__FILE__
, "", 
CU_FALSE
); }

	)

268 
	#CU_ASSERT_STRING_NOT_EQUAL_FATAL
(
a˘uÆ
, 
ex≥˘ed
) \

269 { 
	`CU_as£πIm∂emíèti⁄
((
	`°rcmp
((c⁄° *)(
a˘uÆ
), (c⁄° *)(
ex≥˘ed
))), 
__LINE__
, ("CU_ASSERT_STRING_NOT_EQUAL_FATAL(" #a˘uÆ "," #ex≥˘ed ")"), 
__FILE__
, "", 
CU_TRUE
); }

	)

275 
	#CU_ASSERT_NSTRING_EQUAL
(
a˘uÆ
, 
ex≥˘ed
, 
cou¡
) \

276 { 
	`CU_as£πIm∂emíèti⁄
(!(
	`°∫cmp
((c⁄° *)(
a˘uÆ
), (c⁄° *)(
ex≥˘ed
), (
size_t
)(
cou¡
))), 
__LINE__
, ("CU_ASSERT_NSTRING_EQUAL(" #a˘uÆ "," #ex≥˘ed "," #cou¡ ")"), 
__FILE__
, "", 
CU_FALSE
); }

	)

282 
	#CU_ASSERT_NSTRING_EQUAL_FATAL
(
a˘uÆ
, 
ex≥˘ed
, 
cou¡
) \

283 { 
	`CU_as£πIm∂emíèti⁄
(!(
	`°∫cmp
((c⁄° *)(
a˘uÆ
), (c⁄° *)(
ex≥˘ed
), (
size_t
)(
cou¡
))), 
__LINE__
, ("CU_ASSERT_NSTRING_EQUAL_FATAL(" #a˘uÆ "," #ex≥˘ed "," #cou¡ ")"), 
__FILE__
, "", 
CU_TRUE
); }

	)

289 
	#CU_ASSERT_NSTRING_NOT_EQUAL
(
a˘uÆ
, 
ex≥˘ed
, 
cou¡
) \

290 { 
	`CU_as£πIm∂emíèti⁄
((
	`°∫cmp
((c⁄° *)(
a˘uÆ
), (c⁄° *)(
ex≥˘ed
), (
size_t
)(
cou¡
))), 
__LINE__
, ("CU_ASSERT_NSTRING_NOT_EQUAL(" #a˘uÆ "," #ex≥˘ed "," #cou¡ ")"), 
__FILE__
, "", 
CU_FALSE
); }

	)

296 
	#CU_ASSERT_NSTRING_NOT_EQUAL_FATAL
(
a˘uÆ
, 
ex≥˘ed
, 
cou¡
) \

297 { 
	`CU_as£πIm∂emíèti⁄
((
	`°∫cmp
((c⁄° *)(
a˘uÆ
), (c⁄° *)(
ex≥˘ed
), (
size_t
)(
cou¡
))), 
__LINE__
, ("CU_ASSERT_NSTRING_NOT_EQUAL_FATAL(" #a˘uÆ "," #ex≥˘ed "," #cou¡ ")"), 
__FILE__
, "", 
CU_TRUE
); }

	)

303 
	#CU_ASSERT_DOUBLE_EQUAL
(
a˘uÆ
, 
ex≥˘ed
, 
gønuœrôy
) \

304 { 
	`CU_as£πIm∂emíèti⁄
(((
	`Ábs
(()(
a˘uÆ
Ë- (
ex≥˘ed
)Ë<Ábs(()(
gønuœrôy
)))), 
__LINE__
, ("CU_ASSERT_DOUBLE_EQUAL(" #a˘uÆ "," #ex≥˘ed "," #gønuœrôy ")"), 
__FILE__
, "", 
CU_FALSE
); }

	)

310 
	#CU_ASSERT_DOUBLE_EQUAL_FATAL
(
a˘uÆ
, 
ex≥˘ed
, 
gønuœrôy
) \

311 { 
	`CU_as£πIm∂emíèti⁄
(((
	`Ábs
(()(
a˘uÆ
Ë- (
ex≥˘ed
)Ë<Ábs(()(
gønuœrôy
)))), 
__LINE__
, ("CU_ASSERT_DOUBLE_EQUAL_FATAL(" #a˘uÆ "," #ex≥˘ed "," #gønuœrôy ")"), 
__FILE__
, "", 
CU_TRUE
); }

	)

317 
	#CU_ASSERT_DOUBLE_NOT_EQUAL
(
a˘uÆ
, 
ex≥˘ed
, 
gønuœrôy
) \

318 { 
	`CU_as£πIm∂emíèti⁄
(((
	`Ábs
(()(
a˘uÆ
Ë- (
ex≥˘ed
)Ë> fabs(()(
gønuœrôy
)))), 
__LINE__
, ("CU_ASSERT_DOUBLE_NOT_EQUAL(" #a˘uÆ "," #ex≥˘ed "," #gønuœrôy ")"), 
__FILE__
, "", 
CU_FALSE
); }

	)

324 
	#CU_ASSERT_DOUBLE_NOT_EQUAL_FATAL
(
a˘uÆ
, 
ex≥˘ed
, 
gønuœrôy
) \

325 { 
	`CU_as£πIm∂emíèti⁄
(((
	`Ábs
(()(
a˘uÆ
Ë- (
ex≥˘ed
)Ë> fabs(()(
gønuœrôy
)))), 
__LINE__
, ("CU_ASSERT_DOUBLE_NOT_EQUAL_FATAL(" #a˘uÆ "," #ex≥˘ed "," #gønuœrôy ")"), 
__FILE__
, "", 
CU_TRUE
); }

	)

327 #ifde‡
USE_DEPRECATED_CUNIT_NAMES


329 #i‚de‡
BOOL


331 
	#BOOL
 

	)

334 #i‚de‡
TRUE


336 
	#TRUE
 1

	)

339 #i‚de‡
FALSE


341 
	#FALSE
 0

	)

345 
	#MAX_TEST_NAME_LENGTH
 256

	)

347 
	#MAX_SUITE_NAME_LENGTH
 256

	)

350 
	#ASSERT
(
vÆue
Ë{ i‡(
FALSE
 =()(vÆue)Ë{ 
	`CU_as£πIm∂emíèti⁄
((
BOOL
)vÆue, 
__LINE__
, #vÆue, 
__FILE__
, "", FALSE); ; }}

	)

352 
	#ASSERT_TRUE
(
vÆue
Ë{ i‡(
FALSE
 =(vÆue)Ë{ 
	`CU_as£πIm∂emíèti⁄
(FALSE, 
__LINE__
, ("ASSERT_TRUE(" #vÆuê")"), 
__FILE__
, "", FALSE); ; }}

	)

354 
	#ASSERT_FALSE
(
vÆue
Ë{ i‡(
FALSE
 !(vÆue)Ë{ 
	`CU_as£πIm∂emíèti⁄
(FALSE, 
__LINE__
, ("ASSERT_FALSE(" #vÆuê")"), 
__FILE__
, "", FALSE); ; }}

	)

356 
	#ASSERT_EQUAL
(
a˘uÆ
, 
ex≥˘ed
Ë{ i‡(◊˘uÆË!”x≥˘ed)Ë{ 
	`CU_as£πIm∂emíèti⁄
(
FALSE
, 
__LINE__
, ("ASSERT_EQUAL(" #a˘uÆ "," #ex≥˘ed ")"), 
__FILE__
, "", FALSE); ; }}

	)

358 
	#ASSERT_NOT_EQUAL
(
a˘uÆ
, 
ex≥˘ed
Ë{ i‡((*)◊˘uÆË=(*)”x≥˘ed)Ë{ 
	`CU_as£πIm∂emíèti⁄
(
FALSE
, 
__LINE__
, ("ASSERT_NOT_EQUAL(" #a˘uÆ "," #ex≥˘ed ")"), 
__FILE__
, "", FALSE); ; }}

	)

360 
	#ASSERT_PTR_EQUAL
(
a˘uÆ
, 
ex≥˘ed
Ë{ i‡((*)◊˘uÆË!(*)”x≥˘ed)Ë{ 
	`CU_as£πIm∂emíèti⁄
(
FALSE
, 
__LINE__
, ("ASSERT_PTR_EQUAL(" #a˘uÆ "," #ex≥˘ed ")"), 
__FILE__
, "", FALSE); ; }}

	)

362 
	#ASSERT_PTR_NOT_EQUAL
(
a˘uÆ
, 
ex≥˘ed
Ë{ i‡((*)◊˘uÆË=(*)”x≥˘ed)Ë{ 
	`CU_as£πIm∂emíèti⁄
(
FALSE
, 
__LINE__
, ("ASSERT_PTR_NOT_EQUAL(" #a˘uÆ "," #ex≥˘ed ")"), 
__FILE__
, "", FALSE); ; }}

	)

364 
	#ASSERT_PTR_NULL
(
vÆue
Ë{ i‡(
NULL
 !(*)(vÆue)Ë{ 
	`CU_as£πIm∂emíèti⁄
(
FALSE
, 
__LINE__
, ("ASSERT_PTR_NULL(" #vÆue")"), 
__FILE__
, "", FALSE); ; }}

	)

366 
	#ASSERT_PTR_NOT_NULL
(
vÆue
Ë{ i‡(
NULL
 =(*)(vÆue)Ë{ 
	`CU_as£πIm∂emíèti⁄
(
FALSE
, 
__LINE__
, ("ASSERT_PTR_NOT_NULL(" #vÆue")"), 
__FILE__
, "", FALSE); ; }}

	)

368 
	#ASSERT_STRING_EQUAL
(
a˘uÆ
, 
ex≥˘ed
Ë{ i‡(
	`°rcmp
((c⁄° *Ô˘uÆ, (c⁄° *Îx≥˘ed)Ë{ 
	`CU_as£πIm∂emíèti⁄
(
FALSE
, 
__LINE__
, ("ASSERT_STRING_EQUAL(" #a˘uÆ "," #ex≥˘ed ")"), 
__FILE__
, "", FALSE); ; }}

	)

370 
	#ASSERT_STRING_NOT_EQUAL
(
a˘uÆ
, 
ex≥˘ed
Ë{ i‡(!
	`°rcmp
((c⁄° *Ô˘uÆ, (c⁄° *Îx≥˘ed)Ë{ 
	`CU_as£πIm∂emíèti⁄
(
TRUE
, 
__LINE__
, ("ASSERT_STRING_NOT_EQUAL(" #a˘uÆ "," #ex≥˘ed ")"), 
__FILE__
, "", 
FALSE
); ; }}

	)

372 
	#ASSERT_NSTRING_EQUAL
(
a˘uÆ
, 
ex≥˘ed
, 
cou¡
Ë{ i‡(
	`°∫cmp
((c⁄° *Ô˘uÆ, (c⁄° *Îx≥˘ed, (
size_t
)cou¡)Ë{ 
	`CU_as£πIm∂emíèti⁄
(
FALSE
, 
__LINE__
, ("ASSERT_NSTRING_EQUAL(" #a˘uÆ "," #ex≥˘ed "," #cou¡ ")"), 
__FILE__
, "", FALSE); ; }}

	)

374 
	#ASSERT_NSTRING_NOT_EQUAL
(
a˘uÆ
, 
ex≥˘ed
, 
cou¡
Ë{ i‡(!
	`°∫cmp
((c⁄° *Ô˘uÆ, (c⁄° *Îx≥˘ed, (
size_t
)cou¡)Ë{ 
	`CU_as£πIm∂emíèti⁄
(
TRUE
, 
__LINE__
, ("ASSERT_NSTRING_NOT_EQUAL(" #a˘uÆ "," #ex≥˘ed "," #cou¡ ")"), 
__FILE__
, "", 
FALSE
); ; }}

	)

376 
	#ASSERT_DOUBLE_EQUAL
(
a˘uÆ
, 
ex≥˘ed
, 
gønuœrôy
Ë{ i‡((
	`Ábs
((Ô˘uÆ -Éx≥˘edË> fabs(()gønuœrôy))Ë{ 
	`CU_as£πIm∂emíèti⁄
(
FALSE
, 
__LINE__
, ("ASSERT_DOUBLE_EQUAL(" #a˘uÆ "," #ex≥˘ed "," #gønuœrôy ")"), 
__FILE__
, "", FALSE); ; }}

	)

378 
	#ASSERT_DOUBLE_NOT_EQUAL
(
a˘uÆ
, 
ex≥˘ed
, 
gønuœrôy
Ë{ i‡((
	`Ábs
((Ô˘uÆ -Éx≥˘edË<Ábs(()gønuœrôy))Ë{ 
	`CU_as£πIm∂emíèti⁄
(
TRUE
, 
__LINE__
, ("ASSERT_DOUBLE_NOT_EQUAL(" #a˘uÆ "," #ex≥˘ed "," #gønuœrôy ")"), 
__FILE__
, "", 
FALSE
); ; }}

	)

	@/usr/include/arpa/inet.h

18 #i‚de‡
_ARPA_INET_H


19 
	#_ARPA_INET_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<√töë/ö.h
>

25 #i‚de‡
__sockÀn_t_deföed


26 
__sockÀn_t
 
	tsockÀn_t
;

27 
	#__sockÀn_t_deföed


	)

30 
__BEGIN_DECLS


34 
ö_addr_t
 
	$öë_addr
 (c⁄° *
__˝
Ë
__THROW
;

37 
ö_addr_t
 
	$öë_ aof
 (
ö_addr
 
__ö
Ë
__THROW
;

41 
ö_addr
 
	$öë_makóddr
 (
ö_addr_t
 
__√t
, in_addr_à
__ho°
)

42 
__THROW
;

45 
ö_addr_t
 
	$öë_√tof
 (
ö_addr
 
__ö
Ë
__THROW
;

49 
ö_addr_t
 
	$öë_√tw‹k
 (c⁄° *
__˝
Ë
__THROW
;

53 *
	$öë_¡ﬂ
 (
ö_addr
 
__ö
Ë
__THROW
;

58 
	$öë_±⁄
 (
__af
, c⁄° *
__ª°ri˘
 
__˝
,

59 *
__ª°ri˘
 
__buf
Ë
__THROW
;

64 c⁄° *
	$öë_¡›
 (
__af
, c⁄° *
__ª°ri˘
 
__˝
,

65 *
__ª°ri˘
 
__buf
, 
sockÀn_t
 
__Àn
)

66 
__THROW
;

70 #ifde‡
__USE_MISC


73 
	$öë_©⁄
 (c⁄° *
__˝
, 
ö_addr
 *
__öp
Ë
__THROW
;

77 *
	$öë_√è
 (
ö_addr_t
 
__√t
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

82 *
	$öë_√t_¡›
 (
__af
, c⁄° *
__˝
, 
__bôs
,

83 *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

88 
	$öë_√t_±⁄
 (
__af
, c⁄° *
__˝
,

89 *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

94 
	$öë_nßp_addr
 (c⁄° *
__˝
,

95 *
__buf
, 
__Àn
Ë
__THROW
;

99 *
	$öë_nßp_¡ﬂ
 (
__Àn
, c⁄° *
__˝
,

100 *
__buf
Ë
__THROW
;

103 
__END_DECLS


	@/usr/include/assert.h

22 #ifdef 
_ASSERT_H


24 #unde‡
_ASSERT_H


25 #unde‡
as£π


26 #unde‡
__ASSERT_VOID_CAST


28 #ifdef 
__USE_GNU


29 #unde‡
as£π_≥º‹


34 
	#_ASSERT_H
 1

	)

35 
	~<„©uªs.h
>

37 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,95)

38 
	#__ASSERT_VOID_CAST
 
°©ic_ˇ°
<>

	)

40 
	#__ASSERT_VOID_CAST
 ()

	)

48 #ifdef 
NDEBUG


50 
	#as£π
(
ex¥
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

58 #ifdef 
__USE_GNU


59 
	#as£π_≥º‹
(
î∫um
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

64 #i‚de‡
_ASSERT_H_DECLS


65 
	#_ASSERT_H_DECLS


	)

66 
__BEGIN_DECLS


69 
	$__as£π_Áû
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
,

70 
__löe
, c⁄° *
__fun˘i⁄
)

71 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

74 
	$__as£π_≥º‹_Áû
 (
__î∫um
, c⁄° *
__fûe
,

75 
__löe
, c⁄° *
__fun˘i⁄
)

76 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

81 
	$__as£π
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
, 
__löe
)

82 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

85 
__END_DECLS


91 #i‡
deföed
 
__˝lu•lus


92 
	#as£π
(
ex¥
) \

93 (
°©ic_ˇ°
 <
boﬁ
> (
ex¥
) \

95 : 
	`__as£π_Áû
 (#ex¥, 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

96 #ñi‡!
deföed
 
__GNUC__
 || deföed 
__STRICT_ANSI__


97 
	#as£π
(
ex¥
) \

98 ((
ex¥
) \

99 ? 
	`__ASSERT_VOID_CAST
 (0) \

100 : 
	`__as£π_Áû
 (#ex¥, 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

107 
	#as£π
(
ex¥
) \

108 ((Ë ((
ex¥
Ë? 1 : 0), 
	`__exãnsi⁄__
 ({ \

109 i‡(
ex¥
) \

112 
	`__as£π_Áû
 (#ex¥, 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
); \

113 
	}
}))

	)

116 #ifdef 
__USE_GNU


117 
	#as£π_≥º‹
(
î∫um
) \

118 (!(
î∫um
) \

119 ? 
	`__ASSERT_VOID_CAST
 (0) \

120 : 
	`__as£π_≥º‹_Áû
 ((
î∫um
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

128 #i‡
deföed
 
__˝lu•lus
 ? 
__GNUC_PREREQ
 (2, 6) : __GNUC_PREREQ (2, 4)

129 
	#__ASSERT_FUNCTION
 
__exãnsi⁄__
 
__PRETTY_FUNCTION__


	)

131 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

132 
	#__ASSERT_FUNCTION
 
__func__


	)

134 
	#__ASSERT_FUNCTION
 ((c⁄° *Ë0)

	)

141 #i‡
deföed
 
__USE_ISOC11
 && !deföed 
__˝lu•lus


142 #unde‡
°©ic_as£π


143 
	#°©ic_as£π
 
_Sètic_as£π


	)

	@/usr/include/ctype.h

22 #i‚def 
_CTYPE_H


23 
	#_CTYPE_H
 1

	)

25 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 
	g__BEGIN_DECLS


30 #i‚de‡
_ISbô


39 
	~<ídün.h
>

40 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


41 
	#_ISbô
(
bô
Ë(1 << (bô))

	)

43 
	#_ISbô
(
bô
Ë((bôË< 8 ? ((1 << (bô)Ë<< 8Ë: ((1 << (bô)Ë>> 8))

	)

48 
	m_ISuµî
 = 
_ISbô
 (0),

49 
	m_ISlowî
 = 
_ISbô
 (1),

50 
	m_ISÆpha
 = 
_ISbô
 (2),

51 
	m_ISdigô
 = 
_ISbô
 (3),

52 
	m_ISxdigô
 = 
_ISbô
 (4),

53 
	m_IS•a˚
 = 
_ISbô
 (5),

54 
	m_IS¥öt
 = 
_ISbô
 (6),

55 
	m_ISgøph
 = 
_ISbô
 (7),

56 
	m_ISbœnk
 = 
_ISbô
 (8),

57 
	m_IS˙ål
 = 
_ISbô
 (9),

58 
	m_ISpun˘
 = 
_ISbô
 (10),

59 
	m_ISÆnum
 = 
_ISbô
 (11)

79 c⁄° **
	$__˘y≥_b_loc
 ()

80 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

81 c⁄° 
__öt32_t
 **
	$__˘y≥_tﬁowî_loc
 ()

82 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

83 c⁄° 
__öt32_t
 **
	$__˘y≥_touµî_loc
 ()

84 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

87 #i‚de‡
__˝lu•lus


88 
	#__is˘y≥
(
c
, 
ty≥
) \

89 ((*
	`__˘y≥_b_loc
 ())[(Ë(
c
)] & (Ë
ty≥
)

	)

90 #ñi‡
deföed
 
__USE_EXTERN_INLINES


91 
	#__is˘y≥_f
(
ty≥
) \

92 
__exã∫_ölöe
 \

93 
is
##
	`ty≥
 (
__c
Ë
__THROW
 \

95  (*
	`__˘y≥_b_loc
 ())[(Ë(
__c
)] & (Ë
_IS
##
ty≥
; \

96 
	}

	)
}

99 
	#__ißscii
(
c
Ë(((cË& ~0x7fË=0Ë

	)

100 
	#__tﬂscii
(
c
Ë((cË& 0x7fË

	)

102 
	#__ex˘y≥
(
«me
Ë
	`«me
 (Ë
__THROW


	)

108 
__ex˘y≥
 (
iß um
);

109 
__ex˘y≥
 (
ißÕha
);

110 
__ex˘y≥
 (
is˙ål
);

111 
__ex˘y≥
 (
isdigô
);

112 
__ex˘y≥
 (
i¶owî
);

113 
__ex˘y≥
 (
isgøph
);

114 
__ex˘y≥
 (
i•röt
);

115 
__ex˘y≥
 (
i•un˘
);

116 
__ex˘y≥
 (
is•a˚
);

117 
__ex˘y≥
 (
isuµî
);

118 
__ex˘y≥
 (
isxdigô
);

122 
	$tﬁowî
 (
__c
Ë
__THROW
;

125 
	$touµî
 (
__c
Ë
__THROW
;

129 #ifdef 
__USE_ISOC99


130 
	`__ex˘y≥
 (
isbœnk
);

133 #ifde‡
__USE_GNU


135 
	$is˘y≥
 (
__c
, 
__mask
Ë
__THROW
;

138 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


142 
	$ißscii
 (
__c
Ë
__THROW
;

146 
	$tﬂscii
 (
__c
Ë
__THROW
;

150 
	`__ex˘y≥
 (
_touµî
);

151 
	`__ex˘y≥
 (
_tﬁowî
);

155 
	#__tobody
(
c
, 
f
, 
a
, 
¨gs
) \

156 (
__exãnsi⁄__
 \

157 ({ 
__ªs
; \

158 i‡( (
c
) > 1) \

160 i‡(
	`__buûtö_c⁄°™t_p
 (
c
)) \

162 
__c
 = (
c
); \

163 
__ªs
 = 
__c
 < -128 || __¯> 255 ? __¯: (
a
)[__c]; \

166 
__ªs
 = 
f
 
¨gs
; \

169 
__ªs
 = (
a
)[(Ë(
c
)]; \

170 
__ªs
; 
	}
}))

	)

172 #i‡!
deföed
 
__NO_CTYPE


173 #ifde‡
__is˘y≥_f


174 
	$__is˘y≥_f
 (
Ænum
)

175 
	$__is˘y≥_f
 (
Æpha
)

176 
	$__is˘y≥_f
 (
˙ål
)

177 
	$__is˘y≥_f
 (
digô
)

178 
	$__is˘y≥_f
 (
lowî
)

179 
	$__is˘y≥_f
 (
gøph
)

180 
	$__is˘y≥_f
 (
¥öt
)

181 
	$__is˘y≥_f
 (
pun˘
)

182 
	$__is˘y≥_f
 (
•a˚
)

183 
	$__is˘y≥_f
 (
uµî
)

184 
	$__is˘y≥_f
 (
xdigô
)

185 #ifde‡
__USE_ISOC99


186 
	$__is˘y≥_f
 (
bœnk
)

188 #ñi‡
deföed
 
__is˘y≥


189 
	#iß um
(
c
Ë
	`__is˘y≥
((c), 
_ISÆnum
)

	)

190 
	#ißÕha
(
c
Ë
	`__is˘y≥
((c), 
_ISÆpha
)

	)

191 
	#is˙ål
(
c
Ë
	`__is˘y≥
((c), 
_IS˙ål
)

	)

192 
	#isdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISdigô
)

	)

193 
	#i¶owî
(
c
Ë
	`__is˘y≥
((c), 
_ISlowî
)

	)

194 
	#isgøph
(
c
Ë
	`__is˘y≥
((c), 
_ISgøph
)

	)

195 
	#i•röt
(
c
Ë
	`__is˘y≥
((c), 
_IS¥öt
)

	)

196 
	#i•un˘
(
c
Ë
	`__is˘y≥
((c), 
_ISpun˘
)

	)

197 
	#is•a˚
(
c
Ë
	`__is˘y≥
((c), 
_IS•a˚
)

	)

198 
	#isuµî
(
c
Ë
	`__is˘y≥
((c), 
_ISuµî
)

	)

199 
	#isxdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISxdigô
)

	)

200 #ifde‡
__USE_ISOC99


201 
	#isbœnk
(
c
Ë
	`__is˘y≥
((c), 
_ISbœnk
)

	)

205 #ifde‡
__USE_EXTERN_INLINES


206 
__exã∫_ölöe
 

207 
	`__NTH
 (
	$tﬁowî
 (
__c
))

209  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_tﬁowî_loc
 ())[__c] : __c;

210 
	}
}

212 
__exã∫_ölöe
 

213 
__NTH
 (
	$touµî
 (
__c
))

215  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_touµî_loc
 ())[__c] : __c;

216 
	}
}

219 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


220 
	#tﬁowî
(
c
Ë
	`__tobody
 (c, 
tﬁowî
, *
	`__˘y≥_tﬁowî_loc
 (), (c))

	)

221 
	#touµî
(
c
Ë
	`__tobody
 (c, 
touµî
, *
	`__˘y≥_touµî_loc
 (), (c))

	)

224 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


225 
	#ißscii
(
c
Ë
	`__ißscii
 (c)

	)

226 
	#tﬂscii
(
c
Ë
	`__tﬂscii
 (c)

	)

228 
	#_tﬁowî
(
c
Ë((Ë(*
	`__˘y≥_tﬁowî_loc
 ())[(Ë(c)])

	)

229 
	#_touµî
(
c
Ë((Ë(*
	`__˘y≥_touµî_loc
 ())[(Ë(c)])

	)

235 #ifde‡
__USE_XOPEN2K8


237 
	~<bôs/ty≥s/loˇÀ_t.h
>

241 
	#__is˘y≥_l
(
c
, 
ty≥
, 
loˇÀ
) \

242 ((
loˇÀ
)->
__˘y≥_b
[(Ë(
c
)] & (Ë
ty≥
)

	)

244 
	#__ex˘y≥_l
(
«me
) \

245 
	`«me
 (, 
loˇÀ_t
Ë
__THROW


	)

251 
__ex˘y≥_l
 (
iß um_l
);

252 
__ex˘y≥_l
 (
ißÕha_l
);

253 
__ex˘y≥_l
 (
is˙ål_l
);

254 
__ex˘y≥_l
 (
isdigô_l
);

255 
__ex˘y≥_l
 (
i¶owî_l
);

256 
__ex˘y≥_l
 (
isgøph_l
);

257 
__ex˘y≥_l
 (
i•röt_l
);

258 
__ex˘y≥_l
 (
i•un˘_l
);

259 
__ex˘y≥_l
 (
is•a˚_l
);

260 
__ex˘y≥_l
 (
isuµî_l
);

261 
__ex˘y≥_l
 (
isxdigô_l
);

263 
__ex˘y≥_l
 (
isbœnk_l
);

267 
	$__tﬁowî_l
 (
__c
, 
loˇÀ_t
 
__l
Ë
__THROW
;

268 
	$tﬁowî_l
 (
__c
, 
loˇÀ_t
 
__l
Ë
__THROW
;

271 
	$__touµî_l
 (
__c
, 
loˇÀ_t
 
__l
Ë
__THROW
;

272 
	$touµî_l
 (
__c
, 
loˇÀ_t
 
__l
Ë
__THROW
;

274 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


275 
	#__tﬁowî_l
(
c
, 
loˇÀ
) \

276 
	`__tobody
 (
c
, 
__tﬁowî_l
, (
loˇÀ
)->
__˘y≥_tﬁowî
, (c,ÜoˇÀ))

	)

277 
	#__touµî_l
(
c
, 
loˇÀ
) \

278 
	`__tobody
 (
c
, 
__touµî_l
, (
loˇÀ
)->
__˘y≥_touµî
, (c,ÜoˇÀ))

	)

279 
	#tﬁowî_l
(
c
, 
loˇÀ
Ë
	`__tﬁowî_l
 ((c), (loˇÀ))

	)

280 
	#touµî_l
(
c
, 
loˇÀ
Ë
	`__touµî_l
 ((c), (loˇÀ))

	)

284 #i‚de‡
__NO_CTYPE


285 
	#__iß um_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆnum
, (l))

	)

286 
	#__ißÕha_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆpha
, (l))

	)

287 
	#__is˙ål_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS˙ål
, (l))

	)

288 
	#__isdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISdigô
, (l))

	)

289 
	#__i¶owî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISlowî
, (l))

	)

290 
	#__isgøph_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISgøph
, (l))

	)

291 
	#__i•röt_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS¥öt
, (l))

	)

292 
	#__i•un˘_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISpun˘
, (l))

	)

293 
	#__is•a˚_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS•a˚
, (l))

	)

294 
	#__isuµî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISuµî
, (l))

	)

295 
	#__isxdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISxdigô
, (l))

	)

297 
	#__isbœnk_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISbœnk
, (l))

	)

299 #ifde‡
__USE_MISC


300 
	#__ißscii_l
(
c
,
l
Ë(÷), 
	`__ißscii
 (c))

	)

301 
	#__tﬂscii_l
(
c
,
l
Ë(÷), 
	`__tﬂscii
 (c))

	)

304 
	#iß um_l
(
c
,
l
Ë
	`__iß um_l
 ((c), (l))

	)

305 
	#ißÕha_l
(
c
,
l
Ë
	`__ißÕha_l
 ((c), (l))

	)

306 
	#is˙ål_l
(
c
,
l
Ë
	`__is˙ål_l
 ((c), (l))

	)

307 
	#isdigô_l
(
c
,
l
Ë
	`__isdigô_l
 ((c), (l))

	)

308 
	#i¶owî_l
(
c
,
l
Ë
	`__i¶owî_l
 ((c), (l))

	)

309 
	#isgøph_l
(
c
,
l
Ë
	`__isgøph_l
 ((c), (l))

	)

310 
	#i•röt_l
(
c
,
l
Ë
	`__i•röt_l
 ((c), (l))

	)

311 
	#i•un˘_l
(
c
,
l
Ë
	`__i•un˘_l
 ((c), (l))

	)

312 
	#is•a˚_l
(
c
,
l
Ë
	`__is•a˚_l
 ((c), (l))

	)

313 
	#isuµî_l
(
c
,
l
Ë
	`__isuµî_l
 ((c), (l))

	)

314 
	#isxdigô_l
(
c
,
l
Ë
	`__isxdigô_l
 ((c), (l))

	)

316 
	#isbœnk_l
(
c
,
l
Ë
	`__isbœnk_l
 ((c), (l))

	)

318 #ifde‡
__USE_MISC


319 
	#ißscii_l
(
c
,
l
Ë
	`__ißscii_l
 ((c), (l))

	)

320 
	#tﬂscii_l
(
c
,
l
Ë
	`__tﬂscii_l
 ((c), (l))

	)

327 
__END_DECLS


	@/usr/include/dlfcn.h

19 #i‚def 
_DLFCN_H


20 
	#_DLFCN_H
 1

	)

22 
	~<„©uªs.h
>

23 
	#__√ed_size_t


	)

24 
	~<°ddef.h
>

27 
	~<bôs/dlf˙.h
>

30 #ifde‡
__USE_GNU


35 
	#RTLD_NEXT
 ((*Ë-1l)

	)

40 
	#RTLD_DEFAULT
 ((*Ë0)

	)

44 
	tLmid_t
;

47 
	#LM_ID_BASE
 0

	)

48 
	#LM_ID_NEWLM
 -1

	)

52 
__BEGIN_DECLS


56 *
	$dl›í
 (c⁄° *
__fûe
, 
__mode
Ë
__THROWNL
;

60 
	$dl˛o£
 (*
__h™dÀ
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1));

64 *
	$dlsym
 (*
__ª°ri˘
 
__h™dÀ
,

65 c⁄° *
__ª°ri˘
 
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

67 #ifde‡
__USE_GNU


69 *
	$dlm›í
 (
Lmid_t
 
__nsid
, c⁄° *
__fûe
, 
__mode
Ë
__THROWNL
;

73 *
	$dlvsym
 (*
__ª°ri˘
 
__h™dÀ
,

74 c⁄° *
__ª°ri˘
 
__«me
,

75 c⁄° *
__ª°ri˘
 
__vîsi⁄
)

76 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

82 *
	$dÀº‹
 (Ë
__THROW
;

85 #ifde‡
__USE_GNU


90 c⁄° *
dli_‚ame
;

91 *
dli_fba£
;

92 c⁄° *
dli_¢ame
;

93 *
dli_ßddr
;

94 } 
	tDl_öfo
;

98 
	$dœddr
 (c⁄° *
__addªss
, 
Dl_öfo
 *
__öfo
)

99 
__THROW
 
	`__n⁄nuŒ
 ((2));

102 
	$dœddr1
 (c⁄° *
__addªss
, 
Dl_öfo
 *
__öfo
,

103 **
__exåa_öfo
, 
__Êags
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

111 
RTLD_DL_SYMENT
 = 1,

114 
RTLD_DL_LINKMAP
 = 2

123 
	$dlöfo
 (*
__ª°ri˘
 
__h™dÀ
,

124 
__ªque°
, *
__ª°ri˘
 
__¨g
)

125 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

131 
RTLD_DI_LMID
 = 1,

135 
RTLD_DI_LINKMAP
 = 2,

137 
RTLD_DI_CONFIGADDR
 = 3,

144 
RTLD_DI_SERINFO
 = 4,

145 
RTLD_DI_SERINFOSIZE
 = 5,

149 
RTLD_DI_ORIGIN
 = 6,

151 
RTLD_DI_PROFILENAME
 = 7,

152 
RTLD_DI_PROFILEOUT
 = 8,

157 
RTLD_DI_TLS_MODID
 = 9,

163 
RTLD_DI_TLS_DATA
 = 10,

165 
RTLD_DI_MAX
 = 10

173 *
dls_«me
;

174 
dls_Êags
;

175 } 
	tDl_£Ω©h
;

181 
size_t
 
dls_size
;

182 
dls_˙t
;

183 
Dl_£Ω©h
 
dls_£Ω©h
[1];

184 } 
	tDl_£röfo
;

188 
__END_DECLS


	@/usr/include/errno.h

22 #i‚def 
_ERRNO_H


23 
	#_ERRNO_H
 1

	)

25 
	~<„©uªs.h
>

28 
	~<bôs/î∫o.h
>

32 #i‚de‡
__ASSEMBLER__


34 
__BEGIN_DECLS


37 *
	$__î∫o_loˇti⁄
 (Ë
__THROW
 
__©åibuã_c⁄°__
;

38 
	#î∫o
 (*
	`__î∫o_loˇti⁄
 ())

	)

40 #ifde‡
__USE_GNU


45 *
¥ogøm_övoˇti⁄_«me
;

46 *
¥ogøm_övoˇti⁄_sh‹t_«me
;

50 #i‚de‡
__îr‹_t_deföed


51 
	#__îr‹_t_deföed
 1

	)

52 
	tîr‹_t
;

57 
__END_DECLS


	@/usr/include/fcntl.h

22 #i‚def 
_FCNTL_H


23 
	#_FCNTL_H
 1

	)

25 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


31 
	~<bôs/ty≥s.h
>

35 
	~<bôs/f˙é.h
>

39 #ifde‡
__O_TMPFILE


40 
	#__OPEN_NEEDS_MODE
(
oÊag
) \

41 (((
oÊag
Ë& 
O_CREAT
Ë!0 || ((oÊagË& 
__O_TMPFILE
Ë=__O_TMPFILE)

	)

43 
	#__OPEN_NEEDS_MODE
(
oÊag
Ë(((oÊagË& 
O_CREAT
Ë!0)

	)

49 #i‚de‡
__mode_t_deföed


50 
__mode_t
 
	tmode_t
;

51 
	#__mode_t_deföed


	)

54 #i‚de‡
__off_t_deföed


55 #i‚de‡
__USE_FILE_OFFSET64


56 
__off_t
 
	toff_t
;

58 
__off64_t
 
	toff_t
;

60 
	#__off_t_deföed


	)

63 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


64 
__off64_t
 
	toff64_t
;

65 
	#__off64_t_deföed


	)

68 #i‚de‡
__pid_t_deföed


69 
__pid_t
 
	tpid_t
;

70 
	#__pid_t_deföed


	)

74 #ifde‡
__USE_XOPEN2K8


75 
	~<bôs/ty≥s/°ru˘_time•ec.h
>

77 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


78 
	~<bôs/°©.h
>

80 
	#S_IFMT
 
__S_IFMT


	)

81 
	#S_IFDIR
 
__S_IFDIR


	)

82 
	#S_IFCHR
 
__S_IFCHR


	)

83 
	#S_IFBLK
 
__S_IFBLK


	)

84 
	#S_IFREG
 
__S_IFREG


	)

85 #ifde‡
__S_IFIFO


86 
	#S_IFIFO
 
__S_IFIFO


	)

88 #ifde‡
__S_IFLNK


89 
	#S_IFLNK
 
__S_IFLNK


	)

91 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
Ë&& deföed 
__S_IFSOCK


92 
	#S_IFSOCK
 
__S_IFSOCK


	)

97 
	#S_ISUID
 
__S_ISUID


	)

98 
	#S_ISGID
 
__S_ISGID


	)

100 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


102 
	#S_ISVTX
 
__S_ISVTX


	)

105 
	#S_IRUSR
 
__S_IREAD


	)

106 
	#S_IWUSR
 
__S_IWRITE


	)

107 
	#S_IXUSR
 
__S_IEXEC


	)

109 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

111 
	#S_IRGRP
 (
S_IRUSR
 >> 3Ë

	)

112 
	#S_IWGRP
 (
S_IWUSR
 >> 3Ë

	)

113 
	#S_IXGRP
 (
S_IXUSR
 >> 3Ë

	)

115 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

117 
	#S_IROTH
 (
S_IRGRP
 >> 3Ë

	)

118 
	#S_IWOTH
 (
S_IWGRP
 >> 3Ë

	)

119 
	#S_IXOTH
 (
S_IXGRP
 >> 3Ë

	)

121 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

124 #ifdef 
__USE_MISC


125 #i‚de‡
R_OK


128 
	#R_OK
 4

	)

129 
	#W_OK
 2

	)

130 
	#X_OK
 1

	)

131 
	#F_OK
 0

	)

136 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


137 
	#SEEK_SET
 0

	)

138 
	#SEEK_CUR
 1

	)

139 
	#SEEK_END
 2

	)

147 
f˙é
 (
__fd
, 
__cmd
, ...);

156 #i‚de‡
__USE_FILE_OFFSET64


157 
	$›í
 (c⁄° *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

159 #ifde‡
__REDIRECT


160 
	`__REDIRECT
 (
›í
, (c⁄° *
__fûe
, 
__oÊag
, ...), 
›í64
)

161 
	`__n⁄nuŒ
 ((1));

163 
	#›í
 
›í64


	)

166 #ifde‡
__USE_LARGEFILE64


167 
	$›í64
 (c⁄° *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

170 #ifde‡
__USE_ATFILE


180 #i‚de‡
__USE_FILE_OFFSET64


181 
	$›í©
 (
__fd
, c⁄° *
__fûe
, 
__oÊag
, ...)

182 
	`__n⁄nuŒ
 ((2));

184 #ifde‡
__REDIRECT


185 
	`__REDIRECT
 (
›í©
, (
__fd
, c⁄° *
__fûe
, 
__oÊag
,

186 ...), 
›í©64
Ë
	`__n⁄nuŒ
 ((2));

188 
	#›í©
 
›í©64


	)

191 #ifde‡
__USE_LARGEFILE64


192 
	$›í©64
 (
__fd
, c⁄° *
__fûe
, 
__oÊag
, ...)

193 
	`__n⁄nuŒ
 ((2));

202 #i‚de‡
__USE_FILE_OFFSET64


203 
	$¸ót
 (c⁄° *
__fûe
, 
mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

205 #ifde‡
__REDIRECT


206 
	`__REDIRECT
 (
¸ót
, (c⁄° *
__fûe
, 
mode_t
 
__mode
),

207 
¸ót64
Ë
	`__n⁄nuŒ
 ((1));

209 
	#¸ót
 
¸ót64


	)

212 #ifde‡
__USE_LARGEFILE64


213 
	$¸ót64
 (c⁄° *
__fûe
, 
mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

216 #i‡!
deföed
 
F_LOCK
 && (deföed 
__USE_MISC
 || (deföed 
__USE_XOPEN_EXTENDED
 \

217 && !
deföed
 
__USE_POSIX
))

226 
	#F_ULOCK
 0

	)

227 
	#F_LOCK
 1

	)

228 
	#F_TLOCK
 2

	)

229 
	#F_TEST
 3

	)

231 #i‚de‡
__USE_FILE_OFFSET64


232 
	`lockf
 (
__fd
, 
__cmd
, 
off_t
 
__Àn
);

234 #ifde‡
__REDIRECT


235 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
), 
lockf64
);

237 
	#lockf
 
lockf64


	)

240 #ifde‡
__USE_LARGEFILE64


241 
	`lockf64
 (
__fd
, 
__cmd
, 
off64_t
 
__Àn
);

245 #ifde‡
__USE_XOPEN2K


248 #i‚de‡
__USE_FILE_OFFSET64


249 
	$posix_Ádvi£
 (
__fd
, 
off_t
 
__off£t
, off_à
__Àn
,

250 
__advi£
Ë
__THROW
;

252 #ifde‡
__REDIRECT_NTH


253 
	`__REDIRECT_NTH
 (
posix_Ádvi£
, (
__fd
, 
__off64_t
 
__off£t
,

254 
__off64_t
 
__Àn
, 
__advi£
),

255 
posix_Ádvi£64
);

257 
	#posix_Ádvi£
 
posix_Ádvi£64


	)

260 #ifde‡
__USE_LARGEFILE64


261 
	$posix_Ádvi£64
 (
__fd
, 
off64_t
 
__off£t
, off64_à
__Àn
,

262 
__advi£
Ë
__THROW
;

270 #i‚de‡
__USE_FILE_OFFSET64


271 
	`posix_ÁŒoˇã
 (
__fd
, 
off_t
 
__off£t
, off_à
__Àn
);

273 #ifde‡
__REDIRECT


274 
	`__REDIRECT
 (
posix_ÁŒoˇã
, (
__fd
, 
__off64_t
 
__off£t
,

275 
__off64_t
 
__Àn
),

276 
posix_ÁŒoˇã64
);

278 
	#posix_ÁŒoˇã
 
posix_ÁŒoˇã64


	)

281 #ifde‡
__USE_LARGEFILE64


282 
	`posix_ÁŒoˇã64
 (
__fd
, 
off64_t
 
__off£t
, off64_à
__Àn
);

288 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄
 \

289 && 
deföed
 
__va_¨g_∑ck_Àn


290 
	~<bôs/f˙é2.h
>

293 
__END_DECLS


	@/usr/include/fnmatch.h

18 #i‚def 
_FNMATCH_H


19 
	#_FNMATCH_H
 1

	)

21 #ifdef 
__˝lu•lus


27 #unde‡
FNM_PATHNAME


28 #unde‡
FNM_NOESCAPE


29 #unde‡
FNM_PERIOD


32 
	#FNM_PATHNAME
 (1 << 0Ë

	)

33 
	#FNM_NOESCAPE
 (1 << 1Ë

	)

34 
	#FNM_PERIOD
 (1 << 2Ë

	)

36 #i‡!
deföed
 
_POSIX_C_SOURCE
 || _POSIX_C_SOURCE < 2 || deföed 
_GNU_SOURCE


37 
	#FNM_FILE_NAME
 
FNM_PATHNAME


	)

38 
	#FNM_LEADING_DIR
 (1 << 3Ë

	)

39 
	#FNM_CASEFOLD
 (1 << 4Ë

	)

40 
	#FNM_EXTMATCH
 (1 << 5Ë

	)

44 
	#FNM_NOMATCH
 1

	)

50 #ifde‡
_XOPEN_SOURCE


51 
	#FNM_NOSYS
 (-1)

	)

56 
‚m©ch
 (c⁄° *
__∑âîn
, c⁄° *
__«me
, 
__Êags
);

58 #ifdef 
__˝lu•lus


	@/usr/include/getopt.h

21 #i‚de‡
_GETOPT_H


22 
	#_GETOPT_H
 1

	)

24 
	~<„©uªs.h
>

31 #i‚de‡
__gë›t_¨gv_c⁄°


32 
	#__gë›t_¨gv_c⁄°
 c⁄°

	)

35 
	~<bôs/gë›t_c‹e.h
>

36 
	~<bôs/gë›t_ext.h
>

	@/usr/include/inttypes.h

22 #i‚de‡
_INTTYPES_H


23 
	#_INTTYPES_H
 1

	)

25 
	~<„©uªs.h
>

27 
	~<°döt.h
>

30 #i‚de‡
____gwch¨_t_deföed


31 #ifde‡
__˝lu•lus


32 
	#__gwch¨_t
 
wch¨_t


	)

33 #ñi‡
deföed
 
__WCHAR_TYPE__


34 
__WCHAR_TYPE__
 
	t__gwch¨_t
;

36 
	#__√ed_wch¨_t


	)

37 
	~<°ddef.h
>

38 
wch¨_t
 
	t__gwch¨_t
;

40 
	#____gwch¨_t_deföed
 1

	)

43 #i‡
__WORDSIZE
 == 64

44 
	#__PRI64_PREFIX
 "l"

	)

45 
	#__PRIPTR_PREFIX
 "l"

	)

47 
	#__PRI64_PREFIX
 "Œ"

	)

48 
	#__PRIPTR_PREFIX


	)

54 
	#PRId8
 "d"

	)

55 
	#PRId16
 "d"

	)

56 
	#PRId32
 "d"

	)

57 
	#PRId64
 
__PRI64_PREFIX
 "d"

	)

59 
	#PRIdLEAST8
 "d"

	)

60 
	#PRIdLEAST16
 "d"

	)

61 
	#PRIdLEAST32
 "d"

	)

62 
	#PRIdLEAST64
 
__PRI64_PREFIX
 "d"

	)

64 
	#PRIdFAST8
 "d"

	)

65 
	#PRIdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

66 
	#PRIdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

67 
	#PRIdFAST64
 
__PRI64_PREFIX
 "d"

	)

70 
	#PRIi8
 "i"

	)

71 
	#PRIi16
 "i"

	)

72 
	#PRIi32
 "i"

	)

73 
	#PRIi64
 
__PRI64_PREFIX
 "i"

	)

75 
	#PRIiLEAST8
 "i"

	)

76 
	#PRIiLEAST16
 "i"

	)

77 
	#PRIiLEAST32
 "i"

	)

78 
	#PRIiLEAST64
 
__PRI64_PREFIX
 "i"

	)

80 
	#PRIiFAST8
 "i"

	)

81 
	#PRIiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

82 
	#PRIiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

83 
	#PRIiFAST64
 
__PRI64_PREFIX
 "i"

	)

86 
	#PRIo8
 "o"

	)

87 
	#PRIo16
 "o"

	)

88 
	#PRIo32
 "o"

	)

89 
	#PRIo64
 
__PRI64_PREFIX
 "o"

	)

91 
	#PRIoLEAST8
 "o"

	)

92 
	#PRIoLEAST16
 "o"

	)

93 
	#PRIoLEAST32
 "o"

	)

94 
	#PRIoLEAST64
 
__PRI64_PREFIX
 "o"

	)

96 
	#PRIoFAST8
 "o"

	)

97 
	#PRIoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

98 
	#PRIoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

99 
	#PRIoFAST64
 
__PRI64_PREFIX
 "o"

	)

102 
	#PRIu8
 "u"

	)

103 
	#PRIu16
 "u"

	)

104 
	#PRIu32
 "u"

	)

105 
	#PRIu64
 
__PRI64_PREFIX
 "u"

	)

107 
	#PRIuLEAST8
 "u"

	)

108 
	#PRIuLEAST16
 "u"

	)

109 
	#PRIuLEAST32
 "u"

	)

110 
	#PRIuLEAST64
 
__PRI64_PREFIX
 "u"

	)

112 
	#PRIuFAST8
 "u"

	)

113 
	#PRIuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

114 
	#PRIuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

115 
	#PRIuFAST64
 
__PRI64_PREFIX
 "u"

	)

118 
	#PRIx8
 "x"

	)

119 
	#PRIx16
 "x"

	)

120 
	#PRIx32
 "x"

	)

121 
	#PRIx64
 
__PRI64_PREFIX
 "x"

	)

123 
	#PRIxLEAST8
 "x"

	)

124 
	#PRIxLEAST16
 "x"

	)

125 
	#PRIxLEAST32
 "x"

	)

126 
	#PRIxLEAST64
 
__PRI64_PREFIX
 "x"

	)

128 
	#PRIxFAST8
 "x"

	)

129 
	#PRIxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

130 
	#PRIxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

131 
	#PRIxFAST64
 
__PRI64_PREFIX
 "x"

	)

134 
	#PRIX8
 "X"

	)

135 
	#PRIX16
 "X"

	)

136 
	#PRIX32
 "X"

	)

137 
	#PRIX64
 
__PRI64_PREFIX
 "X"

	)

139 
	#PRIXLEAST8
 "X"

	)

140 
	#PRIXLEAST16
 "X"

	)

141 
	#PRIXLEAST32
 "X"

	)

142 
	#PRIXLEAST64
 
__PRI64_PREFIX
 "X"

	)

144 
	#PRIXFAST8
 "X"

	)

145 
	#PRIXFAST16
 
__PRIPTR_PREFIX
 "X"

	)

146 
	#PRIXFAST32
 
__PRIPTR_PREFIX
 "X"

	)

147 
	#PRIXFAST64
 
__PRI64_PREFIX
 "X"

	)

151 
	#PRIdMAX
 
__PRI64_PREFIX
 "d"

	)

152 
	#PRIiMAX
 
__PRI64_PREFIX
 "i"

	)

153 
	#PRIoMAX
 
__PRI64_PREFIX
 "o"

	)

154 
	#PRIuMAX
 
__PRI64_PREFIX
 "u"

	)

155 
	#PRIxMAX
 
__PRI64_PREFIX
 "x"

	)

156 
	#PRIXMAX
 
__PRI64_PREFIX
 "X"

	)

160 
	#PRIdPTR
 
__PRIPTR_PREFIX
 "d"

	)

161 
	#PRIiPTR
 
__PRIPTR_PREFIX
 "i"

	)

162 
	#PRIoPTR
 
__PRIPTR_PREFIX
 "o"

	)

163 
	#PRIuPTR
 
__PRIPTR_PREFIX
 "u"

	)

164 
	#PRIxPTR
 
__PRIPTR_PREFIX
 "x"

	)

165 
	#PRIXPTR
 
__PRIPTR_PREFIX
 "X"

	)

171 
	#SCNd8
 "hhd"

	)

172 
	#SCNd16
 "hd"

	)

173 
	#SCNd32
 "d"

	)

174 
	#SCNd64
 
__PRI64_PREFIX
 "d"

	)

176 
	#SCNdLEAST8
 "hhd"

	)

177 
	#SCNdLEAST16
 "hd"

	)

178 
	#SCNdLEAST32
 "d"

	)

179 
	#SCNdLEAST64
 
__PRI64_PREFIX
 "d"

	)

181 
	#SCNdFAST8
 "hhd"

	)

182 
	#SCNdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

183 
	#SCNdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

184 
	#SCNdFAST64
 
__PRI64_PREFIX
 "d"

	)

187 
	#SCNi8
 "hhi"

	)

188 
	#SCNi16
 "hi"

	)

189 
	#SCNi32
 "i"

	)

190 
	#SCNi64
 
__PRI64_PREFIX
 "i"

	)

192 
	#SCNiLEAST8
 "hhi"

	)

193 
	#SCNiLEAST16
 "hi"

	)

194 
	#SCNiLEAST32
 "i"

	)

195 
	#SCNiLEAST64
 
__PRI64_PREFIX
 "i"

	)

197 
	#SCNiFAST8
 "hhi"

	)

198 
	#SCNiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

199 
	#SCNiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

200 
	#SCNiFAST64
 
__PRI64_PREFIX
 "i"

	)

203 
	#SCNu8
 "hhu"

	)

204 
	#SCNu16
 "hu"

	)

205 
	#SCNu32
 "u"

	)

206 
	#SCNu64
 
__PRI64_PREFIX
 "u"

	)

208 
	#SCNuLEAST8
 "hhu"

	)

209 
	#SCNuLEAST16
 "hu"

	)

210 
	#SCNuLEAST32
 "u"

	)

211 
	#SCNuLEAST64
 
__PRI64_PREFIX
 "u"

	)

213 
	#SCNuFAST8
 "hhu"

	)

214 
	#SCNuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

215 
	#SCNuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

216 
	#SCNuFAST64
 
__PRI64_PREFIX
 "u"

	)

219 
	#SCNo8
 "hho"

	)

220 
	#SCNo16
 "ho"

	)

221 
	#SCNo32
 "o"

	)

222 
	#SCNo64
 
__PRI64_PREFIX
 "o"

	)

224 
	#SCNoLEAST8
 "hho"

	)

225 
	#SCNoLEAST16
 "ho"

	)

226 
	#SCNoLEAST32
 "o"

	)

227 
	#SCNoLEAST64
 
__PRI64_PREFIX
 "o"

	)

229 
	#SCNoFAST8
 "hho"

	)

230 
	#SCNoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

231 
	#SCNoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

232 
	#SCNoFAST64
 
__PRI64_PREFIX
 "o"

	)

235 
	#SCNx8
 "hhx"

	)

236 
	#SCNx16
 "hx"

	)

237 
	#SCNx32
 "x"

	)

238 
	#SCNx64
 
__PRI64_PREFIX
 "x"

	)

240 
	#SCNxLEAST8
 "hhx"

	)

241 
	#SCNxLEAST16
 "hx"

	)

242 
	#SCNxLEAST32
 "x"

	)

243 
	#SCNxLEAST64
 
__PRI64_PREFIX
 "x"

	)

245 
	#SCNxFAST8
 "hhx"

	)

246 
	#SCNxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

247 
	#SCNxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

248 
	#SCNxFAST64
 
__PRI64_PREFIX
 "x"

	)

252 
	#SCNdMAX
 
__PRI64_PREFIX
 "d"

	)

253 
	#SCNiMAX
 
__PRI64_PREFIX
 "i"

	)

254 
	#SCNoMAX
 
__PRI64_PREFIX
 "o"

	)

255 
	#SCNuMAX
 
__PRI64_PREFIX
 "u"

	)

256 
	#SCNxMAX
 
__PRI64_PREFIX
 "x"

	)

259 
	#SCNdPTR
 
__PRIPTR_PREFIX
 "d"

	)

260 
	#SCNiPTR
 
__PRIPTR_PREFIX
 "i"

	)

261 
	#SCNoPTR
 
__PRIPTR_PREFIX
 "o"

	)

262 
	#SCNuPTR
 
__PRIPTR_PREFIX
 "u"

	)

263 
	#SCNxPTR
 
__PRIPTR_PREFIX
 "x"

	)

266 
	g__BEGIN_DECLS


268 #i‡
__WORDSIZE
 == 64

273 
	mquŸ
;

274 
	mªm
;

275 } 
	timaxdiv_t
;

282 
__exãnsi⁄__
 
	mquŸ
;

283 
__exãnsi⁄__
 
	mªm
;

284 } 
	timaxdiv_t
;

290 
ötmax_t
 
	$imaxabs
 (
ötmax_t
 
__n
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

293 
imaxdiv_t
 
	$imaxdiv
 (
ötmax_t
 
__numî
, i¡max_à
__díom
)

294 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

297 
ötmax_t
 
	$°πoimax
 (c⁄° *
__ª°ri˘
 
__≈å
,

298 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

301 
uötmax_t
 
	$°πoumax
 (c⁄° *
__ª°ri˘
 
__≈å
,

302 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

305 
ötmax_t
 
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

306 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

307 
__THROW
;

310 
uötmax_t
 
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

311 
__gwch¨_t
 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
)

312 
__THROW
;

314 #ifde‡
__USE_EXTERN_INLINES


316 #i‡
__WORDSIZE
 == 64

318 
	$__°πﬁ_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

319 **
__ª°ri˘
 
__íd±r
,

320 
__ba£
, 
__group
)

321 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

323 
__exã∫_ölöe
 
ötmax_t


324 
	`__NTH
 (
	$°πoimax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

325 
ba£
))

327  
	`__°πﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

328 
	}
}

330 
	$__°πoul_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

331 ** 
__ª°ri˘
 
__íd±r
,

332 
__ba£
, 
__group
)

333 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

335 
__exã∫_ölöe
 
uötmax_t


336 
	`__NTH
 (
	$°πoumax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

337 
ba£
))

339  
	`__°πoul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

340 
	}
}

342 
	$__wc°ﬁ_öã∫Æ
 (c⁄° 
__gwch¨_t
 * 
__ª°ri˘
 
__≈å
,

343 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

344 
__ba£
, 
__group
)

345 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

347 
__exã∫_ölöe
 
ötmax_t


348 
	`__NTH
 (
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

349 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

351  
	`__wc°ﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

352 
	}
}

354 
	$__wc°oul_öã∫Æ
 (c⁄° 
__gwch¨_t
 *

355 
__ª°ri˘
 
__≈å
,

356 
__gwch¨_t
 **

357 
__ª°ri˘
 
__íd±r
,

358 
__ba£
, 
__group
)

359 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

361 
__exã∫_ölöe
 
uötmax_t


362 
	`__NTH
 (
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

363 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

365  
	`__wc°oul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

366 
	}
}

370 
__exãnsi⁄__


371 
	$__°πﬁl_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

372 **
__ª°ri˘
 
__íd±r
,

373 
__ba£
, 
__group
)

374 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

376 
__exã∫_ölöe
 
ötmax_t


377 
	`__NTH
 (
	$°πoimax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

378 
ba£
))

380  
	`__°πﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

381 
	}
}

383 
__exãnsi⁄__


384 
	$__°πouŒ_öã∫Æ
 (const *

385 
__ª°ri˘
 
__≈å
,

387 
__ª°ri˘
 
__íd±r
,

388 
__ba£
,

389 
__group
)

390 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

392 
__exã∫_ölöe
 
uötmax_t


393 
	`__NTH
 (
	$°πoumax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

394 
ba£
))

396  
	`__°πouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

397 
	}
}

399 
__exãnsi⁄__


400 
	$__wc°ﬁl_öã∫Æ
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

401 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

402 
__ba£
, 
__group
)

403 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

405 
__exã∫_ölöe
 
ötmax_t


406 
	`__NTH
 (
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

407 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

409  
	`__wc°ﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

410 
	}
}

413 
__exãnsi⁄__


414 
	$__wc°ouŒ_öã∫Æ
 (c⁄° 
__gwch¨_t
 *

415 
__ª°ri˘
 
__≈å
,

416 
__gwch¨_t
 **

417 
__ª°ri˘
 
__íd±r
,

418 
__ba£
,

419 
__group
)

420 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

422 
__exã∫_ölöe
 
uötmax_t


423 
	`__NTH
 (
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

424 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

426  
	`__wc°ouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

427 
	}
}

432 
	g__END_DECLS


	@/usr/include/limits.h

22 #i‚de‡
_LIBC_LIMITS_H_


23 
	#_LIBC_LIMITS_H_
 1

	)

25 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

26 
	~<bôs/libc-hódî-°¨t.h
>

32 
	#MB_LEN_MAX
 16

	)

37 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

42 #i‚de‡
_LIMITS_H


43 
	#_LIMITS_H
 1

	)

45 
	~<bôs/w‹dsize.h
>

54 
	#CHAR_BIT
 8

	)

57 
	#SCHAR_MIN
 (-128)

	)

58 
	#SCHAR_MAX
 127

	)

61 
	#UCHAR_MAX
 255

	)

64 #ifde‡
__CHAR_UNSIGNED__


65 
	#CHAR_MIN
 0

	)

66 
	#CHAR_MAX
 
UCHAR_MAX


	)

68 
	#CHAR_MIN
 
SCHAR_MIN


	)

69 
	#CHAR_MAX
 
SCHAR_MAX


	)

73 
	#SHRT_MIN
 (-32768)

	)

74 
	#SHRT_MAX
 32767

	)

77 
	#USHRT_MAX
 65535

	)

80 
	#INT_MIN
 (-
INT_MAX
 - 1)

	)

81 
	#INT_MAX
 2147483647

	)

84 
	#UINT_MAX
 4294967295U

	)

87 #i‡
__WORDSIZE
 == 64

88 
	#LONG_MAX
 9223372036854775807L

	)

90 
	#LONG_MAX
 2147483647L

	)

92 
	#LONG_MIN
 (-
LONG_MAX
 - 1L)

	)

95 #i‡
__WORDSIZE
 == 64

96 
	#ULONG_MAX
 18446744073709551615UL

	)

98 
	#ULONG_MAX
 4294967295UL

	)

101 #ifde‡
__USE_ISOC99


104 
	#LLONG_MAX
 9223372036854775807LL

	)

105 
	#LLONG_MIN
 (-
LLONG_MAX
 - 1LL)

	)

108 
	#ULLONG_MAX
 18446744073709551615ULL

	)

122 #i‡
deföed
 
__GNUC__
 && !deföed 
_GCC_LIMITS_H_


124 #ö˛ude_√xà<
limôs
.
h
>

130 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__GNUC__


131 #i‚de‡
LLONG_MIN


132 
	#LLONG_MIN
 (-
LLONG_MAX
-1)

	)

134 #i‚de‡
LLONG_MAX


135 
	#LLONG_MAX
 
__LONG_LONG_MAX__


	)

137 #i‚de‡
ULLONG_MAX


138 
	#ULLONG_MAX
 (
LLONG_MAX
 * 2ULL + 1)

	)

145 #i‡
__GLIBC_USE
 (
IEC_60559_BFP_EXT
)

146 #i‚de‡
CHAR_WIDTH


147 
	#CHAR_WIDTH
 8

	)

149 #i‚de‡
SCHAR_WIDTH


150 
	#SCHAR_WIDTH
 8

	)

152 #i‚de‡
UCHAR_WIDTH


153 
	#UCHAR_WIDTH
 8

	)

155 #i‚de‡
SHRT_WIDTH


156 
	#SHRT_WIDTH
 16

	)

158 #i‚de‡
USHRT_WIDTH


159 
	#USHRT_WIDTH
 16

	)

161 #i‚de‡
INT_WIDTH


162 
	#INT_WIDTH
 32

	)

164 #i‚de‡
UINT_WIDTH


165 
	#UINT_WIDTH
 32

	)

167 #i‚de‡
LONG_WIDTH


168 
	#LONG_WIDTH
 
__WORDSIZE


	)

170 #i‚de‡
ULONG_WIDTH


171 
	#ULONG_WIDTH
 
__WORDSIZE


	)

173 #i‚de‡
LLONG_WIDTH


174 
	#LLONG_WIDTH
 64

	)

176 #i‚de‡
ULLONG_WIDTH


177 
	#ULLONG_WIDTH
 64

	)

181 #ifdef 
__USE_POSIX


183 
	~<bôs/posix1_lim.h
>

186 #ifdef 
__USE_POSIX2


187 
	~<bôs/posix2_lim.h
>

190 #ifdef 
__USE_XOPEN


191 
	~<bôs/x›í_lim.h
>

	@/usr/include/malloc.h

19 #i‚de‡
_MALLOC_H


20 
	#_MALLOC_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<°ddef.h
>

24 
	~<°dio.h
>

26 #ifde‡
_LIBC


27 
	#__MALLOC_HOOK_VOLATILE


	)

28 
	#__MALLOC_DEPRECATED


	)

30 
	#__MALLOC_HOOK_VOLATILE
 vﬁ©ûe

	)

31 
	#__MALLOC_DEPRECATED
 
__©åibuã_dïªˇãd__


	)

35 
__BEGIN_DECLS


38 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

41 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

42 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

49 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

50 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

57 *
	$ªÆloˇºay
 (*
__±r
, 
size_t
 
__nmemb
, size_à
__size
)

58 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

61 
	$‰ì
 (*
__±r
Ë
__THROW
;

64 *
	$memÆign
 (
size_t
 
__Æignmít
, size_à
__size
)

65 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

68 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

72 *
	$pvÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

76 *(*
__m‹ec‹e
Ë(
±rdiff_t
 
__size
);

79 *
	$__deÁu…_m‹ec‹e
 (
±rdiff_t
 
__size
)

80 
__THROW
 
__©åibuã_mÆloc__
;

84 
	smÆlöfo


86 
¨ía
;

87 
‹dblks
;

88 
smblks
;

89 
hblks
;

90 
hblkhd
;

91 
usmblks
;

92 
fsmblks
;

93 
u‹dblks
;

94 
f‹dblks
;

95 
kìpco°
;

99 
mÆlöfo
 
	$mÆlöfo
 (Ë
__THROW
;

102 #i‚de‡
M_MXFAST


103 
	#M_MXFAST
 1

	)

105 #i‚de‡
M_NLBLKS


106 
	#M_NLBLKS
 2

	)

108 #i‚de‡
M_GRAIN


109 
	#M_GRAIN
 3

	)

111 #i‚de‡
M_KEEP


112 
	#M_KEEP
 4

	)

116 
	#M_TRIM_THRESHOLD
 -1

	)

117 
	#M_TOP_PAD
 -2

	)

118 
	#M_MMAP_THRESHOLD
 -3

	)

119 
	#M_MMAP_MAX
 -4

	)

120 
	#M_CHECK_ACTION
 -5

	)

121 
	#M_PERTURB
 -6

	)

122 
	#M_ARENA_TEST
 -7

	)

123 
	#M_ARENA_MAX
 -8

	)

126 
	$mÆl›t
 (
__∑øm
, 
__vÆ
Ë
__THROW
;

130 
	$mÆloc_åim
 (
size_t
 
__∑d
Ë
__THROW
;

134 
size_t
 
	$mÆloc_ußbÀ_size
 (*
__±r
Ë
__THROW
;

137 
	$mÆloc_°©s
 (Ë
__THROW
;

140 
	$mÆloc_öfo
 (
__›ti⁄s
, 
FILE
 *
__Â
Ë
__THROW
;

143 (*
__MALLOC_HOOK_VOLATILE
 
__‰ì_hook
Ë(*
__±r
,

145 
__MALLOC_DEPRECATED
;

146 *(*
__MALLOC_HOOK_VOLATILE
 
__mÆloc_hook
)(
size_t
 
__size
,

148 
__MALLOC_DEPRECATED
;

149 *(*
__MALLOC_HOOK_VOLATILE
 
__ªÆloc_hook
)(*
__±r
,

150 
size_t
 
__size
,

152 
__MALLOC_DEPRECATED
;

153 *(*
__MALLOC_HOOK_VOLATILE
 
__memÆign_hook
)(
size_t
 
__Æignmít
,

154 
size_t
 
__size
,

156 
__MALLOC_DEPRECATED
;

157 (*
__MALLOC_HOOK_VOLATILE
 
__a·î_m‹ec‹e_hook
) ();

160 
	$__mÆloc_check_öô
 (Ë
__THROW
 
__MALLOC_DEPRECATED
;

163 
__END_DECLS


	@/usr/include/netdb.h

22 #i‚def 
_NETDB_H


23 
	#_NETDB_H
 1

	)

25 
	~<„©uªs.h
>

27 
	~<√töë/ö.h
>

28 
	~<bôs/°döt-uöä.h
>

29 #ifde‡
__USE_MISC


32 
	~<Ωc/√tdb.h
>

35 #ifde‡
__USE_GNU


36 
	~<bôs/ty≥s/sigevít_t.h
>

37 
	~<bôs/ty≥s/°ru˘_time•ec.h
>

40 
	~<bôs/√tdb.h
>

43 
	#_PATH_HEQUIV
 "/ëc/ho°s.equiv"

	)

44 
	#_PATH_HOSTS
 "/ëc/ho°s"

	)

45 
	#_PATH_NETWORKS
 "/ëc/√tw‹ks"

	)

46 
	#_PATH_NSSWITCH_CONF
 "/ëc/nsswôch.c⁄f"

	)

47 
	#_PATH_PROTOCOLS
 "/ëc/¥Ÿocﬁs"

	)

48 
	#_PATH_SERVICES
 "/ëc/£rvi˚s"

	)

51 
	g__BEGIN_DECLS


53 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8


56 
	#h_î∫o
 (*
	`__h_î∫o_loˇti⁄
 ())

	)

59 *
	$__h_î∫o_loˇti⁄
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

63 
	#HOST_NOT_FOUND
 1

	)

64 
	#TRY_AGAIN
 2

	)

66 
	#NO_RECOVERY
 3

	)

68 
	#NO_DATA
 4

	)

71 #ifde‡
__USE_MISC


72 
	#NETDB_INTERNAL
 -1

	)

73 
	#NETDB_SUCCESS
 0

	)

74 
	#NO_ADDRESS
 
NO_DATA


	)

77 #i‡
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_XOPEN_EXTENDED


79 
	#IPPORT_RESERVED
 1024

	)

82 #ifde‡
__USE_GNU


84 
	#SCOPE_DELIMITER
 '%'

	)

87 #ifde‡
__USE_MISC


90 
	$hîr‹
 (c⁄° *
__°r
Ë
__THROW
;

93 c⁄° *
	$h°ªº‹
 (
__îr_num
Ë
__THROW
;

98 
	sho°ít


100 *
h_«me
;

101 **
h_Æü£s
;

102 
h_addπy≥
;

103 
h_Àngth
;

104 **
h_addr_li°
;

105 #ifde‡
__USE_MISC


106 
	#h_addr
 
h_addr_li°
[0]

	)

115 
	`£tho°ít
 (
__°ay_›í
);

121 
	`ídho°ít
 ();

128 
ho°ít
 *
	`gëho°ít
 ();

135 
ho°ít
 *
	`gëho°byaddr
 (c⁄° *
__addr
, 
__sockÀn_t
 
__Àn
,

136 
__ty≥
);

142 
ho°ít
 *
	`gëho°by«me
 (c⁄° *
__«me
);

144 #ifde‡
__USE_MISC


153 
ho°ít
 *
	`gëho°by«me2
 (c⁄° *
__«me
, 
__af
);

165 
	`gëho°ít_r
 (
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

166 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

167 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

168 *
__ª°ri˘
 
__h_î∫›
);

170 
	`gëho°byaddr_r
 (c⁄° *
__ª°ri˘
 
__addr
, 
__sockÀn_t
 
__Àn
,

171 
__ty≥
,

172 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

173 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

174 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

175 *
__ª°ri˘
 
__h_î∫›
);

177 
	`gëho°by«me_r
 (c⁄° *
__ª°ri˘
 
__«me
,

178 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

179 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

180 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

181 *
__ª°ri˘
 
__h_î∫›
);

183 
	`gëho°by«me2_r
 (c⁄° *
__ª°ri˘
 
__«me
, 
__af
,

184 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

185 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

186 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

187 *
__ª°ri˘
 
__h_î∫›
);

196 
	`£äëít
 (
__°ay_›í
);

202 
	`íd√ã¡
 ();

209 
√ã¡
 *
	`gë√ã¡
 ();

216 
√ã¡
 *
	`gë√tbyaddr
 (
uöt32_t
 
__√t
, 
__ty≥
);

222 
√ã¡
 *
	`gë√tby«me
 (c⁄° *
__«me
);

224 #ifdef 
__USE_MISC


235 
	`gë√ã¡_r
 (
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

236 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

237 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

238 *
__ª°ri˘
 
__h_î∫›
);

240 
	`gë√tbyaddr_r
 (
uöt32_t
 
__√t
, 
__ty≥
,

241 
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

242 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

243 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

244 *
__ª°ri˘
 
__h_î∫›
);

246 
	`gë√tby«me_r
 (c⁄° *
__ª°ri˘
 
__«me
,

247 
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

248 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

249 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

250 *
__ª°ri˘
 
__h_î∫›
);

255 
	s£rvít


257 *
s_«me
;

258 **
s_Æü£s
;

259 
s_p‹t
;

260 *
s_¥Ÿo
;

268 
	`£t£rvít
 (
__°ay_›í
);

274 
	`íd£rvít
 ();

281 
£rvít
 *
	`gë£rvít
 ();

288 
£rvít
 *
	`gë£rvby«me
 (c⁄° *
__«me
, c⁄° *
__¥Ÿo
);

295 
£rvít
 *
	`gë£rvbyp‹t
 (
__p‹t
, c⁄° *
__¥Ÿo
);

298 #ifdef 
__USE_MISC


306 
	`gë£rvít_r
 (
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

307 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

308 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

310 
	`gë£rvby«me_r
 (c⁄° *
__ª°ri˘
 
__«me
,

311 c⁄° *
__ª°ri˘
 
__¥Ÿo
,

312 
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

313 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

314 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

316 
	`gë£rvbyp‹t_r
 (
__p‹t
, c⁄° *
__ª°ri˘
 
__¥Ÿo
,

317 
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

318 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

319 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

324 
	s¥Ÿ€¡


326 *
p_«me
;

327 **
p_Æü£s
;

328 
p_¥Ÿo
;

336 
	`£çrŸ€¡
 (
__°ay_›í
);

342 
	`íd¥Ÿ€¡
 ();

349 
¥Ÿ€¡
 *
	`gë¥Ÿ€¡
 ();

355 
¥Ÿ€¡
 *
	`gë¥Ÿoby«me
 (c⁄° *
__«me
);

361 
¥Ÿ€¡
 *
	`gë¥Ÿobynumbî
 (
__¥Ÿo
);

364 #ifdef 
__USE_MISC


372 
	`gë¥Ÿ€¡_r
 (
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

373 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

374 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

376 
	`gë¥Ÿoby«me_r
 (c⁄° *
__ª°ri˘
 
__«me
,

377 
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

378 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

379 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

381 
	`gë¥Ÿobynumbî_r
 (
__¥Ÿo
,

382 
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

383 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

384 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

393 
	`£äëgª¡
 (c⁄° *
__√tgroup
);

401 
	`íd√tgª¡
 ();

410 
	`gë√tgª¡
 (**
__ª°ri˘
 
__ho°p
,

411 **
__ª°ri˘
 
__u£Ω
,

412 **
__ª°ri˘
 
__domaöp
);

421 
	`ö√tgr
 (c⁄° *
__√tgroup
, c⁄° *
__ho°
,

422 c⁄° *
__u£r
, c⁄° *
__domaö
);

430 
	`gë√tgª¡_r
 (**
__ª°ri˘
 
__ho°p
,

431 **
__ª°ri˘
 
__u£Ω
,

432 **
__ª°ri˘
 
__domaöp
,

433 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
);

437 #ifde‡
__USE_MISC


449 
	`rcmd
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

450 c⁄° *
__ª°ri˘
 
__locu£r
,

451 c⁄° *
__ª°ri˘
 
__ªmu£r
,

452 c⁄° *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
);

461 
	`rcmd_af
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

462 c⁄° *
__ª°ri˘
 
__locu£r
,

463 c⁄° *
__ª°ri˘
 
__ªmu£r
,

464 c⁄° *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
,

465 
ß_Ámûy_t
 
__af
);

477 
	`ªxec
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

478 c⁄° *
__ª°ri˘
 
__«me
,

479 c⁄° *
__ª°ri˘
 
__∑ss
,

480 c⁄° *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
);

489 
	`ªxec_af
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

490 c⁄° *
__ª°ri˘
 
__«me
,

491 c⁄° *
__ª°ri˘
 
__∑ss
,

492 c⁄° *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
,

493 
ß_Ámûy_t
 
__af
);

503 
	`ru£rok
 (c⁄° *
__rho°
, 
__su£r
,

504 c⁄° *
__ªmu£r
, c⁄° *
__locu£r
);

513 
	`ru£rok_af
 (c⁄° *
__rho°
, 
__su£r
,

514 c⁄° *
__ªmu£r
, c⁄° *
__locu£r
,

515 
ß_Ámûy_t
 
__af
);

526 
	`úu£rok
 (
uöt32_t
 
__øddr
, 
__su£r
,

527 c⁄° *
__ªmu£r
, c⁄° *
__locu£r
);

537 
	`úu£rok_af
 (c⁄° *
__øddr
, 
__su£r
,

538 c⁄° *
__ªmu£r
, c⁄° *
__locu£r
,

539 
ß_Ámûy_t
 
__af
);

549 
	`ºesvp‹t
 (*
__Æp‹t
);

558 
	`ºesvp‹t_af
 (*
__Æp‹t
, 
ß_Ámûy_t
 
__af
);

563 #ifde‡
__USE_XOPEN2K


565 
	saddröfo


567 
ai_Êags
;

568 
ai_Ámûy
;

569 
ai_sockty≥
;

570 
ai_¥Ÿocﬁ
;

571 
sockÀn_t
 
ai_addæí
;

572 
sockaddr
 *
ai_addr
;

573 *
ai_ˇn⁄«me
;

574 
addröfo
 *
ai_√xt
;

577 #ifde‡
__USE_GNU


579 
	sgaicb


581 c⁄° *
¨_«me
;

582 c⁄° *
¨_£rvi˚
;

583 c⁄° 
addröfo
 *
¨_ªque°
;

584 
addröfo
 *
¨_ªsu…
;

586 
__ªtu∫
;

587 
__glibc_ª£rved
[5];

591 
	#GAI_WAIT
 0

	)

592 
	#GAI_NOWAIT
 1

	)

596 
	#AI_PASSIVE
 0x0001

	)

597 
	#AI_CANONNAME
 0x0002

	)

598 
	#AI_NUMERICHOST
 0x0004

	)

599 
	#AI_V4MAPPED
 0x0008

	)

600 
	#AI_ALL
 0x0010

	)

601 
	#AI_ADDRCONFIG
 0x0020

	)

603 #ifde‡
__USE_GNU


604 
	#AI_IDN
 0x0040

	)

607 
	#AI_CANONIDN
 0x0080

	)

608 
	#AI_IDN_ALLOW_UNASSIGNED
 0x0100

	)

610 
	#AI_IDN_USE_STD3_ASCII_RULES
 0x0200

	)

613 
	#AI_NUMERICSERV
 0x0400

	)

616 
	#EAI_BADFLAGS
 -1

	)

617 
	#EAI_NONAME
 -2

	)

618 
	#EAI_AGAIN
 -3

	)

619 
	#EAI_FAIL
 -4

	)

620 
	#EAI_FAMILY
 -6

	)

621 
	#EAI_SOCKTYPE
 -7

	)

622 
	#EAI_SERVICE
 -8

	)

623 
	#EAI_MEMORY
 -10

	)

624 
	#EAI_SYSTEM
 -11

	)

625 
	#EAI_OVERFLOW
 -12

	)

626 #ifde‡
__USE_GNU


627 
	#EAI_NODATA
 -5

	)

628 
	#EAI_ADDRFAMILY
 -9

	)

629 
	#EAI_INPROGRESS
 -100

	)

630 
	#EAI_CANCELED
 -101

	)

631 
	#EAI_NOTCANCELED
 -102

	)

632 
	#EAI_ALLDONE
 -103

	)

633 
	#EAI_INTR
 -104

	)

634 
	#EAI_IDN_ENCODE
 -105

	)

637 #ifde‡
__USE_MISC


638 
	#NI_MAXHOST
 1025

	)

639 
	#NI_MAXSERV
 32

	)

642 
	#NI_NUMERICHOST
 1

	)

643 
	#NI_NUMERICSERV
 2

	)

644 
	#NI_NOFQDN
 4

	)

645 
	#NI_NAMEREQD
 8

	)

646 
	#NI_DGRAM
 16

	)

647 #ifde‡
__USE_GNU


648 
	#NI_IDN
 32

	)

649 
	#NI_IDN_ALLOW_UNASSIGNED
 64

	)

651 
	#NI_IDN_USE_STD3_ASCII_RULES
 128

	)

660 
	`gëaddröfo
 (c⁄° *
__ª°ri˘
 
__«me
,

661 c⁄° *
__ª°ri˘
 
__£rvi˚
,

662 c⁄° 
addröfo
 *
__ª°ri˘
 
__ªq
,

663 
addröfo
 **
__ª°ri˘
 
__∑i
);

666 
	$‰ìaddröfo
 (
addröfo
 *
__ai
Ë
__THROW
;

669 c⁄° *
	$gai_°ªº‹
 (
__ecode
Ë
__THROW
;

675 
	`gë«meöfo
 (c⁄° 
sockaddr
 *
__ª°ri˘
 
__ß
,

676 
sockÀn_t
 
__ßÀn
, *
__ª°ri˘
 
__ho°
,

677 
sockÀn_t
 
__ho°Àn
, *
__ª°ri˘
 
__£rv
,

678 
sockÀn_t
 
__£rvÀn
, 
__Êags
);

681 #ifde‡
__USE_GNU


690 
	`gëaddröfo_a
 (
__mode
, 
gaicb
 *
__li°
[
__ª°ri˘_¨r
],

691 
__ít
, 
sigevít
 *
__ª°ri˘
 
__sig
);

701 
	`gai_su•íd
 (c⁄° 
gaicb
 *c⁄° 
__li°
[], 
__ít
,

702 c⁄° 
time•ec
 *
__timeout
);

705 
	$gai_îr‹
 (
gaicb
 *
__ªq
Ë
__THROW
;

708 
	$gai_ˇn˚l
 (
gaicb
 *
__gaicbp
Ë
__THROW
;

711 
__END_DECLS


	@/usr/include/netinet/in.h

18 #i‚def 
_NETINET_IN_H


19 
	#_NETINET_IN_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<bôs/°döt-uöä.h
>

23 
	~<sys/sockë.h
>

24 
	~<bôs/ty≥s.h
>

27 
__BEGIN_DECLS


30 
uöt32_t
 
	tö_addr_t
;

31 
	sö_addr


33 
ö_addr_t
 
	ms_addr
;

37 
	~<bôs/ö.h
>

42 
	mIPPROTO_IP
 = 0,

43 
	#IPPROTO_IP
 
IPPROTO_IP


	)

44 
	mIPPROTO_ICMP
 = 1,

45 
	#IPPROTO_ICMP
 
IPPROTO_ICMP


	)

46 
	mIPPROTO_IGMP
 = 2,

47 
	#IPPROTO_IGMP
 
IPPROTO_IGMP


	)

48 
	mIPPROTO_IPIP
 = 4,

49 
	#IPPROTO_IPIP
 
IPPROTO_IPIP


	)

50 
	mIPPROTO_TCP
 = 6,

51 
	#IPPROTO_TCP
 
IPPROTO_TCP


	)

52 
	mIPPROTO_EGP
 = 8,

53 
	#IPPROTO_EGP
 
IPPROTO_EGP


	)

54 
	mIPPROTO_PUP
 = 12,

55 
	#IPPROTO_PUP
 
IPPROTO_PUP


	)

56 
	mIPPROTO_UDP
 = 17,

57 
	#IPPROTO_UDP
 
IPPROTO_UDP


	)

58 
	mIPPROTO_IDP
 = 22,

59 
	#IPPROTO_IDP
 
IPPROTO_IDP


	)

60 
	mIPPROTO_TP
 = 29,

61 
	#IPPROTO_TP
 
IPPROTO_TP


	)

62 
	mIPPROTO_DCCP
 = 33,

63 
	#IPPROTO_DCCP
 
IPPROTO_DCCP


	)

64 
	mIPPROTO_IPV6
 = 41,

65 
	#IPPROTO_IPV6
 
IPPROTO_IPV6


	)

66 
	mIPPROTO_RSVP
 = 46,

67 
	#IPPROTO_RSVP
 
IPPROTO_RSVP


	)

68 
	mIPPROTO_GRE
 = 47,

69 
	#IPPROTO_GRE
 
IPPROTO_GRE


	)

70 
	mIPPROTO_ESP
 = 50,

71 
	#IPPROTO_ESP
 
IPPROTO_ESP


	)

72 
	mIPPROTO_AH
 = 51,

73 
	#IPPROTO_AH
 
IPPROTO_AH


	)

74 
	mIPPROTO_MTP
 = 92,

75 
	#IPPROTO_MTP
 
IPPROTO_MTP


	)

76 
	mIPPROTO_BEETPH
 = 94,

77 
	#IPPROTO_BEETPH
 
IPPROTO_BEETPH


	)

78 
	mIPPROTO_ENCAP
 = 98,

79 
	#IPPROTO_ENCAP
 
IPPROTO_ENCAP


	)

80 
	mIPPROTO_PIM
 = 103,

81 
	#IPPROTO_PIM
 
IPPROTO_PIM


	)

82 
	mIPPROTO_COMP
 = 108,

83 
	#IPPROTO_COMP
 
IPPROTO_COMP


	)

84 
	mIPPROTO_SCTP
 = 132,

85 
	#IPPROTO_SCTP
 
IPPROTO_SCTP


	)

86 
	mIPPROTO_UDPLITE
 = 136,

87 
	#IPPROTO_UDPLITE
 
IPPROTO_UDPLITE


	)

88 
	mIPPROTO_MPLS
 = 137,

89 
	#IPPROTO_MPLS
 
IPPROTO_MPLS


	)

90 
	mIPPROTO_RAW
 = 255,

91 
	#IPPROTO_RAW
 
IPPROTO_RAW


	)

92 
	mIPPROTO_MAX


98 #i‡!
__USE_KERNEL_IPV6_DEFS


101 
	mIPPROTO_HOPOPTS
 = 0,

102 
	#IPPROTO_HOPOPTS
 
IPPROTO_HOPOPTS


	)

103 
	mIPPROTO_ROUTING
 = 43,

104 
	#IPPROTO_ROUTING
 
IPPROTO_ROUTING


	)

105 
	mIPPROTO_FRAGMENT
 = 44,

106 
	#IPPROTO_FRAGMENT
 
IPPROTO_FRAGMENT


	)

107 
	mIPPROTO_ICMPV6
 = 58,

108 
	#IPPROTO_ICMPV6
 
IPPROTO_ICMPV6


	)

109 
	mIPPROTO_NONE
 = 59,

110 
	#IPPROTO_NONE
 
IPPROTO_NONE


	)

111 
	mIPPROTO_DSTOPTS
 = 60,

112 
	#IPPROTO_DSTOPTS
 
IPPROTO_DSTOPTS


	)

113 
	mIPPROTO_MH
 = 135

114 
	#IPPROTO_MH
 
IPPROTO_MH


	)

119 
uöt16_t
 
	tö_p‹t_t
;

124 
	mIPPORT_ECHO
 = 7,

125 
	mIPPORT_DISCARD
 = 9,

126 
	mIPPORT_SYSTAT
 = 11,

127 
	mIPPORT_DAYTIME
 = 13,

128 
	mIPPORT_NETSTAT
 = 15,

129 
	mIPPORT_FTP
 = 21,

130 
	mIPPORT_TELNET
 = 23,

131 
	mIPPORT_SMTP
 = 25,

132 
	mIPPORT_TIMESERVER
 = 37,

133 
	mIPPORT_NAMESERVER
 = 42,

134 
	mIPPORT_WHOIS
 = 43,

135 
	mIPPORT_MTP
 = 57,

137 
	mIPPORT_TFTP
 = 69,

138 
	mIPPORT_RJE
 = 77,

139 
	mIPPORT_FINGER
 = 79,

140 
	mIPPORT_TTYLINK
 = 87,

141 
	mIPPORT_SUPDUP
 = 95,

144 
	mIPPORT_EXECSERVER
 = 512,

145 
	mIPPORT_LOGINSERVER
 = 513,

146 
	mIPPORT_CMDSERVER
 = 514,

147 
	mIPPORT_EFSSERVER
 = 520,

150 
	mIPPORT_BIFFUDP
 = 512,

151 
	mIPPORT_WHOSERVER
 = 513,

152 
	mIPPORT_ROUTESERVER
 = 520,

155 
	mIPPORT_RESERVED
 = 1024,

158 
	mIPPORT_USERRESERVED
 = 5000

166 
	#IN_CLASSA
(
a
Ë((((
ö_addr_t
)◊)Ë& 0x80000000Ë=0)

	)

167 
	#IN_CLASSA_NET
 0xff000000

	)

168 
	#IN_CLASSA_NSHIFT
 24

	)

169 
	#IN_CLASSA_HOST
 (0xfffffff‡& ~
IN_CLASSA_NET
)

	)

170 
	#IN_CLASSA_MAX
 128

	)

172 
	#IN_CLASSB
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xc0000000Ë=0x80000000)

	)

173 
	#IN_CLASSB_NET
 0xffff0000

	)

174 
	#IN_CLASSB_NSHIFT
 16

	)

175 
	#IN_CLASSB_HOST
 (0xfffffff‡& ~
IN_CLASSB_NET
)

	)

176 
	#IN_CLASSB_MAX
 65536

	)

178 
	#IN_CLASSC
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xe0000000Ë=0xc0000000)

	)

179 
	#IN_CLASSC_NET
 0xffffff00

	)

180 
	#IN_CLASSC_NSHIFT
 8

	)

181 
	#IN_CLASSC_HOST
 (0xfffffff‡& ~
IN_CLASSC_NET
)

	)

183 
	#IN_CLASSD
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xf0000000Ë=0xe0000000)

	)

184 
	#IN_MULTICAST
(
a
Ë
	`IN_CLASSD
◊)

	)

186 
	#IN_EXPERIMENTAL
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xe0000000Ë=0xe0000000)

	)

187 
	#IN_BADCLASS
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xf0000000Ë=0xf0000000)

	)

190 
	#INADDR_ANY
 ((
ö_addr_t
Ë0x00000000)

	)

192 
	#INADDR_BROADCAST
 ((
ö_addr_t
Ë0xffffffff)

	)

194 
	#INADDR_NONE
 ((
ö_addr_t
Ë0xffffffff)

	)

197 
	#IN_LOOPBACKNET
 127

	)

199 #i‚de‡
INADDR_LOOPBACK


200 
	#INADDR_LOOPBACK
 ((
ö_addr_t
Ë0x7f000001Ë

	)

204 
	#INADDR_UNSPEC_GROUP
 ((
ö_addr_t
Ë0xe0000000Ë

	)

205 
	#INADDR_ALLHOSTS_GROUP
 ((
ö_addr_t
Ë0xe0000001Ë

	)

206 
	#INADDR_ALLRTRS_GROUP
 ((
ö_addr_t
Ë0xe0000002Ë

	)

207 
	#INADDR_MAX_LOCAL_GROUP
 ((
ö_addr_t
Ë0xe00000ffË

	)

209 #i‡!
__USE_KERNEL_IPV6_DEFS


211 
	sö6_addr


215 
uöt8_t
 
	m__u6_addr8
[16];

216 
uöt16_t
 
	m__u6_addr16
[8];

217 
uöt32_t
 
	m__u6_addr32
[4];

218 } 
	m__ö6_u
;

219 
	#s6_addr
 
__ö6_u
.
__u6_addr8


	)

220 #ifde‡
__USE_MISC


221 
	#s6_addr16
 
__ö6_u
.
__u6_addr16


	)

222 
	#s6_addr32
 
__ö6_u
.
__u6_addr32


	)

227 c⁄° 
ö6_addr
 
ö6addr_™y
;

228 c⁄° 
ö6_addr
 
ö6addr_lo›back
;

229 
	#IN6ADDR_ANY_INIT
 { { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } } }

	)

230 
	#IN6ADDR_LOOPBACK_INIT
 { { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1 } } }

	)

232 
	#INET_ADDRSTRLEN
 16

	)

233 
	#INET6_ADDRSTRLEN
 46

	)

237 
	ssockaddr_ö


239 
__SOCKADDR_COMMON
 (
sö_
);

240 
ö_p‹t_t
 
	msö_p‹t
;

241 
ö_addr
 
	msö_addr
;

244 
	msö_zîo
[ (
sockaddr
) -

245 
__SOCKADDR_COMMON_SIZE
 -

246  (
ö_p‹t_t
) -

247  (
ö_addr
)];

250 #i‡!
__USE_KERNEL_IPV6_DEFS


252 
	ssockaddr_ö6


254 
__SOCKADDR_COMMON
 (
sö6_
);

255 
ö_p‹t_t
 
	msö6_p‹t
;

256 
uöt32_t
 
	msö6_Êowöfo
;

257 
ö6_addr
 
	msö6_addr
;

258 
uöt32_t
 
	msö6_sc›e_id
;

262 #ifde‡
__USE_MISC


264 
	sù_mªq


267 
ö_addr
 
	mimr_mu…üddr
;

270 
ö_addr
 
	mimr_öãrÁ˚
;

273 
	sù_mªq_sour˚


276 
ö_addr
 
	mimr_mu…üddr
;

279 
ö_addr
 
	mimr_öãrÁ˚
;

282 
ö_addr
 
	mimr_sour˚addr
;

286 #i‡!
__USE_KERNEL_IPV6_DEFS


288 
	sùv6_mªq


291 
ö6_addr
 
	mùv6mr_mu…üddr
;

294 
	mùv6mr_öãrÁ˚
;

298 #ifde‡
__USE_MISC


300 
	sgroup_ªq


303 
uöt32_t
 
	mgr_öãrÁ˚
;

306 
sockaddr_°‹age
 
	mgr_group
;

309 
	sgroup_sour˚_ªq


312 
uöt32_t
 
	mg§_öãrÁ˚
;

315 
sockaddr_°‹age
 
	mg§_group
;

318 
sockaddr_°‹age
 
	mg§_sour˚
;

323 
	sù_msfûãr


326 
ö_addr
 
	mimsf_mu…üddr
;

329 
ö_addr
 
	mimsf_öãrÁ˚
;

332 
uöt32_t
 
	mimsf_fmode
;

335 
uöt32_t
 
	mimsf_num§c
;

337 
ö_addr
 
	mimsf_¶i°
[1];

340 
	#IP_MSFILTER_SIZE
(
num§c
Ë( (
ù_msfûãr
) \

341 -  (
ö_addr
) \

342 + (
num§c
Ë*  (
ö_addr
))

	)

344 
	sgroup_fûãr


347 
uöt32_t
 
	mgf_öãrÁ˚
;

350 
sockaddr_°‹age
 
	mgf_group
;

353 
uöt32_t
 
	mgf_fmode
;

356 
uöt32_t
 
	mgf_num§c
;

358 
sockaddr_°‹age
 
	mgf_¶i°
[1];

361 
	#GROUP_FILTER_SIZE
(
num§c
Ë( (
group_fûãr
) \

362 -  (
sockaddr_°‹age
) \

363 + ((
num§c
) \

364 *  (
sockaddr_°‹age
)))

	)

374 
uöt32_t
 
	$¡ohl
 (
uöt32_t
 
__√é⁄g
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

375 
uöt16_t
 
	$¡ohs
 (
uöt16_t
 
__√tsh‹t
)

376 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

377 
uöt32_t
 
	$ht⁄l
 (
uöt32_t
 
__ho°l⁄g
)

378 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

379 
uöt16_t
 
	$ht⁄s
 (
uöt16_t
 
__ho°sh‹t
)

380 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

382 
	~<ídün.h
>

385 
	~<bôs/byãsw≠.h
>

386 
	~<bôs/uöä-idítôy.h
>

388 #ifde‡
__OPTIMIZE__


392 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


395 
	#¡ohl
(
x
Ë
	`__uöt32_idítôy
 (x)

	)

396 
	#¡ohs
(
x
Ë
	`__uöt16_idítôy
 (x)

	)

397 
	#ht⁄l
(
x
Ë
	`__uöt32_idítôy
 (x)

	)

398 
	#ht⁄s
(
x
Ë
	`__uöt16_idítôy
 (x)

	)

400 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


401 
	#¡ohl
(
x
Ë
	`__bsw≠_32
 (x)

	)

402 
	#¡ohs
(
x
Ë
	`__bsw≠_16
 (x)

	)

403 
	#ht⁄l
(
x
Ë
	`__bsw≠_32
 (x)

	)

404 
	#ht⁄s
(
x
Ë
	`__bsw≠_16
 (x)

	)

409 #ifde‡
__GNUC__


410 
	#IN6_IS_ADDR_UNSPECIFIED
(
a
) \

411 (
__exãnsi⁄__
 \

412 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

413 
__a
->
__ö6_u
.
__u6_addr32
[0] == 0 \

414 && 
__a
->
__ö6_u
.
__u6_addr32
[1] == 0 \

415 && 
__a
->
__ö6_u
.
__u6_addr32
[2] == 0 \

416 && 
__a
->
__ö6_u
.
__u6_addr32
[3] =0; 
	}
}))

	)

418 
	#IN6_IS_ADDR_LOOPBACK
(
a
) \

419 (
__exãnsi⁄__
 \

420 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

421 
__a
->
__ö6_u
.
__u6_addr32
[0] == 0 \

422 && 
__a
->
__ö6_u
.
__u6_addr32
[1] == 0 \

423 && 
__a
->
__ö6_u
.
__u6_addr32
[2] == 0 \

424 && 
__a
->
__ö6_u
.
__u6_addr32
[3] =
	`ht⁄l
 (1); }))

	)

426 
	#IN6_IS_ADDR_LINKLOCAL
(
a
) \

427 (
__exãnsi⁄__
 \

428 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

429 (
__a
->
__ö6_u
.
__u6_addr32
[0] & 
	`ht⁄l
 (0xffc00000)Ë=ht⁄»(0x„800000); }))

	)

431 
	#IN6_IS_ADDR_SITELOCAL
(
a
) \

432 (
__exãnsi⁄__
 \

433 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

434 (
__a
->
__ö6_u
.
__u6_addr32
[0] & 
	`ht⁄l
 (0xffc00000)Ë=ht⁄»(0x„c00000); }))

	)

436 
	#IN6_IS_ADDR_V4MAPPED
(
a
) \

437 (
__exãnsi⁄__
 \

438 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

439 
__a
->
__ö6_u
.
__u6_addr32
[0] == 0 \

440 && 
__a
->
__ö6_u
.
__u6_addr32
[1] == 0 \

441 && 
__a
->
__ö6_u
.
__u6_addr32
[2] =
	`ht⁄l
 (0xffff); }))

	)

443 
	#IN6_IS_ADDR_V4COMPAT
(
a
) \

444 (
__exãnsi⁄__
 \

445 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

446 
__a
->
__ö6_u
.
__u6_addr32
[0] == 0 \

447 && 
__a
->
__ö6_u
.
__u6_addr32
[1] == 0 \

448 && 
__a
->
__ö6_u
.
__u6_addr32
[2] == 0 \

449 && 
	`¡ohl
 (
__a
->
__ö6_u
.
__u6_addr32
[3]Ë> 1; }))

	)

451 
	#IN6_ARE_ADDR_EQUAL
(
a
,
b
) \

452 (
__exãnsi⁄__
 \

453 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

454 c⁄° 
ö6_addr
 *
__b
 = (c⁄° ö6_add∏*Ë(
b
); \

455 
__a
->
__ö6_u
.
__u6_addr32
[0] =
__b
->__in6_u.__u6_addr32[0] \

456 && 
__a
->
__ö6_u
.
__u6_addr32
[1] =
__b
->__in6_u.__u6_addr32[1] \

457 && 
__a
->
__ö6_u
.
__u6_addr32
[2] =
__b
->__in6_u.__u6_addr32[2] \

458 && 
__a
->
__ö6_u
.
__u6_addr32
[3] =
__b
->__ö6_u.__u6_addr32[3]; }))

	)

460 
	#IN6_IS_ADDR_UNSPECIFIED
(
a
) \

461 (((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0 \

462 && ((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0 \

463 && ((c⁄° 
uöt32_t
 *Ë(
a
))[2] == 0 \

464 && ((c⁄° 
uöt32_t
 *Ë(
a
))[3] =0)

	)

466 
	#IN6_IS_ADDR_LOOPBACK
(
a
) \

467 (((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0 \

468 && ((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0 \

469 && ((c⁄° 
uöt32_t
 *Ë(
a
))[2] == 0 \

470 && ((c⁄° 
uöt32_t
 *Ë(
a
))[3] =
	`ht⁄l
 (1))

	)

472 
	#IN6_IS_ADDR_LINKLOCAL
(
a
) \

473 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] & 
	`ht⁄l
 (0xffc00000)) \

474 =
	`ht⁄l
 (0x„800000))

	)

476 
	#IN6_IS_ADDR_SITELOCAL
(
a
) \

477 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] & 
	`ht⁄l
 (0xffc00000)) \

478 =
	`ht⁄l
 (0x„c00000))

	)

480 
	#IN6_IS_ADDR_V4MAPPED
(
a
) \

481 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0) \

482 && (((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0) \

483 && (((c⁄° 
uöt32_t
 *Ë(
a
))[2] =
	`ht⁄l
 (0xffff)))

	)

485 
	#IN6_IS_ADDR_V4COMPAT
(
a
) \

486 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0) \

487 && (((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0) \

488 && (((c⁄° 
uöt32_t
 *Ë(
a
))[2] == 0) \

489 && (
	`¡ohl
 (((c⁄° 
uöt32_t
 *Ë(
a
))[3]Ë> 1))

	)

491 
	#IN6_ARE_ADDR_EQUAL
(
a
,
b
) \

492 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] =((c⁄° uöt32_à*Ë(
b
))[0]) \

493 && (((c⁄° 
uöt32_t
 *Ë(
a
))[1] =((c⁄° uöt32_à*Ë(
b
))[1]) \

494 && (((c⁄° 
uöt32_t
 *Ë(
a
))[2] =((c⁄° uöt32_à*Ë(
b
))[2]) \

495 && (((c⁄° 
uöt32_t
 *Ë(
a
))[3] =((c⁄° uöt32_à*Ë(
b
))[3]))

	)

498 
	#IN6_IS_ADDR_MULTICAST
(
a
Ë(((c⁄° 
uöt8_t
 *Ë◊))[0] =0xff)

	)

500 #ifde‡
__USE_MISC


502 
	$bödªsvp‹t
 (
__sockfd
, 
sockaddr_ö
 *
__sock_ö
Ë
__THROW
;

505 
	$bödªsvp‹t6
 (
__sockfd
, 
sockaddr_ö6
 *
__sock_ö
)

506 
__THROW
;

510 
	#IN6_IS_ADDR_MC_NODELOCAL
(
a
) \

511 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

512 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x1))

	)

514 
	#IN6_IS_ADDR_MC_LINKLOCAL
(
a
) \

515 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

516 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x2))

	)

518 
	#IN6_IS_ADDR_MC_SITELOCAL
(
a
) \

519 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

520 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x5))

	)

522 
	#IN6_IS_ADDR_MC_ORGLOCAL
(
a
) \

523 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

524 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x8))

	)

526 
	#IN6_IS_ADDR_MC_GLOBAL
(
a
) \

527 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

528 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0xe))

	)

531 #ifde‡
__USE_GNU


532 
cmsghdr
;

534 #i‡!
__USE_KERNEL_IPV6_DEFS


536 
	sö6_pktöfo


538 
ö6_addr
 
ùi6_addr
;

539 
ùi6_ifödex
;

543 
	sù6_mtuöfo


545 
sockaddr_ö6
 
ù6m_addr
;

546 
uöt32_t
 
ù6m_mtu
;

551 
	$öë6_›ti⁄_•a˚
 (
__nbyãs
)

552 
__THROW
 
__©åibuã_dïªˇãd__
;

553 
	$öë6_›ti⁄_öô
 (*
__bp
, 
cmsghdr
 **
__cmsgp
,

554 
__ty≥
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

555 
	$öë6_›ti⁄_≠≥nd
 (
cmsghdr
 *
__cmsg
,

556 c⁄° 
uöt8_t
 *
__ty≥p
, 
__mu…x
,

557 
__∂usy
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

558 
uöt8_t
 *
	$öë6_›ti⁄_Æloc
 (
cmsghdr
 *
__cmsg
, 
__d©Æí
,

559 
__mu…x
, 
__∂usy
)

560 
__THROW
 
__©åibuã_dïªˇãd__
;

561 
	$öë6_›ti⁄_√xt
 (c⁄° 
cmsghdr
 *
__cmsg
,

562 
uöt8_t
 **
__çåp
)

563 
__THROW
 
__©åibuã_dïªˇãd__
;

564 
	$öë6_›ti⁄_föd
 (c⁄° 
cmsghdr
 *
__cmsg
,

565 
uöt8_t
 **
__çåp
, 
__ty≥
)

566 
__THROW
 
__©åibuã_dïªˇãd__
;

570 
	$öë6_›t_öô
 (*
__extbuf
, 
sockÀn_t
 
__exéí
Ë
__THROW
;

571 
	$öë6_›t_≠≥nd
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

572 
uöt8_t
 
__ty≥
, 
sockÀn_t
 
__Àn
, uöt8_à
__Æign
,

573 **
__d©abuÂ
Ë
__THROW
;

574 
	$öë6_›t_föish
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
)

575 
__THROW
;

576 
	$öë6_›t_£t_vÆ
 (*
__d©abuf
, 
__off£t
, *
__vÆ
,

577 
sockÀn_t
 
__vÆÀn
Ë
__THROW
;

578 
	$öë6_›t_√xt
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

579 
uöt8_t
 *
__ty≥p
, 
sockÀn_t
 *
__À≈
,

580 **
__d©abuÂ
Ë
__THROW
;

581 
	$öë6_›t_föd
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

582 
uöt8_t
 
__ty≥
, 
sockÀn_t
 *
__À≈
,

583 **
__d©abuÂ
Ë
__THROW
;

584 
	$öë6_›t_gë_vÆ
 (*
__d©abuf
, 
__off£t
, *
__vÆ
,

585 
sockÀn_t
 
__vÆÀn
Ë
__THROW
;

589 
sockÀn_t
 
	$öë6_πh_•a˚
 (
__ty≥
, 
__£gmíts
Ë
__THROW
;

590 *
	$öë6_πh_öô
 (*
__bp
, 
sockÀn_t
 
__bp_Àn
, 
__ty≥
,

591 
__£gmíts
Ë
__THROW
;

592 
	$öë6_πh_add
 (*
__bp
, c⁄° 
ö6_addr
 *
__addr
Ë
__THROW
;

593 
	$öë6_πh_ªvî£
 (c⁄° *
__ö
, *
__out
Ë
__THROW
;

594 
	$öë6_πh_£gmíts
 (c⁄° *
__bp
Ë
__THROW
;

595 
ö6_addr
 *
	$öë6_πh_gëaddr
 (c⁄° *
__bp
, 
__ödex
)

596 
__THROW
;

602 
	$gëùv4sour˚fûãr
 (
__s
, 
ö_addr
 
__öãrÁ˚_addr
,

603 
ö_addr
 
__group
, 
uöt32_t
 *
__fmode
,

604 
uöt32_t
 *
__num§c
, 
ö_addr
 *
__¶i°
)

605 
__THROW
;

608 
	$£tùv4sour˚fûãr
 (
__s
, 
ö_addr
 
__öãrÁ˚_addr
,

609 
ö_addr
 
__group
, 
uöt32_t
 
__fmode
,

610 
uöt32_t
 
__num§c
,

611 c⁄° 
ö_addr
 *
__¶i°
)

612 
__THROW
;

616 
	$gësour˚fûãr
 (
__s
, 
uöt32_t
 
__öãrÁ˚_addr
,

617 c⁄° 
sockaddr
 *
__group
,

618 
sockÀn_t
 
__grou∂í
, 
uöt32_t
 *
__fmode
,

619 
uöt32_t
 *
__num§c
,

620 
sockaddr_°‹age
 *
__¶i°
Ë
__THROW
;

623 
	$£tsour˚fûãr
 (
__s
, 
uöt32_t
 
__öãrÁ˚_addr
,

624 c⁄° 
sockaddr
 *
__group
,

625 
sockÀn_t
 
__grou∂í
, 
uöt32_t
 
__fmode
,

626 
uöt32_t
 
__num§c
,

627 c⁄° 
sockaddr_°‹age
 *
__¶i°
Ë
__THROW
;

630 
__END_DECLS


	@/usr/include/netinet/tcp.h

32 #i‚de‡
_NETINET_TCP_H


33 
	#_NETINET_TCP_H
 1

	)

35 
	~<„©uªs.h
>

40 
	#TCP_NODELAY
 1

	)

41 
	#TCP_MAXSEG
 2

	)

42 
	#TCP_CORK
 3

	)

43 
	#TCP_KEEPIDLE
 4

	)

44 
	#TCP_KEEPINTVL
 5

	)

45 
	#TCP_KEEPCNT
 6

	)

46 
	#TCP_SYNCNT
 7

	)

47 
	#TCP_LINGER2
 8

	)

48 
	#TCP_DEFER_ACCEPT
 9

	)

49 
	#TCP_WINDOW_CLAMP
 10

	)

50 
	#TCP_INFO
 11

	)

51 
	#TCP_QUICKACK
 12

	)

52 
	#TCP_CONGESTION
 13

	)

53 
	#TCP_MD5SIG
 14

	)

54 
	#TCP_COOKIE_TRANSACTIONS
 15

	)

55 
	#TCP_THIN_LINEAR_TIMEOUTS
 16

	)

56 
	#TCP_THIN_DUPACK
 17

	)

57 
	#TCP_USER_TIMEOUT
 18

	)

58 
	#TCP_REPAIR
 19

	)

59 
	#TCP_REPAIR_QUEUE
 20

	)

60 
	#TCP_QUEUE_SEQ
 21

	)

61 
	#TCP_REPAIR_OPTIONS
 22

	)

62 
	#TCP_FASTOPEN
 23

	)

63 
	#TCP_TIMESTAMP
 24

	)

64 
	#TCP_NOTSENT_LOWAT
 25

	)

66 
	#TCP_CC_INFO
 26

	)

68 
	#TCP_SAVE_SYN
 27

	)

70 
	#TCP_SAVED_SYN
 28

	)

72 
	#TCP_REPAIR_WINDOW
 29

	)

73 
	#TCP_FASTOPEN_CONNECT
 30

	)

74 
	#TCP_ULP
 31

	)

75 
	#TCP_MD5SIG_EXT
 32

	)

77 #ifde‡
__USE_MISC


78 
	~<sys/ty≥s.h
>

79 
	~<sys/sockë.h
>

80 
	~<°döt.h
>

82 
uöt32_t
 
	tt˝_£q
;

87 
	st˝hdr


89 
__exãnsi⁄__
 union

93 
uöt16_t
 
	mth_•‹t
;

94 
uöt16_t
 
	mth_dp‹t
;

95 
t˝_£q
 
	mth_£q
;

96 
t˝_£q
 
	mth_ack
;

97 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


98 
uöt8_t
 
	mth_x2
:4;

99 
uöt8_t
 
	mth_off
:4;

101 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


102 
uöt8_t
 
	mth_off
:4;

103 
uöt8_t
 
	mth_x2
:4;

105 
uöt8_t
 
	mth_Êags
;

106 
	#TH_FIN
 0x01

	)

107 
	#TH_SYN
 0x02

	)

108 
	#TH_RST
 0x04

	)

109 
	#TH_PUSH
 0x08

	)

110 
	#TH_ACK
 0x10

	)

111 
	#TH_URG
 0x20

	)

112 
uöt16_t
 
	mth_wö
;

113 
uöt16_t
 
	mth_sum
;

114 
uöt16_t
 
	mth_uΩ
;

118 
uöt16_t
 
	msour˚
;

119 
uöt16_t
 
	mde°
;

120 
uöt32_t
 
	m£q
;

121 
uöt32_t
 
	mack_£q
;

122 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


123 
uöt16_t
 
	mªs1
:4;

124 
uöt16_t
 
	mdoff
:4;

125 
uöt16_t
 
	mfö
:1;

126 
uöt16_t
 
	msyn
:1;

127 
uöt16_t
 
	mr°
:1;

128 
uöt16_t
 
	mpsh
:1;

129 
uöt16_t
 
	mack
:1;

130 
uöt16_t
 
	murg
:1;

131 
uöt16_t
 
	mªs2
:2;

132 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


133 
uöt16_t
 
	mdoff
:4;

134 
uöt16_t
 
	mªs1
:4;

135 
uöt16_t
 
	mªs2
:2;

136 
uöt16_t
 
	murg
:1;

137 
uöt16_t
 
	mack
:1;

138 
uöt16_t
 
	mpsh
:1;

139 
uöt16_t
 
	mr°
:1;

140 
uöt16_t
 
	msyn
:1;

141 
uöt16_t
 
	mfö
:1;

145 
uöt16_t
 
	mwödow
;

146 
uöt16_t
 
	mcheck
;

147 
uöt16_t
 
	murg_±r
;

154 
	mTCP_ESTABLISHED
 = 1,

155 
	mTCP_SYN_SENT
,

156 
	mTCP_SYN_RECV
,

157 
	mTCP_FIN_WAIT1
,

158 
	mTCP_FIN_WAIT2
,

159 
	mTCP_TIME_WAIT
,

160 
	mTCP_CLOSE
,

161 
	mTCP_CLOSE_WAIT
,

162 
	mTCP_LAST_ACK
,

163 
	mTCP_LISTEN
,

164 
	mTCP_CLOSING


167 
	#TCPOPT_EOL
 0

	)

168 
	#TCPOPT_NOP
 1

	)

169 
	#TCPOPT_MAXSEG
 2

	)

170 
	#TCPOLEN_MAXSEG
 4

	)

171 
	#TCPOPT_WINDOW
 3

	)

172 
	#TCPOLEN_WINDOW
 3

	)

173 
	#TCPOPT_SACK_PERMITTED
 4

	)

174 
	#TCPOLEN_SACK_PERMITTED
 2

	)

175 
	#TCPOPT_SACK
 5

	)

176 
	#TCPOPT_TIMESTAMP
 8

	)

177 
	#TCPOLEN_TIMESTAMP
 10

	)

178 
	#TCPOLEN_TSTAMP_APPA
 (
TCPOLEN_TIMESTAMP
+2Ë

	)

180 
	#TCPOPT_TSTAMP_HDR
 \

181 (
TCPOPT_NOP
<<24|TCPOPT_NOP<<16|
TCPOPT_TIMESTAMP
<<8|
TCPOLEN_TIMESTAMP
)

	)

189 
	#TCP_MSS
 512

	)

191 
	#TCP_MAXWIN
 65535

	)

193 
	#TCP_MAX_WINSHIFT
 14

	)

195 
	#SOL_TCP
 6

	)

198 
	#TCPI_OPT_TIMESTAMPS
 1

	)

199 
	#TCPI_OPT_SACK
 2

	)

200 
	#TCPI_OPT_WSCALE
 4

	)

201 
	#TCPI_OPT_ECN
 8

	)

202 
	#TCPI_OPT_ECN_SEEN
 16

	)

203 
	#TCPI_OPT_SYN_DATA
 32

	)

206 
	et˝_ˇ_°©e


208 
	mTCP_CA_O≥n
 = 0,

209 
	mTCP_CA_Dis‹dî
 = 1,

210 
	mTCP_CA_CWR
 = 2,

211 
	mTCP_CA_Recovîy
 = 3,

212 
	mTCP_CA_Loss
 = 4

215 
	st˝_öfo


217 
uöt8_t
 
	mt˝i_°©e
;

218 
uöt8_t
 
	mt˝i_ˇ_°©e
;

219 
uöt8_t
 
	mt˝i_ªå™smôs
;

220 
uöt8_t
 
	mt˝i_¥obes
;

221 
uöt8_t
 
	mt˝i_backoff
;

222 
uöt8_t
 
	mt˝i_›ti⁄s
;

223 
uöt8_t
 
	mt˝i_¢d_wsˇÀ
 : 4, 
	mt˝i_rcv_wsˇÀ
 : 4;

225 
uöt32_t
 
	mt˝i_πo
;

226 
uöt32_t
 
	mt˝i_©o
;

227 
uöt32_t
 
	mt˝i_¢d_mss
;

228 
uöt32_t
 
	mt˝i_rcv_mss
;

230 
uöt32_t
 
	mt˝i_u«cked
;

231 
uöt32_t
 
	mt˝i_ßcked
;

232 
uöt32_t
 
	mt˝i_lo°
;

233 
uöt32_t
 
	mt˝i_ªå™s
;

234 
uöt32_t
 
	mt˝i_Áckës
;

237 
uöt32_t
 
	mt˝i_œ°_d©a_£¡
;

238 
uöt32_t
 
	mt˝i_œ°_ack_£¡
;

239 
uöt32_t
 
	mt˝i_œ°_d©a_ªcv
;

240 
uöt32_t
 
	mt˝i_œ°_ack_ªcv
;

243 
uöt32_t
 
	mt˝i_pmtu
;

244 
uöt32_t
 
	mt˝i_rcv_s°hªsh
;

245 
uöt32_t
 
	mt˝i_πt
;

246 
uöt32_t
 
	mt˝i_πtv¨
;

247 
uöt32_t
 
	mt˝i_¢d_s°hªsh
;

248 
uöt32_t
 
	mt˝i_¢d_cwnd
;

249 
uöt32_t
 
	mt˝i_advmss
;

250 
uöt32_t
 
	mt˝i_ª‹dîög
;

252 
uöt32_t
 
	mt˝i_rcv_πt
;

253 
uöt32_t
 
	mt˝i_rcv_•a˚
;

255 
uöt32_t
 
	mt˝i_tŸÆ_ªå™s
;

260 
	#TCP_MD5SIG_MAXKEYLEN
 80

	)

263 
	#TCP_MD5SIG_FLAG_PREFIX
 1

	)

265 
	st˝_md5sig


267 
sockaddr_°‹age
 
	mt˝m_addr
;

268 
uöt8_t
 
	mt˝m_Êags
;

269 
uöt8_t
 
	mt˝m_¥efixÀn
;

270 
uöt16_t
 
	mt˝m_keyÀn
;

271 
uöt32_t
 
	m__t˝m_∑d
;

272 
uöt8_t
 
	mt˝m_key
[
TCP_MD5SIG_MAXKEYLEN
];

276 
	st˝_ª∑ú_›t


278 
uöt32_t
 
	m›t_code
;

279 
uöt32_t
 
	m›t_vÆ
;

285 
	mTCP_NO_QUEUE
,

286 
	mTCP_RECV_QUEUE
,

287 
	mTCP_SEND_QUEUE
,

288 
	mTCP_QUEUES_NR
,

292 
	#TCP_COOKIE_MIN
 8

	)

293 
	#TCP_COOKIE_MAX
 16

	)

294 
	#TCP_COOKIE_PAIR_SIZE
 (2*
TCP_COOKIE_MAX
)

	)

297 
	#TCP_COOKIE_IN_ALWAYS
 (1 << 0Ë

	)

298 
	#TCP_COOKIE_OUT_NEVER
 (1 << 1Ë

	)

302 
	#TCP_S_DATA_IN
 (1 << 2Ë

	)

303 
	#TCP_S_DATA_OUT
 (1 << 3Ë

	)

305 
	#TCP_MSS_DEFAULT
 536U

	)

306 
	#TCP_MSS_DESIRED
 1220U

	)

308 
	st˝_cookõ_å™ß˘i⁄s


310 
uöt16_t
 
	mt˝˘_Êags
;

311 
uöt8_t
 
	m__t˝˘_∑d1
;

312 
uöt8_t
 
	mt˝˘_cookõ_desúed
;

313 
uöt16_t
 
	mt˝˘_s_d©a_desúed
;

314 
uöt16_t
 
	mt˝˘_u£d
;

315 
uöt8_t
 
	mt˝˘_vÆue
[
TCP_MSS_DEFAULT
];

319 
	st˝_ª∑ú_wödow


321 
uöt32_t
 
	m¢d_wl1
;

322 
uöt32_t
 
	m¢d_wnd
;

323 
uöt32_t
 
	mmax_wödow
;

324 
uöt32_t
 
	mrcv_wnd
;

325 
uöt32_t
 
	mrcv_wup
;

	@/usr/include/poll.h

1 
	~<sys/pﬁl.h
>

	@/usr/include/pthread.h

18 #i‚de‡
_PTHREAD_H


19 
	#_PTHREAD_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<ídün.h
>

23 
	~<sched.h
>

24 
	~<time.h
>

26 
	~<bôs/±hªadty≥s.h
>

27 
	~<bôs/£tjmp.h
>

28 
	~<bôs/w‹dsize.h
>

29 
	~<bôs/ty≥s/°ru˘_time•ec.h
>

35 
	mPTHREAD_CREATE_JOINABLE
,

36 
	#PTHREAD_CREATE_JOINABLE
 
PTHREAD_CREATE_JOINABLE


	)

37 
	mPTHREAD_CREATE_DETACHED


38 
	#PTHREAD_CREATE_DETACHED
 
PTHREAD_CREATE_DETACHED


	)

45 
	mPTHREAD_MUTEX_TIMED_NP
,

46 
	mPTHREAD_MUTEX_RECURSIVE_NP
,

47 
	mPTHREAD_MUTEX_ERRORCHECK_NP
,

48 
	mPTHREAD_MUTEX_ADAPTIVE_NP


49 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


51 
	mPTHREAD_MUTEX_NORMAL
 = 
PTHREAD_MUTEX_TIMED_NP
,

52 
	mPTHREAD_MUTEX_RECURSIVE
 = 
PTHREAD_MUTEX_RECURSIVE_NP
,

53 
	mPTHREAD_MUTEX_ERRORCHECK
 = 
PTHREAD_MUTEX_ERRORCHECK_NP
,

54 
	mPTHREAD_MUTEX_DEFAULT
 = 
PTHREAD_MUTEX_NORMAL


56 #ifde‡
__USE_GNU


58 , 
	mPTHREAD_MUTEX_FAST_NP
 = 
PTHREAD_MUTEX_TIMED_NP


63 #ifde‡
__USE_XOPEN2K


67 
	mPTHREAD_MUTEX_STALLED
,

68 
	mPTHREAD_MUTEX_STALLED_NP
 = 
PTHREAD_MUTEX_STALLED
,

69 
	mPTHREAD_MUTEX_ROBUST
,

70 
	mPTHREAD_MUTEX_ROBUST_NP
 = 
PTHREAD_MUTEX_ROBUST


75 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


79 
	mPTHREAD_PRIO_NONE
,

80 
	mPTHREAD_PRIO_INHERIT
,

81 
	mPTHREAD_PRIO_PROTECT


86 #i‡
__PTHREAD_MUTEX_HAVE_PREV


87 
	#PTHREAD_MUTEX_INITIALIZER
 \

88 { { 0, 0, 0, 0, 0, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

89 #ifde‡
__USE_GNU


90 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

91 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

92 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

93 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

94 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

95 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

99 
	#PTHREAD_MUTEX_INITIALIZER
 \

100 { { 0, 0, 0, 0, 0, { 
__PTHREAD_SPINS
 } } }

	)

101 #ifde‡
__USE_GNU


102 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

103 { { 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 0, { 
__PTHREAD_SPINS
 } } }

	)

104 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

105 { { 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 0, { 
__PTHREAD_SPINS
 } } }

	)

106 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

107 { { 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 0, { 
__PTHREAD_SPINS
 } } }

	)

114 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


117 
	mPTHREAD_RWLOCK_PREFER_READER_NP
,

118 
	mPTHREAD_RWLOCK_PREFER_WRITER_NP
,

119 
	mPTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,

120 
	mPTHREAD_RWLOCK_DEFAULT_NP
 = 
PTHREAD_RWLOCK_PREFER_READER_NP


126 #i‚de‡
__PTHREAD_RWLOCK_INT_FLAGS_SHARED


127 #i‡
__WORDSIZE
 == 64

128 
	#__PTHREAD_RWLOCK_INT_FLAGS_SHARED
 1

	)

133 
	#PTHREAD_RWLOCK_INITIALIZER
 \

134 { { 0, 0, 0, 0, 0, 0, 0, 0, 
__PTHREAD_RWLOCK_ELISION_EXTRA
, 0, 0 } }

	)

135 #ifde‡
__USE_GNU


136 #ifde‡
__PTHREAD_RWLOCK_INT_FLAGS_SHARED


137 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

138 { { 0, 0, 0, 0, 0, 0, 0, 0, 
__PTHREAD_RWLOCK_ELISION_EXTRA
, 0, \

139 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
 } }

	)

141 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


142 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

143 { { 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
, \

144 0, 
__PTHREAD_RWLOCK_ELISION_EXTRA
, 0, 0 } }

	)

146 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

147 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,\

148 0 } }

	)

158 
	mPTHREAD_INHERIT_SCHED
,

159 
	#PTHREAD_INHERIT_SCHED
 
PTHREAD_INHERIT_SCHED


	)

160 
	mPTHREAD_EXPLICIT_SCHED


161 
	#PTHREAD_EXPLICIT_SCHED
 
PTHREAD_EXPLICIT_SCHED


	)

168 
	mPTHREAD_SCOPE_SYSTEM
,

169 
	#PTHREAD_SCOPE_SYSTEM
 
PTHREAD_SCOPE_SYSTEM


	)

170 
	mPTHREAD_SCOPE_PROCESS


171 
	#PTHREAD_SCOPE_PROCESS
 
PTHREAD_SCOPE_PROCESS


	)

178 
	mPTHREAD_PROCESS_PRIVATE
,

179 
	#PTHREAD_PROCESS_PRIVATE
 
PTHREAD_PROCESS_PRIVATE


	)

180 
	mPTHREAD_PROCESS_SHARED


181 
	#PTHREAD_PROCESS_SHARED
 
PTHREAD_PROCESS_SHARED


	)

187 
	#PTHREAD_COND_INITIALIZER
 { { {0}, {0}, {0, 0}, {0, 0}, 0, 0, {0, 0} } }

	)

191 
	s_±hªad_˛ónup_buf„r


193 (*
	m__routöe
) (*);

194 *
	m__¨g
;

195 
	m__ˇn˚…y≥
;

196 
_±hªad_˛ónup_buf„r
 *
	m__¥ev
;

202 
	mPTHREAD_CANCEL_ENABLE
,

203 
	#PTHREAD_CANCEL_ENABLE
 
PTHREAD_CANCEL_ENABLE


	)

204 
	mPTHREAD_CANCEL_DISABLE


205 
	#PTHREAD_CANCEL_DISABLE
 
PTHREAD_CANCEL_DISABLE


	)

209 
	mPTHREAD_CANCEL_DEFERRED
,

210 
	#PTHREAD_CANCEL_DEFERRED
 
PTHREAD_CANCEL_DEFERRED


	)

211 
	mPTHREAD_CANCEL_ASYNCHRONOUS


212 
	#PTHREAD_CANCEL_ASYNCHRONOUS
 
PTHREAD_CANCEL_ASYNCHRONOUS


	)

214 
	#PTHREAD_CANCELED
 ((*Ë-1)

	)

218 
	#PTHREAD_ONCE_INIT
 0

	)

221 #ifde‡
__USE_XOPEN2K


225 
	#PTHREAD_BARRIER_SERIAL_THREAD
 -1

	)

229 
__BEGIN_DECLS


234 
	$±hªad_¸óã
 (
±hªad_t
 *
__ª°ri˘
 
__√wthªad
,

235 c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

236 *(*
__°¨t_routöe
) (*),

237 *
__ª°ri˘
 
__¨g
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 3));

243 
	$±hªad_exô
 (*
__ªtvÆ
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

251 
	`±hªad_joö
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
);

253 #ifde‡
__USE_GNU


256 
	$±hªad_åyjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
Ë
__THROW
;

264 
	`±hªad_timedjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
,

265 c⁄° 
time•ec
 *
__ab°ime
);

272 
	$±hªad_dëach
 (
±hªad_t
 
__th
Ë
__THROW
;

276 
±hªad_t
 
	$±hªad_£lf
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

279 
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
)

280 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

288 
	$±hªad_©å_öô
 (
±hªad_©å_t
 *
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

291 
	$±hªad_©å_de°roy
 (
±hªad_©å_t
 *
__©å
)

292 
__THROW
 
	`__n⁄nuŒ
 ((1));

295 
	$±hªad_©å_gëdëach°©e
 (c⁄° 
±hªad_©å_t
 *
__©å
,

296 *
__dëach°©e
)

297 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

300 
	$±hªad_©å_£tdëach°©e
 (
±hªad_©å_t
 *
__©å
,

301 
__dëach°©e
)

302 
__THROW
 
	`__n⁄nuŒ
 ((1));

306 
	$±hªad_©å_gëgu¨dsize
 (c⁄° 
±hªad_©å_t
 *
__©å
,

307 
size_t
 *
__gu¨dsize
)

308 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

311 
	$±hªad_©å_£tgu¨dsize
 (
±hªad_©å_t
 *
__©å
,

312 
size_t
 
__gu¨dsize
)

313 
__THROW
 
	`__n⁄nuŒ
 ((1));

317 
	$±hªad_©å_gësched∑øm
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

318 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

319 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

322 
	$±hªad_©å_£tsched∑øm
 (
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

323 c⁄° 
sched_∑øm
 *
__ª°ri˘


324 
__∑øm
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

327 
	$±hªad_©å_gëschedpﬁicy
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


328 
__©å
, *
__ª°ri˘
 
__pﬁicy
)

329 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

332 
	$±hªad_©å_£tschedpﬁicy
 (
±hªad_©å_t
 *
__©å
, 
__pﬁicy
)

333 
__THROW
 
	`__n⁄nuŒ
 ((1));

336 
	$±hªad_©å_gëöhîôsched
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


337 
__©å
, *
__ª°ri˘
 
__öhîô
)

338 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

341 
	$±hªad_©å_£töhîôsched
 (
±hªad_©å_t
 *
__©å
,

342 
__öhîô
)

343 
__THROW
 
	`__n⁄nuŒ
 ((1));

347 
	$±hªad_©å_gësc›e
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

348 *
__ª°ri˘
 
__sc›e
)

349 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

352 
	$±hªad_©å_£tsc›e
 (
±hªad_©å_t
 *
__©å
, 
__sc›e
)

353 
__THROW
 
	`__n⁄nuŒ
 ((1));

356 
	$±hªad_©å_gë°ackaddr
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


357 
__©å
, **
__ª°ri˘
 
__°ackaddr
)

358 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__©åibuã_dïªˇãd__
;

364 
	$±hªad_©å_£t°ackaddr
 (
±hªad_©å_t
 *
__©å
,

365 *
__°ackaddr
)

366 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
;

369 
	$±hªad_©å_gë°acksize
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


370 
__©å
, 
size_t
 *
__ª°ri˘
 
__°acksize
)

371 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

376 
	$±hªad_©å_£t°acksize
 (
±hªad_©å_t
 *
__©å
,

377 
size_t
 
__°acksize
)

378 
__THROW
 
	`__n⁄nuŒ
 ((1));

380 #ifde‡
__USE_XOPEN2K


382 
	$±hªad_©å_gë°ack
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

383 **
__ª°ri˘
 
__°ackaddr
,

384 
size_t
 *
__ª°ri˘
 
__°acksize
)

385 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

390 
	$±hªad_©å_£t°ack
 (
±hªad_©å_t
 *
__©å
, *
__°ackaddr
,

391 
size_t
 
__°acksize
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

394 #ifde‡
__USE_GNU


397 
	$±hªad_©å_£èfföôy_≈
 (
±hªad_©å_t
 *
__©å
,

398 
size_t
 
__˝u£tsize
,

399 c⁄° 
˝u_£t_t
 *
__˝u£t
)

400 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

404 
	$±hªad_©å_gëafföôy_≈
 (c⁄° 
±hªad_©å_t
 *
__©å
,

405 
size_t
 
__˝u£tsize
,

406 
˝u_£t_t
 *
__˝u£t
)

407 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

410 
	$±hªad_gë©å_deÁu…_≈
 (
±hªad_©å_t
 *
__©å
)

411 
__THROW
 
	`__n⁄nuŒ
 ((1));

415 
	$±hªad_£èâr_deÁu…_≈
 (c⁄° 
±hªad_©å_t
 *
__©å
)

416 
__THROW
 
	`__n⁄nuŒ
 ((1));

421 
	$±hªad_gë©å_≈
 (
±hªad_t
 
__th
, 
±hªad_©å_t
 *
__©å
)

422 
__THROW
 
	`__n⁄nuŒ
 ((2));

430 
	$±hªad_£tsched∑øm
 (
±hªad_t
 
__èrgë_thªad
, 
__pﬁicy
,

431 c⁄° 
sched_∑øm
 *
__∑øm
)

432 
__THROW
 
	`__n⁄nuŒ
 ((3));

435 
	$±hªad_gësched∑øm
 (
±hªad_t
 
__èrgë_thªad
,

436 *
__ª°ri˘
 
__pﬁicy
,

437 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

438 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

441 
	$±hªad_£tsched¥io
 (
±hªad_t
 
__èrgë_thªad
, 
__¥io
)

442 
__THROW
;

445 #ifde‡
__USE_GNU


447 
	$±hªad_gë«me_≈
 (
±hªad_t
 
__èrgë_thªad
, *
__buf
,

448 
size_t
 
__buÊí
)

449 
__THROW
 
	`__n⁄nuŒ
 ((2));

452 
	$±hªad_£äame_≈
 (
±hªad_t
 
__èrgë_thªad
, c⁄° *
__«me
)

453 
__THROW
 
	`__n⁄nuŒ
 ((2));

457 #ifde‡
__USE_UNIX98


459 
	$±hªad_gëc⁄cuºícy
 (Ë
__THROW
;

462 
	$±hªad_£tc⁄cuºícy
 (
__Àvñ
Ë
__THROW
;

465 #ifde‡
__USE_GNU


470 
	$±hªad_yõld
 (Ë
__THROW
;

475 
	$±hªad_£èfföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

476 c⁄° 
˝u_£t_t
 *
__˝u£t
)

477 
__THROW
 
	`__n⁄nuŒ
 ((3));

480 
	$±hªad_gëafföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

481 
˝u_£t_t
 *
__˝u£t
)

482 
__THROW
 
	`__n⁄nuŒ
 ((3));

495 
	$±hªad_⁄˚
 (
±hªad_⁄˚_t
 *
__⁄˚_c⁄åﬁ
,

496 (*
__öô_routöe
Ë()Ë
	`__n⁄nuŒ
 ((1, 2));

507 
	`±hªad_£tˇn˚l°©e
 (
__°©e
, *
__ﬁd°©e
);

511 
	`±hªad_£tˇn˚…y≥
 (
__ty≥
, *
__ﬁdty≥
);

514 
	`±hªad_ˇn˚l
 (
±hªad_t
 
__th
);

519 
	`±hªad_ã°ˇn˚l
 ();

528 
__jmp_buf
 
__ˇn˚l_jmp_buf
;

529 
__mask_was_ßved
;

530 } 
__ˇn˚l_jmp_buf
[1];

531 *
__∑d
[4];

532 } 
	t__±hªad_unwöd_buf_t
 
	t__©åibuã__
 ((
	t__Æig√d__
));

535 #i‚de‡
__˛ónup_f˘_©åibuã


536 
	#__˛ónup_f˘_©åibuã


	)

541 
	s__±hªad_˛ónup_‰ame


543 (*
__ˇn˚l_routöe
) (*);

544 *
__ˇn˚l_¨g
;

545 
__do_ô
;

546 
__ˇn˚l_ty≥
;

549 #i‡
deföed
 
__GNUC__
 && deföed 
__EXCEPTIONS


550 #ifde‡
__˝lu•lus


552 ˛as†
	c__±hªad_˛ónup_˛ass


554 (*
__ˇn˚l_routöe
) (*);

555 *
__ˇn˚l_¨g
;

556 
__do_ô
;

557 
__ˇn˚l_ty≥
;

559 
public
:

560 
	$__±hªad_˛ónup_˛ass
 ((*
__f˘
Ë(*), *
__¨g
)

561 : 
	`__ˇn˚l_routöe
 (
__f˘
), 
	`__ˇn˚l_¨g
 (
__¨g
), 
	$__do_ô
 (1) { }

562 ~
	$__±hªad_˛ónup_˛ass
 (Ë{ i‡(
__do_ô
Ë
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); 
	}
}

563 
	$__£tdoô
 (
__√wvÆ
Ë{ 
__do_ô
 = __√wvÆ; 
	}
}

564 
	$__de„r
 (Ë{ 
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
,

565 &
__ˇn˚l_ty≥
); 
	}
}

566 
	$__ª°‹e
 (Ëc⁄° { 
	`±hªad_£tˇn˚…y≥
 (
__ˇn˚l_ty≥
, 0); 
	}
}

576 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

578 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
)

	)

582 
	#±hªad_˛ónup_p›
(
execuã
) \

583 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

584 } 0)

	)

586 #ifde‡
__USE_GNU


590 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

592 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
); \

593 
__˛‰ame
.
	`__de„r
 ()

	)

598 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

599 
__˛‰ame
.
	`__ª°‹e
 (); \

600 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

601 } 0)

	)

608 
__exã∫_ölöe
 

609 
	$__±hªad_˛ónup_routöe
 (
__±hªad_˛ónup_‰ame
 *
__‰ame
)

611 i‡(
__‰ame
->
__do_ô
)

612 
__‰ame
->
	`__ˇn˚l_routöe
 (__‰ame->
__ˇn˚l_¨g
);

613 
	}
}

622 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

624 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

625 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

626 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

627 .
__do_ô
 = 1 };

	)

631 
	#±hªad_˛ónup_p›
(
execuã
) \

632 
__˛‰ame
.
__do_ô
 = (
execuã
); \

633 } 0)

	)

635 #ifde‡
__USE_GNU


639 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

641 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

642 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

643 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

644 .
__do_ô
 = 1 }; \

645 (Ë
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
, \

646 &
__˛‰ame
.
__ˇn˚l_ty≥
)

	)

651 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

652 (Ë
	`±hªad_£tˇn˚…y≥
 (
__˛‰ame
.
__ˇn˚l_ty≥
, 
NULL
); \

653 
__˛‰ame
.
__do_ô
 = (
execuã
); \

654 } 0)

	)

665 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

667 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

668 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

669 *
__ˇn˚l_¨g
 = (
¨g
); \

670 
__nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

671 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

672 i‡(
	`__glibc_u∆ikñy
 (
__nŸ_fú°_ˇŒ
)) \

674 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

675 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

679 
	`__±hªad_ªgi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

680 dÿ{

	)

681 
__±hªad_ªgi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

682 
__˛ónup_f˘_©åibuã
;

686 
	#±hªad_˛ónup_p›
(
execuã
) \

689 
	`__±hªad_uƒegi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

690 i‡(
execuã
) \

691 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

692 } 0)

	)

693 
	$__±hªad_uƒegi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

694 
__˛ónup_f˘_©åibuã
;

696 #ifde‡
__USE_GNU


700 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

702 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

703 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

704 *
__ˇn˚l_¨g
 = (
¨g
); \

705 
__nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

706 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

707 i‡(
	`__glibc_u∆ikñy
 (
__nŸ_fú°_ˇŒ
)) \

709 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

710 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

714 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (&
__ˇn˚l_buf
); \

715 dÿ{

	)

716 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (
__±hªad_unwöd_buf_t
 *
__buf
)

717 
__˛ónup_f˘_©åibuã
;

722 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

725 
	`__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (&
__ˇn˚l_buf
); \

726 i‡(
execuã
) \

727 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

728 
	}
} 0)

	)

729 
	$__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (
__±hªad_unwöd_buf_t
 *
__buf
)

730 
__˛ónup_f˘_©åibuã
;

734 
	$__±hªad_unwöd_√xt
 (
__±hªad_unwöd_buf_t
 *
__buf
)

735 
__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
__n‹ëu∫__
))

736 #i‚de‡
SHARED


737 
	`__©åibuã__
 ((
__wók__
))

743 
__jmp_buf_èg
;

744 
	$__sig£tjmp
 (
__jmp_buf_èg
 *
__ív
, 
__ßvemask
Ë
__THROWNL
;

750 
	$±hªad_muãx_öô
 (
±hªad_muãx_t
 *
__muãx
,

751 c⁄° 
±hªad_muãx©å_t
 *
__muãx©å
)

752 
__THROW
 
	`__n⁄nuŒ
 ((1));

755 
	$±hªad_muãx_de°roy
 (
±hªad_muãx_t
 *
__muãx
)

756 
__THROW
 
	`__n⁄nuŒ
 ((1));

759 
	$±hªad_muãx_åylock
 (
±hªad_muãx_t
 *
__muãx
)

760 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

763 
	$±hªad_muãx_lock
 (
±hªad_muãx_t
 *
__muãx
)

764 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

766 #ifde‡
__USE_XOPEN2K


768 
	$±hªad_muãx_timedlock
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

769 c⁄° 
time•ec
 *
__ª°ri˘


770 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

774 
	$±hªad_muãx_u∆ock
 (
±hªad_muãx_t
 *
__muãx
)

775 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

779 
	$±hªad_muãx_gë¥io˚ûög
 (c⁄° 
±hªad_muãx_t
 *

780 
__ª°ri˘
 
__muãx
,

781 *
__ª°ri˘
 
__¥io˚ûög
)

782 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

786 
	$±hªad_muãx_£çrio˚ûög
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

787 
__¥io˚ûög
,

788 *
__ª°ri˘
 
__ﬁd_˚ûög
)

789 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

792 #ifde‡
__USE_XOPEN2K8


794 
	$±hªad_muãx_c⁄si°ít
 (
±hªad_muãx_t
 *
__muãx
)

795 
__THROW
 
	`__n⁄nuŒ
 ((1));

796 #ifde‡
__USE_GNU


797 
	$±hªad_muãx_c⁄si°ít_≈
 (
±hªad_muãx_t
 *
__muãx
)

798 
__THROW
 
	`__n⁄nuŒ
 ((1));

807 
	$±hªad_muãx©å_öô
 (
±hªad_muãx©å_t
 *
__©å
)

808 
__THROW
 
	`__n⁄nuŒ
 ((1));

811 
	$±hªad_muãx©å_de°roy
 (
±hªad_muãx©å_t
 *
__©å
)

812 
__THROW
 
	`__n⁄nuŒ
 ((1));

815 
	$±hªad_muãx©å_gëpsh¨ed
 (c⁄° 
±hªad_muãx©å_t
 *

816 
__ª°ri˘
 
__©å
,

817 *
__ª°ri˘
 
__psh¨ed
)

818 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

821 
	$±hªad_muãx©å_£çsh¨ed
 (
±hªad_muãx©å_t
 *
__©å
,

822 
__psh¨ed
)

823 
__THROW
 
	`__n⁄nuŒ
 ((1));

825 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


827 
	$±hªad_muãx©å_gëty≥
 (c⁄° 
±hªad_muãx©å_t
 *
__ª°ri˘


828 
__©å
, *
__ª°ri˘
 
__köd
)

829 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

834 
	$±hªad_muãx©å_£ây≥
 (
±hªad_muãx©å_t
 *
__©å
, 
__köd
)

835 
__THROW
 
	`__n⁄nuŒ
 ((1));

839 
	$±hªad_muãx©å_gë¥Ÿocﬁ
 (c⁄° 
±hªad_muãx©å_t
 *

840 
__ª°ri˘
 
__©å
,

841 *
__ª°ri˘
 
__¥Ÿocﬁ
)

842 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

846 
	$±hªad_muãx©å_£çrŸocﬁ
 (
±hªad_muãx©å_t
 *
__©å
,

847 
__¥Ÿocﬁ
)

848 
__THROW
 
	`__n⁄nuŒ
 ((1));

851 
	$±hªad_muãx©å_gë¥io˚ûög
 (c⁄° 
±hªad_muãx©å_t
 *

852 
__ª°ri˘
 
__©å
,

853 *
__ª°ri˘
 
__¥io˚ûög
)

854 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

857 
	$±hªad_muãx©å_£çrio˚ûög
 (
±hªad_muãx©å_t
 *
__©å
,

858 
__¥io˚ûög
)

859 
__THROW
 
	`__n⁄nuŒ
 ((1));

861 #ifde‡
__USE_XOPEN2K


863 
	$±hªad_muãx©å_gërobu°
 (c⁄° 
±hªad_muãx©å_t
 *
__©å
,

864 *
__robu°√ss
)

865 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

866 #ifde‡
__USE_GNU


867 
	$±hªad_muãx©å_gërobu°_≈
 (c⁄° 
±hªad_muãx©å_t
 *
__©å
,

868 *
__robu°√ss
)

869 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

873 
	$±hªad_muãx©å_£åobu°
 (
±hªad_muãx©å_t
 *
__©å
,

874 
__robu°√ss
)

875 
__THROW
 
	`__n⁄nuŒ
 ((1));

876 #ifde‡
__USE_GNU


877 
	$±hªad_muãx©å_£åobu°_≈
 (
±hªad_muãx©å_t
 *
__©å
,

878 
__robu°√ss
)

879 
__THROW
 
	`__n⁄nuŒ
 ((1));

884 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


889 
	$±hªad_rwlock_öô
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

890 c⁄° 
±hªad_rwlock©å_t
 *
__ª°ri˘


891 
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

894 
	$±hªad_rwlock_de°roy
 (
±hªad_rwlock_t
 *
__rwlock
)

895 
__THROW
 
	`__n⁄nuŒ
 ((1));

898 
	$±hªad_rwlock_rdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

899 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

902 
	$±hªad_rwlock_åyrdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

903 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

905 #ifde‡
__USE_XOPEN2K


907 
	$±hªad_rwlock_timedrdlock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

908 c⁄° 
time•ec
 *
__ª°ri˘


909 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

913 
	$±hªad_rwlock_wæock
 (
±hªad_rwlock_t
 *
__rwlock
)

914 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

917 
	$±hªad_rwlock_åywæock
 (
±hªad_rwlock_t
 *
__rwlock
)

918 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

920 #ifde‡
__USE_XOPEN2K


922 
	$±hªad_rwlock_timedwæock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

923 c⁄° 
time•ec
 *
__ª°ri˘


924 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

928 
	$±hªad_rwlock_u∆ock
 (
±hªad_rwlock_t
 *
__rwlock
)

929 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

935 
	$±hªad_rwlock©å_öô
 (
±hªad_rwlock©å_t
 *
__©å
)

936 
__THROW
 
	`__n⁄nuŒ
 ((1));

939 
	$±hªad_rwlock©å_de°roy
 (
±hªad_rwlock©å_t
 *
__©å
)

940 
__THROW
 
	`__n⁄nuŒ
 ((1));

943 
	$±hªad_rwlock©å_gëpsh¨ed
 (c⁄° 
±hªad_rwlock©å_t
 *

944 
__ª°ri˘
 
__©å
,

945 *
__ª°ri˘
 
__psh¨ed
)

946 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

949 
	$±hªad_rwlock©å_£çsh¨ed
 (
±hªad_rwlock©å_t
 *
__©å
,

950 
__psh¨ed
)

951 
__THROW
 
	`__n⁄nuŒ
 ((1));

954 
	$±hªad_rwlock©å_gëköd_≈
 (c⁄° 
±hªad_rwlock©å_t
 *

955 
__ª°ri˘
 
__©å
,

956 *
__ª°ri˘
 
__¥ef
)

957 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

960 
	$±hªad_rwlock©å_£tköd_≈
 (
±hªad_rwlock©å_t
 *
__©å
,

961 
__¥ef
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

969 
	$±hªad_c⁄d_öô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

970 c⁄° 
±hªad_c⁄d©å_t
 *
__ª°ri˘
 
__c⁄d_©å
)

971 
__THROW
 
	`__n⁄nuŒ
 ((1));

974 
	$±hªad_c⁄d_de°roy
 (
±hªad_c⁄d_t
 *
__c⁄d
)

975 
__THROW
 
	`__n⁄nuŒ
 ((1));

978 
	$±hªad_c⁄d_sig«l
 (
±hªad_c⁄d_t
 *
__c⁄d
)

979 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

982 
	$±hªad_c⁄d_brﬂdˇ°
 (
±hªad_c⁄d_t
 *
__c⁄d
)

983 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

990 
	$±hªad_c⁄d_waô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

991 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
)

992 
	`__n⁄nuŒ
 ((1, 2));

1001 
	$±hªad_c⁄d_timedwaô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

1002 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

1003 c⁄° 
time•ec
 *
__ª°ri˘
 
__ab°ime
)

1004 
	`__n⁄nuŒ
 ((1, 2, 3));

1009 
	$±hªad_c⁄d©å_öô
 (
±hªad_c⁄d©å_t
 *
__©å
)

1010 
__THROW
 
	`__n⁄nuŒ
 ((1));

1013 
	$±hªad_c⁄d©å_de°roy
 (
±hªad_c⁄d©å_t
 *
__©å
)

1014 
__THROW
 
	`__n⁄nuŒ
 ((1));

1017 
	$±hªad_c⁄d©å_gëpsh¨ed
 (c⁄° 
±hªad_c⁄d©å_t
 *

1018 
__ª°ri˘
 
__©å
,

1019 *
__ª°ri˘
 
__psh¨ed
)

1020 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1023 
	$±hªad_c⁄d©å_£çsh¨ed
 (
±hªad_c⁄d©å_t
 *
__©å
,

1024 
__psh¨ed
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1026 #ifde‡
__USE_XOPEN2K


1028 
	$±hªad_c⁄d©å_gë˛ock
 (c⁄° 
±hªad_c⁄d©å_t
 *

1029 
__ª°ri˘
 
__©å
,

1030 
__˛ockid_t
 *
__ª°ri˘
 
__˛ock_id
)

1031 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1034 
	$±hªad_c⁄d©å_£t˛ock
 (
±hªad_c⁄d©å_t
 *
__©å
,

1035 
__˛ockid_t
 
__˛ock_id
)

1036 
__THROW
 
	`__n⁄nuŒ
 ((1));

1040 #ifde‡
__USE_XOPEN2K


1045 
	$±hªad_•ö_öô
 (
±hªad_•ölock_t
 *
__lock
, 
__psh¨ed
)

1046 
__THROW
 
	`__n⁄nuŒ
 ((1));

1049 
	$±hªad_•ö_de°roy
 (
±hªad_•ölock_t
 *
__lock
)

1050 
__THROW
 
	`__n⁄nuŒ
 ((1));

1053 
	$±hªad_•ö_lock
 (
±hªad_•ölock_t
 *
__lock
)

1054 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1057 
	$±hªad_•ö_åylock
 (
±hªad_•ölock_t
 *
__lock
)

1058 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1061 
	$±hªad_•ö_u∆ock
 (
±hªad_•ölock_t
 *
__lock
)

1062 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1069 
	$±hªad_b¨rõr_öô
 (
±hªad_b¨rõr_t
 *
__ª°ri˘
 
__b¨rõr
,

1070 c⁄° 
±hªad_b¨rõøâr_t
 *
__ª°ri˘


1071 
__©å
, 
__cou¡
)

1072 
__THROW
 
	`__n⁄nuŒ
 ((1));

1075 
	$±hªad_b¨rõr_de°roy
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1076 
__THROW
 
	`__n⁄nuŒ
 ((1));

1079 
	$±hªad_b¨rõr_waô
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1080 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1084 
	$±hªad_b¨rõøâr_öô
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1085 
__THROW
 
	`__n⁄nuŒ
 ((1));

1088 
	$±hªad_b¨rõøâr_de°roy
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1089 
__THROW
 
	`__n⁄nuŒ
 ((1));

1092 
	$±hªad_b¨rõøâr_gëpsh¨ed
 (c⁄° 
±hªad_b¨rõøâr_t
 *

1093 
__ª°ri˘
 
__©å
,

1094 *
__ª°ri˘
 
__psh¨ed
)

1095 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1098 
	$±hªad_b¨rõøâr_£çsh¨ed
 (
±hªad_b¨rõøâr_t
 *
__©å
,

1099 
__psh¨ed
)

1100 
__THROW
 
	`__n⁄nuŒ
 ((1));

1112 
	$±hªad_key_¸óã
 (
±hªad_key_t
 *
__key
,

1113 (*
__de°r_fun˘i⁄
) (*))

1114 
__THROW
 
	`__n⁄nuŒ
 ((1));

1117 
	$±hªad_key_dñëe
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1120 *
	$±hªad_gë•ecific
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1123 
	$±hªad_£t•ecific
 (
±hªad_key_t
 
__key
,

1124 c⁄° *
__poöãr
Ë
__THROW
 ;

1127 #ifde‡
__USE_XOPEN2K


1129 
	$±hªad_gë˝u˛ockid
 (
±hªad_t
 
__thªad_id
,

1130 
__˛ockid_t
 *
__˛ock_id
)

1131 
__THROW
 
	`__n⁄nuŒ
 ((2));

1146 
	$±hªad_©f‹k
 ((*
__¥ï¨e
) (),

1147 (*
__∑ª¡
) (),

1148 (*
__chûd
Ë()Ë
__THROW
;

1151 #ifde‡
__USE_EXTERN_INLINES


1153 
__exã∫_ölöe
 

1154 
	`__NTH
 (
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
))

1156  
__thªad1
 =
__thªad2
;

1157 
	}
}

1160 
	g__END_DECLS


	@/usr/include/scsi/sg.h

25 #i‚de‡
_SCSI_SG_H


26 
	#_SCSI_SG_H
 1

	)

28 
	~<„©uªs.h
>

29 
	#__√ed_size_t


	)

30 
	~<°ddef.h
>

37 
	ssg_iovec


39 * 
	miov_ba£
;

40 
size_t
 
	miov_Àn
;

41 } 
	tsg_iovec_t
;

44 
	ssg_io_hdr


46 
	möãrÁ˚_id
;

47 
	mdx„r_dúe˘i⁄
;

48 
	mcmd_Àn
;

49 
	mmx_sb_Àn
;

50 
	miovec_cou¡
;

51 
	mdx„r_Àn
;

52 * 
	mdx„Ω
;

54 * 
	mcmdp
;

55 * 
	msbp
;

56 
	mtimeout
;

57 
	mÊags
;

58 
	m∑ck_id
;

59 * 
	mu§_±r
;

60 
	m°©us
;

61 
	mmasked_°©us
;

62 
	mmsg_°©us
;

63 
	msb_Àn_wr
;

64 
	mho°_°©us
;

65 
	mdrivî_°©us
;

66 
	mªsid
;

67 
	mduøti⁄
;

68 
	möfo
;

69 } 
	tsg_io_hdr_t
;

73 
	#SG_DXFER_NONE
 -1

	)

74 
	#SG_DXFER_TO_DEV
 -2

	)

75 
	#SG_DXFER_FROM_DEV
 -3

	)

76 
	#SG_DXFER_TO_FROM_DEV
 -4

	)

83 
	#SG_FLAG_DIRECT_IO
 1

	)

84 
	#SG_FLAG_LUN_INHIBIT
 2

	)

86 
	#SG_FLAG_NO_DXFER
 0x10000

	)

90 
	#SG_INFO_OK_MASK
 0x1

	)

91 
	#SG_INFO_OK
 0x0

	)

92 
	#SG_INFO_CHECK
 0x1

	)

94 
	#SG_INFO_DIRECT_IO_MASK
 0x6

	)

95 
	#SG_INFO_INDIRECT_IO
 0x0

	)

96 
	#SG_INFO_DIRECT_IO
 0x2

	)

97 
	#SG_INFO_MIXED_IO
 0x4

	)

102 
	ssg_scsi_id
 {

104 
	mho°_no
;

105 
	mch™√l
;

107 
	mscsi_id
;

108 
	mlun
;

110 
	mscsi_ty≥
;

112 
	mh_cmd_≥r_lun
;

114 
	md_queue_dïth
;

116 
	munu£d
[2];

120 
	ssg_ªq_öfo
 {

121 
	mªq_°©e
;

122 
	m‹ph™
;

123 
	msg_io_ow√d
;

124 
	m¥obÀm
;

125 
	m∑ck_id
;

126 * 
	mu§_±r
;

127 
	mduøti⁄
;

129 
	munu£d
;

130 } 
	tsg_ªq_öfo_t
;

137 
	#SG_EMULATED_HOST
 0x2203

	)

141 
	#SG_SET_TRANSFORM
 0x2204

	)

143 
	#SG_GET_TRANSFORM
 0x2205

	)

145 
	#SG_SET_RESERVED_SIZE
 0x2275

	)

146 
	#SG_GET_RESERVED_SIZE
 0x2272

	)

149 
	#SG_GET_SCSI_ID
 0x2276

	)

153 
	#SG_SET_FORCE_LOW_DMA
 0x2279

	)

154 
	#SG_GET_LOW_DMA
 0x227®

	)

160 
	#SG_SET_FORCE_PACK_ID
 0x227b

	)

161 
	#SG_GET_PACK_ID
 0x227¯

	)

163 
	#SG_GET_NUM_WAITING
 0x227d

	)

166 
	#SG_GET_SG_TABLESIZE
 0x227F

	)

168 
	#SG_GET_VERSION_NUM
 0x2282

	)

171 
	#SG_SCSI_RESET
 0x2284

	)

173 
	#SG_SCSI_RESET_NOTHING
 0

	)

174 
	#SG_SCSI_RESET_DEVICE
 1

	)

175 
	#SG_SCSI_RESET_BUS
 2

	)

176 
	#SG_SCSI_RESET_HOST
 3

	)

179 
	#SG_IO
 0x2285

	)

181 
	#SG_GET_REQUEST_TABLE
 0x2286

	)

184 
	#SG_SET_KEEP_ORPHAN
 0x2287

	)

185 
	#SG_GET_KEEP_ORPHAN
 0x2288

	)

188 
	#SG_SCATTER_SZ
 (8 * 4096Ë

	)

196 
	#SG_DEFAULT_RETRIES
 1

	)

199 
	#SG_DEF_FORCE_LOW_DMA
 0

	)

200 
	#SG_DEF_FORCE_PACK_ID
 0

	)

201 
	#SG_DEF_KEEP_ORPHAN
 0

	)

202 
	#SG_DEF_RESERVED_SIZE
 
SG_SCATTER_SZ


	)

205 
	#SG_MAX_QUEUE
 16

	)

207 
	#SG_BIG_BUFF
 
SG_DEF_RESERVED_SIZE


	)

210 
sg_io_hdr
 
	tSg_io_hdr
;

211 
sg_io_vec
 
	tSg_io_vec
;

212 
sg_scsi_id
 
	tSg_scsi_id
;

213 
sg_ªq_öfo
 
	tSg_ªq_öfo
;

220 
	#SG_MAX_SENSE
 16

	)

222 
	ssg_hódî


225 
	m∑ck_Àn
;

227 
	mª∂y_Àn
;

229 
	m∑ck_id
;

231 
	mªsu…
;

233 
	mtwñve_byã
:1;

235 
	mèrgë_°©us
:5;

237 
	mho°_°©us
:8;

239 
	mdrivî_°©us
:8;

241 
	mŸhî_Êags
:10;

246 
	m£n£_buf„r
[
SG_MAX_SENSE
];

254 
	#SG_SET_TIMEOUT
 0x2201

	)

255 
	#SG_GET_TIMEOUT
 0x2202

	)

258 
	#SG_GET_COMMAND_Q
 0x2270

	)

259 
	#SG_SET_COMMAND_Q
 0x2271

	)

263 
	#SG_SET_DEBUG
 0x227ê

	)

265 
	#SG_NEXT_CMD_LEN
 0x2283

	)

270 
	#SG_DEFAULT_TIMEOUT
 (60*
HZ
Ë

	)

271 
	#SG_DEF_COMMAND_Q
 0

	)

273 
	#SG_DEF_UNDERRUN_FLAG
 0

	)

	@/usr/include/semaphore.h

18 #i‚de‡
_SEMAPHORE_H


19 
	#_SEMAPHORE_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<sys/ty≥s.h
>

23 #ifde‡
__USE_XOPEN2K


24 
	~<bôs/ty≥s/°ru˘_time•ec.h
>

28 
	~<bôs/£m≠h‹e.h
>

31 
__BEGIN_DECLS


35 
	$£m_öô
 (
£m_t
 *
__£m
, 
__psh¨ed
, 
__vÆue
)

36 
__THROW
;

38 
	$£m_de°roy
 (
£m_t
 *
__£m
Ë
__THROW
;

41 
£m_t
 *
	$£m_›í
 (c⁄° *
__«me
, 
__oÊag
, ...Ë
__THROW
;

44 
	$£m_˛o£
 (
£m_t
 *
__£m
Ë
__THROW
;

47 
	$£m_u∆ök
 (c⁄° *
__«me
Ë
__THROW
;

53 
	`£m_waô
 (
£m_t
 *
__£m
);

55 #ifde‡
__USE_XOPEN2K


60 
	`£m_timedwaô
 (
£m_t
 *
__ª°ri˘
 
__£m
,

61 c⁄° 
time•ec
 *
__ª°ri˘
 
__ab°ime
);

65 
	$£m_åywaô
 (
£m_t
 *
__£m
Ë
__THROWNL
;

68 
	$£m_po°
 (
£m_t
 *
__£m
Ë
__THROWNL
;

71 
	$£m_gëvÆue
 (
£m_t
 *
__ª°ri˘
 
__£m
, *__ª°ri˘ 
__svÆ
)

72 
__THROW
;

75 
__END_DECLS


	@/usr/include/signal.h

22 #i‚def 
_SIGNAL_H


23 
	#_SIGNAL_H


	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<bôs/ty≥s.h
>

30 
	~<bôs/signum.h
>

32 
	~<bôs/ty≥s/sig_©omic_t.h
>

34 #i‡
deföed
 
__USE_POSIX


35 
	~<bôs/ty≥s/sig£t_t.h
>

38 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


39 #i‚de‡
__pid_t_deföed


40 
__pid_t
 
	tpid_t
;

41 
	#__pid_t_deföed


	)

43 #ifde‡
__USE_XOPEN


45 #i‚de‡
__uid_t_deföed


46 
__uid_t
 
	tuid_t
;

47 
	#__uid_t_deföed


	)

51 #ifde‡
__USE_POSIX199309


53 
	~<bôs/ty≥s/°ru˘_time•ec.h
>

56 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_XOPEN_EXTENDED


57 
	~<bôs/ty≥s/sigöfo_t.h
>

58 
	~<bôs/sigöfo-c⁄°s.h
>

61 #ifde‡
__USE_MISC


62 
	~<bôs/ty≥s/sigvÆ_t.h
>

65 #ifde‡
__USE_POSIX199309


66 
	~<bôs/ty≥s/sigevít_t.h
>

67 
	~<bôs/sigevít-c⁄°s.h
>

72 (*
	t__sigh™dÀr_t
) ();

77 
__sigh™dÀr_t
 
	$__sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

78 
__THROW
;

79 #ifde‡
__USE_GNU


80 
__sigh™dÀr_t
 
	$sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

81 
__THROW
;

87 #ifde‡
__USE_MISC


88 
__sigh™dÀr_t
 
	$sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

89 
__THROW
;

92 #ifde‡
__REDIRECT_NTH


93 
__sigh™dÀr_t
 
	`__REDIRECT_NTH
 (
sig«l
,

94 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
),

95 
__sysv_sig«l
);

97 
	#sig«l
 
__sysv_sig«l


	)

101 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8


104 
__sigh™dÀr_t
 
	$bsd_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

105 
__THROW
;

111 #ifde‡
__USE_POSIX


112 
	$kûl
 (
__pid_t
 
__pid
, 
__sig
Ë
__THROW
;

115 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


119 
	$kûÕg
 (
__pid_t
 
__pgΩ
, 
__sig
Ë
__THROW
;

123 
	$øi£
 (
__sig
Ë
__THROW
;

125 #ifde‡
__USE_MISC


127 
__sigh™dÀr_t
 
	$ssig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

128 
__THROW
;

129 
	$gsig«l
 (
__sig
Ë
__THROW
;

132 #ifde‡
__USE_XOPEN2K8


134 
	`psig«l
 (
__sig
, c⁄° *
__s
);

137 
	`psigöfo
 (c⁄° 
sigöfo_t
 *
__pöfo
, c⁄° *
__s
);

149 #ifde‡
__USE_XOPEN_EXTENDED


150 #ifde‡
__GNUC__


151 
	$sig∑u£
 (
__sig
Ë
	`__asm__
 ("__xpg_sigpause");

153 
	`__sig∑u£
 (
__sig_‹_mask
, 
__is_sig
);

155 
	#sig∑u£
(
sig
Ë
	`__sig∑u£
 ((sig), 1)

	)

160 #ifde‡
__USE_MISC


167 
	#sigmask
(
sig
Ë(()(1u << ((sigË- 1)))

	)

170 
	$sigblock
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

173 
	$sig£tmask
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

176 
	$siggëmask
 (Ë
__THROW
 
__©åibuã_dïªˇãd__
;

180 #ifde‡
__USE_MISC


181 
	#NSIG
 
_NSIG


	)

184 #ifde‡
__USE_GNU


185 
__sigh™dÀr_t
 
	tsigh™dÀr_t
;

189 #ifde‡
__USE_MISC


190 
__sigh™dÀr_t
 
	tsig_t
;

193 #ifde‡
__USE_POSIX


196 
	$sigem±y£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

199 
	$sigfûl£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

202 
	$sigadd£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

205 
	$sigdñ£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

208 
	$sigismembî
 (c⁄° 
sig£t_t
 *
__£t
, 
__signo
)

209 
__THROW
 
	`__n⁄nuŒ
 ((1));

211 #ifde‡
__USE_GNU


213 
	$sigi£m±y£t
 (c⁄° 
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

216 
	$sig™d£t
 (
sig£t_t
 *
__£t
, c⁄° sig£t_à*
__À·
,

217 c⁄° 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

220 
	$sig‹£t
 (
sig£t_t
 *
__£t
, c⁄° sig£t_à*
__À·
,

221 c⁄° 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

226 
	~<bôs/siga˘i⁄.h
>

229 
	$sig¥ocmask
 (
__how
, c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

230 
sig£t_t
 *
__ª°ri˘
 
__o£t
Ë
__THROW
;

237 
	$sigsu•íd
 (c⁄° 
sig£t_t
 *
__£t
Ë
	`__n⁄nuŒ
 ((1));

240 
	$siga˘i⁄
 (
__sig
, c⁄° 
siga˘i⁄
 *
__ª°ri˘
 
__a˘
,

241 
siga˘i⁄
 *
__ª°ri˘
 
__ﬂ˘
Ë
__THROW
;

244 
	$sig≥ndög
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

247 #ifde‡
__USE_POSIX199506


252 
	$sigwaô
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
, *__ª°ri˘ 
__sig
)

253 
	`__n⁄nuŒ
 ((1, 2));

256 #ifde‡
__USE_POSIX199309


261 
	$sigwaôöfo
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

262 
sigöfo_t
 *
__ª°ri˘
 
__öfo
Ë
	`__n⁄nuŒ
 ((1));

269 
	$sigtimedwaô
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

270 
sigöfo_t
 *
__ª°ri˘
 
__öfo
,

271 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
)

272 
	`__n⁄nuŒ
 ((1));

276 
	$sigqueue
 (
__pid_t
 
__pid
, 
__sig
, c⁄° 
sigvÆ
 
__vÆ
)

277 
__THROW
;

282 #ifde‡
__USE_MISC


286 c⁄° *c⁄° 
_sys_sigli°
[
_NSIG
];

287 c⁄° *c⁄° 
sys_sigli°
[
_NSIG
];

291 
	~<bôs/sigc⁄ãxt.h
>

294 
	$sigªtu∫
 (
sigc⁄ãxt
 *
__s˝
Ë
__THROW
;

299 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


300 
	#__√ed_size_t


	)

301 
	~<°ddef.h
>

303 
	~<bôs/ty≥s/°ack_t.h
>

304 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


306 
	~<sys/uc⁄ãxt.h
>

310 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_MISC


314 
	$sigöãºu±
 (
__sig
, 
__öãºu±
Ë
__THROW
;

316 
	~<bôs/sig°ack.h
>

317 
	~<bôs/ss_Êags.h
>

321 
	$sigÆt°ack
 (c⁄° 
°ack_t
 *
__ª°ri˘
 
__ss
,

322 
°ack_t
 *
__ª°ri˘
 
__oss
Ë
__THROW
;

325 #i‡((
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

326 || 
deföed
 
__USE_MISC
)

327 
	~<bôs/ty≥s/°ru˘_sig°ack.h
>

330 #i‡((
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

331 || 
deföed
 
__USE_MISC
)

335 
	$sig°ack
 (
sig°ack
 *
__ss
, sig°ack *
__oss
)

336 
__THROW
 
__©åibuã_dïªˇãd__
;

339 #ifde‡
__USE_XOPEN_EXTENDED


343 
	$sighﬁd
 (
__sig
Ë
__THROW
;

346 
	$sigªl£
 (
__sig
Ë
__THROW
;

349 
	$sigign‹e
 (
__sig
Ë
__THROW
;

352 
__sigh™dÀr_t
 
	$sig£t
 (
__sig
, 
__sigh™dÀr_t
 
__di•
Ë
__THROW
;

355 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


358 
	~<bôs/±hªadty≥s.h
>

359 
	~<bôs/sigthªad.h
>

366 
	$__libc_cuºít_sigπmö
 (Ë
__THROW
;

368 
	$__libc_cuºít_sigπmax
 (Ë
__THROW
;

370 
	#SIGRTMIN
 (
	`__libc_cuºít_sigπmö
 ())

	)

371 
	#SIGRTMAX
 (
	`__libc_cuºít_sigπmax
 ())

	)

373 
__END_DECLS


	@/usr/include/stdint.h

22 #i‚de‡
_STDINT_H


23 
	#_STDINT_H
 1

	)

25 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

26 
	~<bôs/libc-hódî-°¨t.h
>

27 
	~<bôs/ty≥s.h
>

28 
	~<bôs/wch¨.h
>

29 
	~<bôs/w‹dsize.h
>

34 
	~<bôs/°döt-öä.h
>

37 
	~<bôs/°döt-uöä.h
>

43 sig√d 
	töt_Àa°8_t
;

44 
	töt_Àa°16_t
;

45 
	töt_Àa°32_t
;

46 #i‡
__WORDSIZE
 == 64

47 
	töt_Àa°64_t
;

49 
__exãnsi⁄__


50 
	töt_Àa°64_t
;

54 
	tuöt_Àa°8_t
;

55 
	tuöt_Àa°16_t
;

56 
	tuöt_Àa°32_t
;

57 #i‡
__WORDSIZE
 == 64

58 
	tuöt_Àa°64_t
;

60 
__exãnsi⁄__


61 
	tuöt_Àa°64_t
;

68 sig√d 
	töt_Á°8_t
;

69 #i‡
__WORDSIZE
 == 64

70 
	töt_Á°16_t
;

71 
	töt_Á°32_t
;

72 
	töt_Á°64_t
;

74 
	töt_Á°16_t
;

75 
	töt_Á°32_t
;

76 
__exãnsi⁄__


77 
	töt_Á°64_t
;

81 
	tuöt_Á°8_t
;

82 #i‡
__WORDSIZE
 == 64

83 
	tuöt_Á°16_t
;

84 
	tuöt_Á°32_t
;

85 
	tuöt_Á°64_t
;

87 
	tuöt_Á°16_t
;

88 
	tuöt_Á°32_t
;

89 
__exãnsi⁄__


90 
	tuöt_Á°64_t
;

95 #i‡
__WORDSIZE
 == 64

96 #i‚de‡
__öçå_t_deföed


97 
	töçå_t
;

98 
	#__öçå_t_deföed


	)

100 
	tuöçå_t
;

102 #i‚de‡
__öçå_t_deföed


103 
	töçå_t
;

104 
	#__öçå_t_deföed


	)

106 
	tuöçå_t
;

111 
__ötmax_t
 
	tötmax_t
;

112 
__uötmax_t
 
	tuötmax_t
;

115 #i‡
__WORDSIZE
 == 64

116 
	#__INT64_C
(
c
Ë¯## 
L


	)

117 
	#__UINT64_C
(
c
Ë¯## 
UL


	)

119 
	#__INT64_C
(
c
Ë¯## 
LL


	)

120 
	#__UINT64_C
(
c
Ë¯## 
ULL


	)

126 
	#INT8_MIN
 (-128)

	)

127 
	#INT16_MIN
 (-32767-1)

	)

128 
	#INT32_MIN
 (-2147483647-1)

	)

129 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

131 
	#INT8_MAX
 (127)

	)

132 
	#INT16_MAX
 (32767)

	)

133 
	#INT32_MAX
 (2147483647)

	)

134 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

137 
	#UINT8_MAX
 (255)

	)

138 
	#UINT16_MAX
 (65535)

	)

139 
	#UINT32_MAX
 (4294967295U)

	)

140 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

144 
	#INT_LEAST8_MIN
 (-128)

	)

145 
	#INT_LEAST16_MIN
 (-32767-1)

	)

146 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

147 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

149 
	#INT_LEAST8_MAX
 (127)

	)

150 
	#INT_LEAST16_MAX
 (32767)

	)

151 
	#INT_LEAST32_MAX
 (2147483647)

	)

152 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

155 
	#UINT_LEAST8_MAX
 (255)

	)

156 
	#UINT_LEAST16_MAX
 (65535)

	)

157 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

158 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

162 
	#INT_FAST8_MIN
 (-128)

	)

163 #i‡
__WORDSIZE
 == 64

164 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

165 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

167 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

168 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

170 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

172 
	#INT_FAST8_MAX
 (127)

	)

173 #i‡
__WORDSIZE
 == 64

174 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

175 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

177 
	#INT_FAST16_MAX
 (2147483647)

	)

178 
	#INT_FAST32_MAX
 (2147483647)

	)

180 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

183 
	#UINT_FAST8_MAX
 (255)

	)

184 #i‡
__WORDSIZE
 == 64

185 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

186 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

188 
	#UINT_FAST16_MAX
 (4294967295U)

	)

189 
	#UINT_FAST32_MAX
 (4294967295U)

	)

191 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

195 #i‡
__WORDSIZE
 == 64

196 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

197 
	#INTPTR_MAX
 (9223372036854775807L)

	)

198 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

200 
	#INTPTR_MIN
 (-2147483647-1)

	)

201 
	#INTPTR_MAX
 (2147483647)

	)

202 
	#UINTPTR_MAX
 (4294967295U)

	)

207 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

209 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

212 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

218 #i‡
__WORDSIZE
 == 64

219 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

220 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

222 #i‡
__WORDSIZE32_PTRDIFF_LONG


223 
	#PTRDIFF_MIN
 (-2147483647L-1)

	)

224 
	#PTRDIFF_MAX
 (2147483647L)

	)

226 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

227 
	#PTRDIFF_MAX
 (2147483647)

	)

232 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

233 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

236 #i‡
__WORDSIZE
 == 64

237 
	#SIZE_MAX
 (18446744073709551615UL)

	)

239 #i‡
__WORDSIZE32_SIZE_ULONG


240 
	#SIZE_MAX
 (4294967295UL)

	)

242 
	#SIZE_MAX
 (4294967295U)

	)

247 #i‚de‡
WCHAR_MIN


249 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

250 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

254 
	#WINT_MIN
 (0u)

	)

255 
	#WINT_MAX
 (4294967295u)

	)

258 
	#INT8_C
(
c
Ë
	)
c

259 
	#INT16_C
(
c
Ë
	)
c

260 
	#INT32_C
(
c
Ë
	)
c

261 #i‡
__WORDSIZE
 == 64

262 
	#INT64_C
(
c
Ë¯## 
L


	)

264 
	#INT64_C
(
c
Ë¯## 
LL


	)

268 
	#UINT8_C
(
c
Ë
	)
c

269 
	#UINT16_C
(
c
Ë
	)
c

270 
	#UINT32_C
(
c
Ë¯## 
U


	)

271 #i‡
__WORDSIZE
 == 64

272 
	#UINT64_C
(
c
Ë¯## 
UL


	)

274 
	#UINT64_C
(
c
Ë¯## 
ULL


	)

278 #i‡
__WORDSIZE
 == 64

279 
	#INTMAX_C
(
c
Ë¯## 
L


	)

280 
	#UINTMAX_C
(
c
Ë¯## 
UL


	)

282 
	#INTMAX_C
(
c
Ë¯## 
LL


	)

283 
	#UINTMAX_C
(
c
Ë¯## 
ULL


	)

286 #i‡
__GLIBC_USE
 (
IEC_60559_BFP_EXT
)

288 
	#INT8_WIDTH
 8

	)

289 
	#UINT8_WIDTH
 8

	)

290 
	#INT16_WIDTH
 16

	)

291 
	#UINT16_WIDTH
 16

	)

292 
	#INT32_WIDTH
 32

	)

293 
	#UINT32_WIDTH
 32

	)

294 
	#INT64_WIDTH
 64

	)

295 
	#UINT64_WIDTH
 64

	)

297 
	#INT_LEAST8_WIDTH
 8

	)

298 
	#UINT_LEAST8_WIDTH
 8

	)

299 
	#INT_LEAST16_WIDTH
 16

	)

300 
	#UINT_LEAST16_WIDTH
 16

	)

301 
	#INT_LEAST32_WIDTH
 32

	)

302 
	#UINT_LEAST32_WIDTH
 32

	)

303 
	#INT_LEAST64_WIDTH
 64

	)

304 
	#UINT_LEAST64_WIDTH
 64

	)

306 
	#INT_FAST8_WIDTH
 8

	)

307 
	#UINT_FAST8_WIDTH
 8

	)

308 
	#INT_FAST16_WIDTH
 
__WORDSIZE


	)

309 
	#UINT_FAST16_WIDTH
 
__WORDSIZE


	)

310 
	#INT_FAST32_WIDTH
 
__WORDSIZE


	)

311 
	#UINT_FAST32_WIDTH
 
__WORDSIZE


	)

312 
	#INT_FAST64_WIDTH
 64

	)

313 
	#UINT_FAST64_WIDTH
 64

	)

315 
	#INTPTR_WIDTH
 
__WORDSIZE


	)

316 
	#UINTPTR_WIDTH
 
__WORDSIZE


	)

318 
	#INTMAX_WIDTH
 64

	)

319 
	#UINTMAX_WIDTH
 64

	)

321 
	#PTRDIFF_WIDTH
 
__WORDSIZE


	)

322 
	#SIG_ATOMIC_WIDTH
 32

	)

323 
	#SIZE_WIDTH
 
__WORDSIZE


	)

324 
	#WCHAR_WIDTH
 32

	)

325 
	#WINT_WIDTH
 32

	)

	@/usr/include/stdio.h

23 #i‚de‡
_STDIO_H


24 
	#_STDIO_H
 1

	)

26 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

27 
	~<bôs/libc-hódî-°¨t.h
>

29 
	g__BEGIN_DECLS


31 
	#__√ed_size_t


	)

32 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	~<bôs/ty≥s.h
>

36 
	~<bôs/ty≥s/__FILE.h
>

37 
	~<bôs/ty≥s/FILE.h
>

39 
	#_STDIO_USES_IOSTREAM


	)

41 
	~<bôs/libio.h
>

43 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


44 #ifde‡
__GNUC__


45 #i‚de‡
_VA_LIST_DEFINED


46 
_G_va_li°
 
	tva_li°
;

47 
	#_VA_LIST_DEFINED


	)

50 
	~<°d¨g.h
>

54 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


55 #i‚de‡
__off_t_deföed


56 #i‚de‡
__USE_FILE_OFFSET64


57 
__off_t
 
	toff_t
;

59 
__off64_t
 
	toff_t
;

61 
	#__off_t_deföed


	)

63 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


64 
__off64_t
 
	toff64_t
;

65 
	#__off64_t_deföed


	)

69 #ifde‡
__USE_XOPEN2K8


70 #i‚de‡
__ssize_t_deföed


71 
__ssize_t
 
	tssize_t
;

72 
	#__ssize_t_deföed


	)

77 #i‚de‡
__USE_FILE_OFFSET64


78 
_G_Âos_t
 
	tÂos_t
;

80 
_G_Âos64_t
 
	tÂos_t
;

82 #ifde‡
__USE_LARGEFILE64


83 
_G_Âos64_t
 
	tÂos64_t
;

87 
	#_IOFBF
 0

	)

88 
	#_IOLBF
 1

	)

89 
	#_IONBF
 2

	)

93 #i‚de‡
BUFSIZ


94 
	#BUFSIZ
 
_IO_BUFSIZ


	)

100 #i‚de‡
EOF


101 
	#EOF
 (-1)

	)

107 
	#SEEK_SET
 0

	)

108 
	#SEEK_CUR
 1

	)

109 
	#SEEK_END
 2

	)

110 #ifde‡
__USE_GNU


111 
	#SEEK_DATA
 3

	)

112 
	#SEEK_HOLE
 4

	)

116 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


118 
	#P_tmpdú
 "/tmp"

	)

131 
	~<bôs/°dio_lim.h
>

135 
_IO_FILE
 *
°dö
;

136 
_IO_FILE
 *
°dout
;

137 
_IO_FILE
 *
°dîr
;

139 
	#°dö
 
°dö


	)

140 
	#°dout
 
°dout


	)

141 
	#°dîr
 
°dîr


	)

144 
	$ªmove
 (c⁄° *
__fûíame
Ë
__THROW
;

146 
	$ª«me
 (c⁄° *
__ﬁd
, c⁄° *
__√w
Ë
__THROW
;

148 #ifde‡
__USE_ATFILE


150 
	$ª«mót
 (
__ﬁdfd
, c⁄° *
__ﬁd
, 
__√wfd
,

151 c⁄° *
__√w
Ë
__THROW
;

158 #i‚de‡
__USE_FILE_OFFSET64


159 
FILE
 *
	$tmpfûe
 (Ë
__wur
;

161 #ifde‡
__REDIRECT


162 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
Ë
__wur
;

164 
	#tmpfûe
 
tmpfûe64


	)

168 #ifde‡
__USE_LARGEFILE64


169 
FILE
 *
	$tmpfûe64
 (Ë
__wur
;

173 *
	$tm≤am
 (*
__s
Ë
__THROW
 
__wur
;

175 #ifde‡
__USE_MISC


178 *
	$tm≤am_r
 (*
__s
Ë
__THROW
 
__wur
;

182 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


190 *
	$ãm≤am
 (c⁄° *
__dú
, c⁄° *
__pfx
)

191 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

199 
	`f˛o£
 (
FILE
 *
__°ªam
);

204 
	`fÊush
 (
FILE
 *
__°ªam
);

206 #ifde‡
__USE_MISC


213 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

216 #ifde‡
__USE_GNU


223 
	`f˛o£Æl
 ();

227 #i‚de‡
__USE_FILE_OFFSET64


232 
FILE
 *
	$f›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

233 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

238 
FILE
 *
	$‰e›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

239 c⁄° *
__ª°ri˘
 
__modes
,

240 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

242 #ifde‡
__REDIRECT


243 
FILE
 *
	`__REDIRECT
 (
f›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

244 c⁄° *
__ª°ri˘
 
__modes
), 
f›í64
)

245 
__wur
;

246 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

247 c⁄° *
__ª°ri˘
 
__modes
,

248 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
)

249 
__wur
;

251 
	#f›í
 
f›í64


	)

252 
	#‰e›í
 
‰e›í64


	)

255 #ifde‡
__USE_LARGEFILE64


256 
FILE
 *
	$f›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

257 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

258 
FILE
 *
	$‰e›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

259 c⁄° *
__ª°ri˘
 
__modes
,

260 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

263 #ifdef 
__USE_POSIX


265 
FILE
 *
	$fd›í
 (
__fd
, c⁄° *
__modes
Ë
__THROW
 
__wur
;

268 #ifdef 
__USE_GNU


271 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

272 c⁄° *
__ª°ri˘
 
__modes
,

273 
_IO_cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW
 
__wur
;

276 #i‡
deföed
 
__USE_XOPEN2K8
 || 
	`__GLIBC_USE
 (
LIB_EXT2
)

278 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, c⁄° *
__modes
)

279 
__THROW
 
__wur
;

284 
FILE
 *
	$›í_mem°ªam
 (**
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
 
__wur
;

290 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

294 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

295 
__modes
, 
size_t
 
__n
Ë
__THROW
;

297 #ifdef 
__USE_MISC


300 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

301 
size_t
 
__size
Ë
__THROW
;

304 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

312 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

313 c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

318 
	`¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

320 
	$•rötf
 (*
__ª°ri˘
 
__s
,

321 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROWNL
;

327 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

328 
_G_va_li°
 
__¨g
);

333 
	`v¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
);

335 
	$v•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

336 
_G_va_li°
 
__¨g
Ë
__THROWNL
;

338 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_UNIX98


340 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

341 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

342 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

344 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

345 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

346 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

349 #i‡
	`__GLIBC_USE
 (
LIB_EXT2
)

352 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__f
,

353 
_G_va_li°
 
__¨g
)

354 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 0))Ë
__wur
;

355 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

356 c⁄° *
__ª°ri˘
 
__fmt
, ...)

357 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

358 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

359 c⁄° *
__ª°ri˘
 
__fmt
, ...)

360 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

363 #ifde‡
__USE_XOPEN2K8


365 
	$vd¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
,

366 
_G_va_li°
 
__¨g
)

367 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

368 
	$d¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, ...)

369 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

377 
	$fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

378 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

383 
	$sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

385 
	$ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

386 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

388 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

389 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

390 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

391 #ifde‡
__REDIRECT


395 
	`__REDIRECT
 (
fsˇnf
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

396 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

397 
__isoc99_fsˇnf
Ë
__wur
;

398 
	`__REDIRECT
 (
sˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

399 
__isoc99_sˇnf
Ë
__wur
;

400 
	`__REDIRECT_NTH
 (
ssˇnf
, (c⁄° *
__ª°ri˘
 
__s
,

401 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

402 
__isoc99_ssˇnf
);

404 
	$__isoc99_fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

405 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

406 
	$__isoc99_sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

407 
	$__isoc99_ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

408 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

409 
	#fsˇnf
 
__isoc99_fsˇnf


	)

410 
	#sˇnf
 
__isoc99_sˇnf


	)

411 
	#ssˇnf
 
__isoc99_ssˇnf


	)

415 #ifdef 
__USE_ISOC99


420 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

421 
_G_va_li°
 
__¨g
)

422 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

428 
	$vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

429 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

432 
	$vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

433 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

434 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

436 #i‡!
deföed
 
__USE_GNU
 \

437 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

438 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

439 #ifde‡
__REDIRECT


443 
	`__REDIRECT
 (
vfsˇnf
,

444 (
FILE
 *
__ª°ri˘
 
__s
,

445 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
),

446 
__isoc99_vfsˇnf
)

447 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

448 
	`__REDIRECT
 (
vsˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
,

449 
_G_va_li°
 
__¨g
), 
__isoc99_vsˇnf
)

450 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

451 
	`__REDIRECT_NTH
 (
vssˇnf
,

452 (c⁄° *
__ª°ri˘
 
__s
,

453 c⁄° *
__ª°ri˘
 
__f‹m©
,

454 
_G_va_li°
 
__¨g
), 
__isoc99_vssˇnf
)

455 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

457 
	$__isoc99_vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
,

458 c⁄° *
__ª°ri˘
 
__f‹m©
,

459 
_G_va_li°
 
__¨g
Ë
__wur
;

460 
	$__isoc99_vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
,

461 
_G_va_li°
 
__¨g
Ë
__wur
;

462 
	$__isoc99_vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

463 c⁄° *
__ª°ri˘
 
__f‹m©
,

464 
_G_va_li°
 
__¨g
Ë
__THROW
;

465 
	#vfsˇnf
 
__isoc99_vfsˇnf


	)

466 
	#vsˇnf
 
__isoc99_vsˇnf


	)

467 
	#vssˇnf
 
__isoc99_vssˇnf


	)

477 
	`fgëc
 (
FILE
 *
__°ªam
);

478 
	`gëc
 (
FILE
 *
__°ªam
);

484 
	`gëch¨
 ();

488 
	#gëc
(
_Â
Ë
	`_IO_gëc
 (_Â)

	)

490 #ifde‡
__USE_POSIX199506


495 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

496 
	`gëch¨_u∆ocked
 ();

499 #ifde‡
__USE_MISC


506 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

517 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

518 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

524 
	`putch¨
 (
__c
);

528 
	#putc
(
_ch
, 
_Â
Ë
	`_IO_putc
 (_ch, _Â)

	)

530 #ifde‡
__USE_MISC


537 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

540 #ifde‡
__USE_POSIX199506


545 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

546 
	`putch¨_u∆ocked
 (
__c
);

550 #i‡
deföed
 
__USE_MISC
 \

551 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

553 
	`gëw
 (
FILE
 *
__°ªam
);

556 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

564 *
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

565 
__wur
;

567 #i‡
	`__GLIBC_USE
 (
DEPRECATED_GETS
)

577 *
	$gës
 (*
__s
Ë
__wur
 
__©åibuã_dïªˇãd__
;

580 #ifde‡
__USE_GNU


587 *
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

588 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

592 #i‡
deföed
 
__USE_XOPEN2K8
 || 
	`__GLIBC_USE
 (
LIB_EXT2
)

603 
_IO_ssize_t
 
	$__gëdñim
 (**
__ª°ri˘
 
__löïå
,

604 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

605 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

606 
_IO_ssize_t
 
	$gëdñim
 (**
__ª°ri˘
 
__löïå
,

607 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

608 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

616 
_IO_ssize_t
 
	$gëlöe
 (**
__ª°ri˘
 
__löïå
,

617 
size_t
 *
__ª°ri˘
 
__n
,

618 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

626 
	`Âuts
 (c⁄° *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

632 
	`puts
 (c⁄° *
__s
);

639 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

646 
size_t
 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

647 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

652 
size_t
 
	`fwrôe
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

653 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
);

655 #ifde‡
__USE_GNU


662 
	`Âuts_u∆ocked
 (c⁄° *
__ª°ri˘
 
__s
,

663 
FILE
 *
__ª°ri˘
 
__°ªam
);

666 #ifde‡
__USE_MISC


673 
size_t
 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

674 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

675 
size_t
 
	`fwrôe_u∆ocked
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

676 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
);

684 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

689 
	$·ñl
 (
FILE
 *
__°ªam
Ë
__wur
;

694 
	`ªwöd
 (
FILE
 *
__°ªam
);

701 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


702 #i‚de‡
__USE_FILE_OFFSET64


707 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

712 
__off_t
 
	$·ñlo
 (
FILE
 *
__°ªam
Ë
__wur
;

714 #ifde‡
__REDIRECT


715 
	`__REDIRECT
 (
f£eko
,

716 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

717 
f£eko64
);

718 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

720 
	#f£eko
 
f£eko64


	)

721 
	#·ñlo
 
·ñlo64


	)

726 #i‚de‡
__USE_FILE_OFFSET64


731 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

736 
	`f£ços
 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
);

738 #ifde‡
__REDIRECT


739 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

740 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

741 
	`__REDIRECT
 (
f£ços
,

742 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
), 
f£ços64
);

744 
	#fgëpos
 
fgëpos64


	)

745 
	#f£ços
 
f£ços64


	)

749 #ifde‡
__USE_LARGEFILE64


750 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

751 
__off64_t
 
	$·ñlo64
 (
FILE
 *
__°ªam
Ë
__wur
;

752 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

753 
	`f£ços64
 (
FILE
 *
__°ªam
, c⁄° 
Âos64_t
 *
__pos
);

757 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

759 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

761 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

763 #ifde‡
__USE_MISC


765 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

766 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

767 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

775 
	`≥º‹
 (c⁄° *
__s
);

781 
	~<bôs/sys_îæi°.h
>

784 #ifdef 
__USE_POSIX


786 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

789 #ifde‡
__USE_MISC


791 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

795 #ifde‡
__USE_POSIX2


800 
FILE
 *
	$p›í
 (c⁄° *
__comm™d
, c⁄° *
__modes
Ë
__wur
;

806 
	`p˛o£
 (
FILE
 *
__°ªam
);

810 #ifdef 
__USE_POSIX


812 *
	$˘îmid
 (*
__s
Ë
__THROW
;

816 #i‡(
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
Ë|| deföed 
__USE_GNU


818 *
	`cu£rid
 (*
__s
);

822 #ifdef 
__USE_GNU


823 
ob°ack
;

826 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

827 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

828 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

829 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

830 c⁄° *
__ª°ri˘
 
__f‹m©
,

831 
_G_va_li°
 
__¨gs
)

832 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

836 #ifde‡
__USE_POSIX199506


840 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

844 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

847 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

850 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


853 
	~<bôs/gë›t_posix.h
>

858 #ifde‡
__USE_EXTERN_INLINES


859 
	~<bôs/°dio.h
>

861 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


862 
	~<bôs/°dio2.h
>

864 #ifde‡
__LDBL_COMPAT


865 
	~<bôs/°dio-ldbl.h
>

868 
__END_DECLS


	@/usr/include/stdlib.h

22 #i‚def 
_STDLIB_H


24 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

25 
	~<bôs/libc-hódî-°¨t.h
>

28 
	#__√ed_size_t


	)

29 
	#__√ed_wch¨_t


	)

30 
	#__√ed_NULL


	)

31 
	~<°ddef.h
>

33 
	g__BEGIN_DECLS


35 
	#_STDLIB_H
 1

	)

37 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
Ë&& !deföed 
_SYS_WAIT_H


39 
	~<bôs/waôÊags.h
>

40 
	~<bôs/waô°©us.h
>

43 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (°©us)

	)

44 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (°©us)

	)

45 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (°©us)

	)

46 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (°©us)

	)

47 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (°©us)

	)

48 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (°©us)

	)

49 #ifde‡
__WIFCONTINUED


50 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (°©us)

	)

55 
	~<bôs/Êﬂä.h
>

60 
	mquŸ
;

61 
	mªm
;

62 } 
	tdiv_t
;

65 #i‚de‡
__ldiv_t_deföed


68 
	mquŸ
;

69 
	mªm
;

70 } 
	tldiv_t
;

71 
	#__ldiv_t_deföed
 1

	)

74 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


76 
__exãnsi⁄__
 struct

78 
	mquŸ
;

79 
	mªm
;

80 } 
	tŒdiv_t
;

81 
	#__Œdiv_t_deföed
 1

	)

86 
	#RAND_MAX
 2147483647

	)

91 
	#EXIT_FAILURE
 1

	)

92 
	#EXIT_SUCCESS
 0

	)

96 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

97 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

101 
	$©of
 (c⁄° *
__≈å
)

102 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

104 
	$©oi
 (c⁄° *
__≈å
)

105 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

107 
	$©ﬁ
 (c⁄° *
__≈å
)

108 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

110 #ifde‡
__USE_ISOC99


112 
__exãnsi⁄__
 
	$©ﬁl
 (c⁄° *
__≈å
)

113 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

117 
	$°πod
 (c⁄° *
__ª°ri˘
 
__≈å
,

118 **
__ª°ri˘
 
__íd±r
)

119 
__THROW
 
	`__n⁄nuŒ
 ((1));

121 #ifdef 
__USE_ISOC99


123 
	$°πof
 (c⁄° *
__ª°ri˘
 
__≈å
,

124 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

126 
	$°πﬁd
 (c⁄° *
__ª°ri˘
 
__≈å
,

127 **
__ª°ri˘
 
__íd±r
)

128 
__THROW
 
	`__n⁄nuŒ
 ((1));

133 #i‡
__HAVE_FLOAT16
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

134 
_Flﬂt16
 
	$°πof16
 (c⁄° *
__ª°ri˘
 
__≈å
,

135 **
__ª°ri˘
 
__íd±r
)

136 
__THROW
 
	`__n⁄nuŒ
 ((1));

139 #i‡
__HAVE_FLOAT32
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

140 
_Flﬂt32
 
	$°πof32
 (c⁄° *
__ª°ri˘
 
__≈å
,

141 **
__ª°ri˘
 
__íd±r
)

142 
__THROW
 
	`__n⁄nuŒ
 ((1));

145 #i‡
__HAVE_FLOAT64
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

146 
_Flﬂt64
 
	$°πof64
 (c⁄° *
__ª°ri˘
 
__≈å
,

147 **
__ª°ri˘
 
__íd±r
)

148 
__THROW
 
	`__n⁄nuŒ
 ((1));

151 #i‡
__HAVE_FLOAT128
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

152 
_Flﬂt128
 
	$°πof128
 (c⁄° *
__ª°ri˘
 
__≈å
,

153 **
__ª°ri˘
 
__íd±r
)

154 
__THROW
 
	`__n⁄nuŒ
 ((1));

157 #i‡
__HAVE_FLOAT32X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

158 
_Flﬂt32x
 
	$°πof32x
 (c⁄° *
__ª°ri˘
 
__≈å
,

159 **
__ª°ri˘
 
__íd±r
)

160 
__THROW
 
	`__n⁄nuŒ
 ((1));

163 #i‡
__HAVE_FLOAT64X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

164 
_Flﬂt64x
 
	$°πof64x
 (c⁄° *
__ª°ri˘
 
__≈å
,

165 **
__ª°ri˘
 
__íd±r
)

166 
__THROW
 
	`__n⁄nuŒ
 ((1));

169 #i‡
__HAVE_FLOAT128X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

170 
_Flﬂt128x
 
	$°πof128x
 (c⁄° *
__ª°ri˘
 
__≈å
,

171 **
__ª°ri˘
 
__íd±r
)

172 
__THROW
 
	`__n⁄nuŒ
 ((1));

176 
	$°πﬁ
 (c⁄° *
__ª°ri˘
 
__≈å
,

177 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

178 
__THROW
 
	`__n⁄nuŒ
 ((1));

180 
	$°πoul
 (c⁄° *
__ª°ri˘
 
__≈å
,

181 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

182 
__THROW
 
	`__n⁄nuŒ
 ((1));

184 #ifde‡
__USE_MISC


186 
__exãnsi⁄__


187 
	$°πoq
 (c⁄° *
__ª°ri˘
 
__≈å
,

188 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

189 
__THROW
 
	`__n⁄nuŒ
 ((1));

191 
__exãnsi⁄__


192 
	$°πouq
 (c⁄° *
__ª°ri˘
 
__≈å
,

193 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

194 
__THROW
 
	`__n⁄nuŒ
 ((1));

197 #ifde‡
__USE_ISOC99


199 
__exãnsi⁄__


200 
	$°πﬁl
 (c⁄° *
__ª°ri˘
 
__≈å
,

201 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

202 
__THROW
 
	`__n⁄nuŒ
 ((1));

204 
__exãnsi⁄__


205 
	$°πouŒ
 (c⁄° *
__ª°ri˘
 
__≈å
,

206 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

207 
__THROW
 
	`__n⁄nuŒ
 ((1));

211 #i‡
	`__GLIBC_USE
 (
IEC_60559_BFP_EXT
)

212 
	$°r‰omd
 (*
__de°
, 
size_t
 
__size
, c⁄° *
__f‹m©
,

213 
__f
)

214 
__THROW
 
	`__n⁄nuŒ
 ((3));

216 
	$°r‰omf
 (*
__de°
, 
size_t
 
__size
, c⁄° *
__f‹m©
,

217 
__f
)

218 
__THROW
 
	`__n⁄nuŒ
 ((3));

220 
	$°r‰oml
 (*
__de°
, 
size_t
 
__size
, c⁄° *
__f‹m©
,

221 
__f
)

222 
__THROW
 
	`__n⁄nuŒ
 ((3));

225 #i‡
__HAVE_FLOAT16
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

226 
	$°r‰omf16
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

227 
_Flﬂt16
 
__f
)

228 
__THROW
 
	`__n⁄nuŒ
 ((3));

231 #i‡
__HAVE_FLOAT32
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

232 
	$°r‰omf32
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

233 
_Flﬂt32
 
__f
)

234 
__THROW
 
	`__n⁄nuŒ
 ((3));

237 #i‡
__HAVE_FLOAT64
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

238 
	$°r‰omf64
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

239 
_Flﬂt64
 
__f
)

240 
__THROW
 
	`__n⁄nuŒ
 ((3));

243 #i‡
__HAVE_FLOAT128
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

244 
	$°r‰omf128
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

245 
_Flﬂt128
 
__f
)

246 
__THROW
 
	`__n⁄nuŒ
 ((3));

249 #i‡
__HAVE_FLOAT32X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

250 
	$°r‰omf32x
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

251 
_Flﬂt32x
 
__f
)

252 
__THROW
 
	`__n⁄nuŒ
 ((3));

255 #i‡
__HAVE_FLOAT64X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

256 
	$°r‰omf64x
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

257 
_Flﬂt64x
 
__f
)

258 
__THROW
 
	`__n⁄nuŒ
 ((3));

261 #i‡
__HAVE_FLOAT128X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

262 
	$°r‰omf128x
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

263 
_Flﬂt128x
 
__f
)

264 
__THROW
 
	`__n⁄nuŒ
 ((3));

268 #ifde‡
__USE_GNU


272 
	~<bôs/ty≥s/loˇÀ_t.h
>

274 
	$°πﬁ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

275 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

276 
loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

278 
	$°πoul_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

279 **
__ª°ri˘
 
__íd±r
,

280 
__ba£
, 
loˇÀ_t
 
__loc
)

281 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

283 
__exãnsi⁄__


284 
	$°πﬁl_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

285 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

286 
loˇÀ_t
 
__loc
)

287 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

289 
__exãnsi⁄__


290 
	$°πouŒ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

291 **
__ª°ri˘
 
__íd±r
,

292 
__ba£
, 
loˇÀ_t
 
__loc
)

293 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

295 
	$°πod_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

296 **
__ª°ri˘
 
__íd±r
, 
loˇÀ_t
 
__loc
)

297 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

299 
	$°πof_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

300 **
__ª°ri˘
 
__íd±r
, 
loˇÀ_t
 
__loc
)

301 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

303 
	$°πﬁd_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

304 **
__ª°ri˘
 
__íd±r
,

305 
loˇÀ_t
 
__loc
)

306 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

308 #i‡
__HAVE_FLOAT16


309 
_Flﬂt16
 
	$°πof16_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

310 **
__ª°ri˘
 
__íd±r
,

311 
loˇÀ_t
 
__loc
)

312 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

315 #i‡
__HAVE_FLOAT32


316 
_Flﬂt32
 
	$°πof32_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

317 **
__ª°ri˘
 
__íd±r
,

318 
loˇÀ_t
 
__loc
)

319 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

322 #i‡
__HAVE_FLOAT64


323 
_Flﬂt64
 
	$°πof64_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

324 **
__ª°ri˘
 
__íd±r
,

325 
loˇÀ_t
 
__loc
)

326 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

329 #i‡
__HAVE_FLOAT128


330 
_Flﬂt128
 
	$°πof128_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

331 **
__ª°ri˘
 
__íd±r
,

332 
loˇÀ_t
 
__loc
)

333 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

336 #i‡
__HAVE_FLOAT32X


337 
_Flﬂt32x
 
	$°πof32x_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

338 **
__ª°ri˘
 
__íd±r
,

339 
loˇÀ_t
 
__loc
)

340 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

343 #i‡
__HAVE_FLOAT64X


344 
_Flﬂt64x
 
	$°πof64x_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

345 **
__ª°ri˘
 
__íd±r
,

346 
loˇÀ_t
 
__loc
)

347 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

350 #i‡
__HAVE_FLOAT128X


351 
_Flﬂt128x
 
	$°πof128x_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

352 **
__ª°ri˘
 
__íd±r
,

353 
loˇÀ_t
 
__loc
)

354 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

359 #ifde‡
__USE_EXTERN_INLINES


360 
__exã∫_ölöe
 

361 
	`__NTH
 (
	$©oi
 (c⁄° *
__≈å
))

363  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

364 
	}
}

365 
__exã∫_ölöe
 

366 
__NTH
 (
	$©ﬁ
 (c⁄° *
__≈å
))

368  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

369 
	}
}

371 #ifde‡
__USE_ISOC99


372 
__exãnsi⁄__
 
__exã∫_ölöe
 

373 
__NTH
 (
	$©ﬁl
 (c⁄° *
__≈å
))

375  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

376 
	}
}

381 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


385 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

388 
	$a64l
 (c⁄° *
__s
)

389 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

393 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


394 
	~<sys/ty≥s.h
>

401 
	$øndom
 (Ë
__THROW
;

404 
	$§™dom
 (
__£ed
Ë
__THROW
;

410 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

411 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

415 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

418 #ifde‡
__USE_MISC


423 
	søndom_d©a


425 
öt32_t
 *
Âå
;

426 
öt32_t
 *
Ωå
;

427 
öt32_t
 *
°©e
;

428 
ønd_ty≥
;

429 
ønd_deg
;

430 
ønd_£p
;

431 
öt32_t
 *
íd_±r
;

434 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

435 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

437 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

438 
__THROW
 
	`__n⁄nuŒ
 ((2));

440 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

441 
size_t
 
__°©ñí
,

442 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

443 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

445 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

446 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

447 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

453 
	$ønd
 (Ë
__THROW
;

455 
	$§™d
 (
__£ed
Ë
__THROW
;

457 #ifde‡
__USE_POSIX199506


459 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

463 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


467 
	$dønd48
 (Ë
__THROW
;

468 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

471 
	$Ã™d48
 (Ë
__THROW
;

472 
	$ƒ™d48
 (
__xsubi
[3])

473 
__THROW
 
	`__n⁄nuŒ
 ((1));

476 
	$mønd48
 (Ë
__THROW
;

477 
	$jønd48
 (
__xsubi
[3])

478 
__THROW
 
	`__n⁄nuŒ
 ((1));

481 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

482 *
	$£ed48
 (
__£ed16v
[3])

483 
__THROW
 
	`__n⁄nuŒ
 ((1));

484 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

486 #ifde‡
__USE_MISC


490 
	sdønd48_d©a


492 
__x
[3];

493 
__ﬁd_x
[3];

494 
__c
;

495 
__öô
;

496 
__exãnsi⁄__
 
__a
;

501 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

502 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

503 
	$î™d48_r
 (
__xsubi
[3],

504 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

505 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

508 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

509 *
__ª°ri˘
 
__ªsu…
)

510 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

511 
	$ƒ™d48_r
 (
__xsubi
[3],

512 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

513 *
__ª°ri˘
 
__ªsu…
)

514 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

517 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

518 *
__ª°ri˘
 
__ªsu…
)

519 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

520 
	$jønd48_r
 (
__xsubi
[3],

521 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

522 *
__ª°ri˘
 
__ªsu…
)

523 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

526 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

527 
__THROW
 
	`__n⁄nuŒ
 ((2));

529 
	$£ed48_r
 (
__£ed16v
[3],

530 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

532 
	$lc⁄g48_r
 (
__∑øm
[7],

533 
dønd48_d©a
 *
__buf„r
)

534 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

539 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

541 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

542 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

549 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

550 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

552 #ifde‡
__USE_GNU


558 *
	$ªÆloˇºay
 (*
__±r
, 
size_t
 
__nmemb
, size_à
__size
)

559 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

563 
	$‰ì
 (*
__±r
Ë
__THROW
;

565 #ifde‡
__USE_MISC


566 
	~<Æloˇ.h
>

569 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

570 || 
deföed
 
__USE_MISC


572 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

575 #ifde‡
__USE_XOPEN2K


577 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

578 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

581 #ifde‡
__USE_ISOC11


583 *
	$Æig√d_Æloc
 (
size_t
 
__Æignmít
, size_à
__size
)

584 
__THROW
 
__©åibuã_mÆloc__
 
	`__©åibuã_Æloc_size__
 ((2)Ë
__wur
;

588 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

592 
	$©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

594 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


596 #ifde‡
__˝lu•lus


597 "C++" 
	$©_quick_exô
 ((*
__func
) ())

598 
__THROW
 
	`__asm
 ("©_quick_exô"Ë
	`__n⁄nuŒ
 ((1));

600 
	$©_quick_exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

604 #ifdef 
__USE_MISC


607 
	$⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

608 
__THROW
 
	`__n⁄nuŒ
 ((1));

614 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

616 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


620 
	$quick_exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

623 #ifde‡
__USE_ISOC99


626 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

631 *
	$gëív
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

633 #ifde‡
__USE_GNU


636 *
	$£cuª_gëív
 (c⁄° *
__«me
)

637 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

640 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


644 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

647 #ifde‡
__USE_XOPEN2K


650 
	$£ãnv
 (c⁄° *
__«me
, c⁄° *
__vÆue
, 
__ª∂a˚
)

651 
__THROW
 
	`__n⁄nuŒ
 ((2));

654 
	$un£ãnv
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

657 #ifdef 
__USE_MISC


661 
	$˛óªnv
 (Ë
__THROW
;

665 #i‡
deföed
 
__USE_MISC
 \

666 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
)

672 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

675 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


684 #i‚de‡
__USE_FILE_OFFSET64


685 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

687 #ifde‡
__REDIRECT


688 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

689 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

691 
	#mk°emp
 
mk°emp64


	)

694 #ifde‡
__USE_LARGEFILE64


695 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

699 #ifde‡
__USE_MISC


706 #i‚de‡
__USE_FILE_OFFSET64


707 
	$mk°emps
 (*
__ãm∂©e
, 
__suffixÀn
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

709 #ifde‡
__REDIRECT


710 
	`__REDIRECT
 (
mk°emps
, (*
__ãm∂©e
, 
__suffixÀn
),

711 
mk°emps64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

713 
	#mk°emps
 
mk°emps64


	)

716 #ifde‡
__USE_LARGEFILE64


717 
	$mk°emps64
 (*
__ãm∂©e
, 
__suffixÀn
)

718 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

722 #ifde‡
__USE_XOPEN2K8


728 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

731 #ifde‡
__USE_GNU


738 #i‚de‡
__USE_FILE_OFFSET64


739 
	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

741 #ifde‡
__REDIRECT


742 
	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
), 
mko°emp64
)

743 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

745 
	#mko°emp
 
mko°emp64


	)

748 #ifde‡
__USE_LARGEFILE64


749 
	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

758 #i‚de‡
__USE_FILE_OFFSET64


759 
	$mko°emps
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

760 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

762 #ifde‡
__REDIRECT


763 
	`__REDIRECT
 (
mko°emps
, (*
__ãm∂©e
, 
__suffixÀn
,

764 
__Êags
), 
mko°emps64
)

765 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

767 
	#mko°emps
 
mko°emps64


	)

770 #ifde‡
__USE_LARGEFILE64


771 
	$mko°emps64
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

772 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

781 
	$sy°em
 (c⁄° *
__comm™d
Ë
__wur
;

784 #ifdef 
__USE_GNU


787 *
	$ˇn⁄iˇlize_fûe_«me
 (c⁄° *
__«me
)

788 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

791 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


797 *
	$ªÆ∑th
 (c⁄° *
__ª°ri˘
 
__«me
,

798 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

803 #i‚de‡
__COMPAR_FN_T


804 
	#__COMPAR_FN_T


	)

805 (*
	t__com∑r_‚_t
) (const *, const *);

807 #ifdef 
__USE_GNU


808 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

811 #ifde‡
__USE_GNU


812 (*
	t__com∑r_d_‚_t
) (const *, const *, *);

817 *
	$b£¨ch
 (c⁄° *
__key
, c⁄° *
__ba£
,

818 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

819 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

821 #ifde‡
__USE_EXTERN_INLINES


822 
	~<bôs/°dlib-b£¨ch.h
>

827 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

828 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

829 #ifde‡
__USE_GNU


830 
	$qs‹t_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

831 
__com∑r_d_‚_t
 
__com∑r
, *
__¨g
)

832 
	`__n⁄nuŒ
 ((1, 4));

837 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

838 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

840 #ifde‡
__USE_ISOC99


841 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

842 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

849 
div_t
 
	$div
 (
__numî
, 
__díom
)

850 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

851 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

852 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

854 #ifde‡
__USE_ISOC99


855 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

856 
__díom
)

857 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

861 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

862 || 
deföed
 
__USE_MISC


869 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

870 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

875 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

876 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

881 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

882 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

885 #ifde‡
__USE_MISC


887 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

888 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

889 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

890 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

891 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

892 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

893 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

894 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

899 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

900 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

901 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

902 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

903 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

904 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

906 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

907 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

908 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

909 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

910 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

911 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

912 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

913 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

919 
	$mbÀn
 (c⁄° *
__s
, 
size_t
 
__n
Ë
__THROW
;

922 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

923 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

926 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
;

930 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

931 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

933 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

934 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

935 
__THROW
;

938 #ifde‡
__USE_MISC


943 
	$Ωm©ch
 (c⁄° *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

947 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


954 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

955 *c⁄° *
__ª°ri˘
 
__tokís
,

956 **
__ª°ri˘
 
__vÆuï
)

957 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

961 #ifde‡
__USE_XOPEN


963 
	$£tkey
 (c⁄° *
__key
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

969 #ifde‡
__USE_XOPEN2KXSI


971 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

974 #ifde‡
__USE_XOPEN_EXTENDED


979 
	$gø¡±
 (
__fd
Ë
__THROW
;

983 
	$u∆ock±
 (
__fd
Ë
__THROW
;

988 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

991 #ifde‡
__USE_GNU


995 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

996 
__THROW
 
	`__n⁄nuŒ
 ((2));

999 
	`gë±
 ();

1002 #ifde‡
__USE_MISC


1006 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

1007 
__THROW
 
	`__n⁄nuŒ
 ((1));

1010 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K


1013 
	$ây¶Ÿ
 (Ë
__THROW
;

1016 
	~<bôs/°dlib-Êﬂt.h
>

1019 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


1020 
	~<bôs/°dlib.h
>

1022 #ifde‡
__LDBL_COMPAT


1023 
	~<bôs/°dlib-ldbl.h
>

1026 
__END_DECLS


	@/usr/include/string.h

22 #i‚def 
_STRING_H


23 
	#_STRING_H
 1

	)

25 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

26 
	~<bôs/libc-hódî-°¨t.h
>

28 
	g__BEGIN_DECLS


31 
	#__√ed_size_t


	)

32 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

36 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

37 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

42 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

43 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

46 *
	$memmove
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

47 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

52 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


53 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

54 
__c
, 
size_t
 
__n
)

55 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

60 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

63 
	$memcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

64 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

67 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


70 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

71 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

72 c⁄° *
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

73 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

75 #ifde‡
__OPTIMIZE__


76 
__exã∫_Æways_ölöe
 *

77 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


79  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

82 
__exã∫_Æways_ölöe
 const *

83 
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


85  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

88 
	}
}

90 *
	$memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

91 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

94 #ifde‡
__USE_GNU


97 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


98 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

99 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

100 "C++" c⁄° *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

101 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

103 *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

104 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

108 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


109 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

110 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

111 "C++" c⁄° *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

112 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

114 *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

115 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

121 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

122 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

124 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

125 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

126 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

129 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

130 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

132 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

133 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

136 
	$°rcmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

137 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

139 
	$°∫cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

140 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

143 
	$°rcﬁl
 (c⁄° *
__s1
, c⁄° *
__s2
)

144 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

146 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

147 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

148 
__THROW
 
	`__n⁄nuŒ
 ((2));

150 #ifde‡
__USE_XOPEN2K8


152 
	~<bôs/ty≥s/loˇÀ_t.h
>

155 
	$°rcﬁl_l
 (c⁄° *
__s1
, c⁄° *
__s2
, 
loˇÀ_t
 
__l
)

156 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

159 
size_t
 
	$°rx‰m_l
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
,

160 
loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

163 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8
 \

164 || 
	$__GLIBC_USE
 (
LIB_EXT2
))

166 *
	$°rdup
 (c⁄° *
__s
)

167 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

173 #i‡
deföed
 
__USE_XOPEN2K8
 || 
	`__GLIBC_USE
 (
LIB_EXT2
)

174 *
	$°∫dup
 (c⁄° *
__°rög
, 
size_t
 
__n
)

175 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

178 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


180 
	#°rdu∑
(
s
) \

181 (
__exãnsi⁄__
 \

183 c⁄° *
__ﬁd
 = (
s
); \

184 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

185 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

186 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

187 
	}
}))

	)

190 
	#°∫du∑
(
s
, 
n
) \

191 (
__exãnsi⁄__
 \

193 c⁄° *
__ﬁd
 = (
s
); \

194 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

195 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

196 
__√w
[
__Àn
] = '\0'; \

197 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

198 }))

	)

202 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


205 *
°rchr
 (*
__s
, 
__c
)

206 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

207 c⁄° *
°rchr
 (c⁄° *
__s
, 
__c
)

208 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

210 #ifde‡
__OPTIMIZE__


211 
__exã∫_Æways_ölöe
 *

212 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


214  
__buûtö_°rchr
 (
__s
, 
__c
);

217 
__exã∫_Æways_ölöe
 const *

218 
°rchr
 (c⁄° *
__s
, 
__c
Ë
	g__THROW


220  
__buûtö_°rchr
 (
__s
, 
__c
);

225 *
	$°rchr
 (c⁄° *
__s
, 
__c
)

226 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

229 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


232 *
	`°ºchr
 (*
__s
, 
__c
)

233 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

234 c⁄° *
	`°ºchr
 (c⁄° *
__s
, 
__c
)

235 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

237 #ifde‡
__OPTIMIZE__


238 
__exã∫_Æways_ölöe
 *

239 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


241  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

244 
__exã∫_Æways_ölöe
 const *

245 
	`°ºchr
 (c⁄° *
__s
, 
__c
Ë
__THROW


247  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

250 
	}
}

252 *
	$°ºchr
 (c⁄° *
__s
, 
__c
)

253 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

256 #ifde‡
__USE_GNU


259 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


260 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

261 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

262 "C++" c⁄° *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

263 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

265 *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

266 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

272 
size_t
 
	$°rc•n
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

273 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

276 
size_t
 
	$°r•n
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

277 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

279 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


282 *
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
)

283 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

284 c⁄° *
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

285 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

287 #ifde‡
__OPTIMIZE__


288 
__exã∫_Æways_ölöe
 *

289 
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
Ë
__THROW


291  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

294 
__exã∫_Æways_ölöe
 const *

295 
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
Ë
__THROW


297  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

300 
	}
}

302 *
	$°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

303 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

306 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


309 *
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

310 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

311 c⁄° *
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

312 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

314 #ifde‡
__OPTIMIZE__


315 
__exã∫_Æways_ölöe
 *

316 
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


318  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

321 
__exã∫_Æways_ölöe
 const *

322 
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


324  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

327 
	}
}

329 *
	$°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

330 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

335 *
	$°πok
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
)

336 
__THROW
 
	`__n⁄nuŒ
 ((2));

340 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

341 c⁄° *
__ª°ri˘
 
__dñim
,

342 **
__ª°ri˘
 
__ßve_±r
)

343 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

344 #ifde‡
__USE_POSIX


345 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
,

346 **
__ª°ri˘
 
__ßve_±r
)

347 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

350 #ifde‡
__USE_GNU


352 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


353 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

354 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

355 "C++" c⁄° *
	$°rˇ£°r
 (c⁄° *
__hay°ack
,

356 c⁄° *
__√edÀ
)

357 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

359 *
	$°rˇ£°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

360 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

364 #ifde‡
__USE_GNU


368 *
	$memmem
 (c⁄° *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

369 c⁄° *
__√edÀ
, 
size_t
 
__√edÀÀn
)

370 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3));

374 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

375 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

376 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

377 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

378 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

379 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

384 
size_t
 
	$°æí
 (c⁄° *
__s
)

385 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

387 #ifdef 
__USE_XOPEN2K8


390 
size_t
 
	$°∫Àn
 (c⁄° *
__°rög
, 
size_t
 
__maxÀn
)

391 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

396 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

397 #ifde‡
__USE_XOPEN2K


405 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


408 #ifde‡
__REDIRECT_NTH


409 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

410 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

411 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2));

413 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

414 
__THROW
 
	`__n⁄nuŒ
 ((2));

415 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

420 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

421 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

425 #ifde‡
__USE_XOPEN2K8


427 *
	$°ªº‹_l
 (
__î∫um
, 
loˇÀ_t
 
__l
Ë
__THROW
;

430 #ifde‡
__USE_MISC


431 
	~<°rögs.h
>

435 
	$ex∂icô_bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

439 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

440 c⁄° *
__ª°ri˘
 
__dñim
)

441 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

444 #ifdef 
__USE_XOPEN2K8


446 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

449 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

450 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

451 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

452 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

456 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

457 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

458 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

459 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

460 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

461 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

464 #ifdef 
__USE_GNU


466 
	$°rvîscmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

467 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

470 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

473 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

475 #i‚de‡
ba£«me


480 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


481 "C++" *
	$ba£«me
 (*
__fûíame
)

482 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

483 "C++" c⁄° *
	$ba£«me
 (c⁄° *
__fûíame
)

484 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

486 *
	$ba£«me
 (c⁄° *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

491 #i‡
	`__GNUC_PREREQ
 (3,4)

492 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


494 
	~<bôs/°rög_f‹tifõd.h
>

498 
__END_DECLS


	@/usr/include/strings.h

18 #i‚def 
_STRINGS_H


19 
	#_STRINGS_H
 1

	)

21 
	~<„©uªs.h
>

22 
	#__√ed_size_t


	)

23 
	~<°ddef.h
>

26 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

27 
	#__CORRECT_ISO_CPP_STRINGS_H_PROTO


	)

30 
	g__BEGIN_DECLS


32 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8


34 
	$bcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

35 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

38 
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__n
)

39 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

42 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

45 #ifde‡
__CORRECT_ISO_CPP_STRINGS_H_PROTO


48 *
	`ödex
 (*
__s
, 
__c
)

49 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

50 c⁄° *
	`ödex
 (c⁄° *
__s
, 
__c
)

51 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

53 #i‡
deföed
 
__OPTIMIZE__


54 
__exã∫_Æways_ölöe
 *

55 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


57  
	`__buûtö_ödex
 (
__s
, 
__c
);

60 
__exã∫_Æways_ölöe
 const *

61 
	`ödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


63  
	`__buûtö_ödex
 (
__s
, 
__c
);

66 
	}
}

68 *
	$ödex
 (c⁄° *
__s
, 
__c
)

69 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

73 #ifde‡
__CORRECT_ISO_CPP_STRINGS_H_PROTO


76 *
	`rödex
 (*
__s
, 
__c
)

77 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

78 c⁄° *
	`rödex
 (c⁄° *
__s
, 
__c
)

79 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

81 #i‡
deföed
 
__OPTIMIZE__


82 
__exã∫_Æways_ölöe
 *

83 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


85  
	`__buûtö_rödex
 (
__s
, 
__c
);

88 
__exã∫_Æways_ölöe
 const *

89 
	`rödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


91  
	`__buûtö_rödex
 (
__s
, 
__c
);

94 
	}
}

96 *
	$rödex
 (c⁄° *
__s
, 
__c
)

97 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

101 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8
 || deföed 
__USE_XOPEN2K8XSI


104 
	$ffs
 (
__i
Ë
__THROW
 
__©åibuã_c⁄°__
;

109 #ifdef 
__USE_MISC


110 
	$ff¶
 (
__l
Ë
__THROW
 
__©åibuã_c⁄°__
;

111 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

112 
__THROW
 
__©åibuã_c⁄°__
;

116 
	$°rˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

117 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

120 
	$°∫ˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

121 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

123 #ifdef 
__USE_XOPEN2K8


125 
	~<bôs/ty≥s/loˇÀ_t.h
>

128 
	$°rˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
, 
loˇÀ_t
 
__loc
)

129 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

133 
	$°∫ˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

134 
size_t
 
__n
, 
loˇÀ_t
 
__loc
)

135 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

138 
__END_DECLS


140 #i‡
	`__GNUC_PREREQ
 (3,4Ë&& 
__USE_FORTIFY_LEVEL
 > 0 \

141 && 
deföed
 
__f‹tify_fun˘i⁄


143 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8


144 
	~<bôs/°rögs_f‹tifõd.h
>

	@/usr/include/time.h

22 #i‚def 
_TIME_H


23 
	#_TIME_H
 1

	)

25 
	~<„©uªs.h
>

27 
	#__√ed_size_t


	)

28 
	#__√ed_NULL


	)

29 
	~<°ddef.h
>

33 
	~<bôs/time.h
>

37 
	~<bôs/ty≥s/˛ock_t.h
>

38 
	~<bôs/ty≥s/time_t.h
>

39 
	~<bôs/ty≥s/°ru˘_tm.h
>

41 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_ISOC11


42 
	~<bôs/ty≥s/°ru˘_time•ec.h
>

45 #ifde‡
__USE_POSIX199309


46 
	~<bôs/ty≥s/˛ockid_t.h
>

47 
	~<bôs/ty≥s/timî_t.h
>

48 
	~<bôs/ty≥s/°ru˘_ôimî•ec.h
>

49 
	gsigevít
;

52 #ifde‡
__USE_XOPEN2K


53 #i‚de‡
__pid_t_deföed


54 
__pid_t
 
	tpid_t
;

55 
	#__pid_t_deföed


	)

59 #ifde‡
__USE_XOPEN2K8


60 
	~<bôs/ty≥s/loˇÀ_t.h
>

63 #ifde‡
__USE_ISOC11


65 
	#TIME_UTC
 1

	)

68 
__BEGIN_DECLS


72 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

75 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

78 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

79 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

82 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

88 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

89 c⁄° *
__ª°ri˘
 
__f‹m©
,

90 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

92 #ifde‡
__USE_XOPEN


95 *
	$°Ωtime
 (c⁄° *
__ª°ri˘
 
__s
,

96 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

97 
__THROW
;

100 #ifde‡
__USE_XOPEN2K8


104 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

105 c⁄° *
__ª°ri˘
 
__f‹m©
,

106 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

107 
loˇÀ_t
 
__loc
Ë
__THROW
;

110 #ifde‡
__USE_GNU


111 *
	$°Ωtime_l
 (c⁄° *
__ª°ri˘
 
__s
,

112 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

113 
loˇÀ_t
 
__loc
Ë
__THROW
;

119 
tm
 *
	$gmtime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

123 
tm
 *
	$loˇ…ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

125 #ifde‡
__USE_POSIX


128 
tm
 *
	$gmtime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

129 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

133 
tm
 *
	$loˇ…ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

134 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

139 *
	$as˘ime
 (c⁄° 
tm
 *
__ç
Ë
__THROW
;

142 *
	$˘ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

144 #ifde‡
__USE_POSIX


149 *
	$as˘ime_r
 (c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

150 *
__ª°ri˘
 
__buf
Ë
__THROW
;

153 *
	$˘ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

154 *
__ª°ri˘
 
__buf
Ë
__THROW
;

159 *
__tz«me
[2];

160 
__daylight
;

161 
__timez⁄e
;

164 #ifdef 
__USE_POSIX


166 *
tz«me
[2];

170 
	$tz£t
 (Ë
__THROW
;

173 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


174 
daylight
;

175 
timez⁄e
;

178 #ifde‡
__USE_MISC


181 
	$°ime
 (c⁄° 
time_t
 *
__whí
Ë
__THROW
;

187 
	#__i¶óp
(
yór
) \

188 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

191 #ifde‡
__USE_MISC


196 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

199 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

202 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

206 #ifde‡
__USE_POSIX199309


211 
	`«no¶ìp
 (c⁄° 
time•ec
 *
__ªque°ed_time
,

212 
time•ec
 *
__ªmaöög
);

216 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

219 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

222 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, c⁄° 
time•ec
 *
__ç
)

223 
__THROW
;

225 #ifde‡
__USE_XOPEN2K


230 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

231 c⁄° 
time•ec
 *
__ªq
,

232 
time•ec
 *
__ªm
);

235 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

240 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

241 
sigevít
 *
__ª°ri˘
 
__evp
,

242 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

245 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

248 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

249 c⁄° 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

250 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

253 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

254 
__THROW
;

257 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

261 #ifde‡
__USE_ISOC11


263 
	$time•ec_gë
 (
time•ec
 *
__ts
, 
__ba£
)

264 
__THROW
 
	`__n⁄nuŒ
 ((1));

268 #ifde‡
__USE_XOPEN_EXTENDED


280 
gëd©e_îr
;

289 
tm
 *
	`gëd©e
 (c⁄° *
__°rög
);

292 #ifde‡
__USE_GNU


303 
	`gëd©e_r
 (c⁄° *
__ª°ri˘
 
__°rög
,

304 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

307 
__END_DECLS


	@/usr/include/unistd.h

22 #i‚def 
_UNISTD_H


23 
	#_UNISTD_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


32 #ifde‡
__USE_XOPEN2K8


34 
	#_POSIX_VERSION
 200809L

	)

35 #ñi‡
deföed
 
__USE_XOPEN2K


37 
	#_POSIX_VERSION
 200112L

	)

38 #ñi‡
deföed
 
__USE_POSIX199506


40 
	#_POSIX_VERSION
 199506L

	)

41 #ñi‡
deföed
 
__USE_POSIX199309


43 
	#_POSIX_VERSION
 199309L

	)

46 
	#_POSIX_VERSION
 199009L

	)

52 #ifde‡
__USE_XOPEN2K8


53 
	#__POSIX2_THIS_VERSION
 200809L

	)

55 #ñi‡
deföed
 
__USE_XOPEN2K


57 
	#__POSIX2_THIS_VERSION
 200112L

	)

58 #ñi‡
deföed
 
__USE_POSIX199506


60 
	#__POSIX2_THIS_VERSION
 199506L

	)

63 
	#__POSIX2_THIS_VERSION
 199209L

	)

67 
	#_POSIX2_VERSION
 
__POSIX2_THIS_VERSION


	)

70 
	#_POSIX2_C_VERSION
 
__POSIX2_THIS_VERSION


	)

74 
	#_POSIX2_C_BIND
 
__POSIX2_THIS_VERSION


	)

78 
	#_POSIX2_C_DEV
 
__POSIX2_THIS_VERSION


	)

82 
	#_POSIX2_SW_DEV
 
__POSIX2_THIS_VERSION


	)

86 
	#_POSIX2_LOCALEDEF
 
__POSIX2_THIS_VERSION


	)

89 #ifde‡
__USE_XOPEN2K8


90 
	#_XOPEN_VERSION
 700

	)

91 #ñi‡
deföed
 
__USE_XOPEN2K


92 
	#_XOPEN_VERSION
 600

	)

93 #ñi‡
deföed
 
__USE_UNIX98


94 
	#_XOPEN_VERSION
 500

	)

96 
	#_XOPEN_VERSION
 4

	)

100 
	#_XOPEN_XCU_VERSION
 4

	)

103 
	#_XOPEN_XPG2
 1

	)

104 
	#_XOPEN_XPG3
 1

	)

105 
	#_XOPEN_XPG4
 1

	)

108 
	#_XOPEN_UNIX
 1

	)

111 
	#_XOPEN_CRYPT
 1

	)

115 
	#_XOPEN_ENH_I18N
 1

	)

118 
	#_XOPEN_LEGACY
 1

	)

205 
	~<bôs/posix_›t.h
>

208 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


209 
	~<bôs/ívú⁄míts.h
>

213 
	#STDIN_FILENO
 0

	)

214 
	#STDOUT_FILENO
 1

	)

215 
	#STDERR_FILENO
 2

	)

220 
	~<bôs/ty≥s.h
>

222 #i‚def 
__ssize_t_deföed


223 
__ssize_t
 
	tssize_t
;

224 
	#__ssize_t_deföed


	)

227 
	#__√ed_size_t


	)

228 
	#__√ed_NULL


	)

229 
	~<°ddef.h
>

231 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


234 #i‚de‡
__gid_t_deföed


235 
__gid_t
 
	tgid_t
;

236 
	#__gid_t_deföed


	)

239 #i‚de‡
__uid_t_deföed


240 
__uid_t
 
	tuid_t
;

241 
	#__uid_t_deföed


	)

244 #i‚de‡
__off_t_deföed


245 #i‚de‡
__USE_FILE_OFFSET64


246 
__off_t
 
	toff_t
;

248 
__off64_t
 
	toff_t
;

250 
	#__off_t_deföed


	)

252 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


253 
__off64_t
 
	toff64_t
;

254 
	#__off64_t_deföed


	)

257 #i‚de‡
__u£c⁄ds_t_deföed


258 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

259 
	#__u£c⁄ds_t_deföed


	)

262 #i‚de‡
__pid_t_deföed


263 
__pid_t
 
	tpid_t
;

264 
	#__pid_t_deföed


	)

268 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


269 #i‚de‡
__öçå_t_deföed


270 
__öçå_t
 
	töçå_t
;

271 
	#__öçå_t_deföed


	)

275 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


276 #i‚de‡
__sockÀn_t_deföed


277 
__sockÀn_t
 
	tsockÀn_t
;

278 
	#__sockÀn_t_deföed


	)

284 
	#R_OK
 4

	)

285 
	#W_OK
 2

	)

286 
	#X_OK
 1

	)

287 
	#F_OK
 0

	)

290 
	$ac˚ss
 (c⁄° *
__«me
, 
__ty≥
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

292 #ifde‡
__USE_GNU


295 
	$euidac˚ss
 (c⁄° *
__«me
, 
__ty≥
)

296 
__THROW
 
	`__n⁄nuŒ
 ((1));

299 
	$óc˚ss
 (c⁄° *
__«me
, 
__ty≥
)

300 
__THROW
 
	`__n⁄nuŒ
 ((1));

303 #ifde‡
__USE_ATFILE


307 
	$Ác˚sßt
 (
__fd
, c⁄° *
__fûe
, 
__ty≥
, 
__Êag
)

308 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

313 #i‚def 
_STDIO_H


314 
	#SEEK_SET
 0

	)

315 
	#SEEK_CUR
 1

	)

316 
	#SEEK_END
 2

	)

317 #ifde‡
__USE_GNU


318 
	#SEEK_DATA
 3

	)

319 
	#SEEK_HOLE
 4

	)

323 #i‡
deföed
 
__USE_MISC
 && !deföed 
L_SET


325 
	#L_SET
 
SEEK_SET


	)

326 
	#L_INCR
 
SEEK_CUR


	)

327 
	#L_XTND
 
SEEK_END


	)

336 #i‚de‡
__USE_FILE_OFFSET64


337 
__off_t
 
	$l£ek
 (
__fd
, 
__off_t
 
__off£t
, 
__whí˚
Ë
__THROW
;

339 #ifde‡
__REDIRECT_NTH


340 
__off64_t
 
	`__REDIRECT_NTH
 (
l£ek
,

341 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
),

342 
l£ek64
);

344 
	#l£ek
 
l£ek64


	)

347 #ifde‡
__USE_LARGEFILE64


348 
__off64_t
 
	$l£ek64
 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
)

349 
__THROW
;

356 
	`˛o£
 (
__fd
);

363 
ssize_t
 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
Ë
__wur
;

369 
ssize_t
 
	$wrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
Ë
__wur
;

371 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


372 #i‚de‡
__USE_FILE_OFFSET64


379 
ssize_t
 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

380 
__off_t
 
__off£t
Ë
__wur
;

387 
ssize_t
 
	$pwrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

388 
__off_t
 
__off£t
Ë
__wur
;

390 #ifde‡
__REDIRECT


391 
ssize_t
 
	`__REDIRECT
 (
¥ód
, (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

392 
__off64_t
 
__off£t
),

393 
¥ód64
Ë
__wur
;

394 
ssize_t
 
	`__REDIRECT
 (
pwrôe
, (
__fd
, c⁄° *
__buf
,

395 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
),

396 
pwrôe64
Ë
__wur
;

398 
	#¥ód
 
¥ód64


	)

399 
	#pwrôe
 
pwrôe64


	)

403 #ifde‡
__USE_LARGEFILE64


407 
ssize_t
 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

408 
__off64_t
 
__off£t
Ë
__wur
;

411 
ssize_t
 
	$pwrôe64
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

412 
__off64_t
 
__off£t
Ë
__wur
;

420 
	$pùe
 (
__pùedes
[2]Ë
__THROW
 
__wur
;

422 #ifde‡
__USE_GNU


425 
	$pùe2
 (
__pùedes
[2], 
__Êags
Ë
__THROW
 
__wur
;

435 
	$Æ¨m
 (
__£c⁄ds
Ë
__THROW
;

447 
	`¶ìp
 (
__£c⁄ds
);

449 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

450 || 
deföed
 
__USE_MISC


455 
__u£c⁄ds_t
 
	$uÆ¨m
 (
__u£c⁄ds_t
 
__vÆue
, __u£c⁄ds_à
__öãrvÆ
)

456 
__THROW
;

463 
	`u¶ìp
 (
__u£c⁄ds_t
 
__u£c⁄ds
);

472 
	`∑u£
 ();

476 
	$chown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

477 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

479 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


481 
	$fchown
 (
__fd
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
Ë
__THROW
 
__wur
;

486 
	$lchown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

487 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

491 #ifde‡
__USE_ATFILE


494 
	$fchow«t
 (
__fd
, c⁄° *
__fûe
, 
__uid_t
 
__ow√r
,

495 
__gid_t
 
__group
, 
__Êag
)

496 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

500 
	$chdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

502 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


504 
	$fchdú
 (
__fd
Ë
__THROW
 
__wur
;

514 *
	$gëcwd
 (*
__buf
, 
size_t
 
__size
Ë
__THROW
 
__wur
;

516 #ifdef 
__USE_GNU


520 *
	$gë_cuºít_dú_«me
 (Ë
__THROW
;

523 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

524 || 
deföed
 
__USE_MISC


528 *
	$gëwd
 (*
__buf
)

529 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
;

534 
	$dup
 (
__fd
Ë
__THROW
 
__wur
;

537 
	$dup2
 (
__fd
, 
__fd2
Ë
__THROW
;

539 #ifde‡
__USE_GNU


542 
	$dup3
 (
__fd
, 
__fd2
, 
__Êags
Ë
__THROW
;

546 **
__ívú⁄
;

547 #ifde‡
__USE_GNU


548 **
ívú⁄
;

554 
	$execve
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[],

555 *c⁄° 
__ívp
[]Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

557 #ifde‡
__USE_XOPEN2K8


560 
	$„xecve
 (
__fd
, *c⁄° 
__¨gv
[], *c⁄° 
__ívp
[])

561 
__THROW
 
	`__n⁄nuŒ
 ((2));

566 
	$execv
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[])

567 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

571 
	$exe˛e
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

572 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

576 
	$exe˛
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

577 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

581 
	$execvp
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[])

582 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

587 
	$exe˛p
 (c⁄° *
__fûe
, c⁄° *
__¨g
, ...)

588 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

590 #ifde‡
__USE_GNU


593 
	$execv≥
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[],

594 *c⁄° 
__ívp
[])

595 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

599 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


601 
	$ni˚
 (
__öc
Ë
__THROW
 
__wur
;

606 
	$_exô
 (
__°©us
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

612 
	~<bôs/c⁄‚ame.h
>

615 
	$∑thc⁄f
 (c⁄° *
__∑th
, 
__«me
)

616 
__THROW
 
	`__n⁄nuŒ
 ((1));

619 
	$Â©hc⁄f
 (
__fd
, 
__«me
Ë
__THROW
;

622 
	$sysc⁄f
 (
__«me
Ë
__THROW
;

624 #ifdef 
__USE_POSIX2


626 
size_t
 
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

631 
__pid_t
 
	$gëpid
 (Ë
__THROW
;

634 
__pid_t
 
	$gëµid
 (Ë
__THROW
;

637 
__pid_t
 
	$gëpgΩ
 (Ë
__THROW
;

640 
__pid_t
 
	$__gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

641 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


642 
__pid_t
 
	$gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

649 
	$£çgid
 (
__pid_t
 
__pid
, __pid_à
__pgid
Ë
__THROW
;

651 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


663 
	$£çgΩ
 (Ë
__THROW
;

670 
__pid_t
 
	$£tsid
 (Ë
__THROW
;

672 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


674 
__pid_t
 
	$gësid
 (
__pid_t
 
__pid
Ë
__THROW
;

678 
__uid_t
 
	$gëuid
 (Ë
__THROW
;

681 
__uid_t
 
	$gëeuid
 (Ë
__THROW
;

684 
__gid_t
 
	$gëgid
 (Ë
__THROW
;

687 
__gid_t
 
	$gëegid
 (Ë
__THROW
;

692 
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]Ë
__THROW
 
__wur
;

694 #ifdef 
__USE_GNU


696 
	$group_membî
 (
__gid_t
 
__gid
Ë
__THROW
;

703 
	$£tuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

705 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


708 
	$£åeuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
Ë
__THROW
 
__wur
;

711 #ifde‡
__USE_XOPEN2K


713 
	$£ãuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

720 
	$£tgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

722 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


725 
	$£åegid
 (
__gid_t
 
__rgid
, __gid_à
__egid
Ë
__THROW
 
__wur
;

728 #ifde‡
__USE_XOPEN2K


730 
	$£ãgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

733 #ifde‡
__USE_GNU


736 
	$gëªsuid
 (
__uid_t
 *
__ruid
, __uid_à*
__euid
, __uid_à*
__suid
)

737 
__THROW
;

741 
	$gëªsgid
 (
__gid_t
 *
__rgid
, __gid_à*
__egid
, __gid_à*
__sgid
)

742 
__THROW
;

746 
	$£åesuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
, __uid_à
__suid
)

747 
__THROW
 
__wur
;

751 
	$£åesgid
 (
__gid_t
 
__rgid
, __gid_à
__egid
, __gid_à
__sgid
)

752 
__THROW
 
__wur
;

759 
__pid_t
 
	$f‹k
 (Ë
__THROWNL
;

761 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

762 || 
deföed
 
__USE_MISC


767 
__pid_t
 
	$vf‹k
 (Ë
__THROW
;

773 *
	$ây«me
 (
__fd
Ë
__THROW
;

777 
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

778 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

782 
	$ißây
 (
__fd
Ë
__THROW
;

784 #ifde‡
__USE_MISC


787 
	$ây¶Ÿ
 (Ë
__THROW
;

792 
	$lök
 (c⁄° *
__‰om
, c⁄° *
__to
)

793 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

795 #ifde‡
__USE_ATFILE


798 
	$lök©
 (
__‰omfd
, c⁄° *
__‰om
, 
__tofd
,

799 c⁄° *
__to
, 
__Êags
)

800 
__THROW
 
	`__n⁄nuŒ
 ((2, 4)Ë
__wur
;

803 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


805 
	$symlök
 (c⁄° *
__‰om
, c⁄° *
__to
)

806 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

811 
ssize_t
 
	$ªadlök
 (c⁄° *
__ª°ri˘
 
__∑th
,

812 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

813 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

816 #ifde‡
__USE_ATFILE


818 
	$symlök©
 (c⁄° *
__‰om
, 
__tofd
,

819 c⁄° *
__to
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

822 
ssize_t
 
	$ªadlök©
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

823 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

824 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

828 
	$u∆ök
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

830 #ifde‡
__USE_ATFILE


832 
	$u∆ök©
 (
__fd
, c⁄° *
__«me
, 
__Êag
)

833 
__THROW
 
	`__n⁄nuŒ
 ((2));

837 
	$rmdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

841 
__pid_t
 
	$tcgëpgΩ
 (
__fd
Ë
__THROW
;

844 
	$tc£çgΩ
 (
__fd
, 
__pid_t
 
__pgΩ_id
Ë
__THROW
;

851 *
	`gëlogö
 ();

852 #ifde‡
__USE_POSIX199506


859 
	$gëlogö_r
 (*
__«me
, 
size_t
 
__«me_Àn
Ë
	`__n⁄nuŒ
 ((1));

862 #ifdef 
__USE_MISC


864 
	$£éogö
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

868 #ifdef 
__USE_POSIX2


872 
	~<bôs/gë›t_posix.h
>

876 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


880 
	$gëho°«me
 (*
__«me
, 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

884 #i‡
deföed
 
__USE_MISC


887 
	$£tho°«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

888 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

892 
	$£tho°id
 (
__id
Ë
__THROW
 
__wur
;

898 
	$gëdomaö«me
 (*
__«me
, 
size_t
 
__Àn
)

899 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

900 
	$£tdomaö«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

901 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

907 
	$vh™gup
 (Ë
__THROW
;

910 
	$ªvoke
 (c⁄° *
__fûe
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

918 
	$¥ofû
 (*
__ßm∂e_buf„r
, 
size_t
 
__size
,

919 
size_t
 
__off£t
, 
__sˇÀ
)

920 
__THROW
 
	`__n⁄nuŒ
 ((1));

926 
	$ac˘
 (c⁄° *
__«me
Ë
__THROW
;

930 *
	$gëu£rshñl
 (Ë
__THROW
;

931 
	$ídu£rshñl
 (Ë
__THROW
;

932 
	$£tu£rshñl
 (Ë
__THROW
;

938 
	$d´m⁄
 (
__nochdú
, 
__no˛o£
Ë
__THROW
 
__wur
;

942 #i‡
deföed
 
__USE_MISC
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

945 
	$chroŸ
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

949 *
	$gë∑ss
 (c⁄° *
__¥om±
Ë
	`__n⁄nuŒ
 ((1));

957 
	`fsync
 (
__fd
);

960 #ifde‡
__USE_GNU


963 
	$syncfs
 (
__fd
Ë
__THROW
;

967 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


970 
	`gëho°id
 ();

973 
	$sync
 (Ë
__THROW
;

976 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K


979 
	$gë∑gesize
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

984 
	$gëdèbÀsize
 (Ë
__THROW
;

990 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


993 #i‚de‡
__USE_FILE_OFFSET64


994 
	$åunˇã
 (c⁄° *
__fûe
, 
__off_t
 
__Àngth
)

995 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

997 #ifde‡
__REDIRECT_NTH


998 
	`__REDIRECT_NTH
 (
åunˇã
,

999 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
),

1000 
åunˇã64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1002 
	#åunˇã
 
åunˇã64


	)

1005 #ifde‡
__USE_LARGEFILE64


1006 
	$åunˇã64
 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
)

1007 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1012 #i‡
deföed
 
__USE_POSIX199309
 \

1013 || 
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


1016 #i‚de‡
__USE_FILE_OFFSET64


1017 
	$·runˇã
 (
__fd
, 
__off_t
 
__Àngth
Ë
__THROW
 
__wur
;

1019 #ifde‡
__REDIRECT_NTH


1020 
	`__REDIRECT_NTH
 (
·runˇã
, (
__fd
, 
__off64_t
 
__Àngth
),

1021 
·runˇã64
Ë
__wur
;

1023 
	#·runˇã
 
·runˇã64


	)

1026 #ifde‡
__USE_LARGEFILE64


1027 
	$·runˇã64
 (
__fd
, 
__off64_t
 
__Àngth
Ë
__THROW
 
__wur
;

1033 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

1034 || 
deföed
 
__USE_MISC


1038 
	$brk
 (*
__addr
Ë
__THROW
 
__wur
;

1044 *
	$sbrk
 (
öçå_t
 
__dñè
Ë
__THROW
;

1048 #ifde‡
__USE_MISC


1059 
	$sysˇŒ
 (
__sy¢o
, ...Ë
__THROW
;

1064 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
Ë&& !deföed 
F_LOCK


1076 
	#F_ULOCK
 0

	)

1077 
	#F_LOCK
 1

	)

1078 
	#F_TLOCK
 2

	)

1079 
	#F_TEST
 3

	)

1081 #i‚de‡
__USE_FILE_OFFSET64


1082 
	$lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
Ë
__wur
;

1084 #ifde‡
__REDIRECT


1085 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
),

1086 
lockf64
Ë
__wur
;

1088 
	#lockf
 
lockf64


	)

1091 #ifde‡
__USE_LARGEFILE64


1092 
	$lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
Ë
__wur
;

1097 #ifde‡
__USE_GNU


1102 
	#TEMP_FAILURE_RETRY
(
ex¥essi⁄
) \

1103 (
__exãnsi⁄__
 \

1104 ({ 
__ªsu…
; \

1105 dÿ
__ªsu…
 = (Ë(
ex¥essi⁄
); \

1106 
__ªsu…
 =-1L && 
î∫o
 =
EINTR
); \

1107 
__ªsu…
; 
	}
}))

	)

1110 
ssize_t
 
c›y_fûe_ønge
 (
__öfd
, 
__off64_t
 *
__pöoff
,

1111 
__outfd
, 
__off64_t
 *
__poutoff
,

1112 
size_t
 
__Àngth
, 
__Êags
);

1115 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


1118 
fd©async
 (
__fûdes
);

1124 #ifdef 
__USE_XOPEN


1126 *
	$¸y±
 (c⁄° *
__key
, c⁄° *
__ß…
)

1127 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1131 
	$í¸y±
 (*
__glibc_block
, 
__edÊag
)

1132 
__THROW
 
	`__n⁄nuŒ
 ((1));

1139 
	$swab
 (c⁄° *
__ª°ri˘
 
__‰om
, *__ª°ri˘ 
__to
,

1140 
ssize_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1147 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K


1149 *
	$˘îmid
 (*
__s
Ë
__THROW
;

1152 *
	`cu£rid
 (*
__s
);

1158 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_XOPEN2K


1159 
	$±hªad_©f‹k
 ((*
__¥ï¨e
) (),

1160 (*
__∑ª¡
) (),

1161 (*
__chûd
Ë()Ë
__THROW
;

1164 #ifde‡
__USE_MISC


1167 
	$gëíå›y
 (*
__buf„r
, 
size_t
 
__Àngth
Ë
__wur
;

1171 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


1172 
	~<bôs/uni°d.h
>

1175 
__END_DECLS


	@/usr/include/alloca.h

18 #i‚def 
_ALLOCA_H


19 
	#_ALLOCA_H
 1

	)

21 
	~<„©uªs.h
>

23 
	#__√ed_size_t


	)

24 
	~<°ddef.h
>

26 
	g__BEGIN_DECLS


29 #unde‡
Æloˇ


32 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

34 #ifdef 
__GNUC__


35 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

38 
__END_DECLS


	@/usr/include/endian.h

18 #i‚def 
_ENDIAN_H


19 
	#_ENDIAN_H
 1

	)

21 
	~<„©uªs.h
>

31 
	#__LITTLE_ENDIAN
 1234

	)

32 
	#__BIG_ENDIAN
 4321

	)

33 
	#__PDP_ENDIAN
 3412

	)

36 
	~<bôs/ídün.h
>

40 #i‚de‡
__FLOAT_WORD_ORDER


41 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

44 #ifdef 
__USE_MISC


45 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

46 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

47 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

48 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

51 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


52 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

53 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


54 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

58 #i‡
deföed
 
__USE_MISC
 && !deföed 
__ASSEMBLER__


60 
	~<bôs/byãsw≠.h
>

61 
	~<bôs/uöä-idítôy.h
>

63 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


64 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

65 
	#htﬁe16
(
x
Ë
	`__uöt16_idítôy
 (x)

	)

66 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

67 
	#À16toh
(
x
Ë
	`__uöt16_idítôy
 (x)

	)

69 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

70 
	#htﬁe32
(
x
Ë
	`__uöt32_idítôy
 (x)

	)

71 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

72 
	#À32toh
(
x
Ë
	`__uöt32_idítôy
 (x)

	)

74 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

75 
	#htﬁe64
(
x
Ë
	`__uöt64_idítôy
 (x)

	)

76 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

77 
	#À64toh
(
x
Ë
	`__uöt64_idítôy
 (x)

	)

80 
	#htobe16
(
x
Ë
	`__uöt16_idítôy
 (x)

	)

81 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

82 
	#be16toh
(
x
Ë
	`__uöt16_idítôy
 (x)

	)

83 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

85 
	#htobe32
(
x
Ë
	`__uöt32_idítôy
 (x)

	)

86 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

87 
	#be32toh
(
x
Ë
	`__uöt32_idítôy
 (x)

	)

88 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

90 
	#htobe64
(
x
Ë
	`__uöt64_idítôy
 (x)

	)

91 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

92 
	#be64toh
(
x
Ë
	`__uöt64_idítôy
 (x)

	)

93 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/features.h

18 #i‚def 
_FEATURES_H


19 
	#_FEATURES_H
 1

	)

119 #unde‡
__USE_ISOC11


120 #unde‡
__USE_ISOC99


121 #unde‡
__USE_ISOC95


122 #unde‡
__USE_ISOCXX11


123 #unde‡
__USE_POSIX


124 #unde‡
__USE_POSIX2


125 #unde‡
__USE_POSIX199309


126 #unde‡
__USE_POSIX199506


127 #unde‡
__USE_XOPEN


128 #unde‡
__USE_XOPEN_EXTENDED


129 #unde‡
__USE_UNIX98


130 #unde‡
__USE_XOPEN2K


131 #unde‡
__USE_XOPEN2KXSI


132 #unde‡
__USE_XOPEN2K8


133 #unde‡
__USE_XOPEN2K8XSI


134 #unde‡
__USE_LARGEFILE


135 #unde‡
__USE_LARGEFILE64


136 #unde‡
__USE_FILE_OFFSET64


137 #unde‡
__USE_MISC


138 #unde‡
__USE_ATFILE


139 #unde‡
__USE_GNU


140 #unde‡
__USE_FORTIFY_LEVEL


141 #unde‡
__KERNEL_STRICT_NAMES


142 #unde‡
__GLIBC_USE_DEPRECATED_GETS


146 #i‚de‡
_LOOSE_KERNEL_NAMES


147 
	#__KERNEL_STRICT_NAMES


	)

157 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


158 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

159 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

161 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

168 #i‡
deföed
 
__˛™g_maj‹__
 && deföed 
__˛™g_mö‹__


169 
	#__glibc_˛™g_¥îeq
(
maj
, 
mö
) \

170 ((
__˛™g_maj‹__
 << 16Ë+ 
__˛™g_mö‹__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

172 
	#__glibc_˛™g_¥îeq
(
maj
, 
mö
Ë0

	)

176 
	#__GLIBC_USE
(
F
Ë
__GLIBC_USE_
 ## 
	)
F

182 #i‡(
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE
) \

183 && !
deföed
 
	g_DEFAULT_SOURCE


185 #unde‡
_DEFAULT_SOURCE


186 
	#_DEFAULT_SOURCE
 1

	)

190 #ifde‡
_GNU_SOURCE


191 #unde‡
_ISOC95_SOURCE


192 
	#_ISOC95_SOURCE
 1

	)

193 #unde‡
_ISOC99_SOURCE


194 
	#_ISOC99_SOURCE
 1

	)

195 #unde‡
_ISOC11_SOURCE


196 
	#_ISOC11_SOURCE
 1

	)

197 #unde‡
_POSIX_SOURCE


198 
	#_POSIX_SOURCE
 1

	)

199 #unde‡
_POSIX_C_SOURCE


200 
	#_POSIX_C_SOURCE
 200809L

	)

201 #unde‡
_XOPEN_SOURCE


202 
	#_XOPEN_SOURCE
 700

	)

203 #unde‡
_XOPEN_SOURCE_EXTENDED


204 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

205 #unde‡
_LARGEFILE64_SOURCE


206 
	#_LARGEFILE64_SOURCE
 1

	)

207 #unde‡
_DEFAULT_SOURCE


208 
	#_DEFAULT_SOURCE
 1

	)

209 #unde‡
_ATFILE_SOURCE


210 
	#_ATFILE_SOURCE
 1

	)

215 #i‡(
deföed
 
_DEFAULT_SOURCE
 \

216 || (!
deföed
 
	g__STRICT_ANSI__
 \

217 && !
deföed
 
	g_ISOC99_SOURCE
 \

218 && !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 \

219 && !
deföed
 
	g_XOPEN_SOURCE
))

220 #unde‡
_DEFAULT_SOURCE


221 
	#_DEFAULT_SOURCE
 1

	)

225 #i‡(
deföed
 
_ISOC11_SOURCE
 \

226 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 201112L))

227 
	#__USE_ISOC11
 1

	)

231 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

232 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

233 
	#__USE_ISOC99
 1

	)

237 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

238 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

239 
	#__USE_ISOC95
 1

	)

242 #ifde‡
__˝lu•lus


244 #i‡
__˝lu•lus
 >= 201703L

245 
	#__USE_ISOC11
 1

	)

249 #i‡
__˝lu•lus
 >201103L || 
deföed
 
__GXX_EXPERIMENTAL_CXX0X__


250 
	#__USE_ISOCXX11
 1

	)

251 
	#__USE_ISOC99
 1

	)

258 #ifde‡
_DEFAULT_SOURCE


259 #i‡!
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE


260 
	#__USE_POSIX_IMPLICITLY
 1

	)

262 #unde‡
_POSIX_SOURCE


263 
	#_POSIX_SOURCE
 1

	)

264 #unde‡
_POSIX_C_SOURCE


265 
	#_POSIX_C_SOURCE
 200809L

	)

268 #i‡((!
deföed
 
__STRICT_ANSI__
 \

269 || (
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) >= 500)) \

270 && !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

271 
	#_POSIX_SOURCE
 1

	)

272 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

273 
	#_POSIX_C_SOURCE
 2

	)

274 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

275 
	#_POSIX_C_SOURCE
 199506L

	)

276 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

277 
	#_POSIX_C_SOURCE
 200112L

	)

279 
	#_POSIX_C_SOURCE
 200809L

	)

281 
	#__USE_POSIX_IMPLICITLY
 1

	)

290 #i‡((!
deföed
 
_POSIX_C_SOURCE
 || (_POSIX_C_SOURCE - 0) < 199506L) \

291 && (
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE
))

292 
	#_POSIX_SOURCE
 1

	)

293 #unde‡
_POSIX_C_SOURCE


294 
	#_POSIX_C_SOURCE
 199506L

	)

297 #i‡(
deföed
 
_POSIX_SOURCE
 \

298 || (
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >= 1) \

299 || 
deföed
 
_XOPEN_SOURCE
)

300 
	#__USE_POSIX
 1

	)

303 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


304 
	#__USE_POSIX2
 1

	)

307 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199309L

308 
	#__USE_POSIX199309
 1

	)

311 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199506L

312 
	#__USE_POSIX199506
 1

	)

315 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200112L

316 
	#__USE_XOPEN2K
 1

	)

317 #unde‡
__USE_ISOC95


318 
	#__USE_ISOC95
 1

	)

319 #unde‡
__USE_ISOC99


320 
	#__USE_ISOC99
 1

	)

323 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200809L

324 
	#__USE_XOPEN2K8
 1

	)

325 #unde‡
_ATFILE_SOURCE


326 
	#_ATFILE_SOURCE
 1

	)

329 #ifdef 
_XOPEN_SOURCE


330 
	#__USE_XOPEN
 1

	)

331 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

332 
	#__USE_XOPEN_EXTENDED
 1

	)

333 
	#__USE_UNIX98
 1

	)

334 #unde‡
_LARGEFILE_SOURCE


335 
	#_LARGEFILE_SOURCE
 1

	)

336 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

337 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

338 
	#__USE_XOPEN2K8
 1

	)

339 
	#__USE_XOPEN2K8XSI
 1

	)

341 
	#__USE_XOPEN2K
 1

	)

342 
	#__USE_XOPEN2KXSI
 1

	)

343 #unde‡
__USE_ISOC95


344 
	#__USE_ISOC95
 1

	)

345 #unde‡
__USE_ISOC99


346 
	#__USE_ISOC99
 1

	)

349 #ifde‡
_XOPEN_SOURCE_EXTENDED


350 
	#__USE_XOPEN_EXTENDED
 1

	)

355 #ifde‡
_LARGEFILE_SOURCE


356 
	#__USE_LARGEFILE
 1

	)

359 #ifde‡
_LARGEFILE64_SOURCE


360 
	#__USE_LARGEFILE64
 1

	)

363 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

364 
	#__USE_FILE_OFFSET64
 1

	)

367 #i‡
deföed
 
_DEFAULT_SOURCE


368 
	#__USE_MISC
 1

	)

371 #ifdef 
_ATFILE_SOURCE


372 
	#__USE_ATFILE
 1

	)

375 #ifdef 
_GNU_SOURCE


376 
	#__USE_GNU
 1

	)

379 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

380 && 
__GNUC_PREREQ
 (4, 1Ë&& 
deföed
 
	g__OPTIMIZE__
 && __OPTIMIZE__ > 0

381 #i‡
_FORTIFY_SOURCE
 > 1

382 
	#__USE_FORTIFY_LEVEL
 2

	)

384 
	#__USE_FORTIFY_LEVEL
 1

	)

387 
	#__USE_FORTIFY_LEVEL
 0

	)

394 #i‡
deföed
 
__˝lu•lus
 ? __˝lu•lu†>201402L : deföed 
__USE_ISOC11


395 
	#__GLIBC_USE_DEPRECATED_GETS
 0

	)

397 
	#__GLIBC_USE_DEPRECATED_GETS
 1

	)

402 
	~<°dc-¥edef.h
>

410 #unde‡
__GNU_LIBRARY__


411 
	#__GNU_LIBRARY__
 6

	)

415 
	#__GLIBC__
 2

	)

416 
	#__GLIBC_MINOR__
 27

	)

418 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

419 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

422 #i‚de‡
__ASSEMBLER__


423 #i‚de‡
_SYS_CDEFS_H


424 
	~<sys/cdefs.h
>

429 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


430 
	#__USE_LARGEFILE
 1

	)

431 
	#__USE_LARGEFILE64
 1

	)

437 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

438 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

439 && 
deföed
 
	g__exã∫_ölöe


440 
	#__USE_EXTERN_INLINES
 1

	)

448 
	~<gnu/°ubs.h
>

	@/usr/include/math.h

23 #i‚def 
_MATH_H


24 
	#_MATH_H
 1

	)

26 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

27 
	~<bôs/libc-hódî-°¨t.h
>

29 #i‡
deföed
 
log
 && deföed 
__GNUC__


30 #w¨nög 
A
 
ma¸o
 
ˇŒed
 
log
 
was
 
Æªady
 
deföed
 
whí
 <
m©h
.
h
> wa†
ö˛uded
.

31 #w¨nög 
This
 
wûl
 
ˇu£
 
compû©i⁄
 
¥obÀms
.

34 
	g__BEGIN_DECLS


37 
	~<bôs/ty≥s.h
>

40 
	~<bôs/m©h-ve˘‹.h
>

43 
	~<bôs/Êﬂä.h
>

47 #i‡
__GNUC_PREREQ
 (3, 3)

48 
	#HUGE_VAL
 (
	`__buûtö_huge_vÆ
 ())

	)

55 
	#HUGE_VAL
 1e10000

	)

57 #ifde‡
__USE_ISOC99


58 #i‡
__GNUC_PREREQ
 (3, 3)

59 
	#HUGE_VALF
 (
	`__buûtö_huge_vÆf
 ())

	)

60 
	#HUGE_VALL
 (
	`__buûtö_huge_vÆl
 ())

	)

62 
	#HUGE_VALF
 1e10000f

	)

63 
	#HUGE_VALL
 1e10000L

	)

66 #i‡
__HAVE_FLOAT16
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

67 
	#HUGE_VAL_F16
 (
	`__buûtö_huge_vÆf16
 ())

	)

69 #i‡
__HAVE_FLOAT32
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

70 
	#HUGE_VAL_F32
 (
	`__buûtö_huge_vÆf32
 ())

	)

72 #i‡
__HAVE_FLOAT64
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

73 
	#HUGE_VAL_F64
 (
	`__buûtö_huge_vÆf64
 ())

	)

75 #i‡
__HAVE_FLOAT128
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

76 
	#HUGE_VAL_F128
 (
	`__buûtö_huge_vÆf128
 ())

	)

78 #i‡
__HAVE_FLOAT32X
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

79 
	#HUGE_VAL_F32X
 (
	`__buûtö_huge_vÆf32x
 ())

	)

81 #i‡
__HAVE_FLOAT64X
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

82 
	#HUGE_VAL_F64X
 (
	`__buûtö_huge_vÆf64x
 ())

	)

84 #i‡
__HAVE_FLOAT128X
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

85 
	#HUGE_VAL_F128X
 (
	`__buûtö_huge_vÆf128x
 ())

	)

88 #ifde‡
__USE_ISOC99


90 #i‡
__GNUC_PREREQ
 (3, 3)

91 
	#INFINITY
 (
	`__buûtö_öff
 ())

	)

93 
	#INFINITY
 
HUGE_VALF


	)

97 #i‡
__GNUC_PREREQ
 (3, 3)

98 
	#NAN
 (
	`__buûtö_«nf
 (""))

	)

103 
	#NAN
 (0.0‡/ 0.0f)

	)

107 #i‡
__GLIBC_USE
 (
IEC_60559_BFP_EXT
)

109 #i‡
__GNUC_PREREQ
 (3, 3)

110 
	#SNANF
 (
	`__buûtö_«nsf
 (""))

	)

111 
	#SNAN
 (
	`__buûtö_«ns
 (""))

	)

112 
	#SNANL
 (
	`__buûtö_«n¶
 (""))

	)

115 #i‡
__HAVE_FLOAT16
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

116 
	#SNANF16
 (
	`__buûtö_«nsf16
 (""))

	)

118 #i‡
__HAVE_FLOAT32
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

119 
	#SNANF32
 (
	`__buûtö_«nsf32
 (""))

	)

121 #i‡
__HAVE_FLOAT64
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

122 
	#SNANF64
 (
	`__buûtö_«nsf64
 (""))

	)

124 #i‡
__HAVE_FLOAT128
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

125 
	#SNANF128
 (
	`__buûtö_«nsf128
 (""))

	)

127 #i‡
__HAVE_FLOAT32X
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

128 
	#SNANF32X
 (
	`__buûtö_«nsf32x
 (""))

	)

130 #i‡
__HAVE_FLOAT64X
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

131 
	#SNANF64X
 (
	`__buûtö_«nsf64x
 (""))

	)

133 #i‡
__HAVE_FLOAT128X
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

134 
	#SNANF128X
 (
	`__buûtö_«nsf128x
 (""))

	)

138 
	~<bôs/Êt-evÆ-mëhod.h
>

140 #ifde‡
__USE_ISOC99


148 #i‡
__GLIBC_FLT_EVAL_METHOD
 == 0 || __GLIBC_FLT_EVAL_METHOD == 16

149 
	tÊﬂt_t
;

150 
	tdoubÀ_t
;

151 #ñi‡
__GLIBC_FLT_EVAL_METHOD
 == 1

152 
	tÊﬂt_t
;

153 
	tdoubÀ_t
;

154 #ñi‡
__GLIBC_FLT_EVAL_METHOD
 == 2

155 
	tÊﬂt_t
;

156 
	tdoubÀ_t
;

157 #ñi‡
__GLIBC_FLT_EVAL_METHOD
 == 32

158 
_Flﬂt32
 
	tÊﬂt_t
;

159 
	tdoubÀ_t
;

160 #ñi‡
__GLIBC_FLT_EVAL_METHOD
 == 33

161 
_Flﬂt32x
 
	tÊﬂt_t
;

162 
_Flﬂt32x
 
	tdoubÀ_t
;

163 #ñi‡
__GLIBC_FLT_EVAL_METHOD
 == 64

164 
_Flﬂt64
 
	tÊﬂt_t
;

165 
_Flﬂt64
 
	tdoubÀ_t
;

166 #ñi‡
__GLIBC_FLT_EVAL_METHOD
 == 65

167 
_Flﬂt64x
 
	tÊﬂt_t
;

168 
_Flﬂt64x
 
	tdoubÀ_t
;

169 #ñi‡
__GLIBC_FLT_EVAL_METHOD
 == 128

170 
_Flﬂt128
 
	tÊﬂt_t
;

171 
_Flﬂt128
 
	tdoubÀ_t
;

172 #ñi‡
__GLIBC_FLT_EVAL_METHOD
 == 129

173 
_Flﬂt128x
 
	tÊﬂt_t
;

174 
_Flﬂt128x
 
	tdoubÀ_t
;

190 
	~<bôs/Â-logb.h
>

191 #ifde‡
__USE_ISOC99


192 #i‡
__FP_LOGB0_IS_MIN


193 
	#FP_ILOGB0
 (-2147483647 - 1)

	)

195 
	#FP_ILOGB0
 (-2147483647)

	)

197 #i‡
__FP_LOGBNAN_IS_MIN


198 
	#FP_ILOGBNAN
 (-2147483647 - 1)

	)

200 
	#FP_ILOGBNAN
 2147483647

	)

203 #i‡
__GLIBC_USE
 (
IEC_60559_BFP_EXT
)

204 #i‡
__WORDSIZE
 == 32

205 
	#__FP_LONG_MAX
 0x7fffffffL

	)

207 
	#__FP_LONG_MAX
 0x7fffffffffffffffL

	)

209 #i‡
__FP_LOGB0_IS_MIN


210 
	#FP_LLOGB0
 (-
__FP_LONG_MAX
 - 1)

	)

212 
	#FP_LLOGB0
 (-
__FP_LONG_MAX
)

	)

214 #i‡
__FP_LOGBNAN_IS_MIN


215 
	#FP_LLOGBNAN
 (-
__FP_LONG_MAX
 - 1)

	)

217 
	#FP_LLOGBNAN
 
__FP_LONG_MAX


	)

233 
	~<bôs/Â-Á°.h
>

235 #i‡
__GLIBC_USE
 (
IEC_60559_BFP_EXT
)

239 
	mFP_INT_UPWARD
 =

240 
	#FP_INT_UPWARD
 0

	)

241 
FP_INT_UPWARD
,

242 
	mFP_INT_DOWNWARD
 =

243 
	#FP_INT_DOWNWARD
 1

	)

244 
FP_INT_DOWNWARD
,

245 
	mFP_INT_TOWARDZERO
 =

246 
	#FP_INT_TOWARDZERO
 2

	)

247 
FP_INT_TOWARDZERO
,

248 
	mFP_INT_TONEARESTFROMZERO
 =

249 
	#FP_INT_TONEARESTFROMZERO
 3

	)

250 
FP_INT_TONEARESTFROMZERO
,

251 
	mFP_INT_TONEAREST
 =

252 
	#FP_INT_TONEAREST
 4

	)

253 
FP_INT_TONEAREST
,

262 
	#__SIMD_DECL
(
fun˘i⁄
Ë
	`__CONCAT
 (
__DECL_SIMD_
, fun˘i⁄)

	)

264 
	#__MATHCALL_VEC
(
fun˘i⁄
, 
suffix
, 
¨gs
) \

265 
	`__SIMD_DECL
 (
	`__MATH_PRECNAME
 (
fun˘i⁄
, 
suffix
)) \

266 
	`__MATHCALL
 (
fun˘i⁄
, 
suffix
, 
¨gs
)

	)

268 
	#__MATHDECL_VEC
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

269 
	`__SIMD_DECL
 (
	`__MATH_PRECNAME
 (
fun˘i⁄
, 
suffix
)) \

270 
	`__MATHDECL
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
)

	)

272 
	#__MATHCALL
(
fun˘i⁄
,
suffix
, 
¨gs
) \

273 
	`__MATHDECL
 (
_MdoubÀ_
,
fun˘i⁄
,
suffix
, 
¨gs
)

	)

274 
	#__MATHDECL
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

275 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
); \

276 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
),
suffix
, 
¨gs
)

	)

277 
	#__MATHCALLX
(
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
) \

278 
	`__MATHDECLX
 (
_MdoubÀ_
,
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
)

	)

279 
	#__MATHDECLX
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
) \

280 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
Ë
	`__©åibuã__
 (
©åib
); \

281 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
),
suffix
, 
¨gs
Ë
	`__©åibuã__
 (
©åib
)

	)

282 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

283 
ty≥
 
	`__MATH_PRECNAME
(
fun˘i⁄
,
suffix
Ë
¨gs
 
__THROW


	)

285 
	#_MdoubÀ_
 

	)

286 
	#__MATH_PRECNAME
(
«me
,
r
Ë
	`__CONCAT
“ame,r)

	)

287 
	#__MATH_DECLARING_DOUBLE
 1

	)

288 
	#__MATH_DECLARING_FLOATN
 0

	)

289 
	~<bôs/m©hˇŒs-hñ≥r-fun˘i⁄s.h
>

290 
	~<bôs/m©hˇŒs.h
>

291 #unde‡
_MdoubÀ_


292 #unde‡
__MATH_PRECNAME


293 #unde‡
__MATH_DECLARING_DOUBLE


294 #unde‡
__MATH_DECLARING_FLOATN


296 #ifde‡
__USE_ISOC99


302 
	#_MdoubÀ_
 

	)

303 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f
##
	)
r

304 
	#__MATH_DECLARING_DOUBLE
 0

	)

305 
	#__MATH_DECLARING_FLOATN
 0

	)

306 
	~<bôs/m©hˇŒs-hñ≥r-fun˘i⁄s.h
>

307 
	~<bôs/m©hˇŒs.h
>

308 #unde‡
_MdoubÀ_


309 #unde‡
__MATH_PRECNAME


310 #unde‡
__MATH_DECLARING_DOUBLE


311 #unde‡
__MATH_DECLARING_FLOATN


313 #i‡!(
deföed
 
__NO_LONG_DOUBLE_MATH
 && deföed 
_LIBC
) \

314 || 
deföed
 
__LDBL_COMPAT
 \

315 || 
deföed
 
_LIBC_TEST


316 #ifde‡
__LDBL_COMPAT


318 #ifde‡
__USE_ISOC99


319 
	$__∆dbl_√xâow¨df
 (
__x
, 
__y
)

320 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

321 #ifde‡
__REDIRECT_NTH


322 
	`__REDIRECT_NTH
 (
√xâow¨df
, (
__x
, 
__y
),

323 
__∆dbl_√xâow¨df
)

324 
	`__©åibuã__
 ((
__c⁄°__
));

325 
	`__REDIRECT_NTH
 (
√xâow¨d
, (
__x
, 
__y
),

326 
√xè·î
Ë
	`__©åibuã__
 ((
__c⁄°__
));

327 
	`__REDIRECT_NTH
 (
√xâow¨dl
,

328 (
__x
, 
__y
),

329 
√xè·î
Ë
	`__©åibuã__
 ((
__c⁄°__
));

333 #unde‡
__MATHDECL_1


334 
	#__MATHDECL_2
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
Æüs
) \

335 
ty≥
 
	`__REDIRECT_NTH
(
	`__MATH_PRECNAME
(
fun˘i⁄
,
suffix
), \

336 
¨gs
, 
Æüs
)

	)

337 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

338 
	`__MATHDECL_2
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
	`__CONCAT
(fun˘i⁄,suffix))

	)

344 
	#_MdoubÀ_
 

	)

345 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
l
##
	)
r

346 
	#__MATH_DECLARING_DOUBLE
 0

	)

347 
	#__MATH_DECLARING_FLOATN
 0

	)

348 
	#__MATH_DECLARE_LDOUBLE
 1

	)

349 
	~<bôs/m©hˇŒs-hñ≥r-fun˘i⁄s.h
>

350 
	~<bôs/m©hˇŒs.h
>

351 #unde‡
_MdoubÀ_


352 #unde‡
__MATH_PRECNAME


353 #unde‡
__MATH_DECLARING_DOUBLE


354 #unde‡
__MATH_DECLARING_FLOATN


363 #i‡
__HAVE_DISTINCT_FLOAT16
 || (
__HAVE_FLOAT16
 && !
deföed
 
_LIBC
)

364 
	#_MdoubÀ_
 
_Flﬂt16


	)

365 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f16
##
	)
r

366 
	#__MATH_DECLARING_DOUBLE
 0

	)

367 
	#__MATH_DECLARING_FLOATN
 1

	)

368 #i‡
__HAVE_DISTINCT_FLOAT16


369 
	~<bôs/m©hˇŒs-hñ≥r-fun˘i⁄s.h
>

371 #i‡
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

372 
	~<bôs/m©hˇŒs.h
>

374 #unde‡
_MdoubÀ_


375 #unde‡
__MATH_PRECNAME


376 #unde‡
__MATH_DECLARING_DOUBLE


377 #unde‡
__MATH_DECLARING_FLOATN


380 #i‡
__HAVE_DISTINCT_FLOAT32
 || (
__HAVE_FLOAT32
 && !
deföed
 
_LIBC
)

381 
	#_MdoubÀ_
 
_Flﬂt32


	)

382 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f32
##
	)
r

383 
	#__MATH_DECLARING_DOUBLE
 0

	)

384 
	#__MATH_DECLARING_FLOATN
 1

	)

385 #i‡
__HAVE_DISTINCT_FLOAT32


386 
	~<bôs/m©hˇŒs-hñ≥r-fun˘i⁄s.h
>

388 #i‡
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

389 
	~<bôs/m©hˇŒs.h
>

391 #unde‡
_MdoubÀ_


392 #unde‡
__MATH_PRECNAME


393 #unde‡
__MATH_DECLARING_DOUBLE


394 #unde‡
__MATH_DECLARING_FLOATN


397 #i‡
__HAVE_DISTINCT_FLOAT64
 || (
__HAVE_FLOAT64
 && !
deföed
 
_LIBC
)

398 
	#_MdoubÀ_
 
_Flﬂt64


	)

399 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f64
##
	)
r

400 
	#__MATH_DECLARING_DOUBLE
 0

	)

401 
	#__MATH_DECLARING_FLOATN
 1

	)

402 #i‡
__HAVE_DISTINCT_FLOAT64


403 
	~<bôs/m©hˇŒs-hñ≥r-fun˘i⁄s.h
>

405 #i‡
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

406 
	~<bôs/m©hˇŒs.h
>

408 #unde‡
_MdoubÀ_


409 #unde‡
__MATH_PRECNAME


410 #unde‡
__MATH_DECLARING_DOUBLE


411 #unde‡
__MATH_DECLARING_FLOATN


414 #i‡
__HAVE_DISTINCT_FLOAT128
 || (
__HAVE_FLOAT128
 && !
deföed
 
_LIBC
)

415 
	#_MdoubÀ_
 
_Flﬂt128


	)

416 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f128
##
	)
r

417 
	#__MATH_DECLARING_DOUBLE
 0

	)

418 
	#__MATH_DECLARING_FLOATN
 1

	)

419 #i‡
__HAVE_DISTINCT_FLOAT128


420 
	~<bôs/m©hˇŒs-hñ≥r-fun˘i⁄s.h
>

422 #i‡
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

423 
	~<bôs/m©hˇŒs.h
>

425 #unde‡
_MdoubÀ_


426 #unde‡
__MATH_PRECNAME


427 #unde‡
__MATH_DECLARING_DOUBLE


428 #unde‡
__MATH_DECLARING_FLOATN


431 #i‡
__HAVE_DISTINCT_FLOAT32X
 || (
__HAVE_FLOAT32X
 && !
deföed
 
_LIBC
)

432 
	#_MdoubÀ_
 
_Flﬂt32x


	)

433 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f32x
##
	)
r

434 
	#__MATH_DECLARING_DOUBLE
 0

	)

435 
	#__MATH_DECLARING_FLOATN
 1

	)

436 #i‡
__HAVE_DISTINCT_FLOAT32X


437 
	~<bôs/m©hˇŒs-hñ≥r-fun˘i⁄s.h
>

439 #i‡
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

440 
	~<bôs/m©hˇŒs.h
>

442 #unde‡
_MdoubÀ_


443 #unde‡
__MATH_PRECNAME


444 #unde‡
__MATH_DECLARING_DOUBLE


445 #unde‡
__MATH_DECLARING_FLOATN


448 #i‡
__HAVE_DISTINCT_FLOAT64X
 || (
__HAVE_FLOAT64X
 && !
deföed
 
_LIBC
)

449 
	#_MdoubÀ_
 
_Flﬂt64x


	)

450 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f64x
##
	)
r

451 
	#__MATH_DECLARING_DOUBLE
 0

	)

452 
	#__MATH_DECLARING_FLOATN
 1

	)

453 #i‡
__HAVE_DISTINCT_FLOAT64X


454 
	~<bôs/m©hˇŒs-hñ≥r-fun˘i⁄s.h
>

456 #i‡
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

457 
	~<bôs/m©hˇŒs.h
>

459 #unde‡
_MdoubÀ_


460 #unde‡
__MATH_PRECNAME


461 #unde‡
__MATH_DECLARING_DOUBLE


462 #unde‡
__MATH_DECLARING_FLOATN


465 #i‡
__HAVE_DISTINCT_FLOAT128X
 || (
__HAVE_FLOAT128X
 && !
deföed
 
_LIBC
)

466 
	#_MdoubÀ_
 
_Flﬂt128x


	)

467 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f128x
##
	)
r

468 
	#__MATH_DECLARING_DOUBLE
 0

	)

469 
	#__MATH_DECLARING_FLOATN
 1

	)

470 #i‡
__HAVE_DISTINCT_FLOAT128X


471 
	~<bôs/m©hˇŒs-hñ≥r-fun˘i⁄s.h
>

473 #i‡
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

474 
	~<bôs/m©hˇŒs.h
>

476 #unde‡
_MdoubÀ_


477 #unde‡
__MATH_PRECNAME


478 #unde‡
__MATH_DECLARING_DOUBLE


479 #unde‡
__MATH_DECLARING_FLOATN


482 #unde‡
__MATHDECL_1


483 #unde‡
__MATHDECL


484 #unde‡
__MATHCALL


487 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


489 
signgam
;

492 #i‡(
__HAVE_DISTINCT_FLOAT16
 \

493 || 
__HAVE_DISTINCT_FLOAT32
 \

494 || 
__HAVE_DISTINCT_FLOAT64
 \

495 || 
__HAVE_DISTINCT_FLOAT32X
 \

496 || 
__HAVE_DISTINCT_FLOAT64X
 \

497 || 
__HAVE_DISTINCT_FLOAT128X
)

510 #ifde‡
__NO_LONG_DOUBLE_MATH


511 #i‡
__HAVE_DISTINCT_FLOAT128


514 
	#__MATH_TG
(
TG_ARG
, 
FUNC
, 
ARGS
) \

515 ( (
TG_ARG
Ë= (Ë? 
FUNC
 ## 
f
 
ARGS
 : FUNC ARGS)

	)

516 #ñi‡
__HAVE_DISTINCT_FLOAT128


517 #i‡
__HAVE_GENERIC_SELECTION


518 #i‡
__HAVE_FLOATN_NOT_TYPEDEF
 && 
__HAVE_FLOAT32


519 
	#__MATH_TG_F32
(
FUNC
, 
ARGS
Ë
_Flﬂt32
: FUNC ## 
f
 ARGS,

	)

521 
	#__MATH_TG_F32
(
FUNC
, 
ARGS
)

	)

523 #i‡
__HAVE_FLOATN_NOT_TYPEDEF
 && 
__HAVE_FLOAT64X


524 #i‡
__HAVE_FLOAT64X_LONG_DOUBLE


525 
	#__MATH_TG_F64X
(
FUNC
, 
ARGS
Ë
_Flﬂt64x
: FUNC ## 
l
 ARGS,

	)

527 
	#__MATH_TG_F64X
(
FUNC
, 
ARGS
Ë
_Flﬂt64x
: FUNC ## 
f128
 ARGS,

	)

530 
	#__MATH_TG_F64X
(
FUNC
, 
ARGS
)

	)

532 
	#__MATH_TG
(
TG_ARG
, 
FUNC
, 
ARGS
) \

533 
	`_Gíîic
 ((
TG_ARG
), \

534 : 
FUNC
 ## 
f
 
ARGS
, \

535 
	`__MATH_TG_F32
 (
FUNC
, 
ARGS
) \

536 : 
FUNC
 
ARGS
, \

537 : 
FUNC
 ## 
l
 
ARGS
, \

538 
	`__MATH_TG_F64X
 (
FUNC
, 
ARGS
) \

539 
_Flﬂt128
: 
FUNC
 ## 
f128
 
ARGS
)

	)

541 #i‡
__HAVE_FLOATN_NOT_TYPEDEF


544 
	#__MATH_TG
(
TG_ARG
, 
FUNC
, 
ARGS
) \

545 
__buûtö_choo£_ex¥
 \

546 (
	`__buûtö_ty≥s_com∑tibÀ_p
 (
	`__ty≥of
 (
TG_ARG
), ), \

547 
FUNC
 ## 
f
 
ARGS
, \

548 
__buûtö_choo£_ex¥
 \

549 (
	`__buûtö_ty≥s_com∑tibÀ_p
 (
	`__ty≥of
 (
TG_ARG
), ), \

550 
FUNC
 
ARGS
, \

551 
__buûtö_choo£_ex¥
 \

552 (
	`__buûtö_ty≥s_com∑tibÀ_p
 (
	`__ty≥of
 (
TG_ARG
), ), \

553 
FUNC
 ## 
l
 
ARGS
, \

554 
FUNC
 ## 
f128
 
ARGS
)))

	)

557 
	#__MATH_TG
(
TG_ARG
, 
FUNC
, 
ARGS
) \

558 ( (
TG_ARG
) ==  () \

559 ? 
FUNC
 ## 
f
 
ARGS
 \

560 :  (
TG_ARG
) ==  () \

561 ? 
FUNC
 
ARGS
 \

562 : 
FUNC
 ## 
l
 
ARGS
)

	)

566 #ifde‡
__USE_ISOC99


571 
FP_NAN
 =

572 
	#FP_NAN
 0

	)

573 
FP_NAN
,

574 
FP_INFINITE
 =

575 
	#FP_INFINITE
 1

	)

576 
FP_INFINITE
,

577 
FP_ZERO
 =

578 
	#FP_ZERO
 2

	)

579 
FP_ZERO
,

580 
FP_SUBNORMAL
 =

581 
	#FP_SUBNORMAL
 3

	)

582 
FP_SUBNORMAL
,

583 
FP_NORMAL
 =

584 
	#FP_NORMAL
 4

	)

585 
FP_NORMAL


593 #i‡
	`__GNUC_PREREQ
 (4,4Ë&& !
deföed
 
__SUPPORT_SNAN__
 \

594 && (!
deföed
 
__OPTIMIZE_SIZE__
 || deföed 
__˝lu•lus
)

601 
	#Â˛assify
(
x
Ë
	`__buûtö_Â˛assify
 (
FP_NAN
, 
FP_INFINITE
, \

602 
FP_NORMAL
, 
FP_SUBNORMAL
, 
FP_ZERO
, 
x
)

	)

604 
	#Â˛assify
(
x
Ë
	`__MATH_TG
 ((x), 
__Â˛assify
, (x))

	)

608 #i‡
	`__GNUC_PREREQ
 (6,0)

609 
	#signbô
(
x
Ë
	`__buûtö_signbô
 (x)

	)

610 #ñi‡
deföed
 
__˝lu•lus


618 
	#signbô
(
x
Ë
	`__buûtö_signbôl
 (x)

	)

619 #ñi‡
	`__GNUC_PREREQ
 (4,0)

620 
	#signbô
(
x
Ë
	`__MATH_TG
 ((x), 
__buûtö_signbô
, (x))

	)

622 
	#signbô
(
x
Ë
	`__MATH_TG
 ((x), 
__signbô
, (x))

	)

626 #i‡
	`__GNUC_PREREQ
 (4,4Ë&& !
deföed
 
__SUPPORT_SNAN__


627 
	#isföôe
(
x
Ë
	`__buûtö_isföôe
 (x)

	)

629 
	#isföôe
(
x
Ë
	`__MATH_TG
 ((x), 
__föôe
, (x))

	)

633 #i‡
	`__GNUC_PREREQ
 (4,4Ë&& !
deföed
 
__SUPPORT_SNAN__


634 
	#i¢‹mÆ
(
x
Ë
	`__buûtö_i¢‹mÆ
 (x)

	)

636 
	#i¢‹mÆ
(
x
Ë(
	`Â˛assify
 (xË=
FP_NORMAL
)

	)

641 #i‡
	`__GNUC_PREREQ
 (4,4Ë&& !
deföed
 
__SUPPORT_SNAN__


642 
	#i¢™
(
x
Ë
	`__buûtö_i¢™
 (x)

	)

644 
	#i¢™
(
x
Ë
	`__MATH_TG
 ((x), 
__i¢™
, (x))

	)

648 #i‡
__HAVE_DISTINCT_FLOAT128
 && !
	`__GNUC_PREREQ
 (7,0) \

649 && !
deföed
 
__SUPPORT_SNAN__
 && !deföed 
__˝lu•lus


655 
	#isöf
(
x
) \

656 (
	`__buûtö_ty≥s_com∑tibÀ_p
 (
	`__ty≥of
 (
x
), 
_Flﬂt128
) \

657 ? 
	`__isöff128
 (
x
Ë: 
	`__buûtö_isöf_sign
 (x))

	)

658 #ñi‡
	`__GNUC_PREREQ
 (4,4Ë&& !
deföed
 
__SUPPORT_SNAN__


659 
	#isöf
(
x
Ë
	`__buûtö_isöf_sign
 (x)

	)

661 
	#isöf
(
x
Ë
	`__MATH_TG
 ((x), 
__isöf
, (x))

	)

665 
	#MATH_ERRNO
 1

	)

666 
	#MATH_ERREXCEPT
 2

	)

673 #ifde‡
__FAST_MATH__


674 
	#m©h_îrh™dlög
 0

	)

675 #ñi‡
deföed
 
__NO_MATH_ERRNO__


676 
	#m©h_îrh™dlög
 (
MATH_ERREXCEPT
)

	)

678 
	#m©h_îrh™dlög
 (
MATH_ERRNO
 | 
MATH_ERREXCEPT
)

	)

683 #i‡
	`__GLIBC_USE
 (
IEC_60559_BFP_EXT
)

684 
	~<bôs/isˇn⁄iˇl.h
>

687 #i‚de‡
__˝lu•lus


688 
	#issig«lög
(
x
Ë
	`__MATH_TG
 ((x), 
__issig«lög
, (x))

	)

697 
ölöe
 
	`issig«lög
 (
__vÆ
Ë{  
	`__issig«lögf
 (__val); }

698 
ölöe
 
	`issig«lög
 (
__vÆ
Ë{  
	`__issig«lög
 (__val); }

699 
ölöe
 

700 
	`issig«lög
 (
__vÆ
)

702 #ifde‡
__NO_LONG_DOUBLE_MATH


703  
	`__issig«lög
 (
__vÆ
);

705  
	`__issig«lögl
 (
__vÆ
);

708 #i‡
__HAVE_DISTINCT_FLOAT128


709 
ölöe
 
	`issig«lög
 (
_Flﬂt128
 
__vÆ
Ë{  
	`__issig«lögf128
 (__val); }

711 
	}
}

715 
	#issubn‹mÆ
(
x
Ë(
	`Â˛assify
 (xË=
FP_SUBNORMAL
)

	)

718 #i‚de‡
__˝lu•lus


719 #ifde‡
__SUPPORT_SNAN__


720 
	#iszîo
(
x
Ë(
	`Â˛assify
 (xË=
FP_ZERO
)

	)

722 
	#iszîo
(
x
Ë(((
	`__ty≥of
 (x)Ë(x)Ë=0)

	)

726 #ifde‡
__SUPPORT_SNAN__


727 
ölöe
 

728 
iszîo
 (
__vÆ
)

730  
__Â˛assifyf
 (
__vÆ
Ë=
FP_ZERO
;

732 
ölöe
 

733 
iszîo
 (
__vÆ
)

735  
__Â˛assify
 (
__vÆ
Ë=
FP_ZERO
;

737 
ölöe
 

738 
iszîo
 (
__vÆ
)

740 #ifde‡
__NO_LONG_DOUBLE_MATH


741  
__Â˛assify
 (
__vÆ
Ë=
FP_ZERO
;

743  
__Â˛assifyl
 (
__vÆ
Ë=
FP_ZERO
;

746 #i‡
__HAVE_DISTINCT_FLOAT128


747 
ölöe
 

748 
iszîo
 (
_Flﬂt128
 
__vÆ
)

750  
__Â˛assifyf128
 (
__vÆ
Ë=
FP_ZERO
;

754 
ãm∂©e
 <
˛ass
 
__T
> 
ölöe
 
boﬁ


755 
iszîo
 (
__T
 
__vÆ
)

757  
__vÆ
 == 0;

764 #ifde‡
__USE_XOPEN


766 
	#MAXFLOAT
 3.40282347e+38F

	)

771 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


772 
	#M_E
 2.7182818284590452354

	)

773 
	#M_LOG2E
 1.4426950408889634074

	)

774 
	#M_LOG10E
 0.43429448190325182765

	)

775 
	#M_LN2
 0.69314718055994530942

	)

776 
	#M_LN10
 2.30258509299404568402

	)

777 
	#M_PI
 3.14159265358979323846

	)

778 
	#M_PI_2
 1.57079632679489661923

	)

779 
	#M_PI_4
 0.78539816339744830962

	)

780 
	#M_1_PI
 0.31830988618379067154

	)

781 
	#M_2_PI
 0.63661977236758134308

	)

782 
	#M_2_SQRTPI
 1.12837916709551257390

	)

783 
	#M_SQRT2
 1.41421356237309504880

	)

784 
	#M_SQRT1_2
 0.70710678118654752440

	)

790 #ifde‡
__USE_GNU


791 
	#M_El
 2.718281828459045235360287471352662498L

	)

792 
	#M_LOG2El
 1.442695040888963407359924681001892137L

	)

793 
	#M_LOG10El
 0.434294481903251827651128918916605082L

	)

794 
	#M_LN2l
 0.693147180559945309417232121458176568L

	)

795 
	#M_LN10l
 2.302585092994045684017991454684364208L

	)

796 
	#M_PIl
 3.141592653589793238462643383279502884L

	)

797 
	#M_PI_2l
 1.570796326794896619231321691639751442L

	)

798 
	#M_PI_4l
 0.785398163397448309615660845819875721L

	)

799 
	#M_1_PIl
 0.318309886183790671537767526745028724L

	)

800 
	#M_2_PIl
 0.636619772367581343075535053490057448L

	)

801 
	#M_2_SQRTPIl
 1.128379167095512573896158903121545172L

	)

802 
	#M_SQRT2l
 1.414213562373095048801688724209698079L

	)

803 
	#M_SQRT1_2l
 0.707106781186547524400844362104849039L

	)

806 #i‡
__HAVE_FLOAT16
 && 
deföed
 
__USE_GNU


807 
	#M_Ef16
 
	`__f16
 (2.718281828459045235360287471352662498Ë

	)

808 
	#M_LOG2Ef16
 
	`__f16
 (1.442695040888963407359924681001892137Ë

	)

809 
	#M_LOG10Ef16
 
	`__f16
 (0.434294481903251827651128918916605082Ë

	)

810 
	#M_LN2f16
 
	`__f16
 (0.693147180559945309417232121458176568Ë

	)

811 
	#M_LN10f16
 
	`__f16
 (2.302585092994045684017991454684364208Ë

	)

812 
	#M_PIf16
 
	`__f16
 (3.141592653589793238462643383279502884Ë

	)

813 
	#M_PI_2f16
 
	`__f16
 (1.570796326794896619231321691639751442Ë

	)

814 
	#M_PI_4f16
 
	`__f16
 (0.785398163397448309615660845819875721Ë

	)

815 
	#M_1_PIf16
 
	`__f16
 (0.318309886183790671537767526745028724Ë

	)

816 
	#M_2_PIf16
 
	`__f16
 (0.636619772367581343075535053490057448Ë

	)

817 
	#M_2_SQRTPIf16
 
	`__f16
 (1.128379167095512573896158903121545172Ë

	)

818 
	#M_SQRT2f16
 
	`__f16
 (1.414213562373095048801688724209698079Ë

	)

819 
	#M_SQRT1_2f16
 
	`__f16
 (0.707106781186547524400844362104849039Ë

	)

822 #i‡
__HAVE_FLOAT32
 && 
deföed
 
__USE_GNU


823 
	#M_Ef32
 
	`__f32
 (2.718281828459045235360287471352662498Ë

	)

824 
	#M_LOG2Ef32
 
	`__f32
 (1.442695040888963407359924681001892137Ë

	)

825 
	#M_LOG10Ef32
 
	`__f32
 (0.434294481903251827651128918916605082Ë

	)

826 
	#M_LN2f32
 
	`__f32
 (0.693147180559945309417232121458176568Ë

	)

827 
	#M_LN10f32
 
	`__f32
 (2.302585092994045684017991454684364208Ë

	)

828 
	#M_PIf32
 
	`__f32
 (3.141592653589793238462643383279502884Ë

	)

829 
	#M_PI_2f32
 
	`__f32
 (1.570796326794896619231321691639751442Ë

	)

830 
	#M_PI_4f32
 
	`__f32
 (0.785398163397448309615660845819875721Ë

	)

831 
	#M_1_PIf32
 
	`__f32
 (0.318309886183790671537767526745028724Ë

	)

832 
	#M_2_PIf32
 
	`__f32
 (0.636619772367581343075535053490057448Ë

	)

833 
	#M_2_SQRTPIf32
 
	`__f32
 (1.128379167095512573896158903121545172Ë

	)

834 
	#M_SQRT2f32
 
	`__f32
 (1.414213562373095048801688724209698079Ë

	)

835 
	#M_SQRT1_2f32
 
	`__f32
 (0.707106781186547524400844362104849039Ë

	)

838 #i‡
__HAVE_FLOAT64
 && 
deföed
 
__USE_GNU


839 
	#M_Ef64
 
	`__f64
 (2.718281828459045235360287471352662498Ë

	)

840 
	#M_LOG2Ef64
 
	`__f64
 (1.442695040888963407359924681001892137Ë

	)

841 
	#M_LOG10Ef64
 
	`__f64
 (0.434294481903251827651128918916605082Ë

	)

842 
	#M_LN2f64
 
	`__f64
 (0.693147180559945309417232121458176568Ë

	)

843 
	#M_LN10f64
 
	`__f64
 (2.302585092994045684017991454684364208Ë

	)

844 
	#M_PIf64
 
	`__f64
 (3.141592653589793238462643383279502884Ë

	)

845 
	#M_PI_2f64
 
	`__f64
 (1.570796326794896619231321691639751442Ë

	)

846 
	#M_PI_4f64
 
	`__f64
 (0.785398163397448309615660845819875721Ë

	)

847 
	#M_1_PIf64
 
	`__f64
 (0.318309886183790671537767526745028724Ë

	)

848 
	#M_2_PIf64
 
	`__f64
 (0.636619772367581343075535053490057448Ë

	)

849 
	#M_2_SQRTPIf64
 
	`__f64
 (1.128379167095512573896158903121545172Ë

	)

850 
	#M_SQRT2f64
 
	`__f64
 (1.414213562373095048801688724209698079Ë

	)

851 
	#M_SQRT1_2f64
 
	`__f64
 (0.707106781186547524400844362104849039Ë

	)

854 #i‡
__HAVE_FLOAT128
 && 
deföed
 
__USE_GNU


855 
	#M_Ef128
 
	`__f128
 (2.718281828459045235360287471352662498Ë

	)

856 
	#M_LOG2Ef128
 
	`__f128
 (1.442695040888963407359924681001892137Ë

	)

857 
	#M_LOG10Ef128
 
	`__f128
 (0.434294481903251827651128918916605082Ë

	)

858 
	#M_LN2f128
 
	`__f128
 (0.693147180559945309417232121458176568Ë

	)

859 
	#M_LN10f128
 
	`__f128
 (2.302585092994045684017991454684364208Ë

	)

860 
	#M_PIf128
 
	`__f128
 (3.141592653589793238462643383279502884Ë

	)

861 
	#M_PI_2f128
 
	`__f128
 (1.570796326794896619231321691639751442Ë

	)

862 
	#M_PI_4f128
 
	`__f128
 (0.785398163397448309615660845819875721Ë

	)

863 
	#M_1_PIf128
 
	`__f128
 (0.318309886183790671537767526745028724Ë

	)

864 
	#M_2_PIf128
 
	`__f128
 (0.636619772367581343075535053490057448Ë

	)

865 
	#M_2_SQRTPIf128
 
	`__f128
 (1.128379167095512573896158903121545172Ë

	)

866 
	#M_SQRT2f128
 
	`__f128
 (1.414213562373095048801688724209698079Ë

	)

867 
	#M_SQRT1_2f128
 
	`__f128
 (0.707106781186547524400844362104849039Ë

	)

870 #i‡
__HAVE_FLOAT32X
 && 
deföed
 
__USE_GNU


871 
	#M_Ef32x
 
	`__f32x
 (2.718281828459045235360287471352662498Ë

	)

872 
	#M_LOG2Ef32x
 
	`__f32x
 (1.442695040888963407359924681001892137Ë

	)

873 
	#M_LOG10Ef32x
 
	`__f32x
 (0.434294481903251827651128918916605082Ë

	)

874 
	#M_LN2f32x
 
	`__f32x
 (0.693147180559945309417232121458176568Ë

	)

875 
	#M_LN10f32x
 
	`__f32x
 (2.302585092994045684017991454684364208Ë

	)

876 
	#M_PIf32x
 
	`__f32x
 (3.141592653589793238462643383279502884Ë

	)

877 
	#M_PI_2f32x
 
	`__f32x
 (1.570796326794896619231321691639751442Ë

	)

878 
	#M_PI_4f32x
 
	`__f32x
 (0.785398163397448309615660845819875721Ë

	)

879 
	#M_1_PIf32x
 
	`__f32x
 (0.318309886183790671537767526745028724Ë

	)

880 
	#M_2_PIf32x
 
	`__f32x
 (0.636619772367581343075535053490057448Ë

	)

881 
	#M_2_SQRTPIf32x
 
	`__f32x
 (1.128379167095512573896158903121545172Ë

	)

882 
	#M_SQRT2f32x
 
	`__f32x
 (1.414213562373095048801688724209698079Ë

	)

883 
	#M_SQRT1_2f32x
 
	`__f32x
 (0.707106781186547524400844362104849039Ë

	)

886 #i‡
__HAVE_FLOAT64X
 && 
deföed
 
__USE_GNU


887 
	#M_Ef64x
 
	`__f64x
 (2.718281828459045235360287471352662498Ë

	)

888 
	#M_LOG2Ef64x
 
	`__f64x
 (1.442695040888963407359924681001892137Ë

	)

889 
	#M_LOG10Ef64x
 
	`__f64x
 (0.434294481903251827651128918916605082Ë

	)

890 
	#M_LN2f64x
 
	`__f64x
 (0.693147180559945309417232121458176568Ë

	)

891 
	#M_LN10f64x
 
	`__f64x
 (2.302585092994045684017991454684364208Ë

	)

892 
	#M_PIf64x
 
	`__f64x
 (3.141592653589793238462643383279502884Ë

	)

893 
	#M_PI_2f64x
 
	`__f64x
 (1.570796326794896619231321691639751442Ë

	)

894 
	#M_PI_4f64x
 
	`__f64x
 (0.785398163397448309615660845819875721Ë

	)

895 
	#M_1_PIf64x
 
	`__f64x
 (0.318309886183790671537767526745028724Ë

	)

896 
	#M_2_PIf64x
 
	`__f64x
 (0.636619772367581343075535053490057448Ë

	)

897 
	#M_2_SQRTPIf64x
 
	`__f64x
 (1.128379167095512573896158903121545172Ë

	)

898 
	#M_SQRT2f64x
 
	`__f64x
 (1.414213562373095048801688724209698079Ë

	)

899 
	#M_SQRT1_2f64x
 
	`__f64x
 (0.707106781186547524400844362104849039Ë

	)

902 #i‡
__HAVE_FLOAT128X
 && 
deföed
 
__USE_GNU


909 #i‡
deföed
 
__STRICT_ANSI__
 && !deföed 
__NO_MATH_INLINES


910 
	#__NO_MATH_INLINES
 1

	)

913 #ifde‡
__USE_ISOC99


914 #i‡
__GNUC_PREREQ
 (3, 1)

921 
	#isgª©î
(
x
, 
y
Ë
	`__buûtö_isgª©î
(x, y)

	)

922 
	#isgª©îequÆ
(
x
, 
y
Ë
	`__buûtö_isgª©îequÆ
(x, y)

	)

923 
	#i¶ess
(
x
, 
y
Ë
	`__buûtö_i¶ess
(x, y)

	)

924 
	#i¶es£quÆ
(
x
, 
y
Ë
	`__buûtö_i¶es£quÆ
(x, y)

	)

925 
	#i¶essgª©î
(
x
, 
y
Ë
	`__buûtö_i¶essgª©î
(x, y)

	)

926 
	#isun‹dîed
(
x
, 
y
Ë
	`__buûtö_isun‹dîed
(x, y)

	)

928 
	#isgª©î
(
x
, 
y
) \

929 (
	`__exãnsi⁄__
 ({ 
	`__ty≥of__
 (
x
Ë
__x
 = (x); __ty≥of__ (
y
Ë
__y
 = (y); \

930 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x > __y; }))

	)

931 
	#isgª©îequÆ
(
x
, 
y
) \

932 (
	`__exãnsi⁄__
 ({ 
	`__ty≥of__
 (
x
Ë
__x
 = (x); __ty≥of__ (
y
Ë
__y
 = (y); \

933 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x >__y; }))

	)

934 
	#i¶ess
(
x
, 
y
) \

935 (
	`__exãnsi⁄__
 ({ 
	`__ty≥of__
 (
x
Ë
__x
 = (x); __ty≥of__ (
y
Ë
__y
 = (y); \

936 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x < __y; }))

	)

937 
	#i¶es£quÆ
(
x
, 
y
) \

938 (
	`__exãnsi⁄__
 ({ 
	`__ty≥of__
 (
x
Ë
__x
 = (x); __ty≥of__ (
y
Ë
__y
 = (y); \

939 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x <__y; }))

	)

940 
	#i¶essgª©î
(
x
, 
y
) \

941 (
	`__exãnsi⁄__
 ({ 
	`__ty≥of__
 (
x
Ë
__x
 = (x); __ty≥of__ (
y
Ë
__y
 = (y); \

942 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x !__y; }))

	)

944 
	#isun‹dîed
(
x
, 
y
) \

945 (
	`__exãnsi⁄__
 ({ 
	`__ty≥of__
 (
x
Ë
__u
 = (x); __ty≥of__ (
y
Ë
__v
 = (y); \

946 
__u
 !
__v
 && (__u !__u || __v !__v); }))

	)

951 #ifde‡
__USE_EXTERN_INLINES


952 
	~<bôs/m©hölöe.h
>

957 #i‡
deföed
 
__FINITE_MATH_ONLY__
 && __FINITE_MATH_ONLY__ > 0

960 
	#_MdoubÀ_
 

	)

961 
	#__MATH_DECLARING_DOUBLE
 1

	)

962 
	#__MATH_DECLARING_FLOATN
 0

	)

963 
	#__REDIRFROM_X
(
fun˘i⁄
, 
ªíå™t
) \

964 
fun˘i⁄
 ## 
ªíå™t


	)

965 
	#__REDIRTO_X
(
fun˘i⁄
, 
ªíå™t
) \

966 
__
 ## 
fun˘i⁄
 ## 
ªíå™t
 ## 
_föôe


	)

967 
	~<bôs/m©h-föôe.h
>

968 #unde‡
_MdoubÀ_


969 #unde‡
__MATH_DECLARING_DOUBLE


970 #unde‡
__MATH_DECLARING_FLOATN


971 #unde‡
__REDIRFROM_X


972 #unde‡
__REDIRTO_X


976 #ifde‡
__USE_ISOC99


979 
	#_MdoubÀ_
 

	)

980 
	#__MATH_DECLARING_DOUBLE
 0

	)

981 
	#__MATH_DECLARING_FLOATN
 0

	)

982 
	#__REDIRFROM_X
(
fun˘i⁄
, 
ªíå™t
) \

983 
fun˘i⁄
 ## 
f
 ## 
ªíå™t


	)

984 
	#__REDIRTO_X
(
fun˘i⁄
, 
ªíå™t
) \

985 
__
 ## 
fun˘i⁄
 ## 
f
 ## 
ªíå™t
 ## 
_föôe


	)

986 
	~<bôs/m©h-föôe.h
>

987 #unde‡
_MdoubÀ_


988 #unde‡
__MATH_DECLARING_DOUBLE


989 #unde‡
__MATH_DECLARING_FLOATN


990 #unde‡
__REDIRFROM_X


991 #unde‡
__REDIRTO_X


994 #ifde‡
__MATH_DECLARE_LDOUBLE


995 
	#_MdoubÀ_
 

	)

996 
	#__MATH_DECLARING_DOUBLE
 0

	)

997 
	#__MATH_DECLARING_FLOATN
 0

	)

998 
	#__REDIRFROM_X
(
fun˘i⁄
, 
ªíå™t
) \

999 
fun˘i⁄
 ## 
l
 ## 
ªíå™t


	)

1000 #ifde‡
__NO_LONG_DOUBLE_MATH


1001 
	#__REDIRTO_X
(
fun˘i⁄
, 
ªíå™t
) \

1002 
__
 ## 
fun˘i⁄
 ## 
ªíå™t
 ## 
_föôe


	)

1004 
	#__REDIRTO_X
(
fun˘i⁄
, 
ªíå™t
) \

1005 
__
 ## 
fun˘i⁄
 ## 
l
 ## 
ªíå™t
 ## 
_föôe


	)

1007 
	~<bôs/m©h-föôe.h
>

1008 #unde‡
_MdoubÀ_


1009 #unde‡
__MATH_DECLARING_DOUBLE


1010 #unde‡
__MATH_DECLARING_FLOATN


1011 #unde‡
__REDIRFROM_X


1012 #unde‡
__REDIRTO_X


1019 #i‡(
__HAVE_DISTINCT_FLOAT16
 || (
__HAVE_FLOAT16
 && !
deföed
 
_LIBC
)) \

1020 && 
	$__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

1021 
	#_MdoubÀ_
 
_Flﬂt16


	)

1022 
	#__MATH_DECLARING_DOUBLE
 0

	)

1023 
	#__MATH_DECLARING_FLOATN
 1

	)

1024 
	#__REDIRFROM_X
(
fun˘i⁄
, 
ªíå™t
) \

1025 
fun˘i⁄
 ## 
f16
 ## 
ªíå™t


	)

1026 #i‡
__HAVE_DISTINCT_FLOAT16


1027 
	#__REDIRTO_X
(
fun˘i⁄
, 
ªíå™t
) \

1028 
__
 ## 
fun˘i⁄
 ## 
f16
 ## 
ªíå™t
 ## 
_föôe


	)

1032 
	~<bôs/m©h-föôe.h
>

1033 #unde‡
_MdoubÀ_


1034 #unde‡
__MATH_DECLARING_DOUBLE


1035 #unde‡
__MATH_DECLARING_FLOATN


1036 #unde‡
__REDIRFROM_X


1037 #unde‡
__REDIRTO_X


1040 #i‡(
__HAVE_DISTINCT_FLOAT32
 || (
__HAVE_FLOAT32
 && !
deföed
 
_LIBC
)) \

1041 && 
	$__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

1042 
	#_MdoubÀ_
 
_Flﬂt32


	)

1043 
	#__MATH_DECLARING_DOUBLE
 0

	)

1044 
	#__MATH_DECLARING_FLOATN
 1

	)

1045 
	#__REDIRFROM_X
(
fun˘i⁄
, 
ªíå™t
) \

1046 
fun˘i⁄
 ## 
f32
 ## 
ªíå™t


	)

1047 #i‡
__HAVE_DISTINCT_FLOAT32


1048 
	#__REDIRTO_X
(
fun˘i⁄
, 
ªíå™t
) \

1049 
__
 ## 
fun˘i⁄
 ## 
f32
 ## 
ªíå™t
 ## 
_föôe


	)

1051 
	#__REDIRTO_X
(
fun˘i⁄
, 
ªíå™t
) \

1052 
__
 ## 
fun˘i⁄
 ## 
f
 ## 
ªíå™t
 ## 
_föôe


	)

1054 
	~<bôs/m©h-föôe.h
>

1055 #unde‡
_MdoubÀ_


1056 #unde‡
__MATH_DECLARING_DOUBLE


1057 #unde‡
__MATH_DECLARING_FLOATN


1058 #unde‡
__REDIRFROM_X


1059 #unde‡
__REDIRTO_X


1062 #i‡(
__HAVE_DISTINCT_FLOAT64
 || (
__HAVE_FLOAT64
 && !
deföed
 
_LIBC
)) \

1063 && 
	$__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

1064 
	#_MdoubÀ_
 
_Flﬂt64


	)

1065 
	#__MATH_DECLARING_DOUBLE
 0

	)

1066 
	#__MATH_DECLARING_FLOATN
 1

	)

1067 
	#__REDIRFROM_X
(
fun˘i⁄
, 
ªíå™t
) \

1068 
fun˘i⁄
 ## 
f64
 ## 
ªíå™t


	)

1069 #i‡
__HAVE_DISTINCT_FLOAT64


1070 
	#__REDIRTO_X
(
fun˘i⁄
, 
ªíå™t
) \

1071 
__
 ## 
fun˘i⁄
 ## 
f64
 ## 
ªíå™t
 ## 
_föôe


	)

1073 
	#__REDIRTO_X
(
fun˘i⁄
, 
ªíå™t
) \

1074 
__
 ## 
fun˘i⁄
 ## 
ªíå™t
 ## 
_föôe


	)

1076 
	~<bôs/m©h-föôe.h
>

1077 #unde‡
_MdoubÀ_


1078 #unde‡
__MATH_DECLARING_DOUBLE


1079 #unde‡
__MATH_DECLARING_FLOATN


1080 #unde‡
__REDIRFROM_X


1081 #unde‡
__REDIRTO_X


1084 #i‡(
__HAVE_DISTINCT_FLOAT128
 || (
__HAVE_FLOAT128
 && !
deföed
 
_LIBC
)) \

1085 && 
	$__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

1086 
	#_MdoubÀ_
 
_Flﬂt128


	)

1087 
	#__MATH_DECLARING_DOUBLE
 0

	)

1088 
	#__MATH_DECLARING_FLOATN
 1

	)

1089 
	#__REDIRFROM_X
(
fun˘i⁄
, 
ªíå™t
) \

1090 
fun˘i⁄
 ## 
f128
 ## 
ªíå™t


	)

1091 #i‡
__HAVE_DISTINCT_FLOAT128


1092 
	#__REDIRTO_X
(
fun˘i⁄
, 
ªíå™t
) \

1093 
__
 ## 
fun˘i⁄
 ## 
f128
 ## 
ªíå™t
 ## 
_föôe


	)

1095 
	#__REDIRTO_X
(
fun˘i⁄
, 
ªíå™t
) \

1096 
__
 ## 
fun˘i⁄
 ## 
l
 ## 
ªíå™t
 ## 
_föôe


	)

1098 
	~<bôs/m©h-föôe.h
>

1099 #unde‡
_MdoubÀ_


1100 #unde‡
__MATH_DECLARING_DOUBLE


1101 #unde‡
__MATH_DECLARING_FLOATN


1102 #unde‡
__REDIRFROM_X


1103 #unde‡
__REDIRTO_X


1106 #i‡(
__HAVE_DISTINCT_FLOAT32X
 || (
__HAVE_FLOAT32X
 && !
deföed
 
_LIBC
)) \

1107 && 
	$__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

1108 
	#_MdoubÀ_
 
_Flﬂt32x


	)

1109 
	#__MATH_DECLARING_DOUBLE
 0

	)

1110 
	#__MATH_DECLARING_FLOATN
 1

	)

1111 
	#__REDIRFROM_X
(
fun˘i⁄
, 
ªíå™t
) \

1112 
fun˘i⁄
 ## 
f32x
 ## 
ªíå™t


	)

1113 #i‡
__HAVE_DISTINCT_FLOAT32X


1114 
	#__REDIRTO_X
(
fun˘i⁄
, 
ªíå™t
) \

1115 
__
 ## 
fun˘i⁄
 ## 
f32x
 ## 
ªíå™t
 ## 
_föôe


	)

1117 
	#__REDIRTO_X
(
fun˘i⁄
, 
ªíå™t
) \

1118 
__
 ## 
fun˘i⁄
 ## 
ªíå™t
 ## 
_föôe


	)

1120 
	~<bôs/m©h-föôe.h
>

1121 #unde‡
_MdoubÀ_


1122 #unde‡
__MATH_DECLARING_DOUBLE


1123 #unde‡
__MATH_DECLARING_FLOATN


1124 #unde‡
__REDIRFROM_X


1125 #unde‡
__REDIRTO_X


1128 #i‡(
__HAVE_DISTINCT_FLOAT64X
 || (
__HAVE_FLOAT64X
 && !
deföed
 
_LIBC
)) \

1129 && 
	$__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

1130 
	#_MdoubÀ_
 
_Flﬂt64x


	)

1131 
	#__MATH_DECLARING_DOUBLE
 0

	)

1132 
	#__MATH_DECLARING_FLOATN
 1

	)

1133 
	#__REDIRFROM_X
(
fun˘i⁄
, 
ªíå™t
) \

1134 
fun˘i⁄
 ## 
f64x
 ## 
ªíå™t


	)

1135 #i‡
__HAVE_DISTINCT_FLOAT64X


1136 
	#__REDIRTO_X
(
fun˘i⁄
, 
ªíå™t
) \

1137 
__
 ## 
fun˘i⁄
 ## 
f64x
 ## 
ªíå™t
 ## 
_föôe


	)

1138 #ñi‡
__HAVE_FLOAT64X_LONG_DOUBLE


1139 
	#__REDIRTO_X
(
fun˘i⁄
, 
ªíå™t
) \

1140 
__
 ## 
fun˘i⁄
 ## 
l
 ## 
ªíå™t
 ## 
_föôe


	)

1142 
	#__REDIRTO_X
(
fun˘i⁄
, 
ªíå™t
) \

1143 
__
 ## 
fun˘i⁄
 ## 
f128
 ## 
ªíå™t
 ## 
_föôe


	)

1145 
	~<bôs/m©h-föôe.h
>

1146 #unde‡
_MdoubÀ_


1147 #unde‡
__MATH_DECLARING_DOUBLE


1148 #unde‡
__MATH_DECLARING_FLOATN


1149 #unde‡
__REDIRFROM_X


1150 #unde‡
__REDIRTO_X


1153 #i‡(
__HAVE_DISTINCT_FLOAT128X
 || (
__HAVE_FLOAT128X
 && !
deföed
 
_LIBC
)) \

1154 && 
	$__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

1155 
	#_MdoubÀ_
 
_Flﬂt128x


	)

1156 
	#__MATH_DECLARING_DOUBLE
 0

	)

1157 
	#__MATH_DECLARING_FLOATN
 1

	)

1158 
	#__REDIRFROM_X
(
fun˘i⁄
, 
ªíå™t
) \

1159 
fun˘i⁄
 ## 
f128x
 ## 
ªíå™t


	)

1160 #i‡
__HAVE_DISTINCT_FLOAT128X


1161 
	#__REDIRTO_X
(
fun˘i⁄
, 
ªíå™t
) \

1162 
__
 ## 
fun˘i⁄
 ## 
f128x
 ## 
ªíå™t
 ## 
_föôe


	)

1166 
	~<bôs/m©h-föôe.h
>

1167 #unde‡
_MdoubÀ_


1168 #unde‡
__MATH_DECLARING_DOUBLE


1169 #unde‡
__MATH_DECLARING_FLOATN


1170 #unde‡
__REDIRFROM_X


1171 #unde‡
__REDIRTO_X


1176 #i‡
	`__GLIBC_USE
 (
IEC_60559_BFP_EXT
)

1179 #i‡
__FLT_EVAL_METHOD__
 == 2 || __FLT_EVAL_METHOD__ > 64

1180 
	#__MATH_EVAL_FMT2
(
x
, 
y
Ë((xË+ (yË+ 0.0L)

	)

1181 #ñi‡
__FLT_EVAL_METHOD__
 == 1 || __FLT_EVAL_METHOD__ > 32

1182 
	#__MATH_EVAL_FMT2
(
x
, 
y
Ë((xË+ (yË+ 0.0)

	)

1183 #ñi‡
__FLT_EVAL_METHOD__
 == 0 || __FLT_EVAL_METHOD__ == 32

1184 
	#__MATH_EVAL_FMT2
(
x
, 
y
Ë((xË+ (yË+ 0.0f)

	)

1186 
	#__MATH_EVAL_FMT2
(
x
, 
y
Ë((xË+ (y))

	)

1191 #i‡!
deföed
 
__˝lu•lus
 || (__˝lu•lu†< 201103L && !deföed 
__GNUC__
)

1192 
	#i£qsig
(
x
, 
y
) \

1193 
	`__MATH_TG
 (
	`__MATH_EVAL_FMT2
 (
x
, 
y
), 
__i£qsig
, ((x), (y)))

	)

1206 
ãm∂©e
<
ty≥«me
> 
__i£qsig_ty≥
;

1208 
ãm∂©e
<> 
__i£qsig_ty≥
<>

1210 
	`__ˇŒ
 (
__x
, 
__y
Ë
	`throw
 ()

1212  
	`__i£qsigf
 (
__x
, 
__y
);

1216 
ãm∂©e
<> 
__i£qsig_ty≥
<>

1218 
	`__ˇŒ
 (
__x
, 
__y
Ë
	`throw
 ()

1220  
	`__i£qsig
 (
__x
, 
__y
);

1224 
ãm∂©e
<> 
__i£qsig_ty≥
<>

1226 
	`__ˇŒ
 (
__x
, 
__y
Ë
	`throw
 ()

1228 #i‚de‡
__NO_LONG_DOUBLE_MATH


1229  
	`__i£qsigl
 (
__x
, 
__y
);

1231  
	`__i£qsig
 (
__x
, 
__y
);

1236 #i‡
__HAVE_DISTINCT_FLOAT128


1237 
ãm∂©e
<> 
__i£qsig_ty≥
<
_Flﬂt128
>

1239 
	`__ˇŒ
 (
_Flﬂt128
 
__x
, _Flﬂt128 
__y
Ë
	`throw
 ()

1241  
	`__i£qsigf128
 (
__x
, 
__y
);

1246 
ãm∂©e
<
ty≥«me
 
_T1
,Åy≥«mê
_T2
>

1247 
ölöe
 

1248 
	`i£qsig
 (
_T1
 
__x
, 
_T2
 
__y
Ë
	`throw
 ()

1250 #i‡
__˝lu•lus
 >= 201103L

1251 
	`de˛ty≥
 (
	t__MATH_EVAL_FMT2
 (
	t__x
, 
	t__y
)Ë
	t_T3
;

1253 
	`__ty≥of
 (
	t__MATH_EVAL_FMT2
 (
	t__x
, 
	t__y
)Ë
	t_T3
;

1255  
__i£qsig_ty≥
<
_T3
>::
	`__ˇŒ
 (
__x
, 
__y
);

1258 
	}
}

1263 
__END_DECLS


	@/usr/include/rpc/netdb.h

36 #i‚de‡
_RPC_NETDB_H


37 
	#_RPC_NETDB_H
 1

	)

39 
	~<„©uªs.h
>

41 
	#__√ed_size_t


	)

42 
	~<°ddef.h
>

44 
__BEGIN_DECLS


46 
	sΩ˚¡


48 *
	mr_«me
;

49 **
	mr_Æü£s
;

50 
	mr_numbî
;

53 
	$£åp˚¡
 (
__°ay›í
Ë
__THROW
;

54 
	$ídΩ˚¡
 (Ë
__THROW
;

55 
Ω˚¡
 *
	$gëΩcby«me
 (c⁄° *
__«me
Ë
__THROW
;

56 
Ω˚¡
 *
	$gëΩcbynumbî
 (
__numbî
Ë
__THROW
;

57 
Ω˚¡
 *
	$gëΩ˚¡
 (Ë
__THROW
;

59 #ifde‡
__USE_MISC


60 
	$gëΩcby«me_r
 (c⁄° *
__«me
, 
Ω˚¡
 *
__ªsu…_buf
,

61 *
__buf„r
, 
size_t
 
__buÊí
,

62 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

64 
	$gëΩcbynumbî_r
 (
__numbî
, 
Ω˚¡
 *
__ªsu…_buf
,

65 *
__buf„r
, 
size_t
 
__buÊí
,

66 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

68 
	$gëΩ˚¡_r
 (
Ω˚¡
 *
__ªsu…_buf
, *
__buf„r
,

69 
size_t
 
__buÊí
, 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

72 
__END_DECLS


	@/usr/include/sched.h

19 #i‚def 
_SCHED_H


20 
	#_SCHED_H
 1

	)

22 
	~<„©uªs.h
>

25 
	~<bôs/ty≥s.h
>

27 
	#__√ed_size_t


	)

28 
	#__√ed_NULL


	)

29 
	~<°ddef.h
>

31 
	~<bôs/ty≥s/time_t.h
>

32 
	~<bôs/ty≥s/°ru˘_time•ec.h
>

33 #i‚de‡
__USE_XOPEN2K


34 
	~<time.h
>

37 #i‚de‡
__pid_t_deföed


38 
__pid_t
 
	tpid_t
;

39 
	#__pid_t_deföed


	)

43 
	~<bôs/sched.h
>

44 
	~<bôs/˝u-£t.h
>

47 
	#sched_¥i‹ôy
 
sched_¥i‹ôy


	)

48 
	#__sched_¥i‹ôy
 
sched_¥i‹ôy


	)

51 
__BEGIN_DECLS


54 
	$sched_£ç¨am
 (
__pid_t
 
__pid
, c⁄° 
sched_∑øm
 *
__∑øm
)

55 
__THROW
;

58 
	$sched_gë∑øm
 (
__pid_t
 
__pid
, 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

61 
	$sched_£tscheduÀr
 (
__pid_t
 
__pid
, 
__pﬁicy
,

62 c⁄° 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

65 
	$sched_gëscheduÀr
 (
__pid_t
 
__pid
Ë
__THROW
;

68 
	$sched_yõld
 (Ë
__THROW
;

71 
	$sched_gë_¥i‹ôy_max
 (
__Æg‹ôhm
Ë
__THROW
;

74 
	$sched_gë_¥i‹ôy_mö
 (
__Æg‹ôhm
Ë
__THROW
;

77 
	$sched_º_gë_öãrvÆ
 (
__pid_t
 
__pid
, 
time•ec
 *
__t
Ë
__THROW
;

80 #ifde‡
__USE_GNU


82 
	#CPU_SETSIZE
 
__CPU_SETSIZE


	)

83 
	#CPU_SET
(
˝u
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

84 
	#CPU_CLR
(
˝u
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

85 
	#CPU_ISSET
(
˝u
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (˝u,  (
˝u_£t_t
), \

86 
˝u£ç
)

	)

87 
	#CPU_ZERO
(
˝u£ç
Ë
	`__CPU_ZERO_S
 ( (
˝u_£t_t
), cpu£ç)

	)

88 
	#CPU_COUNT
(
˝u£ç
Ë
	`__CPU_COUNT_S
 ( (
˝u_£t_t
), cpu£ç)

	)

90 
	#CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u, sësize, cpu£ç)

	)

91 
	#CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u, sësize, cpu£ç)

	)

92 
	#CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (cpu, setsize, \

93 
˝u£ç
)

	)

94 
	#CPU_ZERO_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_ZERO_S
 (£tsize, cpu£ç)

	)

95 
	#CPU_COUNT_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_COUNT_S
 (£tsize, cpu£ç)

	)

97 
	#CPU_EQUAL
(
˝u£ç1
, 
˝u£ç2
) \

98 
	`__CPU_EQUAL_S
 ( (
˝u_£t_t
), 
˝u£ç1
, 
˝u£ç2
)

	)

99 
	#CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

100 
	`__CPU_EQUAL_S
 (
£tsize
, 
˝u£ç1
, 
˝u£ç2
)

	)

102 
	#CPU_AND
(
de°£t
, 
§c£t1
, 
§c£t2
) \

103 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

104 
	#CPU_OR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

105 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

106 
	#CPU_XOR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

107 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

108 
	#CPU_AND_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

109 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

110 
	#CPU_OR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

111 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

112 
	#CPU_XOR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

113 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

115 
	#CPU_ALLOC_SIZE
(
cou¡
Ë
	`__CPU_ALLOC_SIZE
 (cou¡)

	)

116 
	#CPU_ALLOC
(
cou¡
Ë
	`__CPU_ALLOC
 (cou¡)

	)

117 
	#CPU_FREE
(
˝u£t
Ë
	`__CPU_FREE
 (˝u£t)

	)

121 
	$sched_£èfföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

122 c⁄° 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

125 
	$sched_gëafföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

126 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

129 
__END_DECLS


	@/usr/include/stdc-predef.h

18 #i‚def 
_STDC_PREDEF_H


19 
	#_STDC_PREDEF_H
 1

	)

36 #ifde‡
__GCC_IEC_559


37 #i‡
__GCC_IEC_559
 > 0

38 
	#__STDC_IEC_559__
 1

	)

41 
	#__STDC_IEC_559__
 1

	)

44 #ifde‡
__GCC_IEC_559_COMPLEX


45 #i‡
__GCC_IEC_559_COMPLEX
 > 0

46 
	#__STDC_IEC_559_COMPLEX__
 1

	)

49 
	#__STDC_IEC_559_COMPLEX__
 1

	)

58 
	#__STDC_ISO_10646__
 201706L

	)

61 
	#__STDC_NO_THREADS__
 1

	)

	@
1
.
1
/usr/include
307
10115
aros/aros_compat.c
aros/aros_compat.h
aros/iscsi-ls.c
config.h
examples/iscsi-dd.c
examples/iscsiclient.c
examples/ld_iscsi.c
include/iscsi-private.h
include/iscsi.h
include/iser-private.h
include/md5.h
include/scsi-lowlevel.h
include/slist.h
lib/connect.c
lib/crc32c.c
lib/discovery.c
lib/init.c
lib/iscsi-command.c
lib/iser.c
lib/logging.c
lib/login.c
lib/md5.c
lib/nop.c
lib/pdu.c
lib/scsi-lowlevel.c
lib/socket.c
lib/sync.c
lib/task_mgmt.c
test-tool/iscsi-multipath.c
test-tool/iscsi-multipath.h
test-tool/iscsi-support.c
test-tool/iscsi-support.h
test-tool/iscsi-test-cu.c
test-tool/iscsi-test-cu.h
test-tool/test_async_abort_simple.c
test-tool/test_async_lu_reset_simple.c
test-tool/test_async_read.c
test-tool/test_async_write.c
test-tool/test_compareandwrite_dpofua.c
test-tool/test_compareandwrite_invalid_dataout_size.c
test-tool/test_compareandwrite_miscompare.c
test-tool/test_compareandwrite_simple.c
test-tool/test_compareandwrite_unwritten.c
test-tool/test_extendedcopy_descr_limits.c
test-tool/test_extendedcopy_descr_type.c
test-tool/test_extendedcopy_param.c
test-tool/test_extendedcopy_simple.c
test-tool/test_extendedcopy_validate_seg_descr.c
test-tool/test_extendedcopy_validate_tgt_descr.c
test-tool/test_get_lba_status_beyond_eol.c
test-tool/test_get_lba_status_simple.c
test-tool/test_get_lba_status_unmap_single.c
test-tool/test_inquiry_alloc_length.c
test-tool/test_inquiry_block_limits.c
test-tool/test_inquiry_evpd.c
test-tool/test_inquiry_mandatory_vpd_sbc.c
test-tool/test_inquiry_standard.c
test-tool/test_inquiry_supported_vpd.c
test-tool/test_inquiry_version_descriptors.c
test-tool/test_iscsi_cmdsn_toohigh.c
test-tool/test_iscsi_cmdsn_toolow.c
test-tool/test_iscsi_datasn_invalid.c
test-tool/test_mandatory_sbc.c
test-tool/test_modesense6_all_pages.c
test-tool/test_modesense6_control.c
test-tool/test_modesense6_control_d_sense.c
test-tool/test_modesense6_control_swp.c
test-tool/test_modesense6_residuals.c
test-tool/test_multipathio_async_caw.c
test-tool/test_multipathio_compareandwrite.c
test-tool/test_multipathio_reset.c
test-tool/test_multipathio_simple.c
test-tool/test_nomedia_sbc.c
test-tool/test_orwrite_0blocks.c
test-tool/test_orwrite_beyond_eol.c
test-tool/test_orwrite_dpofua.c
test-tool/test_orwrite_simple.c
test-tool/test_orwrite_verify.c
test-tool/test_orwrite_wrprotect.c
test-tool/test_prefetch10_0blocks.c
test-tool/test_prefetch10_beyond_eol.c
test-tool/test_prefetch10_flags.c
test-tool/test_prefetch10_simple.c
test-tool/test_prefetch16_0blocks.c
test-tool/test_prefetch16_beyond_eol.c
test-tool/test_prefetch16_flags.c
test-tool/test_prefetch16_simple.c
test-tool/test_preventallow_2_itnexuses.c
test-tool/test_preventallow_cold_reset.c
test-tool/test_preventallow_eject.c
test-tool/test_preventallow_itnexus_loss.c
test-tool/test_preventallow_logout.c
test-tool/test_preventallow_lun_reset.c
test-tool/test_preventallow_simple.c
test-tool/test_preventallow_warm_reset.c
test-tool/test_prin_read_keys_simple.c
test-tool/test_prin_read_keys_truncate.c
test-tool/test_prin_report_caps.c
test-tool/test_prin_serviceaction_range.c
test-tool/test_prout_clear_simple.c
test-tool/test_prout_preempt.c
test-tool/test_prout_register_simple.c
test-tool/test_prout_reserve_access.c
test-tool/test_prout_reserve_ownership.c
test-tool/test_prout_reserve_simple.c
test-tool/test_read10_0blocks.c
test-tool/test_read10_beyond_eol.c
test-tool/test_read10_dpofua.c
test-tool/test_read10_invalid.c
test-tool/test_read10_rdprotect.c
test-tool/test_read10_residuals.c
test-tool/test_read10_simple.c
test-tool/test_read12_0blocks.c
test-tool/test_read12_beyond_eol.c
test-tool/test_read12_dpofua.c
test-tool/test_read12_rdprotect.c
test-tool/test_read12_residuals.c
test-tool/test_read12_simple.c
test-tool/test_read16_0blocks.c
test-tool/test_read16_beyond_eol.c
test-tool/test_read16_dpofua.c
test-tool/test_read16_rdprotect.c
test-tool/test_read16_residuals.c
test-tool/test_read16_simple.c
test-tool/test_read6_beyond_eol.c
test-tool/test_read6_simple.c
test-tool/test_readcapacity10_simple.c
test-tool/test_readcapacity16_alloclen.c
test-tool/test_readcapacity16_protection.c
test-tool/test_readcapacity16_simple.c
test-tool/test_readcapacity16_support.c
test-tool/test_readdefectdata10_simple.c
test-tool/test_readdefectdata12_simple.c
test-tool/test_readonly_sbc.c
test-tool/test_receive_copy_results_copy_status.c
test-tool/test_receive_copy_results_op_params.c
test-tool/test_report_supported_opcodes_one_command.c
test-tool/test_report_supported_opcodes_rctd.c
test-tool/test_report_supported_opcodes_servactv.c
test-tool/test_report_supported_opcodes_simple.c
test-tool/test_reserve6_2initiators.c
test-tool/test_reserve6_itnexus_loss.c
test-tool/test_reserve6_logout.c
test-tool/test_reserve6_lun_reset.c
test-tool/test_reserve6_simple.c
test-tool/test_reserve6_target_cold_reset.c
test-tool/test_reserve6_target_warm_reset.c
test-tool/test_sanitize_block_erase.c
test-tool/test_sanitize_block_erase_reserved.c
test-tool/test_sanitize_crypto_erase.c
test-tool/test_sanitize_crypto_erase_reserved.c
test-tool/test_sanitize_exit_failure_mode.c
test-tool/test_sanitize_invalid_serviceaction.c
test-tool/test_sanitize_overwrite.c
test-tool/test_sanitize_overwrite_reserved.c
test-tool/test_sanitize_readonly.c
test-tool/test_sanitize_reservations.c
test-tool/test_sanitize_reset.c
test-tool/test_startstopunit_noloej.c
test-tool/test_startstopunit_pwrcnd.c
test-tool/test_startstopunit_simple.c
test-tool/test_testunitready_simple.c
test-tool/test_unmap_0blocks.c
test-tool/test_unmap_simple.c
test-tool/test_unmap_vpd.c
test-tool/test_verify10_0blocks.c
test-tool/test_verify10_beyond_eol.c
test-tool/test_verify10_dpo.c
test-tool/test_verify10_flags.c
test-tool/test_verify10_mismatch.c
test-tool/test_verify10_mismatch_no_cmp.c
test-tool/test_verify10_simple.c
test-tool/test_verify10_vrprotect.c
test-tool/test_verify12_0blocks.c
test-tool/test_verify12_beyond_eol.c
test-tool/test_verify12_dpo.c
test-tool/test_verify12_flags.c
test-tool/test_verify12_mismatch.c
test-tool/test_verify12_mismatch_no_cmp.c
test-tool/test_verify12_simple.c
test-tool/test_verify12_vrprotect.c
test-tool/test_verify16_0blocks.c
test-tool/test_verify16_beyond_eol.c
test-tool/test_verify16_dpo.c
test-tool/test_verify16_flags.c
test-tool/test_verify16_mismatch.c
test-tool/test_verify16_mismatch_no_cmp.c
test-tool/test_verify16_simple.c
test-tool/test_verify16_vrprotect.c
test-tool/test_write10_0blocks.c
test-tool/test_write10_beyond_eol.c
test-tool/test_write10_dpofua.c
test-tool/test_write10_flags.c
test-tool/test_write10_residuals.c
test-tool/test_write10_simple.c
test-tool/test_write10_wrprotect.c
test-tool/test_write12_0blocks.c
test-tool/test_write12_beyond_eol.c
test-tool/test_write12_dpofua.c
test-tool/test_write12_flags.c
test-tool/test_write12_residuals.c
test-tool/test_write12_simple.c
test-tool/test_write12_wrprotect.c
test-tool/test_write16_0blocks.c
test-tool/test_write16_beyond_eol.c
test-tool/test_write16_dpofua.c
test-tool/test_write16_flags.c
test-tool/test_write16_residuals.c
test-tool/test_write16_simple.c
test-tool/test_write16_wrprotect.c
test-tool/test_writeatomic16_0blocks.c
test-tool/test_writeatomic16_beyond_eol.c
test-tool/test_writeatomic16_dpofua.c
test-tool/test_writeatomic16_simple.c
test-tool/test_writeatomic16_vpd.c
test-tool/test_writeatomic16_wrprotect.c
test-tool/test_writesame10_0blocks.c
test-tool/test_writesame10_beyond_eol.c
test-tool/test_writesame10_check.c
test-tool/test_writesame10_invalid_dataout_size.c
test-tool/test_writesame10_simple.c
test-tool/test_writesame10_unmap.c
test-tool/test_writesame10_unmap_unaligned.c
test-tool/test_writesame10_unmap_until_end.c
test-tool/test_writesame10_unmap_vpd.c
test-tool/test_writesame10_wrprotect.c
test-tool/test_writesame16_0blocks.c
test-tool/test_writesame16_beyond_eol.c
test-tool/test_writesame16_check.c
test-tool/test_writesame16_invalid_dataout_size.c
test-tool/test_writesame16_simple.c
test-tool/test_writesame16_unmap.c
test-tool/test_writesame16_unmap_unaligned.c
test-tool/test_writesame16_unmap_until_end.c
test-tool/test_writesame16_unmap_vpd.c
test-tool/test_writesame16_wrprotect.c
test-tool/test_writeverify10_0blocks.c
test-tool/test_writeverify10_beyond_eol.c
test-tool/test_writeverify10_dpo.c
test-tool/test_writeverify10_flags.c
test-tool/test_writeverify10_residuals.c
test-tool/test_writeverify10_simple.c
test-tool/test_writeverify10_wrprotect.c
test-tool/test_writeverify12_0blocks.c
test-tool/test_writeverify12_beyond_eol.c
test-tool/test_writeverify12_dpo.c
test-tool/test_writeverify12_flags.c
test-tool/test_writeverify12_residuals.c
test-tool/test_writeverify12_simple.c
test-tool/test_writeverify12_wrprotect.c
test-tool/test_writeverify16_0blocks.c
test-tool/test_writeverify16_beyond_eol.c
test-tool/test_writeverify16_dpo.c
test-tool/test_writeverify16_flags.c
test-tool/test_writeverify16_residuals.c
test-tool/test_writeverify16_simple.c
test-tool/test_writeverify16_wrprotect.c
tests/prog_header_digest.c
tests/prog_noop_reply.c
tests/prog_read_all_pdus.c
tests/prog_readwrite_iov.c
tests/prog_reconnect.c
tests/prog_reconnect_timeout.c
tests/prog_timeout.c
utils/iscsi-inq.c
utils/iscsi-ls.c
utils/iscsi-perf.c
utils/iscsi-readcapacity16.c
utils/iscsi-swp.c
win32/win32_compat.c
win32/win32_compat.h
/usr/include/CUnit/Automated.h
/usr/include/CUnit/Basic.h
/usr/include/CUnit/CUnit.h
/usr/include/arpa/inet.h
/usr/include/assert.h
/usr/include/ctype.h
/usr/include/dlfcn.h
/usr/include/errno.h
/usr/include/fcntl.h
/usr/include/fnmatch.h
/usr/include/getopt.h
/usr/include/inttypes.h
/usr/include/limits.h
/usr/include/malloc.h
/usr/include/netdb.h
/usr/include/netinet/in.h
/usr/include/netinet/tcp.h
/usr/include/poll.h
/usr/include/pthread.h
/usr/include/scsi/sg.h
/usr/include/semaphore.h
/usr/include/signal.h
/usr/include/stdint.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/strings.h
/usr/include/time.h
/usr/include/unistd.h
/usr/include/alloca.h
/usr/include/endian.h
/usr/include/features.h
/usr/include/math.h
/usr/include/rpc/netdb.h
/usr/include/sched.h
/usr/include/stdc-predef.h
